{"version": "dacity-32", "payload": {"course": {"instructors": [{"bio": "David Evans is a Professor of Computer Science at the University of Virginia where he teaches computer science and leads <a href=\"http://www.jeffersonswheel.org\" target=\"_blank\"> research in computer\n\t\t\t\tsecurity</a>. He is the author of an <a\n\t\t\t\thref=\"http://www.computingbook.org\" target=\"_blank\"> introductory computer\n\t\t\t\tscience textbook</a> and has won Virginia's highest award for\n\t\t\tuniversity faculty. He has PhD, SM, and SB degrees from MIT.", "name": "David Evans", "parent": "None", "headshot_url": "/image/headshot/Instructor/811007", "key": "agpzfnVkYWNpdHl1chILEgpJbnN0cnVjdG9yGP-_MQw", "path": "Instructor/811007", "type": "Instructor", "id": 811007}], "name": "Applied Cryptography", "parent": "None", "icon_url": "/icon/Course/cs387", "faq": "<p>\n<b>Is there a fee to take the course?</b><br/>\nNope, no fees. All of our classes are offered free of charge.\n</p>\n\n<p>\n<b>Can you enroll in more than one class? </b><br/>\nYes! Keep in mind CS101 is intended for students with no previous programming background, CS212, 253 and 262 are courses are oriented towards students with some programming experience (the equivalent of CS101), while CS373 and CS387 assumes students have prior programming experience.</p>\n\n<p>\n<b>When do classes start?</b><br/>\n\nApril 16, 2012.\n</p>\n\n<p>\n<b>When do I have to be online to watch the lectures?</b><br/>\nThe lectures are posted each week for you to view at your convenience.\n</p>\n\n<p>\n<b>How is the class formatted?</b><br/>\nBoth classes are broken into 6 week-long units and seventh week that wraps up the course and has a final exam. Each unit contains multiple lecture segments with interactive quizzes built in.  There will be one homework assignment which will include programming problems each week. There will be approximately 50 minutes of lecture videos.\n</p>\n\n<p>\n<b>Will there be closed captioning?</b><br/>\n\nYes, the videos will have captions in English.  We're also working to support other languages in future.\n</p>\n\n<p>\n<b>What will I get for completing the classes?</b><br/>\nStudents who complete a course will also receive a certificate signed by the instructors. \n</p>", "syllabus": "<p><b>Description</b>: Cryptography is about \u201csecret writing\u201d.  In this class, we \n\t\twill introduce the mathematical foundations of cryptography and build programs to \n\t\tperform encryption.  We will see how to use cryptography to solve important problem \n\t\tsuch as how to authenticate users, secure websites, and do computation without \n\t\texposing up your data.  We will also look at the things that can go wrong when \n\t\tcryptography is misused or implemented badly.</p>\n\t\t\n\t\t<p class=\"syllabus-week\">WEEK 1:</p>\n\t\t<p class=\"syllabus-desc\">\n\t\t<b>Symmetric Encryption</b><br>\n\t\t   Sending messages when two people share a secret\n\t\t</p>\n\t\t<br class=\"clear\"/>\n\t\t<p class=\"syllabus-week\">WEEK 2:</p>\n\t\t<p class=\"syllabus-desc\">\n\t\t<b>Authentication</b><br>\n\t\t   Using symmetric encryption to manage passwords securely\n\t\t</p>\n\t\t<br class=\"clear\"/>\n\t\t<p class=\"syllabus-week\">WEEK 3:</p>\n\t\t<p class=\"syllabus-desc\">\n\t\t<b>Asymmetric Encryption</b><br>\n\t\t   Public-key cryptosystems\n\t\t</p>\n\t\t<br class=\"clear\"/>\n\t\t<p class=\"syllabus-week\">WEEK 4:</p>\n\t\t<p class=\"syllabus-desc\">\n\t\t<b>Public-key Protocols</b><br>\n\t\t   Secure commerce, certificates\n\t\t</p>\n\t\t<br class=\"clear\"/>\n\t\t<p class=\"syllabus-week\">WEEK 5:</p>\n\t\t<p class=\"syllabus-desc\">\n\t\t<b>Digital Cash</b><br>\n\t\t   How to make money from numbers alone\n\t\t</p>\n\t\t<br class=\"clear\"/>\n\t\t<p class=\"syllabus-week\">WEEK 6:</p>\n\t\t<p class=\"syllabus-desc\">\n\t\t<b>Secure Computation</b><br>\n\t\t   Computing without exposing data\n\t\t</p>\n\t\t<br class=\"clear\"/>\n\t\t<p class=\"syllabus-week\">WEEK 7:</p>\n\t\t<p class=\"syllabus-desc\">\n\t\t<b>Wrap-up</b><br>\n\t\t   Problems cryptography can and cannot solve\n\t\t</p>", "teaser": {"dotsub_id": null, "name": "teaser", "parent": "None", "transcript": null, "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1cg0LEgVNZWRpYRjgqzAM", "youtube_id": "HlNDXiVnhqI", "youtube_state": null, "path": "Media/792032", "type": "Media", "id": 792032}, "prereqs": "<p>\n    This course assumes previous programming experience, comparable to what is covered by the Udacity CS101 course, as well as some understanding of probability and theory of computation and algorithm analysis.  \n\t</p>", "image_url": "/image/Course/cs387", "key": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "is_public": true, "course_id": "cs387", "path": "Course/cs387", "type": "Course", "id": "cs387", "description": "Cryptography is present in everyday life, from paying with a credit card to using the telephone. Learn all about making and breaking puzzles in computing."}, "course_rev": {"unitLayout": [{"unit_key": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQw"}], "name": "April 2012", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "state": 1, "key": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgw", "units": [{"name": "Unit 1", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjxLgw"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiRpAEM"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjBPgw"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjJ1gUM"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjaNgw"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjOZQw"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiRTgw"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBix3gUM"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjyLgw"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiXywEM"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjDPgw"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBikHww"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBj1qwEM"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjhXQw"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjiXQw"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjdswEM"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiZdQw"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiCfQw"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjxhAEM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjRjAEM"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBihnAEM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjWjAEM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiJpAEM"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjxqwEM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjyhAEM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjZswEM"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiinAEM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjfswEM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjCuwEM"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiLpAEM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjAlAEM"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiadQw"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjrhAEM"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiedQw"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiknAEM"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiybQw"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBj8VQw"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjSjAEM"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjUjAEM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjgswEM"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBj6VQw"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjM3wIM"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBinnAEM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjIuwEM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBirwwEM"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjn0QQM"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjVjAEM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBisnAEM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiRywEM"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiSywEM"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBj9VQw"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjuhAEM"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiNpAEM"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBj-VQw"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjbswEM"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiTywEM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjiswEM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiuwwEM"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiVywEM"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBi3bQw"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiPpAEM"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjcswEM"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBj7VQw"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiQpAEM"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiRvwUM"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "path": "Course/cs387/CourseRev/apr2012/Unit/4001", "open": false, "id": 4001, "nuggets": [{"nuggetType": "lecture", "name": "Correctness And Security", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "b550d78a-8730-4f1f-a019-8ad78182e1e5", "name": "cs387_unit1_05_q_Correctness-and-Security", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGJRODA", "youtube_id": "gudF3rU0BVk", "youtube_state": "done", "path": "Course/cs387/Media/10004", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nSo now that we have the key, we have three main things:\n\n2\n00:00:03,000 --> 00:00:07,000\nwe have a message in the spaces of all messages,\n\n3\n00:00:07,000 --> 00:00:10,000\nwe have a ciphertext in the spaces of all ciphertexts,\n\n4\n00:00:10,000 --> 00:00:15,000\nand we have a key in the space of all possible keys.\n\n5\n00:00:15,000 --> 00:00:22,000\nAnd we want our encryption function--we'll take a message and a key--\n\n6\n00:00:22,000 --> 00:00:25,000\nand map that to a ciphertext, and our decryption function\n\n7\n00:00:25,000 --> 00:00:31,000\nwill take a ciphertext and a key and map that to a message.\n\n8\n00:00:31,000 --> 00:00:36,000\nAnd to be correct, we need to obtain the same message after decryption,\n\n9\n00:00:36,000 --> 00:00:42,000\nwe need to know--for all messages and keys--we have the property--\n\n10\n00:00:42,000 --> 00:00:47,000\nthe decrypting--using that key, and I'm going to use the notation\n\n11\n00:00:47,000 --> 00:00:49,000\nwhere I put the key as a subscript to the decryption function,\n\n12\n00:00:49,000 --> 00:00:53,000\ninstead of as an input, but that means the same thing as saying\n\n13\n00:00:53,000 --> 00:00:55,000\nthere are two inputs to decryption, one is the key,\n\n14\n00:00:55,000 --> 00:01:00,000\none is to input ciphertext, and the input ciphertext is the result of encrypting\n\n15\n00:01:00,000 --> 00:01:04,000\nusing that same key--that message--and we want to know for correctness\n\n16\n00:01:04,000 --> 00:01:11,000\nthat that value must always be the message that was input to the encryption function.\n\n17\n00:01:11,000 --> 00:01:13,000\nCorrectness, of course, is not enough.\n\n18\n00:01:13,000 --> 00:01:15,000\nWe also want security,\n\n19\n00:01:15,000 --> 00:01:17,000\nand our security property, in an ideal sense,\n\n20\n00:01:17,000 --> 00:01:21,000\nwould be that the ciphertext reveals nothing at all about the key or the message.\n\n21\n00:01:21,000 --> 00:01:24,000\nWe're going to formalize this a little later, this unit. \n\n22\n00:01:24,000 --> 00:01:27,000\nFor now, let's think about that property informally,  \n\n23\n00:01:27,000 --> 00:01:29,000\nand what I'm going to ask you is a quiz,\n\n24\n00:01:29,000 --> 00:01:33,000\nto see whether given functions satisfy our correctness property.\n\n25\n00:01:33,000 --> 00:01:37,000\nSo now it's time for a quiz to see that you understand the correctness property\n\n26\n00:01:37,000 --> 00:01:39,000\nfor a symmetric cipher.\n\n27\n00:01:39,000 --> 00:01:44,000\nWhich of the functions below satisfy the correctness property\n\n28\n00:01:44,000 --> 00:01:46,000\nfor a symmetric cipher?\n\n29\n00:01:46,000 --> 00:01:49,000\nAnd we'll assume both the message space--the set of all possible messages--\n\n30\n00:01:49,000 --> 00:01:53,000\nand the key space--the set of all possible keys--are the natural numbers,\n\n31\n00:01:53,000 --> 00:01:54,000\nso the whole numbers starting from 1.\n\n32\n00:01:54,000 --> 00:01:57,000\nSo, each choice is a pair of functions--the encryption function,\n\n33\n00:01:57,000 --> 00:01:59,000\nand the decryption function.\n\n34\n00:01:59,000 --> 00:02:03,000\nFor the first choice, the encryption function adds the message and the key.\n\n35\n00:02:03,000 --> 00:02:08,000\nFor this decryption function, we subtract from the ciphertext, the key.\n\n36\n00:02:08,000 --> 00:02:12,000\nFor the second choice, the encryption function is the identity.\n\n37\n00:02:12,000 --> 00:02:15,000\nThe decryption function is the identity on the ciphertext.\n\n38\n00:02:15,000 --> 00:02:18,000\nFor the third choice, I am using the modulo operator,  \n\n39\n00:02:18,000 --> 00:02:22,000\nx modulo y is the remainder you get when you divide x by y,\n\n40\n00:02:22,000 --> 00:02:25,000\nand modulo is a very useful operation in cryptography.\n\n41\n00:02:25,000 --> 00:02:28,000\nWe'll see that quite a bit later on this unit, as well as in later units.\n\n", "id": 10004}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBikHww", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/4004", "type": "Nugget", "id": 4004}, {"nuggetType": "lecture", "name": "Secret Sharing", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "516995ed-cf12-4376-8f07-7697e224aa07", "name": "cs387_hw1_07_q_Secret-Sharing", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGJLIAgw", "youtube_id": "npaHy-F7zoU", "youtube_state": "done", "path": "Course/cs387/Media/42002", "transcript": "\ufeff", "id": 42002}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiLJww", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/5003", "type": "Nugget", "id": 5003}, {"nuggetType": "lecture", "name": "Introduction", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "65dfe272-e2cd-466c-aa1a-a8aad471e490", "name": "cs387_unit1_00_q_Introduction", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGIknDA", "youtube_id": "ATJ-xUYEACg", "youtube_state": "done", "path": "Course/cs387/Media/5001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nWelcome to Applied Cryptography.\n\n2\n00:00:03,000 --> 00:00:05,000\nCryptography is a branch of mathematics\n\n3\n00:00:05,000 --> 00:00:06,000\nand computer science--that's a lot of fun--it's about\n\n4\n00:00:06,000 --> 00:00:09,000\nusing secrets to solve problems.\n\n5\n00:00:09,000 --> 00:00:10,000\nIn this class we're going to learn about\n\n6\n00:00:10,000 --> 00:00:12,000\nsome of the foundations of cryptography\n\n7\n00:00:12,000 --> 00:00:15,000\nand we're also going to learn to use cryptography\n\n8\n00:00:15,000 --> 00:00:16,000\nto solve problems in computing,\n\n9\n00:00:16,000 --> 00:00:17,000\nlike how to send messages securely,\n\n10\n00:00:17,000 --> 00:00:20,000\nhow to manage accounts on websites,\n\n11\n00:00:20,000 --> 00:00:22,000\nand how to do things like perform computation\n\n12\n00:00:22,000 --> 00:00:24,000\nwhere you can keep your data secret\n\n13\n00:00:24,000 --> 00:00:25,000\nand still get the result of a function\n\n14\n00:00:25,000 --> 00:00:27,000\nthat depends on your data and some other data.\n\n15\n00:00:27,000 --> 00:00:30,000\nThe name cryptography has two parts:\n\n16\n00:00:30,000 --> 00:00:34,000\ncrypto comes from the Greek root for secret--to hide--\n\n17\n00:00:34,000 --> 00:00:37,000\nand cryptography's all about using secrets.\n\n18\n00:00:37,000 --> 00:00:40,000\nThe second part comes from the root meaning writing--\n\n19\n00:00:40,000 --> 00:00:44,000\nthis is the same graphy that appears in telegraphy or photography.\n\n20\n00:00:44,000 --> 00:00:47,000\nWhat we do in this course, and what we do in cryptography\n\n21\n00:00:47,000 --> 00:00:50,000\ninvolves a lot more than just secret writing.\n\n22\n00:00:50,000 --> 00:00:51,000\nIt's really everything to do with secrets.\n\n23\n00:00:51,000 --> 00:00:56,000\nSo a better name for the course would be cryptology.\n\n24\n00:00:56,000 --> 00:00:58,000\nCryptography is used so frequently in practice, though, \n\n25\n00:00:58,000 --> 00:01:00,000\nthat it makes more sense to use the name cryptography,\n\n26\n00:01:00,000 --> 00:01:04,000\neven though our concern is with the much larger goal\n\n27\n00:01:04,000 --> 00:01:07,000\nof understanding how to use secrets in general.\n\n28\n00:01:07,000 --> 00:01:10,000\nAnd cryptology is the science of secrets\n\n29\n00:01:10,000 --> 00:01:12,000\nwhich is really what this course is all about.\n\n30\n00:01:12,000 --> 00:01:15,000\nSo that's enough to answer the first quiz,\n\n31\n00:01:15,000 --> 00:01:18,000\nand the first quiz will check\n\n32\n00:01:18,000 --> 00:01:21,000\n that you understand the definition of cryptology.\n\n33\n00:01:21,000 --> 00:01:24,000\nSo the question is, which of these involve cryptology?\n\n34\n00:01:24,000 --> 00:01:25,000\nCheck all of the answers that do.\n\n35\n00:01:25,000 --> 00:01:28,000\nOpening a door--and I mean a traditional door,\n\n36\n00:01:28,000 --> 00:01:30,000\nusing a traditional key.\n\n37\n00:01:30,000 --> 00:01:31,000\nPlaying a game of poker.\n\n38\n00:01:31,000 --> 00:01:35,000\nLogging into your account at Udacity,\n\n39\n00:01:35,000 --> 00:01:37,000\nor doing a search using google.com,\n\n40\n00:01:37,000 --> 00:01:40,000\nand I should be a little more specific for this last one,\n\n41\n00:01:40,000 --> 00:01:43,000\nthis assumes you're doing the search today,\n\n42\n00:01:43,000 --> 00:01:46,000\nand you're already logged in to one of your Google accounts.\n\n", "id": 5001}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjxLgw", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/6001", "type": "Nugget", "id": 6001}, {"nuggetType": "lecture", "name": "Keys And Kerchoffs Principle", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "5829f8ef-3ce8-4161-b713-a40051247c1d", "name": "cs387_unit1_04_q_Keys-and-Kerchoffs-Principle", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGJNODA", "youtube_id": "KJ4uS8YsO0U", "youtube_state": "done", "path": "Course/cs387/Media/10003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nWe'll talk about that a little more later,\n\n2\n00:00:02,000 --> 00:00:07,000\nbefore I go on, I want to mention one very important principle in cryptography,\n\n3\n00:00:07,000 --> 00:00:10,000\nwhich is known as Kerckhoff's Principle,\n\n4\n00:00:10,000 --> 00:00:14,000\nand it goes back to a book that Kerckhoff wrote back in 1883,\n\n5\n00:00:14,000 --> 00:00:20,000\nand the way Kerckhoff stated it was this--this was in a book he wrote in 1883\n\n6\n00:00:20,000 --> 00:00:29,000\nabout military cryptography [speaking French],\n\n7\n00:00:29,000 --> 00:00:34,000\nand I apologize for my French, but this loosely translates as,\n\n8\n00:00:34,000 --> 00:00:38,000\n\"The cipher must not depend on secrecy of the mechanism.\n\n9\n00:00:38,000 --> 00:00:42,000\nIt must not matter if it falls in the hands of the enemy.\"\n\n10\n00:00:42,000 --> 00:00:45,000\nSo, the reason for that--and it's important--\n\n11\n00:00:45,000 --> 00:00:48,000\nwhat he's focusing on is the mechanism here.\n\n12\n00:00:48,000 --> 00:00:51,000\nSo, if you think about these two functions we need--\n\n13\n00:00:51,000 --> 00:00:52,000\nwe need encryption and decryption.\n\n14\n00:00:52,000 --> 00:00:55,000\nComing up with new functions--or new mechanisms--\n\n15\n00:00:55,000 --> 00:00:58,000\nin Kerckhoff's day these were mostly mechanical devices\n\n16\n00:00:58,000 --> 00:01:01,000\n that you needed as part of the encryption process--\n\n17\n00:01:01,000 --> 00:01:03,000\nwell, that's a lot of work.\n\n18\n00:01:03,000 --> 00:01:07,000\nYou don't want to have to keep inventing new encryption and decryption functions,\n\n19\n00:01:07,000 --> 00:01:10,000\nand deciding they're secure and distributing them.\n\n20\n00:01:10,000 --> 00:01:12,000\nWhat you want is some way that,\n\n21\n00:01:12,000 --> 00:01:15,000\n even if your encryption and decryption functions are known,\n\n22\n00:01:15,000 --> 00:01:17,000\nyour cipher can still be secure,\n\n23\n00:01:17,000 --> 00:01:20,000\nand the way to achieve that is to use a key.\n\n24\n00:01:20,000 --> 00:01:23,000\nSo instead of just having the message as input to the encryption function,\n\n25\n00:01:23,000 --> 00:01:26,000\nthe other input to the encryption is a key,\n\n26\n00:01:26,000 --> 00:01:30,000\nand if it's a symmetric cryptosystem, that same key\n\n27\n00:01:30,000 --> 00:01:34,000\nis the key that is needed in the decryption function as well.\n\n28\n00:01:34,000 --> 00:01:36,000\nIf the security relies only on keeping the key secret,\n\n29\n00:01:36,000 --> 00:01:40,000\nwell, then, we can make our encryption and decryption functions public,\n\n30\n00:01:40,000 --> 00:01:42,000\nwe can analyze them, we can put a lot of work\n\n31\n00:01:42,000 --> 00:01:45,000\ninto developing good encryption and decryption functions,\n\n32\n00:01:45,000 --> 00:01:49,000\nand then the security depends only on keeping the key secret.\n\n33\n00:01:49,000 --> 00:01:51,000\nIf we think our key has been exposed, \n\n34\n00:01:51,000 --> 00:01:53,000\nwell, then we just need to come up with a new key,\n\n35\n00:01:53,000 --> 00:01:55,000\nbut we can keep using the same functions.\n\n36\n00:01:55,000 --> 00:01:59,000\nIf the function turns out to have a weakness in it,\n\n37\n00:01:59,000 --> 00:02:00,000\nwell, that's a much more serious problem.\n\n38\n00:02:00,000 --> 00:02:03,000\nThen we need to develop a new encryption function\n\n39\n00:02:03,000 --> 00:02:06,000\nand argue that that function is secure.\n\n40\n00:02:06,000 --> 00:02:08,000\nSo, this quiz is to check that you understand\n\n41\n00:02:08,000 --> 00:02:11,000\nKerckhoff's Principle and understand the terms that we've defined.\n\n42\n00:02:11,000 --> 00:02:17,000\nSo the question is: which parts of a cryptosystem must be kept secret?\n\n43\n00:02:17,000 --> 00:02:22,000\nThe choices are: Alice, the algorithm used for encryption,\n\n44\n00:02:22,000 --> 00:02:27,000\nthe algorithm used for decryption, the keys, and the ciphertext.\n\n45\n00:02:27,000 --> 00:02:30,000\nCheck all the parts that must be kept secret.\n\n", "id": 10003}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjyLgw", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/6002", "type": "Nugget", "id": 6002}, {"nuggetType": "lecture", "name": "Do Not Implement Your Own Crypto", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "c56c985d-835f-4810-a327-3e489827880c", "name": "cs387_unit1_02_q_Do-Not-Implement-Your-Own-Crypto", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGKlGDA", "youtube_id": "3Re5xlEjC8w", "youtube_state": "done", "path": "Course/cs387/Media/9001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nWe'll get into both the mathematics and the practice\n\n2\n00:00:03,000 --> 00:00:05,000\n of implementing systems using cryptography,\n\n3\n00:00:05,000 --> 00:00:08,000\nbut there's one thing I want to really emphasize,\n\n4\n00:00:08,000 --> 00:00:10,000\nand make sure that you understand.\n\n5\n00:00:10,000 --> 00:00:13,000\nImplementing your own cryptography is very challenging,\n\n6\n00:00:13,000 --> 00:00:16,000\nit's something that is very easy to do incorrectly.\n\n7\n00:00:16,000 --> 00:00:18,000\nOne example of that to keep in mind--\n\n8\n00:00:18,000 --> 00:00:20,000\nand this is an important thing--\n\n9\n00:00:20,000 --> 00:00:23,000\nso we often think about programs as black boxes\n\n10\n00:00:23,000 --> 00:00:25,000\nwith inputs and outputs,\n\n11\n00:00:25,000 --> 00:00:29,000\nand our encryption functions will usually take a key in a message \n\n12\n00:00:29,000 --> 00:00:32,000\nand produce some ciphertext, \n\n13\n00:00:32,000 --> 00:00:35,000\nand the implementations we'll show in this class\n\n14\n00:00:35,000 --> 00:00:36,000\nwill be functionally correct,\n\n15\n00:00:36,000 --> 00:00:39,000\nthey'll produce the correct outputs.\n\n16\n00:00:39,000 --> 00:00:40,000\nThey won't be secure,\n\n17\n00:00:40,000 --> 00:00:42,000\nand the reason they won't be secure is\n\n18\n00:00:42,000 --> 00:00:45,000\nthings aren't really black boxes when we use them.\n\n19\n00:00:45,000 --> 00:00:48,000\nThere's lots of other things that someone\n\n20\n00:00:48,000 --> 00:00:49,000\n could observe about this.\n\n21\n00:00:49,000 --> 00:00:52,000\nThey could observe how long it takes.\n\n22\n00:00:52,000 --> 00:00:54,000\nAnd when you can observe properties\n\n23\n00:00:54,000 --> 00:00:57,000\nof a function--other than their functional behavior--\n\n24\n00:00:57,000 --> 00:00:58,000\nother than just their inputs and outputs--\n\n25\n00:00:58,000 --> 00:01:00,000\nthat's called a side channel.\n\n26\n00:01:00,000 --> 00:01:03,000\nAn example of a side channel is timing.\n\n27\n00:01:03,000 --> 00:01:06,000\nSo, the time it takes to run this function could vary,\n\n28\n00:01:06,000 --> 00:01:09,000\nit could depend on the message or the key.\n\n29\n00:01:09,000 --> 00:01:11,000\nMost of the code that we're going to write in this class\n\n30\n00:01:11,000 --> 00:01:12,000\nwill have that property.\n\n31\n00:01:12,000 --> 00:01:15,000\nWe're not going to be adding complexity\n\n32\n00:01:15,000 --> 00:01:17,000\n to our code to worry about things like side channels,\n\n33\n00:01:17,000 --> 00:01:20,000\nbut in terms of implementing things correctly,\n\n34\n00:01:20,000 --> 00:01:21,000\nthat's really important,\n\n35\n00:01:21,000 --> 00:01:24,000\nand there are lots of ways that code could have side channels.\n\n36\n00:01:24,000 --> 00:01:26,000\nIt could affect what's in the cache of the processor,\n\n37\n00:01:26,000 --> 00:01:28,000\nand that could be visible in some way,\n\n38\n00:01:28,000 --> 00:01:30,000\nit could actually affect how much power\n\n39\n00:01:30,000 --> 00:01:32,000\nyour processor uses,\n\n40\n00:01:32,000 --> 00:01:34,000\nand people have shown ways to break smart cards\n\n41\n00:01:34,000 --> 00:01:38,000\nby measuring the power consumption as they do encryption\n\n42\n00:01:38,000 --> 00:01:39,000\nand that gives you some insight into what the key is.\n\n43\n00:01:39,000 --> 00:01:42,000\nSo, this is just an example of the kinds of things\n\n44\n00:01:42,000 --> 00:01:46,000\nthat it's very hard to get right in implementing cryptography.\n\n45\n00:01:46,000 --> 00:01:49,000\nThese are things that, if you were building cryptography\n\n46\n00:01:49,000 --> 00:01:52,000\nfor any important use, you'd have to worry about.\n\n47\n00:01:52,000 --> 00:01:54,000\nThese are things that we are not going to worry about\n\n48\n00:01:54,000 --> 00:01:57,000\nin most of the code that we write in this class\n\n49\n00:01:57,000 --> 00:02:02,000\nso you shouldn't view these implementations as secure implementations.\n\n50\n00:02:02,000 --> 00:02:04,000\nThe only reason to implement your own crypto\n\n51\n00:02:04,000 --> 00:02:06,000\nis for fun and learning.\n\n52\n00:02:06,000 --> 00:02:09,000\nAnd that's what we hope you'll get from this class by doing it,\n\n53\n00:02:09,000 --> 00:02:11,000\nbut if you actually want to use cryptography\n\n54\n00:02:11,000 --> 00:02:13,000\n to protect anything important, well--\n\n55\n00:02:13,000 --> 00:02:15,000\nyou should use a library implementation\n\n56\n00:02:15,000 --> 00:02:16,000\nthat's been carefully vetted,\n\n57\n00:02:16,000 --> 00:02:18,000\nthat's been written in a way to worry about\n\n58\n00:02:18,000 --> 00:02:22,000\nthese kinds of issues like timing side channels,\n\n59\n00:02:22,000 --> 00:02:23,000\nand that other people have looked at\n\n60\n00:02:23,000 --> 00:02:25,000\ncarefully enough to have some higher level of confidence\n\n61\n00:02:25,000 --> 00:02:28,000\nthat it's correct and secure.\n\n62\n00:02:28,000 --> 00:02:32,000\nSo I want to make sure everyone was paying careful attention\n\n63\n00:02:32,000 --> 00:02:33,000\nto that last point,\n\n64\n00:02:33,000 --> 00:02:35,000\nand we'll have a quiz:\n\n65\n00:02:35,000 --> 00:02:37,000\nShould you use any code from this course\n\n66\n00:02:37,000 --> 00:02:39,000\nto protect nuclear launch codes?\n\n67\n00:02:39,000 --> 00:02:42,000\nThe answers are no--check the correct answer.\n\n", "id": 9001}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjaNgw", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/7002", "type": "Nugget", "id": 7002}, {"nuggetType": "lecture", "name": "Introduction Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "28013fed-07b7-4e5c-ae72-c3db70ca1cf8", "name": "cs387_unit1_00_s_Introduction", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGNk2DA", "youtube_id": "Wqa8XDv8wo8", "youtube_state": "done", "path": "Course/cs387/Media/7001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nThe answer is all of these involve cryptography,\n\n2\n00:00:04,000 --> 00:00:07,000\nand the reason for that is they all involve secrets.\n\n3\n00:00:07,000 --> 00:00:08,000\nLet's go through each in turn.\n\n4\n00:00:08,000 --> 00:00:12,000\nSo the first is opening a door with a mechanical key.\n\n5\n00:00:12,000 --> 00:00:14,000\nWhat's the secret there?\n\n6\n00:00:14,000 --> 00:00:16,000\nWell, let's look at a key.\n\n7\n00:00:16,000 --> 00:00:19,000\nSo, the secret is actually the shape of the key.\n\n8\n00:00:19,000 --> 00:00:21,000\nNow that I've shown you this key,\n\n9\n00:00:21,000 --> 00:00:23,000\nthere's no secret any more.\n\n10\n00:00:23,000 --> 00:00:26,000\nIf you can look at the ridges on the key,\n\n11\n00:00:26,000 --> 00:00:28,000\nwell, you know the secret.\n\n12\n00:00:28,000 --> 00:00:30,000\nYou can make a copy of the key\n\n13\n00:00:30,000 --> 00:00:33,000\nand open whatever door this opens--\n\n14\n00:00:33,000 --> 00:00:35,000\nhopefully it's not something very important--\n\n15\n00:00:35,000 --> 00:00:38,000\nsince I've just shown the key in a public video,\n\n16\n00:00:38,000 --> 00:00:40,000\nand it's actually possible to do this\n\n17\n00:00:40,000 --> 00:00:42,000\nfrom a fairly large distance.\n\n18\n00:00:42,000 --> 00:00:46,000\nThere was a group of students at University of California, San Diego,\n\n19\n00:00:46,000 --> 00:00:48,000\nthat showed that from taking a picture \n\n20\n00:00:48,000 --> 00:00:50,000\nseveral hundred feet away you could learn\n\n21\n00:00:50,000 --> 00:00:52,000\nenough about a key to create a replica\n\n22\n00:00:52,000 --> 00:00:54,000\nthat would open the same door.\n\n23\n00:00:54,000 --> 00:00:55,000\nPlaying poker certainly involves secrets.\n\n24\n00:00:55,000 --> 00:00:57,000\nIt wouldn't be much of a game if everyone\n\n25\n00:00:57,000 --> 00:00:59,000\ncould see everyone else's cards.\n\n26\n00:00:59,000 --> 00:01:03,000\nLogging into your Udacity account involves\n\n27\n00:01:03,000 --> 00:01:05,000\nentering an email and password,\n\n28\n00:01:05,000 --> 00:01:07,000\nand I'm not going to actually type my password now,\n\n29\n00:01:07,000 --> 00:01:11,000\nbecause--one of the things I hope you'll start to understand from this class is--\n\n30\n00:01:11,000 --> 00:01:13,000\neven if you don't see it because of the stars here,\n\n31\n00:01:13,000 --> 00:01:16,000\nthe fact that you can hear the audio of my keyboard\n\n32\n00:01:16,000 --> 00:01:19,000\n would give you a pretty big clue about what my password is\n\n33\n00:01:19,000 --> 00:01:20,000\nand the number of characters.\n\n34\n00:01:20,000 --> 00:01:22,000\nAnd--unlike the key that I showed you--\n\n35\n00:01:22,000 --> 00:01:24,000\nthis protects something really important\n\n36\n00:01:24,000 --> 00:01:26,000\nso I'm not going to expose my password.\n\n37\n00:01:26,000 --> 00:01:29,000\nWe will talk, in one of the future units,\n\n38\n00:01:29,000 --> 00:01:32,000\nabout how to manage passwords correctly.\n\n39\n00:01:32,000 --> 00:01:34,000\nThis involves a lot of encryption--your password is a secret--\n\n40\n00:01:34,000 --> 00:01:36,000\nbut you also want to manage passwords--  \n\n41\n00:01:36,000 --> 00:01:41,000\nand check them--in a way that doesn't require storing those secrets.\n\n42\n00:01:41,000 --> 00:01:44,000\nYou don't want to store passwords in a way that could expose them easily,\n\n43\n00:01:44,000 --> 00:01:46,000\nand we'll talk about that more in unit 2.\n\n44\n00:01:46,000 --> 00:01:49,000\nThe final option--doing a search using google.com--\n\n45\n00:01:49,000 --> 00:01:51,000\nis an interesting one.\n\n46\n00:01:51,000 --> 00:01:53,000\nThis actually changed about a year ago--\n\n47\n00:01:53,000 --> 00:01:55,000\nwhether or not that involves encryption--\n\n48\n00:01:55,000 --> 00:01:59,000\nand, if you try it today, you'll note when you enter google.com\n\n49\n00:01:59,000 --> 00:02:01,000\nwhat happens is, you actually get redirected\n\n50\n00:02:01,000 --> 00:02:06,000\nto https://google.com and--you can see the lock in the browser--\n\n51\n00:02:06,000 --> 00:02:09,000\nthis means it's using a protocol called TLS\n\n52\n00:02:09,000 --> 00:02:12,000\n to encrypt all the traffic between you and Google.\n\n53\n00:02:12,000 --> 00:02:15,000\nSo--both the keywords that you're typing are not exposed on the internet--\n\n54\n00:02:15,000 --> 00:02:17,000\nas well as the search results,\n\n55\n00:02:17,000 --> 00:02:20,000\nand we'll talk more about that in a later unit in the class\n\n56\n00:02:20,000 --> 00:02:23,000\nthat involves both asymmetric and symmetric encryption.\n\n57\n00:02:23,000 --> 00:02:26,000\nThere's lots of interesting things about the protocol\n\n58\n00:02:26,000 --> 00:02:29,000\nto protect web traffic, that we'll talk about later in the class.\n\n59\n00:02:29,000 --> 00:02:31,000\nSo the key point is that secrets are all around us,\n\n60\n00:02:31,000 --> 00:02:33,000\nthat they're very useful for solving problems,\n\n61\n00:02:33,000 --> 00:02:36,000\nyou're using cryptology all the time, every day.\n\n", "id": 7001}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjBPgw", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/8001", "type": "Nugget", "id": 8001}, {"nuggetType": "lecture", "name": "Symmetric Cryptosystems", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "7a32b3e2-1498-463b-b3b5-399ce724ea4a", "name": "cs387_unit1_03_l_Symmetric-Cryptosystems", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGJJODA", "youtube_id": "dk40W6ULb0I", "youtube_state": "done", "path": "Course/cs387/Media/10002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:06,000\nSo the first main topic we'll introduce is symmetric cryptosystems.\n\n2\n00:00:06,000 --> 00:00:10,000\nSymmetric means both encryption and decryption are done with the same key.\n\n3\n00:00:10,000 --> 00:00:14,000\nI want to introduce some terminology that we'll use throughout the course.\n\n4\n00:00:14,000 --> 00:00:16,000\nSo we can think of encryption as a function,\n\n5\n00:00:16,000 --> 00:00:21,000\nand it takes as input a plain text--this is the unencrypted message--\n\n6\n00:00:21,000 --> 00:00:24,000\nit outputs a ciphertext, and then our goal is to be able\n\n7\n00:00:24,000 --> 00:00:28,000\nto send that ciphertext over an insecure channel.\n\n8\n00:00:28,000 --> 00:00:32,000\nThis could be a wireless network, this could be the internet,\n\n9\n00:00:32,000 --> 00:00:34,000\nthis could be a courier carrying your message,\n\n10\n00:00:34,000 --> 00:00:37,000\nany channel where we can't trust the channel to be secure.\n\n11\n00:00:37,000 --> 00:00:42,000\nWe hope what comes out of the channel is the same ciphertext we put into it. \n\n12\n00:00:42,000 --> 00:00:46,000\nThen that goes into a decryption function, and what comes out \n\n13\n00:00:46,000 --> 00:00:48,000\nis the message that we sent it.\n\n14\n00:00:48,000 --> 00:00:52,000\nOur cast of characters--we often talk about Alice sending the message,\n\n15\n00:00:52,000 --> 00:00:54,000\nBob receiving it.\n\n16\n00:00:54,000 --> 00:00:58,000\nWe also have malicious characters who might be listening in on this channel.\n\n17\n00:00:58,000 --> 00:01:01,000\nOne of those is called Eve--for eavesdropper--and she has really big ears\n\n18\n00:01:01,000 --> 00:01:05,000\nand can hear the messages sent between Alice and Bob, \n\n19\n00:01:05,000 --> 00:01:08,000\nbut she only hears what's sent over the insecure channel,\n\n20\n00:01:08,000 --> 00:01:12,000\nshe doesn't have access to the plain text--that's the input to the encryption function--\n\n21\n00:01:12,000 --> 00:01:15,000\nor the plain text that comes out of the decryption function at the other end.\n\n22\n00:01:15,000 --> 00:01:19,000\nBut she can hear the ciphertext that's sent over the insecure channel.\n\n23\n00:01:19,000 --> 00:01:22,000\nTo think about this a little more precisely,\n\n24\n00:01:22,000 --> 00:01:27,000\nthe plain text is some message, and it's selected from a set of messages.\n\n25\n00:01:27,000 --> 00:01:29,000\nSo, M is the set of all possible messages,\n\n26\n00:01:29,000 --> 00:01:34,000\nand M could be finite--for a given length, M is finite--\n\n27\n00:01:34,000 --> 00:01:37,000\nand we'll often be thinking about fixed-length messages,\n\n28\n00:01:37,000 --> 00:01:42,000\nso there's a finite set of them, and M is some message selected from that set.\n\n29\n00:01:42,000 --> 00:01:48,000\nThe ciphertext is C--selected from the set of all possible ciphertexts,\n\n30\n00:01:48,000 --> 00:01:51,000\nand the encryption and decryption functions are functions.\n\n31\n00:01:51,000 --> 00:01:53,000\nThe encryption function--as shown here--\n\n32\n00:01:53,000 --> 00:01:59,000\nis a function that goes from an element of M to an element of C.\n\n33\n00:01:59,000 --> 00:02:04,000\nThe decryption function goes from an element of C--a ciphertext--to an element of M.\n\n34\n00:02:04,000 --> 00:02:11,000\nIn order for Bob to receive the same message as the one Alice encrypted,\n\n35\n00:02:11,000 --> 00:02:15,000\nwe need this property--that the D function is an inverse of the M function.\n\n36\n00:02:15,000 --> 00:02:18,000\nSo we need it to be the case for all messages.\n\n37\n00:02:18,000 --> 00:02:21,000\nThe result of decryption the encryption of that message is the same as the message we started with.\n\n", "id": 10002}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjCPgw", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/8002", "type": "Nugget", "id": 8002}, {"nuggetType": "lecture", "name": "Keys And Kerchoffs Principle Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "7291b862-86b4-4c7d-809b-6b778d9ae20a", "name": "cs387_unit1_04_s_Keys-and-Kerchoffs-Principle", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGNs2DA", "youtube_id": "dFTxdaXosrw", "youtube_state": "done", "path": "Course/cs387/Media/7003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nThe answer is: just the keys.\n\n2\n00:00:03,000 --> 00:00:04,000\nThis is the point of Kerckhoff's Principle,\n\n3\n00:00:04,000 --> 00:00:08,000\nthat we don't need to keep the encryption algorithm or the decryption algorithm secret,\n\n4\n00:00:08,000 --> 00:00:12,000\nwe want to make those public so they are carefully tested and understood,\n\n5\n00:00:12,000 --> 00:00:14,000\nand analyzed by many people.\n\n6\n00:00:14,000 --> 00:00:17,000\nWe wanted only to keep this key secret.\n\n7\n00:00:17,000 --> 00:00:19,000\nThe point of the encryption system is to allow us\n\n8\n00:00:19,000 --> 00:00:22,000\nto send the ciphertext over an insecure channel,\n\n9\n00:00:22,000 --> 00:00:24,000\nso that's no longer going to be secret,\n\n10\n00:00:24,000 --> 00:00:27,000\nand Alice is just a silly answer.\n\n", "id": 7003}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjDPgw", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/8003", "type": "Nugget", "id": 8003}, {"nuggetType": "lecture", "name": "Do Not Implement Your Own Crypto Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "937e79c0-d038-4790-9160-6233db601fda", "name": "cs387_unit1_02_s_Do-Not-Implement-Your-Own-Crypto", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGIonDA", "youtube_id": "OfzKOpfW0lY", "youtube_state": "done", "path": "Course/cs387/Media/5002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nSo I hope everyone got this quiz correctly.\n\n2\n00:00:02,000 --> 00:00:05,000\nIf you didn't, you'll be hearing from our lawyers soon.\n\n", "id": 5002}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiRTgw", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/10001", "type": "Nugget", "id": 10001}, {"nuggetType": "lecture", "name": "Otp Is A Perfect Cipher Pt 2", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "8d4fcfc5-25c2-4569-b6d1-6ac56891695f", "name": "cs387_unit1_14_s_OTP-is-a-Perfect-Cipher-pt-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGJx1DA", "youtube_id": "JvgNq7354W4", "youtube_state": "done", "path": "Course/cs387/Media/15004", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nThe answer is this one. \n\n2\n00:00:02,000 --> 00:00:08,000\nIt's the probability that the message is M* divided by the number of keys.\n\n3\n00:00:08,000 --> 00:00:11,000\nTo see why let's think about our probability space.\n\n4\n00:00:11,000 --> 00:00:14,000\nWe have all the possible messages being ordered.\n\n5\n00:00:14,000 --> 00:00:20,000\nWe have message 0, message 1, all the possible messages.\n\n6\n00:00:20,000 --> 00:00:24,000\nThere is some message that we've selected that's message M8.\n\n7\n00:00:24,000 --> 00:00:27,000\nWe don't want to assume that the messages are uniformly distributed.\n\n8\n00:00:27,000 --> 00:00:31,000\nThe probability that the message is M* is not necessarily \n\n9\n00:00:31,000 --> 00:00:34,000\n1 divided by the number of messages.\n\n10\n00:00:34,000 --> 00:00:38,000\nIf the messages were uniformly distributed, then this answer would also be correct.\n\n11\n00:00:38,000 --> 00:00:40,000\nBut they're not. We don't want to assume that.\n\n12\n00:00:40,000 --> 00:00:44,000\nMaybe the attacker has some prior knowledge about the distribution of the messages.\n\n13\n00:00:44,000 --> 00:00:46,000\nThat's normally the case.\n\n14\n00:00:46,000 --> 00:00:49,000\nEven if we don't know anything about the particular messages,\n\n15\n00:00:49,000 --> 00:00:52,000\nmaybe we know it's a message in English.\n\n16\n00:00:52,000 --> 00:00:56,000\nMost random strings of text are not messages in English.\n\n17\n00:00:56,000 --> 00:01:00,000\nThe other dimension in our probability space is the choice of the key.\n\n18\n00:01:00,000 --> 00:01:03,000\nThere are K possible keys.\n\n19\n00:01:03,000 --> 00:01:07,000\nWhat we want to know is what is the intersection of these two events.\n\n20\n00:01:07,000 --> 00:01:10,000\nThe M* even is this line in our probability space.\n\n21\n00:01:10,000 --> 00:01:15,000\nEach one of these keys maps exactly one message to C.\n\n22\n00:01:15,000 --> 00:01:19,000\nWe saw that before, that there is one key that maps each message to C.\n\n23\n00:01:19,000 --> 00:01:23,000\nWe can think of that as being a diagonal line through our probability space.\n\n24\n00:01:23,000 --> 00:01:28,000\nThis is the line where the encryption of Ki and Mi is equal to C.\n\n25\n00:01:28,000 --> 00:01:33,000\nDepending on what C is, it might not be a diagonal line.\n\n26\n00:01:33,000 --> 00:01:35,000\nBut we can think of it that way, that there's one key \n\n27\n00:01:35,000 --> 00:01:38,000\nthat maps each message to each cipher text.\n\n28\n00:01:38,000 --> 00:01:42,000\nThat means there's exactly one point here where those two intersect.\n\n29\n00:01:42,000 --> 00:01:46,000\nIf the distributions were normal, that would indeed by the correct answer.\n\n30\n00:01:46,000 --> 00:01:50,000\nIt's one point and our space is the size of M times the size of K.\n\n31\n00:01:50,000 --> 00:01:52,000\nBut the distribution isn't normal.\n\n32\n00:01:52,000 --> 00:01:55,000\nWe don't want to make any assumption about the distribution of M.\n\n33\n00:01:55,000 --> 00:01:58,000\nFor the keys we do want to assume that the distribution is normal,\n\n34\n00:01:58,000 --> 00:02:02,000\nthat each key is equally likely. The keys are chosen perfectly at random.\n\n35\n00:02:02,000 --> 00:02:05,000\nWe have the probability of picking M*, \n\n36\n00:02:05,000 --> 00:02:09,000\nand we're multiplying that by the probability of picking this intersecting key.\n\n37\n00:02:09,000 --> 00:02:11,000\nWe'll call that K*.\n\n38\n00:02:11,000 --> 00:02:16,000\nBut because the keys are uniformly distributed, we know that this probability is 1/K--\n\n39\n00:02:16,000 --> 00:02:18,000\n1 over the size of K.\n\n40\n00:02:18,000 --> 00:02:20,000\nWe don't know that about the messages.\n\n41\n00:02:20,000 --> 00:02:23,000\nWe leave that probability as it is.\n\n42\n00:02:23,000 --> 00:02:29,000\nThat's why this is the answer to the probability that the message M* intersected \n\n43\n00:02:29,000 --> 00:02:32,000\nwith the encryption of the message is C.\n\n44\n00:02:32,000 --> 00:02:35,000\nNow let's go back to our definition.\n\n", "id": 15004}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBj6VQw", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/11002", "type": "Nugget", "id": 11002}, {"nuggetType": "lecture", "name": "Modern Symmetric Ciphers", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "20799978-5cfb-4b10-a364-8afcf79f5479", "name": "cs387_unit1_24_l_Modern-Symmetric-Ciphers", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGPKrAQw", "youtube_id": "u5soSzzXy8Q", "youtube_state": "done", "path": "Course/cs387/Media/22002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nWe won't talk in much detail about modern symmetric ciphers in this course.\n\n2\n00:00:05,000 --> 00:00:07,000\nThere are a couple reasons for this.\n\n3\n00:00:07,000 --> 00:00:10,000\nOne is that I want to get on to uses of ciphers, \n\n4\n00:00:10,000 --> 00:00:13,000\nwhich I think is more important and more interesting for most people.\n\n5\n00:00:13,000 --> 00:00:16,000\nVery few people today need to implement a cipher.\n\n6\n00:00:16,000 --> 00:00:21,000\nYou really should use library implementations of ciphers in any serious application.\n\n7\n00:00:21,000 --> 00:00:25,000\nIt's certainly useful to understand more about what's going on beneath the scenes.\n\n8\n00:00:25,000 --> 00:00:28,000\nBut even few people should be designing new ciphers.\n\n9\n00:00:28,000 --> 00:00:31,000\nYou would have to have very unique requirements to think \n\n10\n00:00:31,000 --> 00:00:34,000\nthat you're better off designing a new cipher yourself than using\n\n11\n00:00:34,000 --> 00:00:38,000\na standard well-accepted carefully analyzed cipher.\n\n12\n00:00:38,000 --> 00:00:41,000\nMost of the time we've used ciphers as black boxes\n\n13\n00:00:41,000 --> 00:00:47,000\nthat are taking in messages and keys and outputing ciphertext\n\n14\n00:00:47,000 --> 00:00:50,000\nand assuming that they have the properties that we need.\n\n15\n00:00:50,000 --> 00:00:54,000\nCertainly we've proven that no cipher really does.\n\n16\n00:00:54,000 --> 00:00:57,000\nWe've shown that the only way for a cipher to be perfect\n\n17\n00:00:57,000 --> 00:01:02,000\nis if the key space is at least as big as the message space.\n\n18\n00:01:02,000 --> 00:01:05,000\nThat's impractical for any useful use.\n\n19\n00:01:05,000 --> 00:01:08,000\nWe can group modern ciphers into two types.\n\n20\n00:01:08,000 --> 00:01:12,000\nThere are stream ciphers and block ciphers.\n\n21\n00:01:12,000 --> 00:01:17,000\nThe different is that with a stream cipher we've got a stream of data,\n\n22\n00:01:17,000 --> 00:01:21,000\nand our cipher can encrypt small chunks at a time.\n\n23\n00:01:21,000 --> 00:01:25,000\nYou can think of the data streaming through the cipher encrypting\n\n24\n00:01:25,000 --> 00:01:29,000\nencrypting usually at the level of one byte at a time,\n\n25\n00:01:29,000 --> 00:01:32,000\nwhereas with the block cipher we think of our data in larger chunks,\n\n26\n00:01:32,000 --> 00:01:35,000\nand the cipher encrypts a block at a time.\n\n27\n00:01:35,000 --> 00:01:44,000\nUsually a block size is at least 64 bits and can be longer up to 128 or 256 bits.\n\n28\n00:01:44,000 --> 00:01:46,000\nThese are sort of really the same thing.\n\n29\n00:01:46,000 --> 00:01:49,000\nThe only difference is changing the block size.\n\n30\n00:01:49,000 --> 00:01:52,000\nIf the block size is small enough, it would become a stream cipher.\n\n31\n00:01:52,000 --> 00:01:57,000\nIf the block size is large enough, we can think of it as a block cipher.\n\n32\n00:01:57,000 --> 00:02:02,000\nBut there are enough differences in the way you build ciphers \n\n33\n00:02:02,000 --> 00:02:04,000\nthat different ciphers are designed for each purpose.\n\n34\n00:02:04,000 --> 00:02:09,000\nThe most important block cipher today is known as AES,\n\n35\n00:02:09,000 --> 00:02:12,000\nand this stands for the Advanced Encryption Standard.\n\n36\n00:02:12,000 --> 00:02:17,000\nAES is a block cipher. It works on blocks of 128 bits.\n\n37\n00:02:17,000 --> 00:02:23,000\nAES is the result of the competition that was run by the United States \n\n38\n00:02:23,000 --> 00:02:29,000\nNational Institute of Standards in Technology, more commonly known as NIST.\n\n39\n00:02:29,000 --> 00:02:36,000\nThis competition was started in 1997 to find a cipher to replace DES, \n\n40\n00:02:36,000 --> 00:02:41,000\nwhich was the Data Encryption Standard, which had been a standard for the previous 30 years.\n\n41\n00:02:41,000 --> 00:02:46,000\nThat contest ran from 1997. They had a very open process.\n\n42\n00:02:46,000 --> 00:02:52,000\nThis is very unlike the process that was used to select DES as the previous recommended cipher.\n\n43\n00:02:52,000 --> 00:02:56,000\nThis lead to 15 submissions for round 1.\n\n44\n00:02:56,000 --> 00:02:58,000\nSome of these were actually completely broken.\n\n45\n00:02:58,000 --> 00:03:01,000\nOthers were rejected for other reasons.\n\n46\n00:03:01,000 --> 00:03:05,000\nThis was narrowed down to five finalists, none of which were seriously broken,\n\n47\n00:03:05,000 --> 00:03:08,000\nand one winner, which was selected.\n\n48\n00:03:08,000 --> 00:03:15,000\nThe main criteria for selecting the winner of AES were the security of the ciphers,\n\n49\n00:03:15,000 --> 00:03:17,000\nand this is really the hardest thing to measure.\n\n50\n00:03:17,000 --> 00:03:20,000\nWe've seen that other than the one-time pad\n\n51\n00:03:20,000 --> 00:03:24,000\nprovable security is not achievable for most ciphers\n\n52\n00:03:24,000 --> 00:03:28,000\nand not achievable for any cipher that was a candidate for AES.\n\n53\n00:03:28,000 --> 00:03:32,000\nThe way this was measured was trying to estimate the security.\n\n54\n00:03:32,000 --> 00:03:36,000\nThe main metric for measuring security was looking at \n\n55\n00:03:36,000 --> 00:03:41,000\nthe actual number of rounds in the cipher and dividing it by the minimum number of rounds\n\n56\n00:03:41,000 --> 00:03:45,000\nthat were breakable in some sense.\n\n57\n00:03:45,000 --> 00:03:49,000\nBreakable here is very much the academic of breakable.\n\n58\n00:03:49,000 --> 00:03:53,000\nYou didn't need to be able to extract a message or a key.\n\n59\n00:03:53,000 --> 00:03:57,000\nAnything that showed you could reduce the search space even a little bit would be enough\n\n60\n00:03:57,000 --> 00:04:00,000\nto show that it was breakable for that number of rounds.\n\n61\n00:04:00,000 --> 00:04:04,000\nThe other properties were easier to compare and measure, which were speed--\n\n62\n00:04:04,000 --> 00:04:09,000\nimplementing it both in hardware and in software--and simplicity.\n\n63\n00:04:09,000 --> 00:04:12,000\nSimplicity is usually against security.\n\n64\n00:04:12,000 --> 00:04:15,000\nTo have higher security we want more confusion.\n\n65\n00:04:15,000 --> 00:04:19,000\nWe want to do more transformations to the data. That goes against simplicity.\n\n66\n00:04:19,000 --> 00:04:26,000\nSimplicity aids the analysis to make it more clear whether the cipher is secure or not.\n\n67\n00:04:26,000 --> 00:04:32,000\nThe winner of the AES competition was a cipher known as Rijndael, \n\n68\n00:04:32,000 --> 00:04:35,000\nwhich was developed by two Belgian cryptographers.\n\n69\n00:04:35,000 --> 00:04:38,000\nThe good thing about it winning AES is now we don't have to figure out how \n\n70\n00:04:38,000 --> 00:04:43,000\nto pronounce it correctly in Belgian. It's now called AES.\n\n71\n00:04:43,000 --> 00:04:47,000\nThe best known current break against AES is very theoretical, \n\n72\n00:04:47,000 --> 00:04:56,000\nso with 128-bit keys, that would be a brute-force attack that tries every possible key.\n\n73\n00:04:56,000 --> 00:05:00,000\nIt would require on average 2^127 attempts.\n\n74\n00:05:00,000 --> 00:05:04,000\nYou're expected within half the 128-bit keys.\n\n75\n00:05:04,000 --> 00:05:12,000\nYou've got 2^128 total keys. You expect to find a break after testing half of them\n\n76\n00:05:12,000 --> 00:05:16,000\nSo they expect it costs a brute-force attack 2^127.\n\n77\n00:05:16,000 --> 00:05:20,000\nThe best known attack removes less than 1 bit of security.\n\n78\n00:05:20,000 --> 00:05:23,000\nThat's the best known today.\n\n79\n00:05:23,000 --> 00:05:28,000\nAnd 126 bits of security is well beyond what's practical to imagine implementing\n\n80\n00:05:28,000 --> 00:05:31,000\neven with a huge amount of computing resources.\n\n", "id": 22002}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBj7VQw", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/11003", "type": "Nugget", "id": 11003}, {"nuggetType": "quiz", "name": "Otp Is A Perfect Cipher Pt 1", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBj8VQw", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/11004", "type": "Nugget", "id": 11004}, {"nuggetType": "quiz", "name": "Lorenz Cipher Machine", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBj9VQw", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/11005", "type": "Nugget", "id": 11005}, {"nuggetType": "quiz", "name": "Importance Of Keys", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBj-VQw", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/11006", "type": "Nugget", "id": 11006}, {"nuggetType": "lecture", "name": "Correctness And Security Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "94dcbbf6-230b-45c9-8f3d-a3cd93c1e48e", "name": "cs387_unit1_05_s_Correctness-and-Security", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGPlVDA", "youtube_id": "B7KqXFpyEEE", "youtube_state": "done", "path": "Course/cs387/Media/11001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nThe answer is: the first two of these do satisfy the correctness property,\n\n2\n00:00:04,000 --> 00:00:05,000\nthe third one does not.\n\n3\n00:00:05,000 --> 00:00:10,000\nAnd to understand why--well, let's remember what the correctness property is.\n\n4\n00:00:10,000 --> 00:00:16,000\nThat's that for any message, and any key, we have the property that\n\n5\n00:00:16,000 --> 00:00:18,000\nwhen we encrypt the message with that key, \n\n6\n00:00:18,000 --> 00:00:19,000\nand decrypt it with the same key,\n\n7\n00:00:19,000 --> 00:00:21,000\nwe get the message back.\n\n8\n00:00:21,000 --> 00:00:26,000\nAnd this is what we need for our encryption to be decryptable.\n\n9\n00:00:26,000 --> 00:00:27,000\nWe need these functions to be inverses.\n\n10\n00:00:27,000 --> 00:00:32,000\nSo, for the first choice, the encryption function is M + K,\n\n11\n00:00:32,000 --> 00:00:36,000\nthe decryption function takes that input--which is now called C--\n\n12\n00:00:36,000 --> 00:00:40,000\nand subtracts K from it using the properties of arithmetic\n\n13\n00:00:40,000 --> 00:00:43,000\nwhile this is indeed equal to M.\n\n14\n00:00:43,000 --> 00:00:47,000\nFor the second choice, the encryption function is the identity,\n\n15\n00:00:47,000 --> 00:00:48,000\nthat gives us M back. \n\n16\n00:00:48,000 --> 00:00:51,000\nCertainly this does not provide the security properties that we need,\n\n17\n00:00:51,000 --> 00:00:54,000\nwe haven't hidden anything about the message.\n\n18\n00:00:54,000 --> 00:00:57,000\nAnd then the decryption function is also the identity.\n\n19\n00:00:57,000 --> 00:00:59,000\nTakes in M, gives us M back.\n\n20\n00:00:59,000 --> 00:01:04,000\nSo this satisfies correctness, certainly does not satisfy security.\n\n21\n00:01:04,000 --> 00:01:09,000\nThe third property doesn't satisfy the correctness property.\n\n22\n00:01:09,000 --> 00:01:16,000\nAnd the easy way to see that is to observe that the output of this\n\n23\n00:01:16,000 --> 00:01:19,000\nis a smaller set than the number of messages.\n\n24\n00:01:19,000 --> 00:01:23,000\nSo there--for some choices of message and key, this maps to the same value,\n\n25\n00:01:23,000 --> 00:01:30,000\nand an example of that would be, if we choose K = 2, if M = 4,\n\n26\n00:01:30,000 --> 00:01:34,000\nthen the encryption of that message is equal to zero,\n\n27\n00:01:34,000 --> 00:01:40,000\nbecause the remainder of dividing 4 by 2 is zero.\n\n28\n00:01:40,000 --> 00:01:43,000\nBut if we also choose to message 6, well then, \n\n29\n00:01:43,000 --> 00:01:47,000\nthe encryption with that same key of 6 is zero.\n\n30\n00:01:47,000 --> 00:01:50,000\nSince two messages mapped to the same ciphertext,\n\n31\n00:01:50,000 --> 00:01:53,000\nthere's no way they could decrypt correctly,\n\n32\n00:01:53,000 --> 00:01:55,000\nthey can't both decrypt to different values,\n\n33\n00:01:55,000 --> 00:01:58,000\nbecause decryption is just a function, it takes that input, \n\n34\n00:01:58,000 --> 00:02:01,000\nit's going to produce the same output in both cases,\n\n35\n00:02:01,000 --> 00:02:03,000\nin this case it's going to produce zero, it's not going to produce the message we need.\n\n36\n00:02:03,000 --> 00:02:06,000\nSo this is neither secure nor correct.\n\n37\n00:02:06,000 --> 00:02:10,000\nBut once it's not correct we know it's not useful.\n\n38\n00:02:10,000 --> 00:02:14,000\nThe first one, as it is, is not secure.\n\n39\n00:02:14,000 --> 00:02:17,000\nBut it's actually pretty close to being secure.\n\n40\n00:02:17,000 --> 00:02:20,000\nAnd if we combine the first one with a modulo operator,\n\n41\n00:02:20,000 --> 00:02:24,000\nand we never reuse keys, we'll end up with something that's perfectly secure.\n\n42\n00:02:24,000 --> 00:02:26,000\nAnd that's what I'm going to talk about next.\n\n43\n00:02:26,000 --> 00:02:29,000\nI'll introduce the first cipher that we'll talk about, \n\n44\n00:02:29,000 --> 00:02:32,000\nand it's actually a cipher that is perfectly secure.\n\n", "id": 11001}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjhXQw", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/12001", "type": "Nugget", "id": 12001}, {"nuggetType": "lecture", "name": "Xor Function", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "92dab4cc-2689-4dd0-8d19-f48c6d91bd71", "name": "cs387_unit1_06_q_XOR-Function", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGMllDA", "youtube_id": "buiFZG-Fq_k", "youtube_state": "done", "path": "Course/cs387/Media/13001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nSo I'm going to introduce a cipher called the One-Time Pad,\n\n2\n00:00:02,000 --> 00:00:05,000\nand this is actually a perfect cipher,\n\n3\n00:00:05,000 --> 00:00:08,000\nand we'll define more precisely what that means,\n\n4\n00:00:08,000 --> 00:00:13,000\nbut it's a cipher that reveals no information at all about the key or the message,\n\n5\n00:00:13,000 --> 00:00:15,000\nand it's actually the only one.\n\n6\n00:00:15,000 --> 00:00:19,000\nAnd--you might be wondering--well, if we're starting right at the beginning of the class\n\n7\n00:00:19,000 --> 00:00:20,000\nwith a perfect cipher, what's there left to do?\n\n8\n00:00:20,000 --> 00:00:23,000\nIt's perfect, but it's very impractical.\n\n9\n00:00:23,000 --> 00:00:28,000\nAnd the reason it's very impractical is because it requires huge keys.\n\n10\n00:00:28,000 --> 00:00:32,000\nSo to understand the One-Time Pad, the first thing we need to understand\n\n11\n00:00:32,000 --> 00:00:36,000\n is the XOR function--which is a name for the exclusive or--\n\n12\n00:00:36,000 --> 00:00:42,000\nand it's often written as a plus with a circle around it.\n\n13\n00:00:42,000 --> 00:00:45,000\nThe truth table for XOR is this:\n\n14\n00:00:45,000 --> 00:00:53,000\nthe value of A XOR B is true if one of A or B--but only one of them--is true.\n\n15\n00:00:53,000 --> 00:00:55,000\nSo that's why we end up with this truth table.\n\n16\n00:00:55,000 --> 00:01:02,000\nXOR has lots of useful properties that make it the favorite function of every cryptographer,\n\n17\n00:01:02,000 --> 00:01:05,000\nand I'll see if you can figure out one of these on your own.\n\n18\n00:01:05,000 --> 00:01:08,000\nSo the question is: for any values X and Y,\n\n19\n00:01:08,000 --> 00:01:12,000\nwhat is the value of x XOR y XOR x?\n\n20\n00:01:12,000 --> 00:01:17,000\nSo here are your choices: 0, x, y, or it depends on x.\n\n", "id": 13001}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjiXQw", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/12002", "type": "Nugget", "id": 12002}, {"nuggetType": "quiz", "name": "Do Not Implement Your Own Crypto", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjOZQw", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/13006", "type": "Nugget", "id": 13006}, {"nuggetType": "lecture", "name": "Otp Is A Perfect Cipher Pt 1", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "063be3ec-0593-4c04-996e-d7d29b89703f", "name": "cs387_unit1_13_q_OTP-is-a-Perfect-Cipher-pt-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGJt1DA", "youtube_id": "vQVNo35Wlco", "youtube_state": "done", "path": "Course/cs387/Media/15003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nOur goal is to show that a one-time pad is a perfect cipher,\n\n2\n00:00:04,000 --> 00:00:07,000\nand now that we have the definition of a perfect cipher,\n\n3\n00:00:07,000 --> 00:00:09,000\nwe should be able to argue that formally.\n\n4\n00:00:09,000 --> 00:00:11,000\nThis was our definition. \n\n5\n00:00:11,000 --> 00:00:13,000\nSince our definition uses the conditional probability, \n\n6\n00:00:13,000 --> 00:00:16,000\nwe should also remember the definition of conditional probability,\n\n7\n00:00:16,000 --> 00:00:22,000\nwhich is the probability of some event A conditioned on event B happening\n\n8\n00:00:22,000 --> 00:00:27,000\nis equal to the probability of A intersect B divided by the probability of B.\n\n9\n00:00:27,000 --> 00:00:30,000\nTo show that the one-time pad is a perfect cipher,\n\n10\n00:00:30,000 --> 00:00:38,000\nwe just need to calculate this where A will be this event and B will be this event.\n\n11\n00:00:38,000 --> 00:00:40,000\nWe need to know the probability of B, \n\n12\n00:00:40,000 --> 00:00:44,000\nwhich is the probability that some message with some key encrypts to C.\n\n13\n00:00:44,000 --> 00:00:49,000\nLet's compute that first. Then we'll need to compute the probability of A intersect B.\n\n14\n00:00:49,000 --> 00:00:51,000\nWe'll have a little quiz.\n\n15\n00:00:51,000 --> 00:00:56,000\nGiven any message and any cipher text C, and we're using a one-time pad,\n\n16\n00:00:56,000 --> 00:01:03,000\nhow many different keys are there that encrypt that message to that cipher text?\n\n", "id": 15003}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiybQw", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/14002", "type": "Nugget", "id": 14002}, {"nuggetType": "quiz", "name": "Guessing Keys", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBi3bQw", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/14007", "type": "Nugget", "id": 14007}, {"nuggetType": "lecture", "name": "Xor Function Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "afd05182-6aba-4491-a220-b4f1045b35a3", "name": "cs387_unit1_06_s_XOR-Function", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGLFtDA", "youtube_id": "vSxIMRE69yM", "youtube_state": "done", "path": "Course/cs387/Media/14001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nSo the answer is always y, and this is why this is such a useful function\n\n2\n00:00:05,000 --> 00:00:10,000\nin cryptography--if we XOR in the value of x twice, they cancel out.\n\n3\n00:00:10,000 --> 00:00:16,000\nSo the general property for any value x--x XOR x-- is equal to 0.\n\n4\n00:00:16,000 --> 00:00:17,000\nWe can see that from the truth table.\n\n5\n00:00:17,000 --> 00:00:25,000\nThe value of x could either be 0--and 0 XOR 0 is 0--or 1, and the value of 1 XOR 1 is 0,\n\n6\n00:00:25,000 --> 00:00:29,000\nand that means that x XOR x is always 0.\n\n7\n00:00:29,000 --> 00:00:39,000\nXOR is also associative and commutative, so that means if we have x XOR y XOR x \n\n8\n00:00:39,000 --> 00:00:46,000\nthat's equivalent to x XOR x XOR y which is also equivalent to y.\n\n9\n00:00:46,000 --> 00:00:53,000\nAnd I've written this using x's and y's--if we change the names of our letters to M and C\n\n10\n00:00:53,000 --> 00:00:56,000\nit becomes really clear why this is useful in cryptography.\n\n11\n00:00:56,000 --> 00:01:04,000\nIf we call x the key, then we have the key XOR the message--that's going to be the ciphertext--\n\n12\n00:01:04,000 --> 00:01:09,000\nand then the ciphertext XOR the key again gives us back the message.\n\n13\n00:01:09,000 --> 00:01:13,000\nAnd what I've described is exactly the One-Time Pad.\n\n14\n00:01:13,000 --> 00:01:19,000\nThe key aspect is--why it's called One-Time--is that we can only use the key once.\n\n15\n00:01:19,000 --> 00:01:22,000\nSo if we do this one bit at a time, we need a new key for each bit.\n\n16\n00:01:22,000 --> 00:01:27,000\nIf we think of doing it for a longer message, well then we need a key long enough\n\n17\n00:01:27,000 --> 00:01:30,000\nthat we're XORing each bit with one bit of the key.\n\n", "id": 14001}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiZdQw", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/15001", "type": "Nugget", "id": 15001}, {"nuggetType": "lecture", "name": "Probability Review Pt 3 Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "10386ea3-9cc6-4842-936d-56b268752633", "name": "cs387_unit1_11_s_Probability-Review-pt-3", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGMplDA", "youtube_id": "EMgHPZrQEgI", "youtube_state": "done", "path": "Course/cs387/Media/13002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nWe can compute this using the formula for conditional probability.\n\n2\n00:00:04,000 --> 00:00:09,000\nIn this case what A is is the probability the coin toss is valid.\n\n3\n00:00:09,000 --> 00:00:18,000\nA is valid, and we know that the probability of A is equal to 0.99998.\n\n4\n00:00:18,000 --> 00:00:21,000\nWhat B is is the probability that it's heads.\n\n5\n00:00:21,000 --> 00:00:29,000\nSo the probability of B is the probability of H, which is 0.49999.\n\n6\n00:00:29,000 --> 00:00:32,000\nNow we just have to plug these into the formula.\n\n7\n00:00:32,000 --> 00:00:36,000\nBut what we need to use the formula is the probability of A intersect B.\n\n8\n00:00:36,000 --> 00:00:42,000\nAnd what A is the probability of A intersect B. What A is is valid.\n\n9\n00:00:42,000 --> 00:00:46,000\nInstead of heads and tails, what B is is heads.\n\n10\n00:00:46,000 --> 00:00:52,000\nIf we intersect heads and tails with heads, we get tails.\n\n11\n00:00:52,000 --> 00:00:57,000\nWe know the probability of tails is 0.49999.\n\n12\n00:00:57,000 --> 00:01:04,000\nThat means using the formula we have the probability of tails, which is 0.49999,\n\n13\n00:01:04,000 --> 00:01:07,000\nwhich is the probability of A intersect B.\n\n14\n00:01:07,000 --> 00:01:12,000\nWe're dividing that by the probability of A,\n\n15\n00:01:12,000 --> 00:01:18,000\nwhich is a valid event which is 0.99998.\n\n16\n00:01:18,000 --> 00:01:20,000\nWe get 0.5.\n\n17\n00:01:20,000 --> 00:01:23,000\nI should note that this is not the case for real coin tosses.\n\n18\n00:01:23,000 --> 00:01:28,000\nThere is no physical coin ever manufactured that has exactly \n\n19\n00:01:28,000 --> 00:01:30,000\nchances of landing on both sides.\n\n20\n00:01:30,000 --> 00:01:34,000\nIn fact, with real coin tosses, at least with American currency,\n\n21\n00:01:34,000 --> 00:01:39,000\nthere is a much higher percentage--much higher meaning close to 51%\n\n22\n00:01:39,000 --> 00:01:43,000\nrather than 50%--that the coin lands on the same side that it started on.\n\n23\n00:01:43,000 --> 00:01:46,000\nWhen we talk about mathematical coin tosses,\n\n24\n00:01:46,000 --> 00:01:48,000\nwe're going to assume that there is no edge case \n\n25\n00:01:48,000 --> 00:01:50,000\nand that it's equally likely \n\n26\n00:01:50,000 --> 00:01:53,000\nthat we have a uniform distribution and there are only 2 outcomes.\n\n27\n00:01:53,000 --> 00:01:56,000\nWhen we talk about mathematical coin tosses,\n\n28\n00:01:56,000 --> 00:01:58,000\nwe're going to assume that we have a uniform distribution,\n\n29\n00:01:58,000 --> 00:02:01,000\nand there are only two outcomes.\n\n", "id": 13002}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiadQw", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/15002", "type": "Nugget", "id": 15002}, {"nuggetType": "quiz", "name": "Perfect Cipher", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiedQw", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/15006", "type": "Nugget", "id": 15006}, {"nuggetType": "lecture", "name": "One Time Pad", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "38eee5f8-f7c3-4c1a-958a-16a166e2c56a", "name": "cs387_unit1_07_q_One-Time-Pad", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGIF9DA", "youtube_id": "Un8_7eIJcfU", "youtube_state": "done", "path": "Course/cs387/Media/16001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nSo let's define that a little more precisely.\n\n2\n00:00:02,000 --> 00:00:04,000\nSo we're going to find our set of messages--\n\n3\n00:00:04,000 --> 00:00:10,000\nis strings of 0s and 1s--so we'll use bits and some fixed length.\n\n4\n00:00:10,000 --> 00:00:14,000\nSo n is number that gives us the maximum length of a message. \n\n5\n00:00:14,000 --> 00:00:18,000\nOur message is selected from all binary strings of length n.\n\n6\n00:00:18,000 --> 00:00:23,000\nOur key is also selected from the set of all binary strings of length n.\n\n7\n00:00:23,000 --> 00:00:26,000\nAnd then to do encryption--our encryption function--\n\n8\n00:00:26,000 --> 00:00:29,000\nwe're going to think of the message as being this sequence of bits\n\n9\n00:00:29,000 --> 00:00:32,000\nand the key is also a sequence of bits.\n\n10\n00:00:32,000 --> 00:00:35,000\nThe result of our encryption is the ciphertext,\n\n11\n00:00:35,000 --> 00:00:37,000\nwhich is a sequence of bits.\n\n12\n00:00:37,000 --> 00:00:40,000\nSo, length n, where the value of each ciphertext bit\n\n13\n00:00:40,000 --> 00:00:43,000\nis equal to the XOR of the corresponding message bit\n\n14\n00:00:43,000 --> 00:00:45,000\nand the corresponding key bit.\n\n15\n00:00:45,000 --> 00:00:46,000\nSo let's try an example.\n\n16\n00:00:46,000 --> 00:00:50,000\nAnd for this example, I'm going to give you the ciphertext\n\n17\n00:00:50,000 --> 00:00:51,000\n and the key and the message.\n\n18\n00:00:51,000 --> 00:00:54,000\nSo suppose our message is the string 'CS,' \n\n19\n00:00:54,000 --> 00:00:57,000\nbut our message space is in bits.\n\n20\n00:00:57,000 --> 00:01:00,000\nWell, the first thing we need to do is to convert those strings to bits\n\n21\n00:01:00,000 --> 00:01:03,000\nand we can do that in Python by using ord,\n\n22\n00:01:03,000 --> 00:01:06,000\nthat takes a one character string and turns it into \n\n23\n00:01:06,000 --> 00:01:07,000\na decimal number.\n\n24\n00:01:07,000 --> 00:01:11,000\nAnd then we need to convert that decimal number into bits.\n\n25\n00:01:11,000 --> 00:01:13,000\nInto a binary number.\n\n26\n00:01:13,000 --> 00:01:16,000\nAnd we need to do this for each character in the string.\n\n27\n00:01:16,000 --> 00:01:19,000\nWe're going to convert it to a character, convert that to bits,\n\n28\n00:01:19,000 --> 00:01:22,000\nand I'll show you the code for doing that,\n\n29\n00:01:22,000 --> 00:01:25,000\nwe'll leave the more interesting code for you to write.\n\n30\n00:01:25,000 --> 00:01:27,000\nHere we're converting to bits.\n\n31\n00:01:27,000 --> 00:01:32,000\nThis is a fairly straightforward, but not the shortest way to do this.\n\n32\n00:01:32,000 --> 00:01:36,000\nWe're going to make an array of bits as our result for any decimal number \n\n33\n00:01:36,000 --> 00:01:42,000\nif it's divisible by 2, we want to have a 0 at the beginning of a result.\n\n34\n00:01:42,000 --> 00:01:44,000\nIf it's not divisible by 2, that's going to be a 1.\n\n35\n00:01:44,000 --> 00:01:48,000\nAnd then we divide the number by 2 as we go forward.\n\n36\n00:01:48,000 --> 00:01:49,000\nSo that's going to fill up all the places.\n\n37\n00:01:49,000 --> 00:01:53,000\nWe want our bits to be particular lengths,\n\n38\n00:01:53,000 --> 00:01:54,000\nso we have a padding,\n\n39\n00:01:54,000 --> 00:01:57,000\nand for all the characters, we'll use 7 bits.\n\n40\n00:01:57,000 --> 00:02:00,000\nSo we're going to pad the result with leading zeros\n\n41\n00:02:00,000 --> 00:02:02,000\nuntil we get to that size.\n\n42\n00:02:02,000 --> 00:02:06,000\nWe can see this--so if we do ord we see that\n\n43\n00:02:06,000 --> 00:02:09,000\nthe number corresponding to the letter C is 67.\n\n44\n00:02:09,000 --> 00:02:13,000\nIf we convert that to bits--and we'll use 7 as our padding--\n\n45\n00:02:13,000 --> 00:02:16,000\nthat gives us enough for 128 different values\n\n46\n00:02:16,000 --> 00:02:19,000\nwhich is enough for the ASCII character values\n\n47\n00:02:19,000 --> 00:02:20,000\nthat we get back from ord.\n\n48\n00:02:20,000 --> 00:02:23,000\nWe can see those bits as a list,\n\n49\n00:02:23,000 --> 00:02:26,000\nand we can see that a little more easily as a string\n\n50\n00:02:26,000 --> 00:02:31,000\nusing the display bits procedure that just turned that into a string.\n\n51\n00:02:31,000 --> 00:02:33,000\nSo now we want to convert more than one character.\n\n52\n00:02:33,000 --> 00:02:36,000\nTo do that, we have a string to bits procedure\n\n53\n00:02:36,000 --> 00:02:39,000\nthat goes through all the characters in the string,\n\n54\n00:02:39,000 --> 00:02:42,000\nconverting each one to bits using convert to bits,\n\n55\n00:02:42,000 --> 00:02:44,000\nand concatenating those all together to the result.\n\n56\n00:02:44,000 --> 00:02:47,000\nSo now we can do string to bits.\n\n57\n00:02:47,000 --> 00:02:50,000\nFor our two-letter string, and now we get 14 bits as a result.\n\n58\n00:02:50,000 --> 00:02:54,000\nSo if that's our message, then the value of M is what we got there.\n\n59\n00:02:54,000 --> 00:02:56,000\nSo this is our message.\n\n60\n00:02:56,000 --> 00:02:59,000\nThere are 14 bits, n is 14.\n\n61\n00:02:59,000 --> 00:03:01,000\nThat means--to encrypt this using a One-Time Pad, \n\n62\n00:03:01,000 --> 00:03:05,000\nwe need a key that also has 14 bits.\n\n63\n00:03:05,000 --> 00:03:07,000\nSo let's pick our key,\n\n64\n00:03:07,000 --> 00:03:10,000\nand--we're just going to make up a random key now. \n\n65\n00:03:10,000 --> 00:03:14,000\nActually finding random values is very important in cryptography,\n\n66\n00:03:14,000 --> 00:03:16,000\nand we'll talk about that in a later unit, \n\n67\n00:03:16,000 --> 00:03:18,000\nbut for now let's just make one up.\n\n68\n00:03:18,000 --> 00:03:19,000\nSo suppose this is our key.\n\n69\n00:03:19,000 --> 00:03:21,000\nThen the ciphertext is just the result of XOR \n\n70\n00:03:21,000 --> 00:03:25,000\nin each message bit with the corresponding key bit. \n\n71\n00:03:25,000 --> 00:03:26,000\nSo that's our ciphertext.\n\n72\n00:03:26,000 --> 00:03:29,000\nSo the question is, as an interceptor,\n\n73\n00:03:29,000 --> 00:03:31,000\nyou saw just this ciphertext, you don't know anything\n\n74\n00:03:31,000 --> 00:03:34,000\n about the message or the key, and you're going to guess \n\n75\n00:03:34,000 --> 00:03:36,000\npossible key values to try to figure out what the message is.\n\n76\n00:03:36,000 --> 00:03:38,000\nAnd what key value would you guess\n\n77\n00:03:38,000 --> 00:03:41,000\nthat would mislead you to think that the message \n\n78\n00:03:41,000 --> 00:03:44,000\nwas actually BS instead of CS?\n\n", "id": 16001}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiCfQw", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/16002", "type": "Nugget", "id": 16002}, {"nuggetType": "lecture", "name": "Perfect Cipher", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "b0804a01-d9fa-42ed-af54-987c2aff598e", "name": "cs387_unit1_12_q_Perfect-Cipher", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGKOcAQw", "youtube_id": "RudcDrmP-n4", "youtube_state": "done", "path": "Course/cs387/Media/20003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nNow we're ready to define what a perfect cipher is\n\n2\n00:00:03,000 --> 00:00:06,000\nand to see why the one-time pad satisfies this property.\n\n3\n00:00:06,000 --> 00:00:09,000\nThe notion that we want a perfect cipher to mean\n\n4\n00:00:09,000 --> 00:00:13,000\nis that if an attacker intercepts a message they receive the cipher text\n\n5\n00:00:13,000 --> 00:00:18,000\nthat provides them with no additional information at all about what the plain text was.\n\n6\n00:00:18,000 --> 00:00:21,000\nWe have a message. It's being encrypted with a key.\n\n7\n00:00:21,000 --> 00:00:25,000\nThe attacker is intercepting that cipher text as it's sent over the insecure channel.\n\n8\n00:00:25,000 --> 00:00:29,000\nWhat we want to know is that an attacker who sees just the cipher text \n\n9\n00:00:29,000 --> 00:00:31,000\nlearns nothing about the message.\n\n10\n00:00:31,000 --> 00:00:34,000\nIf you followed the definition of conditional probability,\n\n11\n00:00:34,000 --> 00:00:36,000\nyou should be able to decide how to define that formally.\n\n12\n00:00:36,000 --> 00:00:38,000\nWe'll make that a quiz.\n\n13\n00:00:38,000 --> 00:00:42,000\nThe question is which of these is the property that we want in order for a cipher to be perfect?\n\n14\n00:00:42,000 --> 00:00:48,000\nThat is, to have this property that the cipher text reveals no information about the plain text.\n\n15\n00:00:48,000 --> 00:00:50,000\nI'm going to introduce some notation.\n\n16\n00:00:50,000 --> 00:00:53,000\nOur message is selected from the set of all possible messages.\n\n17\n00:00:53,000 --> 00:00:57,000\nWe have some other message we'll call m*, also selected from M.\n\n18\n00:00:57,000 --> 00:00:59,000\nWe don't know if M is equal to m*.\n\n19\n00:00:59,000 --> 00:01:03,000\nBoth of these we could think of being drawn from the set of messages.\n\n20\n00:01:03,000 --> 00:01:06,000\nWe have some key drawn from the set of possible keys.\n\n21\n00:01:06,000 --> 00:01:12,000\nFor this quiz your goal is to understand how we can formally define what a perfect cipher is.\n\n22\n00:01:12,000 --> 00:01:15,000\nThis is the scenario: we have an attacker whose heard of cipher text.\n\n23\n00:01:15,000 --> 00:01:19,000\nWe want to know that by hearing just the cipher text the attacker has learned\n\n24\n00:01:19,000 --> 00:01:21,000\nnothing new about the message.\n\n25\n00:01:21,000 --> 00:01:23,000\nWe've introduced some notation here.\n\n26\n00:01:23,000 --> 00:01:26,000\nWe have a set of possible messages--the uppercase M.\n\n27\n00:01:26,000 --> 00:01:31,000\nWe can select lowercase message m*. Those are both messages selected from M.\n\n28\n00:01:31,000 --> 00:01:37,000\nThe attacker's goal would be to tell is the intercepted cipher text the same as message m*.\n\n29\n00:01:37,000 --> 00:01:40,000\nThat's the attacker's guess.\n\n30\n00:01:40,000 --> 00:01:44,000\nWe have encryption using some key selected from the set of all possible keys.\n\n31\n00:01:44,000 --> 00:01:48,000\nWe don't know what the key is. Here are the possible choices.\n\n", "id": 20003}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjrhAEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/17003", "type": "Nugget", "id": 17003}, {"nuggetType": "lecture", "name": "Lorenz Cipher Machine Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "e58752cd-1b7c-47b3-bcf0-40170eb881ee", "name": "cs387_unit1_19_s_Lorenz-Cipher-Machine", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGLuUAQw", "youtube_id": "yuEgSHBOAEk", "youtube_state": "done", "path": "Course/cs387/Media/19003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nThe answer is actually both the first and the third \n\n2\n00:00:04,000 --> 00:00:08,000\nare likely to be significantly greater than 1/2. The second is not.\n\n3\n00:00:08,000 --> 00:00:12,000\nAssuming the keys have as many 0s and 1s \n\n4\n00:00:12,000 --> 00:00:15,000\nas the good key rotor should be designed to have,\n\n5\n00:00:15,000 --> 00:00:17,000\nthis is likely to be equal to 1/2.\n\n6\n00:00:17,000 --> 00:00:20,000\nThere is no reason to expect it to be greater\n\n7\n00:00:20,000 --> 00:00:23,000\n than 1/2 any more likely than it'd be less than 1/2.\n\n8\n00:00:23,000 --> 00:00:26,000\nWe're XORing two consecutive key bits.\n\n9\n00:00:26,000 --> 00:00:29,000\nThe other two are different from 1/2.\n\n10\n00:00:29,000 --> 00:00:33,000\nThis is what gives us the opportunity and what gave Bletchley Park the insight\n\n11\n00:00:33,000 --> 00:00:35,000\nneeded to break the cipher.\n\n12\n00:00:35,000 --> 00:00:38,000\nFor the third one, this followed from the structure of the machine.\n\n13\n00:00:38,000 --> 00:00:43,000\nWhen the S wheels advance this probability is about 1/2,\n\n14\n00:00:43,000 --> 00:00:46,000\nbut when they don't advance \u0394S is always 0.\n\n15\n00:00:46,000 --> 00:00:51,000\nThis means the probability that \u0394S is 0 is significantly greater than 1/2.\n\n16\n00:00:51,000 --> 00:00:57,000\nIt turns out for the structure of the Lorenz machine it's about 0.73.\n\n17\n00:00:57,000 --> 00:01:00,000\nTo know that you'd have to look in more detail at the structure of the M wheels\n\n18\n00:01:00,000 --> 00:01:03,000\nto know how frequently the S wheels advance.\n\n19\n00:01:03,000 --> 00:01:06,000\nWhen they don't advance we know the result is 0.\n\n20\n00:01:06,000 --> 00:01:09,000\nWhen they do advance about half the time the result will be 0.\n\n21\n00:01:09,000 --> 00:01:15,000\nGetting the first one right required a little more linguistic insight.\n\n22\n00:01:15,000 --> 00:01:22,000\nThe reason this is greater than 1/2 depends on subsequent message letters.\n\n23\n00:01:22,000 --> 00:01:25,000\nIf adjacent letters in the message are the same,\n\n24\n00:01:25,000 --> 00:01:28,000\nthat ensures that \u0394M is equal to 0.\n\n25\n00:01:28,000 --> 00:01:32,000\nIt turns out that this is a property that many languages have.\n\n26\n00:01:32,000 --> 00:01:34,000\nYou can see that English has it.\n\n27\n00:01:34,000 --> 00:01:39,000\nWe have repeated letters here. We also have some repeated letters in \"wheels.\"\n\n28\n00:01:39,000 --> 00:01:44,000\nIt's more like that you would expect by just the normal letter distribution \n\n29\n00:01:44,000 --> 00:01:47,000\nfor subsequent letters to be identical.\n\n30\n00:01:47,000 --> 00:01:53,000\nIt turns out that this is a property of German that about 3.3% of digraphs,\n\n31\n00:01:53,000 --> 00:01:57,000\nmeaning two adjacent letters are the same letter.\n\n32\n00:01:57,000 --> 00:02:00,000\nThat means the probability that the messages are equal--\n\n33\n00:02:00,000 --> 00:02:03,000\nwell, they could be equal for lots of other reasons,\n\n34\n00:02:03,000 --> 00:02:10,000\nbut this bias is towards being more likely to be zero than non-zero.\n\n35\n00:02:10,000 --> 00:02:16,000\nIt turns out that that's 0.61 probability for German.\n\n36\n00:02:16,000 --> 00:02:21,000\nBoth of these are numbers that you didn't have enough information to guess on your own.\n\n37\n00:02:21,000 --> 00:02:24,000\nYou would need to have a analysis of German text to know \n\n38\n00:02:24,000 --> 00:02:26,000\nthat this is the probability here,\n\n39\n00:02:26,000 --> 00:02:30,000\nand you would need a lot more details on the M wheels to be able to get that.\n\n40\n00:02:30,000 --> 00:02:33,000\nDon't feel bad if you didn't get this quiz correct,\n\n41\n00:02:33,000 --> 00:02:35,000\nalthough the structure of the machine should have been enough to guess\n\n42\n00:02:35,000 --> 00:02:37,000\nthat this is greater than 1/2,\n\n43\n00:02:37,000 --> 00:02:40,000\nand if you're familiar with German \n\n44\n00:02:40,000 --> 00:02:43,000\nor could guess that it has properties similar to English, \n\n45\n00:02:43,000 --> 00:02:46,000\nyou might have been able to get this one as well.\n\n", "id": 19003}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjuhAEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/17006", "type": "Nugget", "id": 17006}, {"nuggetType": "quiz", "name": "One Time Pad", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjxhAEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/17009", "type": "Nugget", "id": 17009}, {"nuggetType": "quiz", "name": "Probability Review Pt 1", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjyhAEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/17010", "type": "Nugget", "id": 17010}, {"nuggetType": "lecture", "name": "One Time Pad Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "b3af016f-c8f7-4cb6-b62e-2e14f2742daf", "name": "cs387_unit1_07_s_One-Time-Pad", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGOmEAQw", "youtube_id": "Pkii04ADmpk", "youtube_state": "done", "path": "Course/cs387/Media/17001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:01,000\nSo the key point to notice here--\n\n2\n00:00:01,000 --> 00:00:05,000\nand this is why the One-Time Pad provides perfect secrecy--\n\n3\n00:00:05,000 --> 00:00:09,000\nis that for any given ciphertext we can produce any message we want \n\n4\n00:00:09,000 --> 00:00:10,000\nby picking different keys.\n\n5\n00:00:10,000 --> 00:00:12,000\nThat means that if we just have the ciphertext, \n\n6\n00:00:12,000 --> 00:00:15,000\nwe haven't learned anything at all about the message.\n\n7\n00:00:15,000 --> 00:00:17,000\nThe way to produce the message 'BS' from this ciphertext--\n\n8\n00:00:17,000 --> 00:00:23,000\nwell, we just need to change this first letter to be one below \n\n9\n00:00:23,000 --> 00:00:24,000\nwhere C was.\n\n10\n00:00:24,000 --> 00:00:27,000\nSo that means we want to change this bit \n\n11\n00:00:27,000 --> 00:00:30,000\nto be a 0 instead of a 1 in the output.\n\n12\n00:00:30,000 --> 00:00:33,000\nThat means we need to flip one bit in the key.\n\n13\n00:00:33,000 --> 00:00:34,000\nSo we'll need to change this key bit\n\n14\n00:00:34,000 --> 00:00:37,000\nto be a 1 instead of a 0.\n\n15\n00:00:37,000 --> 00:00:39,000\nEverything else will be the same.\n\n16\n00:00:39,000 --> 00:00:41,000\nThis will change the output letter by one.\n\n17\n00:00:41,000 --> 00:00:44,000\nSo if you guessed this key instead of the correct key,\n\n18\n00:00:44,000 --> 00:00:46,000\nwe get what looks like a fairly reasonable message out\n\n19\n00:00:46,000 --> 00:00:49,000\nbut it would be one off from the one that was there.\n\n20\n00:00:49,000 --> 00:00:52,000\nAnd--in fact, we could get any possible message we want\n\n21\n00:00:52,000 --> 00:00:53,000\nby guessing different keys.\n\n22\n00:00:53,000 --> 00:00:55,000\nSo this is what's called a One-Time Pad,\n\n23\n00:00:55,000 --> 00:01:00,000\nand that notion of a One-Time Pad goes back until at least 1882.\n\n24\n00:01:00,000 --> 00:01:05,000\nIt was discovered quite recently that it was known about this early.\n\n25\n00:01:05,000 --> 00:01:08,000\nThere were One-Time Pads used in World War I,\n\n26\n00:01:08,000 --> 00:01:13,000\nand used in many other contexts since then.\n\n27\n00:01:13,000 --> 00:01:16,000\nThe notion of the One-Time Pad being known this early\n\n28\n00:01:16,000 --> 00:01:19,000\n was only discovered last year by Steven Bellovin.\n\n29\n00:01:19,000 --> 00:01:21,000\nWhat made a One-Time Pad really interesting was the analysis\n\n30\n00:01:21,000 --> 00:01:24,000\nthat Claude Shannon did.\n\n31\n00:01:24,000 --> 00:01:27,000\nClaude Shannon was the father of information theory.\n\n32\n00:01:27,000 --> 00:01:30,000\nHe did some of the first theoretical work in cryptography.\n\n33\n00:01:30,000 --> 00:01:33,000\nDuring World War II, he studied communication,\n\n34\n00:01:33,000 --> 00:01:36,000\nand he also studied theory of secret systems,\n\n35\n00:01:36,000 --> 00:01:38,000\nand he wrote this paper, which was the first paper\n\n36\n00:01:38,000 --> 00:01:41,000\nthat really understood in a theoretical way\n\n37\n00:01:41,000 --> 00:01:43,000\nwhat it means for a cipher to be good,\n\n38\n00:01:43,000 --> 00:01:46,000\nand this paper was written during World War II.\n\n39\n00:01:46,000 --> 00:01:49,000\nIt was classified and released in 1949.\n\n40\n00:01:49,000 --> 00:01:50,000\nSo what we're going to look at next is\n\n41\n00:01:50,000 --> 00:01:53,000\nhow you formally reason about a cipher being secure\n\n42\n00:01:53,000 --> 00:01:57,000\nand why the One-Time Pad has all the security properties\n\n43\n00:01:57,000 --> 00:02:00,000\nthat make it a perfect cipher.\n\n", "id": 17001}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjRjAEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/18001", "type": "Nugget", "id": 18001}, {"nuggetType": "lecture", "name": "Otp Is A Perfect Cipher Pt 1 Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "e1d53817-2f08-4fcb-b458-4e71c8cc9666", "name": "cs387_unit1_13_s_OTP-is-a-Perfect-Cipher-pt-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGKWcAQw", "youtube_id": "J4NrIrBsvts", "youtube_state": "done", "path": "Course/cs387/Media/20005", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nThe answer is there is always exactly 1.\n\n2\n00:00:03,000 --> 00:00:08,000\nFor any message ciphertext pair, there is one key that maps that message to that ciphertext.\n\n3\n00:00:08,000 --> 00:00:11,000\nWe can see that thinking about the nature of the one-time pad.\n\n4\n00:00:11,000 --> 00:00:13,000\nSuppose we just have 1-bit messages.\n\n5\n00:00:13,000 --> 00:00:16,000\nWe have messages 0 and 1.\n\n6\n00:00:16,000 --> 00:00:20,000\nThen the key 0 will map 0 to 0.\n\n7\n00:00:20,000 --> 00:00:25,000\nThe key 1 will map 1 to 0. The key 0 will map 1 to 1.\n\n8\n00:00:25,000 --> 00:00:28,000\nThis works for any length message and any length key.\n\n9\n00:00:28,000 --> 00:00:31,000\nNote that the length of the key and the length of the message scale the same way.\n\n10\n00:00:31,000 --> 00:00:36,000\nIf we had 2-bit messages there would be four different keys\n\n11\n00:00:36,000 --> 00:00:39,000\nthat would map each message to each different ciphertext.\n\n12\n00:00:39,000 --> 00:00:42,000\nIf we had 2-bit messages, there would also be one key\n\n13\n00:00:42,000 --> 00:00:45,000\nthat maps each message to each different ciphertext.\n\n14\n00:00:45,000 --> 00:00:50,000\nFor example, the key that maps 00 to 10 would be the key 11.\n\n15\n00:00:50,000 --> 00:00:53,000\nThat means we can compute this probability,\n\n16\n00:00:53,000 --> 00:00:56,000\nsumming over all the messages summing over all the keys\n\n17\n00:00:56,000 --> 00:01:03,000\nwhere we've got the probability that that key encrypts that message to the given ciphertext.\n\n18\n00:01:03,000 --> 00:01:08,000\nWe need to divide this by the space, which is the size of the messages \n\n19\n00:01:08,000 --> 00:01:10,000\ntimes the size of the keys.\n\n20\n00:01:10,000 --> 00:01:12,000\nNow whats the value of the summation?\n\n21\n00:01:12,000 --> 00:01:17,000\nWe know for a given message there is exactly one key that maps it to that ciphertext.\n\n22\n00:01:17,000 --> 00:01:20,000\nThis is one, and we're summing over all the messages,\n\n23\n00:01:20,000 --> 00:01:23,000\nsumming the value of 1.\n\n24\n00:01:23,000 --> 00:01:27,000\nThat means we're going to get the number of messages divided by\n\n25\n00:01:27,000 --> 00:01:29,000\nthe number of messages times the number of keys.\n\n26\n00:01:29,000 --> 00:01:32,000\nThat's equal to 1 over the number of keys.\n\n27\n00:01:32,000 --> 00:01:36,000\nThat's the probability of event B, which is probability \n\n28\n00:01:36,000 --> 00:01:39,000\nthat some message encrypts to some key.\n\n29\n00:01:39,000 --> 00:01:42,000\nNotice this is computed over all the messages. \n\n30\n00:01:42,000 --> 00:01:45,000\nThat's over the distribution.\n\n", "id": 20005}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjSjAEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/18002", "type": "Nugget", "id": 18002}, {"nuggetType": "lecture", "name": "Otp Is A Perfect Cipher Pt 2", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "8f1c9dbf-93a1-421c-a0a7-504f2e72e42d", "name": "cs387_unit1_14_q_OTP-is-a-Perfect-Cipher-pt-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGNOMAQw", "youtube_id": "JAhp9-DFmdo", "youtube_state": "done", "path": "Course/cs387/Media/18003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nBut what we need to do now is consider this particular message M*.\n\n2\n00:00:04,000 --> 00:00:09,000\nWe want to compute the probability of the intersection of those events,\n\n3\n00:00:09,000 --> 00:00:14,000\nthat the selected message is M* and the message encrypts to C.\n\n4\n00:00:14,000 --> 00:00:18,000\nI'm going to make that a quiz and see if you can figure out what that is yourself.\n\n5\n00:00:18,000 --> 00:00:20,000\nHere are your choices.\n\n6\n00:00:20,000 --> 00:00:23,000\nSee if you can figure out what the probability of M equals M* \n\n7\n00:00:23,000 --> 00:00:26,000\nintersected with the encryption of M equals C.\n\n", "id": 18003}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjUjAEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/18004", "type": "Nugget", "id": 18004}, {"nuggetType": "lecture", "name": "Intercepting Messages", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "290c9540-dc35-48e4-abf7-91cb14040619", "name": "cs387_unit1_18_q_Intercepting-messages", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGKicAQw", "youtube_id": "t0qUn0snPH0", "youtube_state": "done", "path": "Course/cs387/Media/20008", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nThese links started to be used in May 1941.\n\n2\n00:00:04,000 --> 00:00:08,000\nIn August 1941, the Allies had a big break.\n\n3\n00:00:08,000 --> 00:00:14,000\nAn operating was sending a message starting with the initial configuration.\n\n4\n00:00:14,000 --> 00:00:16,000\nThese configurations came from code books.  \n\n5\n00:00:16,000 --> 00:00:21,000\nThe recipients at the other end needed to know that the configuration for that day was.\n\n6\n00:00:21,000 --> 00:00:24,000\nBut these could be distributed securely and \n\n7\n00:00:24,000 --> 00:00:27,000\nwere much smaller than needing to distribute the key sequence.\n\n8\n00:00:27,000 --> 00:00:30,000\nOnce you had the starting configuration, you could transmit\n\n9\n00:00:30,000 --> 00:00:33,000\nan arbitrarily large message if this assumption that the key was \n\n10\n00:00:33,000 --> 00:00:36,000\ncompletely unpredictable was true.\n\n11\n00:00:36,000 --> 00:00:39,000\nIn this case the operator sent the message.\n\n12\n00:00:39,000 --> 00:00:41,000\nThe receiver did not receive it.\n\n13\n00:00:41,000 --> 00:00:45,000\nThe receiver said, \"Garbled transmission, please resend.\"\n\n14\n00:00:45,000 --> 00:00:51,000\nSo the annoyed operator had to send the message again for the insecure channel,\n\n15\n00:00:51,000 --> 00:00:53,000\nand this time it was received okay.\n\n16\n00:00:53,000 --> 00:00:56,000\nIf this is exactly what happened, it would have been fine.\n\n17\n00:00:56,000 --> 00:00:58,000\nThese would be exactly the same.\n\n18\n00:00:58,000 --> 00:01:01,000\nWe restarted the machine in the same configuration.\n\n19\n00:01:01,000 --> 00:01:03,000\nBut what happened was a little different.\n\n20\n00:01:03,000 --> 00:01:05,000\nThe operator got a little lazy the second time.\n\n21\n00:01:05,000 --> 00:01:08,000\nThe operator was annoyed having to retransmit the message,\n\n22\n00:01:08,000 --> 00:01:12,000\nso instead of sending exactly the same message sent a slightly different message.\n\n23\n00:01:12,000 --> 00:01:18,000\nThat meant that there was a slightly different ciphertext than we had the previous time.\n\n24\n00:01:18,000 --> 00:01:24,000\nBoth of these messages were intercepted.\n\n25\n00:01:24,000 --> 00:01:30,000\nThat means the Allies now had access to both C and C'.\n\n26\n00:01:30,000 --> 00:01:32,000\nThey didn't know anything about the key.\n\n27\n00:01:32,000 --> 00:01:34,000\nThey didn't know anything about the original messages.\n\n28\n00:01:34,000 --> 00:01:37,000\nWell, maybe they knew a little bit about the original message.\n\n29\n00:01:37,000 --> 00:01:42,000\nThat's what's going to help them given these two ciphertexts to figure out both the key,\n\n30\n00:01:42,000 --> 00:01:45,000\nand, once they have the key, the structure of the Lorenz.\n\n31\n00:01:45,000 --> 00:01:51,000\nWhat is the result of XORing these two messages?\n\n32\n00:01:51,000 --> 00:01:58,000\nThat means for each bit, we go through the bits to the messages XORing each bit.\n\n33\n00:01:58,000 --> 00:02:02,000\nI want to introduce a new variable here.\n\n34\n00:02:02,000 --> 00:02:07,000\nThe key that the machine generates we'll call K.\n\n35\n00:02:07,000 --> 00:02:12,000\nThat's the key that the machine generates starting from configuration C0.\n\n36\n00:02:12,000 --> 00:02:17,000\nWhich one of these is the value that the interceptor would get \n\n37\n00:02:17,000 --> 00:02:21,000\nby XORing the two intercepted ciphertexts.\n\n", "id": 20008}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjVjAEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/18005", "type": "Nugget", "id": 18005}, {"nuggetType": "quiz", "name": "Proving Security", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjWjAEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/18006", "type": "Nugget", "id": 18006}, {"nuggetType": "quiz", "name": "Probability Review Pt 3", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjAlAEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/19008", "type": "Nugget", "id": 19008}, {"nuggetType": "lecture", "name": "Proving Security", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "c546a66f-ccf4-48ff-97e7-3c5d2c45f05d", "name": "cs387_unit1_08_q_Proving-Security", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGLmUAQw", "youtube_id": "9lF6-8xd6xc", "youtube_state": "done", "path": "Course/cs387/Media/19001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nWe saw earlier how we could prove correctness, and correctness is easy to show.\n\n2\n00:00:04,000 --> 00:00:06,000\nProving security is really hard.\n\n3\n00:00:06,000 --> 00:00:09,000\nThis property of the one-time pad that we can change the key and that leads\n\n4\n00:00:09,000 --> 00:00:15,000\nto a different message, is the reason why it is secure.\n\n5\n00:00:15,000 --> 00:00:18,000\nBut first I want to talk about how to prove security in general.\n\n6\n00:00:18,000 --> 00:00:21,000\nThen we'll come back to the problem of how do we prove that the one-time pad\n\n7\n00:00:21,000 --> 00:00:24,000\nis actually a perfect cipher.\n\n8\n00:00:24,000 --> 00:00:27,000\nHow can we argue that a cipher is secure?\n\n9\n00:00:27,000 --> 00:00:29,000\nThis is a really hard problem.\n\n10\n00:00:29,000 --> 00:00:33,000\nI'm going to start with a quiz, and it will definitely require some guesswork.\n\n11\n00:00:33,000 --> 00:00:35,000\nSee if you think it through before I explain the answer.\n\n12\n00:00:35,000 --> 00:00:38,000\nI'm going to give you give possible ways someone might argue \n\n13\n00:00:38,000 --> 00:00:40,000\nthat a cipher is secure.\n\n14\n00:00:40,000 --> 00:00:43,000\nFor this quiz, your goal is to order the arguments below\n\n15\n00:00:43,000 --> 00:00:47,000\nby how effective they are in convincing someone that a cipher is secure.\n\n16\n00:00:47,000 --> 00:00:52,000\nUse 1 to indicate the best argument and 4 to indicate the worst argument.\n\n17\n00:00:52,000 --> 00:00:55,000\nThe choices are many very smart people were highly-motivated to break\n\n18\n00:00:55,000 --> 00:00:57,000\nthe cipher but were not able to.\n\n19\n00:00:57,000 --> 00:00:59,000\nThat means it must be secure.\n\n20\n00:00:59,000 --> 00:01:03,000\nThe second choice is there are 834 quadrillion possible keys, so it must be secure.\n\n21\n00:01:03,000 --> 00:01:06,000\nThe third choice here is a mathematical proof that's been accepted by experts\n\n22\n00:01:06,000 --> 00:01:08,000\nthat shows the cipher is secure.\n\n23\n00:01:08,000 --> 00:01:11,000\nThe forth choice is here is a strong argument why breaking the cipher\n\n24\n00:01:11,000 --> 00:01:15,000\nis at least as hard as some problem we already believe is hard.\n\n25\n00:01:15,000 --> 00:01:18,000\nThis is a bit of a unfair question, since we haven't talked about this yet.\n\n26\n00:01:18,000 --> 00:01:22,000\nI think it's useful for you to think about it on your own before I talk about it.\n\n27\n00:01:22,000 --> 00:01:27,000\nSee if you can figure out which of these arguments are most effective.\n\n", "id": 19001}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBihnAEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/20001", "type": "Nugget", "id": 20001}, {"nuggetType": "lecture", "name": "Probability Review Pt 2", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "d8542b9f-c6c1-4fc0-94a8-cb7e5108e9eb", "name": "cs387_unit1_10_q_Probability-Review-pt-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGMG7AQw", "youtube_id": "DR6Re8wU6Y8", "youtube_state": "done", "path": "Course/cs387/Media/24001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\n The next term I want to define is an event.\n\n2\n00:00:02,000 --> 00:00:07,000\nYou might think of landing on the edge or landing on tails being an event.\n\n3\n00:00:07,000 --> 00:00:13,000\nWe can define an event a bit more broadly that it's a subset of outcomes from the distribution.\n\n4\n00:00:13,000 --> 00:00:18,000\nSo an example of an event would be landing on heads,\n\n5\n00:00:18,000 --> 00:00:21,000\nand landing on heads as an event is just a set of the outcome {H}.\n\n6\n00:00:21,000 --> 00:00:25,000\nWe could define then valid for a valid coin toss, \n\n7\n00:00:25,000 --> 00:00:29,000\nand that's the set of outcomes {H, T}.\n\n8\n00:00:29,000 --> 00:00:34,000\nThe probability of an event is just the sum of the probabilities of all of the outcomes\n\n9\n00:00:34,000 --> 00:00:35,000\nin that subset.\n\n10\n00:00:35,000 --> 00:00:39,000\nSo the probabililty of an event A is the sum of all the outcomes in A\n\n11\n00:00:39,000 --> 00:00:41,000\nof the probability of that outcome.\n\n12\n00:00:41,000 --> 00:00:45,000\nSo that should be enough to figure out, what is the probability of a valid toss?\n\n13\n00:00:45,000 --> 00:00:54,000\nI'll remind you that we defined the probability of heads as 0.49999,\n\n14\n00:00:54,000 --> 00:01:01,000\nand the probability of tails as 0.49999.\n\n15\n00:01:01,000 --> 00:01:04,000\nSo what's the probability of a valid coin toss?\n\n", "id": 24001}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiinAEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/20002", "type": "Nugget", "id": 20002}, {"nuggetType": "lecture", "name": "Perfect Cipher Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "0c7f4750-9fba-47cd-95c3-0cbb123be14e", "name": "cs387_unit1_12_s_Perfect-Cipher", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGOyEAQw", "youtube_id": "99oqQOMKBJw", "youtube_state": "done", "path": "Course/cs387/Media/17004", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nThe answer is the second one.\n\n2\n00:00:02,000 --> 00:00:04,000\nHere we're using conditional probability.\n\n3\n00:00:04,000 --> 00:00:07,000\nThe event that we saw was the cipher text.\n\n4\n00:00:07,000 --> 00:00:09,000\nThat's the encryption of m.\n\n5\n00:00:09,000 --> 00:00:13,000\nWhat we want to know whether the message is equal to m*.\n\n6\n00:00:13,000 --> 00:00:17,000\nBoth of those are drawn from the set of all possible messages.\n\n7\n00:00:17,000 --> 00:00:24,000\nIn order for the attacker to know nothing is the same as the probability that the message is m*\n\n8\n00:00:24,000 --> 00:00:26,000\nwithout knowing the cipher text.\n\n9\n00:00:26,000 --> 00:00:31,000\nThe first answer would be correct if, a priori, the attacker knew nothing about the messages.\n\n10\n00:00:31,000 --> 00:00:34,000\nAll the attacker knows is each message is equally likely.\n\n11\n00:00:34,000 --> 00:00:37,000\nIn that case, the probability that the message is m* \n\n12\n00:00:37,000 --> 00:00:41,000\nwould be 1 over the number of possible messages not depending on the cipher text.\n\n13\n00:00:41,000 --> 00:00:43,000\nThe problem is the attacker might know something more. \n\n14\n00:00:43,000 --> 00:00:46,000\nThey might know that some messages are more likely than others.\n\n15\n00:00:46,000 --> 00:00:48,000\nIn most realistic scenarios this is the case.\n\n16\n00:00:48,000 --> 00:00:52,000\nThe attacker knows that the message is likely to be a valid sentence in English.\n\n17\n00:00:52,000 --> 00:00:59,000\nVery few possible bit sequences correspond to that, so all messages are not equally likely.\n\n18\n00:00:59,000 --> 00:01:02,000\nThat's why choice 1 is not the definition we want.\n\n19\n00:01:02,000 --> 00:01:06,000\nWe want choice 2 where whatever the attacker already knew about \n\n20\n00:01:06,000 --> 00:01:13,000\nthe probability of the message as m* is not affected in any way by seeing the cipher text.\n\n21\n00:01:13,000 --> 00:01:16,000\nThat's our definition of a perfect cipher.\n\n22\n00:01:16,000 --> 00:01:20,000\nNow the question is can we prove that the one-time pad has this property.\n\n", "id": 17004}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiknAEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/20004", "type": "Nugget", "id": 20004}, {"nuggetType": "lecture", "name": "Otp Is A Perfect Cipher Pt 3", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "88ce7eb0-5303-4d63-901d-6724000ccef0", "name": "cs387_unit1_15_l_OTP-is-a-Perfect-Cipher-pt-3", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGNqzAQw", "youtube_id": "r_yVNQUqbBQ", "youtube_state": "done", "path": "Course/cs387/Media/23002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nWe showed earlier that this was 1/K--1 over the size of K.\n\n2\n00:00:05,000 --> 00:00:13,000\nNow we've shown that the probability of M equals M* is equal to the probability \n\n3\n00:00:13,000 --> 00:00:20,000\nthe message is M* divided by the K.\n\n4\n00:00:20,000 --> 00:00:22,000\nWe've shown these two things. \n\n5\n00:00:22,000 --> 00:00:25,000\nNow we just need to plug them into our conditional probability formula.\n\n6\n00:00:25,000 --> 00:00:29,000\nWe're going to have this on top, and we're going to divide that by the probability of B,\n\n7\n00:00:29,000 --> 00:00:31,000\nwhich is 1 over K.\n\n8\n00:00:31,000 --> 00:00:35,000\nThe \"over Ks\" will cancel out, leaving us with the probability \n\n9\n00:00:35,000 --> 00:00:38,000\nthat the message is equal to M*.\n\n10\n00:00:38,000 --> 00:00:42,000\nThat's exactly our definition of a perfect cipher.\n\n11\n00:00:42,000 --> 00:00:46,000\nWe can conclude that the one-time pad is a perfect cipher.\n\n12\n00:00:46,000 --> 00:00:49,000\nIt exactly satisfies the definition of a perfect cipher \n\n13\n00:00:49,000 --> 00:00:53,000\nwhere the cipher text reveals nothing at all about the key.\n\n14\n00:00:53,000 --> 00:00:55,000\nYou might think the class should be over.\n\n15\n00:00:55,000 --> 00:00:59,000\nWe've achieved our goal of perfect secrecy using a cipher \n\n16\n00:00:59,000 --> 00:01:05,000\nthat was invented over 100 years ago and is actually provably perfectly secret.\n\n17\n00:01:05,000 --> 00:01:07,000\nWe're not going quite done yet. \n\n18\n00:01:07,000 --> 00:01:10,000\nThere are some pretty serious problems with the one-time pad.\n\n19\n00:01:10,000 --> 00:01:13,000\nOne problem is that it's malleable.\n\n20\n00:01:13,000 --> 00:01:17,000\nWhat malleable means is if Alice sends her ciphertext to Bob,\n\n21\n00:01:17,000 --> 00:01:21,000\nand our evil interceptor--this times it's not just an eavesdropped,\n\n22\n00:01:21,000 --> 00:01:23,000\nit's an eavesdropper with a hammer.\n\n23\n00:01:23,000 --> 00:01:26,000\nIf our interceptor has control over the network,\n\n24\n00:01:26,000 --> 00:01:30,000\nand instead of just being an eavesdropper can be an active attacker.\n\n25\n00:01:30,000 --> 00:01:35,000\nAn active attacker means they can actually change messages on the network.\n\n26\n00:01:35,000 --> 00:01:39,000\nThe message that arrives at Bob is not C. It's C'.\n\n27\n00:01:39,000 --> 00:01:45,000\nBecause at the perfect cipher, the attacker can't learn anything new about the message\n\n28\n00:01:45,000 --> 00:01:47,000\nfrom C, but she could modify it.\n\n29\n00:01:47,000 --> 00:01:49,000\nMaybe she had a pretty good guess. \n\n30\n00:01:49,000 --> 00:01:51,000\nMaybe there was a number in the message somewhere \n\n31\n00:01:51,000 --> 00:01:53,000\nor something that she wanted to change.\n\n32\n00:01:53,000 --> 00:01:56,000\nWell, she could flip the bits at that part of the message,\n\n33\n00:01:56,000 --> 00:01:59,000\nchange the ciphertext that Bob receives to C.\n\n34\n00:01:59,000 --> 00:02:04,000\nIt would decrypt, and with the one-time pad encryption and decryption are the same function.\n\n35\n00:02:04,000 --> 00:02:08,000\nThe decryption of C' would be M'.\n\n36\n00:02:08,000 --> 00:02:12,000\nThe attacker can actually control the difference between M and M',\n\n37\n00:02:12,000 --> 00:02:15,000\nbecause the way the one-time pad works is just XOR.\n\n38\n00:02:15,000 --> 00:02:19,000\nThe attacker could decide whatever difference she wants to introduce in the message.\n\n39\n00:02:19,000 --> 00:02:22,000\nThis is a dangerous property for a cipher to have.\n\n40\n00:02:22,000 --> 00:02:27,000\nAnother big problem with the one-time pad is that it's very impractical.\n\n41\n00:02:27,000 --> 00:02:31,000\nThe real reason that it's impractical is because the keys have to be \n\n42\n00:02:31,000 --> 00:02:35,000\nas long as the messages, and we can never reuse the key.\n\n43\n00:02:35,000 --> 00:02:38,000\nThe is this property that the number of possible keys \n\n44\n00:02:38,000 --> 00:02:41,000\nis equal to the number of possible messages.\n\n45\n00:02:41,000 --> 00:02:46,000\nMaybe what we should try to do is to find a more practical perfect cipher.\n\n46\n00:02:46,000 --> 00:02:50,000\nUnfortunately, Claude Shannon proved that that's not possible.\n\n47\n00:02:50,000 --> 00:02:54,000\nThat's what we're going to look at next is why this property that the key space\n\n48\n00:02:54,000 --> 00:02:56,000\nhas to be at least as big as the message space i\n\n49\n00:02:56,000 --> 00:02:59,000\ns a requirement for a cipher being perfect.\n\n", "id": 23002}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBimnAEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/20006", "type": "Nugget", "id": 20006}, {"nuggetType": "lecture", "name": "Perfect Cipher Is Impractical", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "faa64812-a152-4b83-81dc-d5185388c82d", "name": "cs387_unit1_16_q_Perfect-Cipher-is-Impractical", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGKrDAQw", "youtube_id": "wIirUGMH-Hw", "youtube_state": "done", "path": "Course/cs387/Media/25002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nThe theorem essentially says is that if a cipher is perfect, it must have this property.\n\n2\n00:00:05,000 --> 00:00:10,000\nIt must be impractical in the sense that the number of possible keys\n\n3\n00:00:10,000 --> 00:00:14,000\n must be at least as big as the number of possible messages.\n\n4\n00:00:14,000 --> 00:00:16,000\nWe saw for the one-time pad that they were equal.\n\n5\n00:00:16,000 --> 00:00:20,000\nWe can always remove possible messages from the message set\n\n6\n00:00:20,000 --> 00:00:23,000\nso there's no problem with adding more keys.\n\n7\n00:00:23,000 --> 00:00:26,000\nThe problem is we need to have at least as many keys as messages.\n\n8\n00:00:26,000 --> 00:00:28,000\nLet's prove this property.\n\n9\n00:00:28,000 --> 00:00:31,000\nWe're going to prove it by contradiction.\n\n10\n00:00:31,000 --> 00:00:34,000\nWe're going to start by assuming that we do have a perfect cipher\n\n11\n00:00:34,000 --> 00:00:37,000\nthat does not satisfy this property.\n\n12\n00:00:37,000 --> 00:00:40,000\nSuppose we do have some perfect cipher--we'll call it \"E\"--\n\n13\n00:00:40,000 --> 00:00:45,000\nwhere the number of possible messages is greater than the number of possible keys.\n\n14\n00:00:45,000 --> 00:00:51,000\nThere is some ciphertext--call it c0 element of the set of possible ciphertexts.\n\n15\n00:00:51,000 --> 00:00:54,000\nLet's assume that that ciphertext is possible.\n\n16\n00:00:54,000 --> 00:00:57,000\nWe know that there must be such a cipher text.\n\n17\n00:00:57,000 --> 00:01:02,000\nThere is some key that encrypts some message to c0.\n\n18\n00:01:02,000 --> 00:01:09,000\nThe probability that a message and key get encrypted to this ciphertext is greater than 0.\n\n19\n00:01:09,000 --> 00:01:11,000\nWe know that such a ciphertext must exist.\n\n20\n00:01:11,000 --> 00:01:13,000\nNow we have a our ciphertext c0.\n\n21\n00:01:13,000 --> 00:01:15,000\nLet's try decrypting that.\n\n22\n00:01:15,000 --> 00:01:17,000\nWe'll decrypt it with all keys in the key space.\n\n23\n00:01:17,000 --> 00:01:20,000\nWe haven't mentioned what the decryption function is.\n\n24\n00:01:20,000 --> 00:01:23,000\nFor the one-time pad it's exactly the same as the encryption function.\n\n25\n00:01:23,000 --> 00:01:25,000\nFor this we don't want to assume this. I could be any function.\n\n26\n00:01:25,000 --> 00:01:29,000\nWe'll assume there is some function D that is our decryption function.\n\n27\n00:01:29,000 --> 00:01:36,000\nSince our cipher is correct--in order to be perfect it has to both be correct and perfectly secure.\n\n28\n00:01:36,000 --> 00:01:40,000\nThat means the decryption function must have the property that if we decrypt\n\n29\n00:01:40,000 --> 00:01:45,000\na message encrypted with the same key, we always get the same message out.\n\n30\n00:01:45,000 --> 00:01:48,000\nWe don't need to know anything else about the decryption function than that.\n\n31\n00:01:48,000 --> 00:01:52,000\nWe shouldn't assume anything, because all we're trying to do is show that \n\n32\n00:01:52,000 --> 00:01:58,000\nthere is no possible choice for E that is both a correct encryption function and a perfect cipher.\n\n33\n00:01:58,000 --> 00:02:03,000\nNow what happens when we decrypt c0 with all possible keys?\n\n34\n00:02:03,000 --> 00:02:07,000\nWell, we're going to look at the set of messages that we can produce.\n\n35\n00:02:07,000 --> 00:02:13,000\nWe'll call M0 the set of messages that we get by unioning over all possible keys\n\n36\n00:02:13,000 --> 00:02:17,000\nthe result of decrypting the cipher text c0.\n\n37\n00:02:17,000 --> 00:02:20,000\nThis models what an attacker would do.\n\n38\n00:02:20,000 --> 00:02:24,000\nThey've intercepted some ciphertext. They're trying all possible keys.\n\n39\n00:02:24,000 --> 00:02:27,000\nThis is what a brute-force attacker would do.\n\n40\n00:02:27,000 --> 00:02:31,000\nLooking at all the possible messages that can be produced.\n\n41\n00:02:31,000 --> 00:02:34,000\nNow I want you to think about which of these statements are true.\n\n42\n00:02:34,000 --> 00:02:37,000\nCheck all the statements that must be true.\n\n", "id": 25002}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBinnAEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/20007", "type": "Nugget", "id": 20007}, {"nuggetType": "quiz", "name": "Intercepting Messages", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBisnAEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/20012", "type": "Nugget", "id": 20012}, {"nuggetType": "lecture", "name": "Proving Security Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "dd86c4ef-d25a-43f0-a420-3f1ec80f4292", "name": "cs387_unit1_08_s_Proving-Security", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGOqEAQw", "youtube_id": "HDsSbcoBV7w", "youtube_state": "done", "path": "Course/cs387/Media/17002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nHere what I think the best answer is.\n\n2\n00:00:02,000 --> 00:00:05,000\nThe best possibility is that we do have a mathematical proof \n\n3\n00:00:05,000 --> 00:00:10,000\nthat follows standard rules of deduction that shows that the cipher is secure.\n\n4\n00:00:10,000 --> 00:00:13,000\nThere are very few ciphers that we can actually get that for.\n\n5\n00:00:13,000 --> 00:00:15,000\nOne actually is the one-time pad.\n\n6\n00:00:15,000 --> 00:00:18,000\nWe'll see later this unit how to prove in a mathematical sense\n\n7\n00:00:18,000 --> 00:00:21,000\n that it has a very strong security property.\n\n8\n00:00:21,000 --> 00:00:24,000\nThe next best one is the last one, \n\n9\n00:00:24,000 --> 00:00:27,000\nwhich is to show in a formal way \n\n10\n00:00:27,000 --> 00:00:32,000\nwhy this cipher is at least as hard as some other problem.\n\n11\n00:00:32,000 --> 00:00:35,000\nWe'll talk about reduction proofs more later in this course.\n\n12\n00:00:35,000 --> 00:00:39,000\nThe basic premise here is that there is some other problem that we have good reasons\n\n13\n00:00:39,000 --> 00:00:41,000\nto believe is always already hard.\n\n14\n00:00:41,000 --> 00:00:44,000\nThen we're going to show that if we could break the cipher, \n\n15\n00:00:44,000 --> 00:00:48,000\nwe could solve that other problem that we already have good reasons to believe is hard.\n\n16\n00:00:48,000 --> 00:00:50,000\nThe next best is this one--\n\n17\n00:00:50,000 --> 00:00:54,000\nthat many smart highly-motivated people tried to break but couldn't.\n\n18\n00:00:54,000 --> 00:00:57,000\nThis is often the best we can do.\n\n19\n00:00:57,000 --> 00:01:00,000\nFor the best symmetric ciphers that are in use today\n\n20\n00:01:00,000 --> 00:01:03,000\n this is really the reason that they're argued secure.\n\n21\n00:01:03,000 --> 00:01:07,000\nThere may be formal arguments that show why they resist particular attacks,\n\n22\n00:01:07,000 --> 00:01:10,000\nand that's part of smart people trying to break ciphers,\n\n23\n00:01:10,000 --> 00:01:14,000\nknowing all the known best-case attacks and trying them against the cipher\n\n24\n00:01:14,000 --> 00:01:16,000\nand seeing that the cipher resists them.\n\n25\n00:01:16,000 --> 00:01:20,000\nBut ultimately the best we can do is show that \n\n26\n00:01:20,000 --> 00:01:22,000\nwe think it's secure because it has these properties,\n\n27\n00:01:22,000 --> 00:01:24,000\nand lots of smart people weren't able to break it.\n\n28\n00:01:24,000 --> 00:01:26,000\nBut that's not a very satisfying way to know it's secure.\n\n29\n00:01:26,000 --> 00:01:29,000\nWe're certainly much rather have the strong mathematical proof.\n\n30\n00:01:29,000 --> 00:01:33,000\nThe worst possible argument here is the key-space argument.\n\n31\n00:01:33,000 --> 00:01:36,000\nThis one is often made incorrectly.\n\n32\n00:01:36,000 --> 00:01:40,000\nThe number of keys gives you an upper bound on the difficulty to break the cipher,\n\n33\n00:01:40,000 --> 00:01:42,000\nbecause at worst the attacker could try all the keys.\n\n34\n00:01:42,000 --> 00:01:45,000\nThat's not true for the one-time pad, as we saw.\n\n35\n00:01:45,000 --> 00:01:47,000\nTrying keys gives you perfectly sensible messages.\n\n36\n00:01:47,000 --> 00:01:49,000\nYou'll eventually see all possible messages.\n\n37\n00:01:49,000 --> 00:01:52,000\nYou can't know which key is correct.\n\n38\n00:01:52,000 --> 00:01:55,000\nFor ciphers where the key space is smaller than the message space,\n\n39\n00:01:55,000 --> 00:01:58,000\nyou could try keys and have a good likelihood\n\n40\n00:01:58,000 --> 00:02:02,000\nif the key leads to a sensible message, that that's the right message.\n\n41\n00:02:02,000 --> 00:02:05,000\nThis gives you an upper bound on how hard it is to break a cipher.\n\n42\n00:02:05,000 --> 00:02:07,000\nIt doesn't give you a lower bound.\n\n43\n00:02:07,000 --> 00:02:10,000\nThe fact that you have a large number of possible keys doesn't mean the cipher is secure.\n\n44\n00:02:10,000 --> 00:02:14,000\nWe can always add to the key space without  increasing the difficulty in breaking a cipher.\n\n45\n00:02:14,000 --> 00:02:17,000\nWe'll see many ciphers with very large key spaces\n\n46\n00:02:17,000 --> 00:02:20,000\nthat are completely insecure.\n\n47\n00:02:20,000 --> 00:02:23,000\nOur best possible argument is to have a mathematical proof.\n\n48\n00:02:23,000 --> 00:02:27,000\nThat's what Claude Shannon was able to do for the one-time pad.\n\n49\n00:02:27,000 --> 00:02:30,000\nIt's really a fairly unusual case where we can get \n\n50\n00:02:30,000 --> 00:02:33,000\na mathematical proof that's that strong.\n\n", "id": 17002}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiJpAEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/21001", "type": "Nugget", "id": 21001}, {"nuggetType": "lecture", "name": "Probability Review Pt 3", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "3c012520-5547-4e6c-a202-5e349bdf5e5a", "name": "cs387_unit1_11_q_Probability-Review-pt-3", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGKnDAQw", "youtube_id": "ef1V3FlvfyY", "youtube_state": "done", "path": "Course/cs387/Media/25001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nThe next concept I want to talk about is conditional probability.\n\n2\n00:00:03,000 --> 00:00:09,000\nThis is the one we're going to need to use to prove that the one-time pad is perfectly secure.\n\n3\n00:00:09,000 --> 00:00:12,000\nHere's the definition of conditional probability.\n\n4\n00:00:12,000 --> 00:00:15,000\nIf we have two events--we'll call them A and B--\n\n5\n00:00:15,000 --> 00:00:17,000\nand they're in the same probability space,\n\n6\n00:00:17,000 --> 00:00:20,000\nthe conditional probability of B given that A occured\n\n7\n00:00:20,000 --> 00:00:26,000\nis written like this: it's the probability of B given A--so we use the bar\n\n8\n00:00:26,000 --> 00:00:30,000\nto indicate conditional probability--and it's defined by this formula.\n\n9\n00:00:30,000 --> 00:00:33,000\nIt's the probability of A intersected with B\n\n10\n00:00:33,000 --> 00:00:35,000\ndivided by the probability of A.\n\n11\n00:00:35,000 --> 00:00:38,000\nTo get an intuition for that, let's look at these sets.\n\n12\n00:00:38,000 --> 00:00:42,000\nHere's our universe omega. That's all events.\n\n13\n00:00:42,000 --> 00:00:46,000\nOur question is given that we know A occurred,\n\n14\n00:00:46,000 --> 00:00:48,000\nwhat's the probability of A.\n\n15\n00:00:48,000 --> 00:00:53,000\nThe fact that A occurred means the rest of our probability set doesn't matter.\n\n16\n00:00:53,000 --> 00:00:57,000\nWe're only considering the outcomes where A occurred.\n\n17\n00:00:57,000 --> 00:00:59,000\nThat's the set for A.\n\n18\n00:00:59,000 --> 00:01:03,000\nWe want to know what was the probability that B occurred.\n\n19\n00:01:03,000 --> 00:01:07,000\nThose are the elements in this intersection--the times when B did occur \n\n20\n00:01:07,000 --> 00:01:11,000\ndivided by the size of the sets A,\n\n21\n00:01:11,000 --> 00:01:16,000\nwhich is the probability of A. That's the intuition behind this formula.\n\n22\n00:01:16,000 --> 00:01:19,000\nLet's see if it makes sense for our example as well.\n\n23\n00:01:19,000 --> 00:01:22,000\nThe question is given that we have a valid coin toss,\n\n24\n00:01:22,000 --> 00:01:24,000\nwhat's the probability that it's heads.\n\n25\n00:01:24,000 --> 00:01:27,000\nI'll remind you the model we had.\n\n26\n00:01:27,000 --> 00:01:33,000\nIt said the probability of heads is 0.49999 with four 9s.\n\n27\n00:01:33,000 --> 00:01:40,000\nThe probability of tails is 0.49999.\n\n28\n00:01:40,000 --> 00:01:44,000\nThe probabiilty of edge is 1 minus the sum of those,\n\n29\n00:01:44,000 --> 00:01:49,000\nwhich is 0.00002.\n\n30\n00:01:49,000 --> 00:01:55,000\nWe define valid as the outcomes where it lands on heads or tails not on the edge.\n\n31\n00:01:55,000 --> 00:01:57,000\nGiven that you know a coin toss is valid,\n\n32\n00:01:57,000 --> 00:02:01,000\nwhat's the probability that the outcome is heads?\n\n", "id": 25001}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiLpAEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/21003", "type": "Nugget", "id": 21003}, {"nuggetType": "lecture", "name": "Importance Of Keys", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "65c241ea-349e-4b1a-9fc7-99ca0f91364d", "name": "cs387_unit1_20_q_Importance-of-Keys", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGLyUAQw", "youtube_id": "exfosXT46x8", "youtube_state": "done", "path": "Course/cs387/Media/19004", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nNow we've got this great property.\n\n2\n00:00:02,000 --> 00:00:05,000\nWe've got two things that are significantly different from 1/2.\n\n3\n00:00:05,000 --> 00:00:08,000\nCan we use that to break the cipher?\n\n4\n00:00:08,000 --> 00:00:15,000\nNow the question is assuming that the probability of \u0394K is 0 is still 1/2,\n\n5\n00:00:15,000 --> 00:00:21,000\ndoes knowing that these probabilities for \u0394M and \u0394S being greater than 1/2 help us?\n\n6\n00:00:21,000 --> 00:00:25,000\nRemember that our ciphertext values that we're intercepting\n\n7\n00:00:25,000 --> 00:00:29,000\nare the XOR of \u0394M, \u0394K, and \u0394S.\n\n8\n00:00:29,000 --> 00:00:32,000\nThe choices are, yes, that it definitely helps us.\n\n9\n00:00:32,000 --> 00:00:35,000\nIt doesn't necessarily help us, but if we knew something more about K\n\n10\n00:00:35,000 --> 00:00:37,000\nmaybe it would help us.\n\n11\n00:00:37,000 --> 00:00:41,000\nIt doesn't necessarily help us, but if we knew something more about M maybe it would help us.\n\n", "id": 19004}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiNpAEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/21005", "type": "Nugget", "id": 21005}, {"nuggetType": "lecture", "name": "Guessing Keys Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "fb5aa47a-d9b7-4574-98bb-631651b18ebc", "name": "cs387_unit1_22_s_Guessing-Keys", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGKmcAQw", "youtube_id": "wqpOwNQzakc", "youtube_state": "done", "path": "Course/cs387/Media/20009", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\n[Evans] The answer is 0.55.\n\n2\n00:00:03,000 --> 00:00:06,000\nThe key is 0. We can cancel that out.\n\n3\n00:00:06,000 --> 00:00:10,000\nSo we're left with delta M XORed with delta S.\n\n4\n00:00:10,000 --> 00:00:17,000\nThat could be 0 either if delta M is equal to 0 and delta S is equal to 0,\n\n5\n00:00:17,000 --> 00:00:20,000\n then the XOR of 0 and 0 would be 0.\n\n6\n00:00:20,000 --> 00:00:23,000\nThe probability that delta M is 0--well, we know that. \n\n7\n00:00:23,000 --> 00:00:28,000\nThat's 0.61, and we're going to multiply that by the probability of delta S is 0,\n\n8\n00:00:28,000 --> 00:00:31,000\nwhich we know is 0.73.\n\n9\n00:00:31,000 --> 00:00:34,000\nBut that's not the only way delta Z could be 0.\n\n10\n00:00:34,000 --> 00:00:38,000\nThe other way delta Z could be 0 is if both of these are 1.\n\n11\n00:00:38,000 --> 00:00:43,000\nSo it's the probability they're both 0 plus the probability they're both 1,\n\n12\n00:00:43,000 --> 00:00:49,000\nand these probabilities are 1 minus the probabilities that we have before us,\n\n13\n00:00:49,000 --> 00:00:58,000\nso it's (1 - 0.61) * (1 - 0.73).\n\n14\n00:00:58,000 --> 00:01:03,000\nAnd if you calculate all that, you get 0.5506.\n\n15\n00:01:03,000 --> 00:01:05,000\nThat's probably a little more precise than it should be,\n\n16\n00:01:05,000 --> 00:01:08,000\nespecially because this value is just a guess.\n\n17\n00:01:08,000 --> 00:01:11,000\nWe'd have to do a much more detailed analysis of German\n\n18\n00:01:11,000 --> 00:01:15,000\nto know whether that probability is really 0.61,\n\n19\n00:01:15,000 --> 00:01:19,000\nand we'd have to know more about the particular messages that might be encrypted.\n\n20\n00:01:19,000 --> 00:01:23,000\nBut this value is pretty far away from a half.\n\n21\n00:01:23,000 --> 00:01:27,000\nAny advantage that's that large, if we have a lot of text\n\n22\n00:01:27,000 --> 00:01:29,000\nwe're going to see that pretty clearly.\n\n23\n00:01:29,000 --> 00:01:32,000\nSo if we have enough text, we can count the number of positions\n\n24\n00:01:32,000 --> 00:01:35,000\nwhere delta Z is equal to 0.\n\n25\n00:01:35,000 --> 00:01:38,000\nIf it's close to half of them, then it was a wrong guess.\n\n26\n00:01:38,000 --> 00:01:42,000\nIf it's close to 0.55 of them, then we have a good likelihood that that was the right guess.\n\n27\n00:01:42,000 --> 00:01:46,000\nSo now all we have to do is feed in the intercepted messages.\n\n28\n00:01:46,000 --> 00:01:51,000\nOur guesses for the starting position of the 2 keys,\n\n29\n00:01:51,000 --> 00:01:55,000\nwe need to compute a big summation of these values,\n\n30\n00:01:55,000 --> 00:01:59,000\nof the delta Z values, with those keys.\n\n31\n00:01:59,000 --> 00:02:04,000\nAnd if it's close to the length of the message divided by 2,\n\n32\n00:02:04,000 --> 00:02:08,000\nthat means it was a bad guess. We weren't able to cancel out the key.\n\n33\n00:02:08,000 --> 00:02:13,000\nIf it's close to 0.55 times the size of Z, then it's a good key.\n\n34\n00:02:13,000 --> 00:02:16,000\nIt's likely that that's a good guess.\n\n35\n00:02:16,000 --> 00:02:19,000\nAnd then we should be able to use those key guesses\n\n36\n00:02:19,000 --> 00:02:22,000\nto find out what the actual message was, to decrypt the cipher text.\n\n37\n00:02:22,000 --> 00:02:28,000\nSo this is exactly the problem that what is arguably the first electronic digital computer\n\n38\n00:02:28,000 --> 00:02:30,000\nwas built to solve.\n\n39\n00:02:30,000 --> 00:02:33,000\nSo with this advantage there's a good likelihood \n\n40\n00:02:33,000 --> 00:02:36,000\nthat you would be able to know when you guess the right key.\n\n41\n00:02:36,000 --> 00:02:41,000\nYou need to try all the configurations of K0 and K1,\n\n42\n00:02:41,000 --> 00:02:45,000\nand for each one of those configurations you have to compute this double delta.\n\n43\n00:02:45,000 --> 00:02:50,000\nWhat we're computing for each configuration is this double delta,\n\n44\n00:02:50,000 --> 00:02:52,000\nthe XOR of 2 deltas,\n\n45\n00:02:52,000 --> 00:02:55,000\nand that involves computing all these XORs.\n\n46\n00:02:55,000 --> 00:03:01,000\nWe need the XORs of the keys XORed with the messages and the S wheels.\n\n47\n00:03:01,000 --> 00:03:04,000\nBut remember what we're doing is guessing that this is 0.\n\n48\n00:03:04,000 --> 00:03:07,000\nWe don't have any way to predict those S values.\n\n49\n00:03:07,000 --> 00:03:12,000\nWe're producing the key values, and we're XORing those key values\n\n50\n00:03:12,000 --> 00:03:14,000\nwith the intercepted cipher text.\n\n51\n00:03:14,000 --> 00:03:17,000\nSo we need to do these XORs, XORing out the key\n\n52\n00:03:17,000 --> 00:03:21,000\nand XORing the key with the value of the cipher text.\n\n53\n00:03:21,000 --> 00:03:26,000\nSo for each character we're doing 7 XORs\n\n54\n00:03:26,000 --> 00:03:29,000\nand we're counting the number of times that's equal to 0.\n\n55\n00:03:29,000 --> 00:03:33,000\nSo multiplying all those together, we know the total number of XORs we need to do,\n\n56\n00:03:33,000 --> 00:03:37,000\nand we get about 44.5 million.\n\n57\n00:03:37,000 --> 00:03:40,000\nThat's the maximum number that we might need to do.\n\n58\n00:03:40,000 --> 00:03:44,000\nIf we're lucky, we might guess the right configuration right away,\n\n59\n00:03:44,000 --> 00:03:46,000\nand we could know that that's the right configuration \n\n60\n00:03:46,000 --> 00:03:49,000\nby getting the high number of 0s out.\n\n61\n00:03:49,000 --> 00:03:52,000\nIf we're unlucky, we might need all 1271.\n\n62\n00:03:52,000 --> 00:03:54,000\nNormally, we should expect to need about half of that.\n\n63\n00:03:54,000 --> 00:04:00,000\nSo maybe on average we would need about 25 million XORs to find the configuration,\n\n64\n00:04:00,000 --> 00:04:06,000\nthe correct value of X K1 and K0 for 1 cipher text.\n\n65\n00:04:06,000 --> 00:04:13,000\nOnce we've got K1 and K0, we can do similar things to find K2, K3, and K4,\n\n66\n00:04:13,000 --> 00:04:15,000\nand then we can decrypt the whole message.\n\n67\n00:04:15,000 --> 00:04:18,000\nSo today, a modern processor runs at 2 gigahertz,\n\n68\n00:04:18,000 --> 00:04:21,000\nso you're doing 2 billion operations per second,\n\n69\n00:04:21,000 --> 00:04:28,000\nand 1 operation could include many XORs, possibly 64 XORs or 32 XORs\n\n70\n00:04:28,000 --> 00:04:30,000\ndepending on your processor.\n\n71\n00:04:30,000 --> 00:04:34,000\nSo to do that on a modern processor would take a fraction of a millisecond.\n\n72\n00:04:34,000 --> 00:04:38,000\nTo do that in 1941 was a major technical challenge.\n\n73\n00:04:38,000 --> 00:04:41,000\nComputers didn't exist yet, but this was the main impetus \n\n74\n00:04:41,000 --> 00:04:46,000\nfor building what was arguably the first electronic programmable digital computer.\n\n", "id": 20009}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiPpAEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/21007", "type": "Nugget", "id": 21007}, {"nuggetType": "lecture", "name": "Advanced Encryption Standard", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "1425eb67-b38f-47d1-94ac-a73fbea7c5f4", "name": "cs387_unit1_25_l_Advanced-Encryption-Standard", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGL2UAQw", "youtube_id": "_ujdCbh7dvA", "youtube_state": "done", "path": "Course/cs387/Media/19005", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\n[Evans] We're not going to get into the details of how AES works,\n\n2\n00:00:03,000 --> 00:00:06,000\nbut I want to talk a little bit about the main components of it.\n\n3\n00:00:06,000 --> 00:00:10,000\nThere are 2 main things that go into AES and go into almost all modern block ciphers.\n\n4\n00:00:10,000 --> 00:00:15,000\nThey all involve XORs--we saw that in the one-time pad--\n\n5\n00:00:15,000 --> 00:00:19,000\nand they're XORing some round key which is generated by a key schedule,\n\n6\n00:00:19,000 --> 00:00:23,000\nsome process of generating new keys for each round.\n\n7\n00:00:23,000 --> 00:00:28,000\nAnd then what's going into that, there are 2 main operations.\n\n8\n00:00:28,000 --> 00:00:37,000\nOne is shifts, so permuting bits, and there would be a map that would move bits around.\n\n9\n00:00:37,000 --> 00:00:40,000\nThis is better than just doing only XORs\n\n10\n00:00:40,000 --> 00:00:45,000\nbecause we're moving data around instead of just XORing and changing it.\n\n11\n00:00:45,000 --> 00:00:50,000\nThe other thing that's really important for a cipher to be hard to cryptanalyze \n\n12\n00:00:50,000 --> 00:00:58,000\nis to have some nonlinearity, something that is very difficult to analyze\n\n13\n00:00:58,000 --> 00:01:02,000\nand mixes up data in a way that is nonlinear.\n\n14\n00:01:02,000 --> 00:01:05,000\nThis is done basically by having lookup tables.\n\n15\n00:01:05,000 --> 00:01:10,000\nSo what's called an S-box is something that takes in 8 bits--\n\n16\n00:01:10,000 --> 00:01:15,000\nin this case it could have different numbers going in--\n\n17\n00:01:15,000 --> 00:01:17,000\nand basically has a lookup table.\n\n18\n00:01:17,000 --> 00:01:24,000\nSo that's going to have 256 entries mapping each set of 8 bits to some other set of 8 bits.\n\n19\n00:01:24,000 --> 00:01:27,000\nAnd designing that lookup table is a challenge.\n\n20\n00:01:27,000 --> 00:01:31,000\nWe want the lookups to be as nonlinear as possible\n\n21\n00:01:31,000 --> 00:01:36,000\nand make sure there are no patterns in the data in this table.\n\n22\n00:01:36,000 --> 00:01:41,000\nAnd so the way AES works is combining shifts and S-boxes with XOR\n\n23\n00:01:41,000 --> 00:01:43,000\nto scramble up the data.\n\n24\n00:01:43,000 --> 00:01:46,000\nAnd it's going through multiple rounds,\n\n25\n00:01:46,000 --> 00:01:52,000\nso we'll take the outputs of this, put them back through a series of shifts and S-boxes again,\n\n26\n00:01:52,000 --> 00:01:54,000\nand keep doing that.\n\n27\n00:01:54,000 --> 00:01:57,000\nThe number of rounds depends on the key size.\n\n28\n00:01:57,000 --> 00:02:03,000\nSo for the smallest key, for the 128-bit key, which is the smallest key size for AES,\n\n29\n00:02:03,000 --> 00:02:09,000\nwe would do 10 rounds going through the cycle, getting the output cipher text for that block.\n\n30\n00:02:09,000 --> 00:02:14,000\nSo the details are definitely more complicated than this, and getting them right is very hard.\n\n31\n00:02:14,000 --> 00:02:18,000\nThere's lots of great resources that explain AES in detail, though.\n\n32\n00:02:18,000 --> 00:02:21,000\nFor our purposes we're going to think of it as a black box--\n\n33\n00:02:21,000 --> 00:02:23,000\nthat we can use encryption in our protocols.\n\n34\n00:02:23,000 --> 00:02:27,000\nWe're going to assume it has the properties that we want it to have\n\n35\n00:02:27,000 --> 00:02:31,000\nand not need to look in more detail at how to actually implement that in a modern cipher.\n\n", "id": 19005}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiQpAEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/21008", "type": "Nugget", "id": 21008}, {"nuggetType": "quiz", "name": "Introduction", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiRpAEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/21009", "type": "Nugget", "id": 21009}, {"nuggetType": "lecture", "name": "Probability Review Pt 1", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "0c2a0402-3351-4f0f-a941-cc7a4e44cbfc", "name": "cs387_unit1_09_q_Probability-Review-pt-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGIN9DA", "youtube_id": "8jLyN0_qyzY", "youtube_state": "done", "path": "Course/cs387/Media/16003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nBefore getting onto the proof that the one-time pad is secure, \n\n2\n00:00:03,000 --> 00:00:06,000\nI want to do a brief of probability.\n\n3\n00:00:06,000 --> 00:00:09,000\nIf you feel very confident that you understand probability well,\n\n4\n00:00:09,000 --> 00:00:11,000\nit's fine to skip this section,\n\n5\n00:00:11,000 --> 00:00:14,000\nbut I think for many students it will be helpful to review probability.\n\n6\n00:00:14,000 --> 00:00:16,000\nFor some this will be new.\n\n7\n00:00:16,000 --> 00:00:20,000\nIt's not necessary to have a lot of background in probability entering this class,\n\n8\n00:00:20,000 --> 00:00:23,000\nbut we will certainly be using it in crytography.\n\n9\n00:00:23,000 --> 00:00:26,000\nTo talk about probability we need to think of sets of outcomes.\n\n10\n00:00:26,000 --> 00:00:31,000\nWe'll use omega to represent the set of all possible outcomes.\n\n11\n00:00:31,000 --> 00:00:34,000\nThis is sometimes known as a probability space.\n\n12\n00:00:34,000 --> 00:00:38,000\nFor a simple example, if we think about flipping a coin,\n\n13\n00:00:38,000 --> 00:00:40,000\nomega is the set of the outcomes we could get.\n\n14\n00:00:40,000 --> 00:00:45,000\nWe could get to land heads, and we'll call that H,\n\n15\n00:00:45,000 --> 00:00:49,000\nor we could get it to land tails, and we'll call that T.\n\n16\n00:00:49,000 --> 00:00:52,000\nIf our probability space has a uniform distribution,\n\n17\n00:00:52,000 --> 00:00:56,000\nthat means each outcome has equal probability.\n\n18\n00:00:56,000 --> 00:01:00,000\nWe can write that as a probability using P as our probability function.\n\n19\n00:01:00,000 --> 00:01:05,000\nP is a function that takes as its input some outcome,\n\n20\n00:01:05,000 --> 00:01:10,000\nand it maps that to a real number between 0 and 1.\n\n21\n00:01:10,000 --> 00:01:13,000\nZero would mean that event never happens.\n\n22\n00:01:13,000 --> 00:01:16,000\nOne would mean that even always happens.\n\n23\n00:01:16,000 --> 00:01:19,000\nIf we assume a fair coin with a uniform distribution, \n\n24\n00:01:19,000 --> 00:01:23,000\nthen the probability that we get heads is equal to 1/2,\n\n25\n00:01:23,000 --> 00:01:27,000\nand the probability that we get tails is also equal to 1/2.\n\n26\n00:01:27,000 --> 00:01:30,000\nThat's how we think of mathematical coins.\n\n27\n00:01:30,000 --> 00:01:34,000\nWe hope to have mathematical coins to use in our cryptosystems.\n\n28\n00:01:34,000 --> 00:01:36,000\nReal coins aren't so perfect.\n\n29\n00:01:36,000 --> 00:01:40,000\nLet's assume instead that there are three possible outcomes.\n\n30\n00:01:40,000 --> 00:01:48,000\nNow our probability space will be heads, tails, and edge.\n\n31\n00:01:48,000 --> 00:01:51,000\nThe edge outcome does not happen frequently.\n\n32\n00:01:51,000 --> 00:01:54,000\nWe'll make the probability distribution.\n\n33\n00:01:54,000 --> 00:02:00,000\nThe probability of heads is 0.4999.\n\n34\n00:02:00,000 --> 00:02:04,000\nThe probability of tails--we'll assume our coin is still fair,\n\n35\n00:02:04,000 --> 00:02:08,000\nthat the probability of tails is equal to the probability of heads,\n\n36\n00:02:08,000 --> 00:02:12,000\nwhich is 0.4999.\n\n37\n00:02:12,000 --> 00:02:17,000\nIs that enough to determine what is the probability of edge, of outcome E?\n\n38\n00:02:17,000 --> 00:02:19,000\nI've given you two of the probabilities.\n\n39\n00:02:19,000 --> 00:02:24,000\nCan you determine what is the probability of the third possible outcome,\n\n40\n00:02:24,000 --> 00:02:27,000\nwhich is landing on the edge denoted by E.\n\n", "id": 16003}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjxqwEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/22001", "type": "Nugget", "id": 22001}, {"nuggetType": "quiz", "name": "Correctness And Security", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBj1qwEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/22005", "type": "Nugget", "id": 22005}, {"nuggetType": "lecture", "name": "Probability Review Pt 1 Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "211e286b-e9d2-4031-b14a-ca6b258b98fc", "name": "cs387_unit1_09_s_Probability-Review-pt-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGIqkAQw", "youtube_id": "7Ao5Oyq1JBM", "youtube_state": "done", "path": "Course/cs387/Media/21002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:06,000\nThe answer is 0.00002,\n\n2\n00:00:06,000 --> 00:00:10,000\nand the reason for that is the sum of all the probabilities of all the events \n\n3\n00:00:10,000 --> 00:00:13,000\nin the probability space must be 1.\n\n4\n00:00:13,000 --> 00:00:19,000\nWe're certain that we get 1 of these events everytime we draw from the probability space.\n\n5\n00:00:19,000 --> 00:00:23,000\nI'm not going to try flipping the coin enough times to see if I can actually make it\n\n6\n00:00:23,000 --> 00:00:24,000\nland on its edge.\n\n7\n00:00:24,000 --> 00:00:28,000\nThe actual probability of landing on the edge is probably much lower than that.\n\n", "id": 21002}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjZswEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/23001", "type": "Nugget", "id": 23001}, {"nuggetType": "lecture", "name": "Importance Of Keys Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "3783b2cd-beb9-4a24-875b-f6f01d4f46df", "name": "cs387_unit1_20_s_Importance-of-Keys", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGI6kAQw", "youtube_id": "v0G4bcFgEuY", "youtube_state": "done", "path": "Course/cs387/Media/21006", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nThe answer is it only helps us if we know something else about K.\n\n2\n00:00:04,000 --> 00:00:07,000\nThe reason for this is if K is uniformly distributed,\n\n3\n00:00:07,000 --> 00:00:10,000\nand we're XORing it with these other values,\n\n4\n00:00:10,000 --> 00:00:15,000\nwhatever patterns that M and S have are lost when they get XORed with K.\n\n5\n00:00:15,000 --> 00:00:18,000\nThis is the whole point of the one-time pad that we can\n\n6\n00:00:18,000 --> 00:00:23,000\nXOR a random key with a message and hide all the statistical properties in the message.\n\n7\n00:00:23,000 --> 00:00:27,000\nThis is not the case that it helps us by itself.\n\n8\n00:00:27,000 --> 00:00:31,000\nIf this was all we knew this is a potentially interesting property,\n\n9\n00:00:31,000 --> 00:00:36,000\nbut we need to know something more in order to use this to help break the cipher.\n\n10\n00:00:36,000 --> 00:00:38,000\nKnowing something more about M would be great.\n\n11\n00:00:38,000 --> 00:00:42,000\nThat's the message we're trying to decrypt, but that's separate from being able to use\n\n12\n00:00:42,000 --> 00:00:44,000\nthis property in a useful way.\n\n13\n00:00:44,000 --> 00:00:48,000\nWhat we really need to do is know something more about K.\n\n", "id": 21006}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjbswEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/23003", "type": "Nugget", "id": 23003}, {"nuggetType": "lecture", "name": "Colossus", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "9f32761d-6810-4c25-b5b1-a7ed0c5e5e8a", "name": "cs387_unit1_23_l_Colossus", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGO-EAQw", "youtube_id": "xtB_IGFGFt0", "youtube_state": "done", "path": "Course/cs387/Media/17007", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nThe first machine that was built to do this was called the Heath Robinson.\n\n2\n00:00:04,000 --> 00:00:07,000\nIt was named after this British cartoonist \n\n3\n00:00:07,000 --> 00:00:11,000\nwho drew cartoons of crazy machines to do operations.\n\n4\n00:00:11,000 --> 00:00:14,000\nThis one was for peeling potatoes.\n\n5\n00:00:14,000 --> 00:00:17,000\nThe timeline of this is quite interesting.\n\n6\n00:00:17,000 --> 00:00:22,000\nThe first operator mistake--the re-transmission with abbreviations--\n\n7\n00:00:22,000 --> 00:00:25,000\nhappened in August 1941. That was intercepted.\n\n8\n00:00:25,000 --> 00:00:30,000\nOver the next year that was enough to learn from the two intercepted messages \n\n9\n00:00:30,000 --> 00:00:33,000\nthe structure of the machine and then to understand it well enough \n\n10\n00:00:33,000 --> 00:00:37,000\nto develop this technique--the double-Delta technique for finding \n\n11\n00:00:37,000 --> 00:00:40,000\nthe correct configuration and to break messages.\n\n12\n00:00:40,000 --> 00:00:45,000\nBy December 1942 they decided to build a machine and put the resources necessary\n\n13\n00:00:45,000 --> 00:00:47,000\nto design and build the machine.\n\n14\n00:00:47,000 --> 00:00:51,000\nIt was requested to be done by June of 1943.\n\n15\n00:00:51,000 --> 00:00:53,000\nIt was actually delivered 3 months early.\n\n16\n00:00:53,000 --> 00:00:57,000\nBy April 1943 they had the first machine delivered and operational.\n\n17\n00:00:57,000 --> 00:01:00,000\nIt could process messages about 2000 characters per second.\n\n18\n00:01:00,000 --> 00:01:07,000\nIt was able to do 7 XOR operations at 20 km per hour.\n\n19\n00:01:07,000 --> 00:01:09,000\nThis was not quite fast enough.\n\n20\n00:01:09,000 --> 00:01:12,000\nA lot of the value in decrypting messages, especially in war time, \n\n21\n00:01:12,000 --> 00:01:16,000\nis being able to decrypt them before what the message is describing actually happen.\n\n22\n00:01:16,000 --> 00:01:18,000\nThey built a faster machine.\n\n23\n00:01:18,000 --> 00:01:20,000\nThe faster machine was called \"Colossus.\"\n\n24\n00:01:20,000 --> 00:01:26,000\nThis was operational by January 1944, and the big change that made Colossus much faster\n\n25\n00:01:26,000 --> 00:01:29,000\nand more useful than the Heath Robinson machines \n\n26\n00:01:29,000 --> 00:01:33,000\nwas that they replaced the configurations, which were previously on a tape,\n\n27\n00:01:33,000 --> 00:01:36,000\nwith an electronic keytext generator.\n\n28\n00:01:36,000 --> 00:01:40,000\nThe logic is doing all the XORs and counting the number that are zero.\n\n29\n00:01:40,000 --> 00:01:45,000\nThen it's printing out those tallies so you can go back and find the right configuration.\n\n30\n00:01:45,000 --> 00:01:48,000\nThe ciphertext is still on a paper tape.\n\n31\n00:01:48,000 --> 00:01:51,000\nThis is spinning through about 50 km an hour.\n\n32\n00:01:51,000 --> 00:01:55,000\nIt was a pretty impressive sight when it was operating.\n\n33\n00:01:55,000 --> 00:01:59,000\nProcessing 5000 characters per second.\n\n34\n00:01:59,000 --> 00:02:03,000\nWhat made this arguably the first computer was because of electronic keytext\n\n35\n00:02:03,000 --> 00:02:05,000\nthis logic was a little bit programmable.\n\n36\n00:02:05,000 --> 00:02:07,000\nIt didn't do always exactly the same thing.\n\n37\n00:02:07,000 --> 00:02:11,000\nThere were ways to program it to do slightly different operations depending on \n\n38\n00:02:11,000 --> 00:02:16,000\nwhat the analysts through was the most useful thing to do with that intercepted cipher text.\n\n39\n00:02:16,000 --> 00:02:22,000\nThis is arguably the first programmable digital electronic computer.\n\n40\n00:02:22,000 --> 00:02:25,000\nIt wasn't fully programmable. It wasn't a general purpose computer.\n\n41\n00:02:25,000 --> 00:02:28,000\nBut it could be programmed to change its behavior slightly.\n\n42\n00:02:28,000 --> 00:02:31,000\nYou can see what this looked like during World War II.\n\n43\n00:02:31,000 --> 00:02:35,000\nThere are very few pictures of it. This was a very secretive operation.\n\n44\n00:02:35,000 --> 00:02:39,000\nThe machines were actually all destroyed after the war.\n\n45\n00:02:39,000 --> 00:02:43,000\nA lot of the value in breaking a cipher is to make sure that no one else knows you've broken it.\n\n46\n00:02:43,000 --> 00:02:46,000\nThis is different from academic cryptography where people\n\n47\n00:02:46,000 --> 00:02:49,000\n like to publicized when they break ciphers.\n\n48\n00:02:49,000 --> 00:02:54,000\nIn military cryptography the whole value of breaking a cipher is your enemy keeps using it.\n\n49\n00:02:54,000 --> 00:02:58,000\nYou want to keep it very secretive that you've done that.\n\n50\n00:02:58,000 --> 00:03:02,000\nA lot of the work on Colossus was not declassified until the mid-90s.\n\n51\n00:03:02,000 --> 00:03:06,000\nToday if you visit Bletchley Park you can see a replica, a rebuilt version of Colossus.\n\n52\n00:03:06,000 --> 00:03:09,000\nThis is my picture of it from 2004.\n\n53\n00:03:09,000 --> 00:03:13,000\nIt does look very similar to the black and white picture from World War II.\n\n54\n00:03:13,000 --> 00:03:16,000\nUnfortunately, they don't operate it frequently, so you won't get to see the tape \n\n55\n00:03:16,000 --> 00:03:20,000\nspinning through at 50 km an hour and all the crunching going on\n\n56\n00:03:20,000 --> 00:03:26,000\nunless you're very lucky to go one of the few days a year that they might actually operate it.\n\n57\n00:03:26,000 --> 00:03:29,000\nThese Colossus machines had a huge impact on World War II.\n\n58\n00:03:29,000 --> 00:03:32,000\nBy the end of the war there were 10 of them continuously operating at Bletchley Park\n\n59\n00:03:32,000 --> 00:03:35,000\ndecrypting all the traffic that they could intercept.\n\n60\n00:03:35,000 --> 00:03:41,000\nThey decoded over 63 million letters of messages in Axis communications.\n\n61\n00:03:41,000 --> 00:03:46,000\nAmong the things they learned from them were the troop locations of Axis on D-Day.\n\n62\n00:03:46,000 --> 00:03:49,000\nThis was very helpful for planning the operation.\n\n63\n00:03:49,000 --> 00:03:51,000\nWhy did I tell you this story?\n\n64\n00:03:51,000 --> 00:03:56,000\nFirst of all it is an important story in the history of both the world as well as computing,\n\n65\n00:03:56,000 --> 00:04:02,000\nbut this isn't meant to be a history class, although I certainly like to have historical excursions when I can.\n\n66\n00:04:02,000 --> 00:04:05,000\nIt's also very relevant to modern cryptanalysis.\n\n67\n00:04:05,000 --> 00:04:09,000\nModern ciphers are much better than the Lorenz cipher,\n\n68\n00:04:09,000 --> 00:04:14,000\nand the main reason for that is we can use computing power to do the encryption.\n\n69\n00:04:14,000 --> 00:04:17,000\nBut the basic ideas are actually quite similar.\n\n70\n00:04:17,000 --> 00:04:22,000\nThe goal of the cipher is hide all the statistical properties that are inherent in the message,\n\n71\n00:04:22,000 --> 00:04:26,000\nand they're present in the key--at least the generated key.\n\n72\n00:04:26,000 --> 00:04:29,000\nThe actual key we hope is perfectly random.\n\n73\n00:04:29,000 --> 00:04:34,000\nFinding perfect randomness and getting it in computing is quite challenging.\n\n74\n00:04:34,000 --> 00:04:36,000\nBut let's assume we have a perfectly random key.\n\n75\n00:04:36,000 --> 00:04:39,000\nWhat we learned from the perfect cipher analysis \n\n76\n00:04:39,000 --> 00:04:42,000\nis that the key must be shorter than the message.\n\n77\n00:04:42,000 --> 00:04:44,000\nThat means in order for the cipher to work, \n\n78\n00:04:44,000 --> 00:04:48,000\nwe need to generate more key bits than we actually have.\n\n79\n00:04:48,000 --> 00:04:53,000\nEven if the original key--and you can think of that in the case of Colossus \n\n80\n00:04:53,000 --> 00:04:56,000\nas the configuration of the machine that comes from some code book\n\n81\n00:04:56,000 --> 00:05:01,000\nthat could be perfectly randomly generated and shared between endpoints.\n\n82\n00:05:01,000 --> 00:05:04,000\nThat is only the starting configuration.\n\n83\n00:05:04,000 --> 00:05:09,000\nThere is some larger key that has to be generated to produce the cipher text.\n\n84\n00:05:09,000 --> 00:05:13,000\nSo both the key and the message have some statistical properties.\n\n85\n00:05:13,000 --> 00:05:16,000\nThe goal of cipher is to hide all those properties.\n\n86\n00:05:16,000 --> 00:05:20,000\nThe goal of the analyst is to find statistical properties in the cipher text\n\n87\n00:05:20,000 --> 00:05:24,000\nand then to use those to break the key or the message.\n\n88\n00:05:24,000 --> 00:05:30,000\nIn the case of Bletchley Park breaking the Lorenz cipher, they found statistical properties.\n\n89\n00:05:30,000 --> 00:05:33,000\nWhen you looked across channels at subsequent letters,\n\n90\n00:05:33,000 --> 00:05:36,000\nthere were some statistical properties that were not hidden by the cipher.\n\n91\n00:05:36,000 --> 00:05:43,000\nThat was because of a mechanical weakness that all the S wheels either all moved or didn't move.\n\n92\n00:05:43,000 --> 00:05:50,000\nThat meant that instead of having the long period with no repetition of 19 million letters\n\n93\n00:05:50,000 --> 00:05:54,000\nthat the users of those Lorenz machines thought it had,\n\n94\n00:05:54,000 --> 00:06:00,000\nthe Allies could break that down and find a pattern that was only 12,071 letters long\n\n95\n00:06:00,000 --> 00:06:04,000\nwith much fewer configurations to try to have a good guess of the cipher\n\n96\n00:06:04,000 --> 00:06:07,000\nwith many fewer guesses needed.\n\n97\n00:06:07,000 --> 00:06:10,000\nIn a modern cipher we think of that as a mathematical weakness.\n\n98\n00:06:10,000 --> 00:06:13,000\nThere's some problem is the mathematics of the cipher\n\n99\n00:06:13,000 --> 00:06:18,000\nthat leaves some statistical property that a cryptanalyst could exploit.\n\n100\n00:06:18,000 --> 00:06:24,000\nThe other relevance to modern cryptanalysis is it's really lots of hard work to do that.\n\n101\n00:06:24,000 --> 00:06:29,000\nI find it quite amazing what Bletchley Park was able to do with Colossus.\n\n102\n00:06:29,000 --> 00:06:34,000\nIt still took 6 months of effort looking at those two messages to figure out  the key\n\n103\n00:06:34,000 --> 00:06:37,000\nand interpret the key structure from that.\n\n104\n00:06:37,000 --> 00:06:44,000\nThat requires an awful lot of trial and error and a lot of creativity but also a lot of tedious work.\n\n105\n00:06:44,000 --> 00:06:49,000\nIn modern cryptanalysis we try to do as much of the tedious work as possible by computers,\n\n106\n00:06:49,000 --> 00:06:52,000\nbut there is still lots of hard work that goes into breaking a cipher.\n\n107\n00:06:52,000 --> 00:06:56,000\nMotivation certainly helps a lot for that.\n\n108\n00:06:56,000 --> 00:06:59,000\nIn the case of Bletchley Park, the fear that your country was under attack\n\n109\n00:06:59,000 --> 00:07:02,000\nis a pretty strong motivation.\n\n", "id": 17007}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjcswEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/23004", "type": "Nugget", "id": 23004}, {"nuggetType": "quiz", "name": "Xor Function", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjdswEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/23005", "type": "Nugget", "id": 23005}, {"nuggetType": "quiz", "name": "Probability Review Pt 2", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjfswEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/23007", "type": "Nugget", "id": 23007}, {"nuggetType": "quiz", "name": "Otp Is A Perfect Cipher Pt 2", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjgswEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/23008", "type": "Nugget", "id": 23008}, {"nuggetType": "quiz", "name": "Weakness In Keys", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjiswEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/23010", "type": "Nugget", "id": 23010}, {"nuggetType": "lecture", "name": "Probability Review Pt 2 Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "347101fc-2c8c-4599-a753-9edcb998d2ec", "name": "cs387_unit1_10_s_Probability-Review-pt-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGLqUAQw", "youtube_id": "JPKx7dlqoPk", "youtube_state": "done", "path": "Course/cs387/Media/19002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:06,000\nThe answer is 0.99998. There are 2 ways to solve this.\n\n2\n00:00:06,000 --> 00:00:09,000\nOne is to sum these two. Not too hard to do.\n\n3\n00:00:09,000 --> 00:00:12,000\nThe other way to solve it is to use the complementary event property,\n\n4\n00:00:12,000 --> 00:00:15,000\nwhich makes the math a little easier in this case.\n\n5\n00:00:15,000 --> 00:00:21,000\nThat property is that we know the sum of all possible events has to be 1.\n\n6\n00:00:21,000 --> 00:00:27,000\nInstead of computing P valid by adding the probabilities of heads and tails,\n\n7\n00:00:27,000 --> 00:00:33,000\nwe can compute it by subtracking from 1 the probability of events not invalid,\n\n8\n00:00:33,000 --> 00:00:39,000\nwhich is the probability of E, which is 0.00002.\n\n9\n00:00:39,000 --> 00:00:41,000\nThat would get us the same answer.\n\n10\n00:00:41,000 --> 00:00:46,000\nThe property that we're using to do this is the complementary even property.\n\n11\n00:00:46,000 --> 00:00:52,000\nWhat it states is that for any event A, the probability of that event\n\n12\n00:00:52,000 --> 00:00:55,000\n and the probability of the complement of that event--\n\n13\n00:00:55,000 --> 00:00:58,000\nthat is of that not happening--is equal to 1.\n\n14\n00:00:58,000 --> 00:01:05,000\nWhat not-A here means is that elements in the universe minus the elements in A.\n\n15\n00:01:05,000 --> 00:01:08,000\nThis is set subtraction. We can think of that like this.\n\n16\n00:01:08,000 --> 00:01:15,000\nThis is our universe if we have some event A all outcomes that are not part of a\n\n17\n00:01:15,000 --> 00:01:17,000\nmust be the complement of A.\n\n18\n00:01:17,000 --> 00:01:21,000\nThat's what you get by removing A from the probability set.\n\n", "id": 19002}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjCuwEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/24002", "type": "Nugget", "id": 24002}, {"nuggetType": "quiz", "name": "Perfect Cipher Is Impractical", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjIuwEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/24008", "type": "Nugget", "id": 24008}, {"nuggetType": "lecture", "name": "Perfect Cipher Is Impractical Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "49fa7b19-9405-4722-afb3-8c6020a57c1d", "name": "cs387_unit1_16_s_Perfect-Cipher-is-Impractical", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGIykAQw", "youtube_id": "UzlZLBoiF_8", "youtube_state": "done", "path": "Course/cs387/Media/21004", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nThis is a fairly tricky question.\n\n2\n00:00:02,000 --> 00:00:04,000\nThe first one is actually not true.\n\n3\n00:00:04,000 --> 00:00:09,000\nThe reason it's not true is there's no guarantee that the same cipher text \n\n4\n00:00:09,000 --> 00:00:11,000\nwith different keys doesn't decrypt to the same message.\n\n5\n00:00:11,000 --> 00:00:15,000\nWe know that the size of M0 is no bigger than the size of K, \n\n6\n00:00:15,000 --> 00:00:18,000\nbecause we constructed by unioning the decryption, \n\n7\n00:00:18,000 --> 00:00:21,000\nwhich produces just one result over all possible keys.\n\n8\n00:00:21,000 --> 00:00:24,000\nWe know that it's no bigger than the number of possible keys.\n\n9\n00:00:24,000 --> 00:00:26,000\nWe don't know that it's actually equal to that.\n\n10\n00:00:26,000 --> 00:00:30,000\nThat would require another assumption about the decryption function.\n\n11\n00:00:30,000 --> 00:00:32,000\nThe other two properties we do know are correct.\n\n12\n00:00:32,000 --> 00:00:36,000\nWe know that M0 has fewer elements than M.\n\n13\n00:00:36,000 --> 00:00:38,000\nThis is the case because of this assumption.\n\n14\n00:00:38,000 --> 00:00:44,000\nWe said that the space of possible messages is greater than the space of possible keys.\n\n15\n00:00:44,000 --> 00:00:50,000\nIf that's the case, combined with the size of M0 being less than or equal to K,\n\n16\n00:00:50,000 --> 00:00:54,000\nthen we know that the size of M0 must be less than the size of M.\n\n17\n00:00:54,000 --> 00:00:57,000\nThe third property is also true.\n\n18\n00:00:57,000 --> 00:01:01,000\nThis is the key property that should give us insight why it can't be a perfect cipher.\n\n19\n00:01:01,000 --> 00:01:05,000\nThere exists some message in M that can't be in M0, \n\n20\n00:01:05,000 --> 00:01:08,000\nand that follows directly from this property.\n\n21\n00:01:08,000 --> 00:01:11,000\nIf one set is bigger than another set, there must be some element \n\n22\n00:01:11,000 --> 00:01:14,000\nin the bigger set that's not in the smaller one.\n\n23\n00:01:14,000 --> 00:01:17,000\nHow do we go from there to prove that it's not a perfect cipher?\n\n24\n00:01:17,000 --> 00:01:23,000\nLet's remember our definition of a perfect cipher, and that was that the probability\n\n25\n00:01:23,000 --> 00:01:27,000\nthat the message  is some particular message given the ciphertext \n\n26\n00:01:27,000 --> 00:01:30,000\nwithout knowing anything other than that ciphertext\n\n27\n00:01:30,000 --> 00:01:36,000\nis equal to the probability that M* was the message beforehand.\n\n28\n00:01:36,000 --> 00:01:38,000\nThat probably hasn't changed.\n\n29\n00:01:38,000 --> 00:01:46,000\nIn this case, if we have intercepted C0. This was our ciphertext for the example.\n\n30\n00:01:46,000 --> 00:01:52,000\nBecause of this property, we know that the probability that the message is M*\n\n31\n00:01:52,000 --> 00:01:58,000\nis actually 0, because that's not in the set of possible decryptions of C0\n\n32\n00:01:58,000 --> 00:02:00,000\nover all possible keys.\n\n33\n00:02:00,000 --> 00:02:03,000\nBut we said that M* was a message in M\n\n34\n00:02:03,000 --> 00:02:09,000\nthat initially had some non-zero probabilty, which is not the case that these two are equal,\n\n35\n00:02:09,000 --> 00:02:11,000\nbecause this was greater than 0.\n\n36\n00:02:11,000 --> 00:02:14,000\nWe've contradicted the requirement for our perfect cipher.\n\n37\n00:02:14,000 --> 00:02:18,000\nThe only assumption that went into this was this one.\n\n38\n00:02:18,000 --> 00:02:22,000\nWe assumed that there existed a perfect cipher where the number of messages \n\n39\n00:02:22,000 --> 00:02:24,000\nis greater than the number of keys.\n\n40\n00:02:24,000 --> 00:02:26,000\nWe've reached a contradiction.\n\n41\n00:02:26,000 --> 00:02:31,000\nThis proves that there exists no perfect ciphers where the number of messages\n\n42\n00:02:31,000 --> 00:02:34,000\n is greater than the number of keys. This is bad news.\n\n43\n00:02:34,000 --> 00:02:37,000\nEvery cipher that's practical must be imperfect.\n\n44\n00:02:37,000 --> 00:02:42,000\nThis means that given some ciphertext that an attacker intercepts,\n\n45\n00:02:42,000 --> 00:02:44,000\neven if the attacker knows nothing about the key, \n\n46\n00:02:44,000 --> 00:02:47,000\nthey can eliminate some of the possible messages.\n\n47\n00:02:47,000 --> 00:02:52,000\nThis means that when people attempt to use ciphers similar to a one-time pad in practice,\n\n48\n00:02:52,000 --> 00:02:54,000\nthey tend to actually not work very well.\n\n49\n00:02:54,000 --> 00:02:58,000\nThe reason for this is that they reuse keys, because the number of messages they\n\n50\n00:02:58,000 --> 00:03:02,000\nwant to encrypt is greater than the number of keys they have.\n\n51\n00:03:02,000 --> 00:03:05,000\nNext we'll look at an interesting historical example of this.\n\n", "id": 21004}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBirwwEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/25003", "type": "Nugget", "id": 25003}, {"nuggetType": "lecture", "name": "Lorenz Cipher", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "f74c8003-3acb-447d-afcd-624f44cb72d9", "name": "cs387_unit1_17_l_Lorenz-Cipher", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGO2EAQw", "youtube_id": "14Sroze0uas", "youtube_state": "done", "path": "Course/cs387/Media/17005", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nI want to show you an example of the kinds of things that go wrong \n\n2\n00:00:04,000 --> 00:00:07,000\nwhen people attempt to use one-time pads in practice.\n\n3\n00:00:07,000 --> 00:00:12,000\nThis is a story that is very important to the history of computing\n\n4\n00:00:12,000 --> 00:00:14,000\nas well as the history of the world.\n\n5\n00:00:14,000 --> 00:00:18,000\nIt's how the Allies at Bletchley Park were able to break the Lorenz cipher,\n\n6\n00:00:18,000 --> 00:00:24,000\nwhich was a cipher used by the Nazis to communicate between the capitals of the cities of Europe.\n\n7\n00:00:24,000 --> 00:00:26,000\n[Vernam's \"One-Time\" Pad (1919)]\n\n8\n00:00:26,000 --> 00:00:32,000\nThe story goes back at least to the 1919 patent that Gilbert Vernam,\n\n9\n00:00:32,000 --> 00:00:36,000\nwho was an engineering working at Bell Labs, got on a one-time pad system.\n\n10\n00:00:36,000 --> 00:00:38,000\nIt shouldn't really be called a one-time pad.\n\n11\n00:00:38,000 --> 00:00:40,000\nIt was a re-use pad system.\n\n12\n00:00:40,000 --> 00:00:44,000\nThe idea behind this is somewhat clear from the patent,\n\n13\n00:00:44,000 --> 00:00:47,000\nespecially if we rotate it so we can see it more clearly.\n\n14\n00:00:47,000 --> 00:00:50,000\nOne thing you can see is that there are five wires going into it.\n\n15\n00:00:50,000 --> 00:00:56,000\nThis is the output from reading a tape that encodes the message.\n\n16\n00:00:56,000 --> 00:00:59,000\nThe key was also on a paper tape.\n\n17\n00:00:59,000 --> 00:01:03,000\nThe encoding used just five bits. This was the Baudot code.\n\n18\n00:01:03,000 --> 00:01:07,000\nWith five bits we can encode 32 different symbols.\n\n19\n00:01:07,000 --> 00:01:11,000\nThat's enough for the alphabet and a few punctuation marks.\n\n20\n00:01:11,000 --> 00:01:14,000\nYou can see the letters were encoded.\n\n21\n00:01:14,000 --> 00:01:18,000\nThere's the strip down the middle that was used to align the tape.\n\n22\n00:01:18,000 --> 00:01:21,000\nThere are five bits to encode each letter.\n\n23\n00:01:21,000 --> 00:01:24,000\nManaging paper tapes like this was difficult, \n\n24\n00:01:24,000 --> 00:01:27,000\nand the keys needed to be distributed on paper tapes.\n\n25\n00:01:27,000 --> 00:01:30,000\nIf the keys were constructed in a perfectly random way\n\n26\n00:01:30,000 --> 00:01:33,000\nand you had enough key that you never needed to reuse it,\n\n27\n00:01:33,000 --> 00:01:38,000\nthis would actually be a perfect cipher. This would be a perfectly good one-time pad.\n\n28\n00:01:38,000 --> 00:01:42,000\nThe problem is distributing large paper tapes is pretty difficult,\n\n29\n00:01:42,000 --> 00:01:45,000\nespecially if you're trying to do this in war time.\n\n30\n00:01:45,000 --> 00:01:50,000\nThe machine that was built based around the same ideas, the Lorenz Cipher Machine,\n\n31\n00:01:50,000 --> 00:01:56,000\nwhere instead of having a paper tape with the key you had a machine that would\n\n32\n00:01:56,000 --> 00:02:00,000\nattempt to produce a good sequence of key bits.\n\n33\n00:02:00,000 --> 00:02:04,000\nOf course, it's impossible for a machine to produce a perfectly random sequence.\n\n34\n00:02:04,000 --> 00:02:09,000\nThe structure of the machine determines properties of the sequence that's produced.\n\n35\n00:02:12,000 --> 00:02:16,000\nThe machine would generate a key sequence based on its configuration.\n\n36\n00:02:16,000 --> 00:02:20,000\nThat configuration is the initial settings of all the rotors and other parameters\n\n37\n00:02:20,000 --> 00:02:22,000\nthat we'll talk about soon.\n\n38\n00:02:22,000 --> 00:02:26,000\nIf there are two machines that start in the same configuration, \n\n39\n00:02:26,000 --> 00:02:29,000\nsay one in Berlin and one in Paris,\n\n40\n00:02:29,000 --> 00:02:31,000\nthen they produce the same key.\n\n41\n00:02:31,000 --> 00:02:37,000\nTheir encryption is just the message XOR'd with the key that produces the ciphertext\n\n42\n00:02:37,000 --> 00:02:44,000\nthat's sent over radio wireless, received at the other end,\n\n43\n00:02:44,000 --> 00:02:47,000\nwhich puts it into a machine starting with the same configuration.\n\n44\n00:02:47,000 --> 00:02:53,000\nThat means that ciphertext XOR'd with the key generated by this machine,\n\n45\n00:02:53,000 --> 00:02:57,000\nstarting from the same configuration will decrypt to receive the message.\n\n46\n00:02:57,000 --> 00:03:01,000\nThe machine was designed to produce a large number of possible sequences.\n\n47\n00:03:01,000 --> 00:03:05,000\nThere are a lot of complex operations, which we'll talk about a little next,\n\n48\n00:03:05,000 --> 00:03:09,000\nbut the key would not repeat for 10^19 letters.\n\n49\n00:03:09,000 --> 00:03:13,000\nGiven that this number was larger than the amount of text written by humans, \n\n50\n00:03:13,000 --> 00:03:18,000\nat least at the time, this lead the Nazis using it to believe that it provided\n\n51\n00:03:18,000 --> 00:03:20,000\nthe highest security they needed.\n\n52\n00:03:20,000 --> 00:03:25,000\nThey also were confident that because these machines operated in capitals--\n\n53\n00:03:25,000 --> 00:03:28,000\nthey weren't like the enigma machines, which operated in the field--\n\n54\n00:03:28,000 --> 00:03:31,000\nthat they never lost one of these machines.\n\n55\n00:03:31,000 --> 00:03:34,000\nThe Allies never actually had access to the actual machine \n\n56\n00:03:34,000 --> 00:03:37,000\nto try to figure out how it worked.\n\n", "id": 17005}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiswwEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/25004", "type": "Nugget", "id": 25004}, {"nuggetType": "lecture", "name": "Weakness In Keys Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "ad23f23a-dadc-4470-a7ad-75bba4d8b283", "name": "cs387_unit1_21_s_Weakness-in-Keys", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGK3DAQw", "youtube_id": "GoGI_LFUYvY", "youtube_state": "done", "path": "Course/cs387/Media/25005", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\n[Evans] The answer is there are 41 different positions for the first wheel,\n\n2\n00:00:05,000 --> 00:00:10,000\nand we multiply that by 31 different positions for the second K wheel.\n\n3\n00:00:10,000 --> 00:00:16,000\nAnd so that means that every 1271 letters those wheels would repeat,\n\n4\n00:00:16,000 --> 00:00:21,000\nand there are only 1271 different possible settings for the K wheels.\n\n5\n00:00:21,000 --> 00:00:24,000\nRemember that based on the intercepted messages\n\n6\n00:00:24,000 --> 00:00:26,000\nthey had learned enough about the structure of the machine\n\n7\n00:00:26,000 --> 00:00:29,000\nto know what the bits are around these wheels.\n\n8\n00:00:29,000 --> 00:00:33,000\nSo it's only necessary to figure out the right configuration.\n\n9\n00:00:33,000 --> 00:00:37,000\nSo certainly today, being able to try 1200-some possibilities\n\n10\n00:00:37,000 --> 00:00:40,000\nwould be trivial with a modern computer,\n\n11\n00:00:40,000 --> 00:00:43,000\nand you might wonder why when they encountered this at Bletchley Park\n\n12\n00:00:43,000 --> 00:00:46,000\nthey didn't just go down to the store and buy a computer to solve it,\n\n13\n00:00:46,000 --> 00:00:51,000\nbut this was 1941. Computers didn't exist yet. They had to invent one first.\n\n14\n00:00:51,000 --> 00:00:56,000\nAnd in fact, arguably, the first computer was invented to solve exactly this problem.\n\n15\n00:00:56,000 --> 00:01:01,000\nBefore we get to that, I want to make sure that we actually have enough of an advantage here\n\n16\n00:01:01,000 --> 00:01:04,000\nthat trying these configurations will help.\n\n17\n00:01:04,000 --> 00:01:10,000\nSo let's look at the probability that if we guess the right key\n\n18\n00:01:10,000 --> 00:01:13,000\nwe'll be able to tell that we got the right message.\n\n", "id": 25005}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiuwwEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/25006", "type": "Nugget", "id": 25006}, {"nuggetType": "lecture", "name": "Intercepting Messages Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "2b74bd8f-f3e0-48fb-a63d-0a4fcddc06c4", "name": "cs387_unit1_18_s_Intercepting-messages", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGMtlDA", "youtube_id": "gdE_CZVTySs", "youtube_state": "done", "path": "Course/cs387/Media/13003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nThe answer is M XOR M'.\n\n2\n00:00:03,000 --> 00:00:06,000\nThe reason for this is because each cipher text \n\n3\n00:00:06,000 --> 00:00:10,000\nis the result of XORing a message with a key.\n\n4\n00:00:10,000 --> 00:00:14,000\nC is equal to M XOR K.\n\n5\n00:00:14,000 --> 00:00:20,000\nC' is equal to M' XOR K. Note that the K is the same in both cases.\n\n6\n00:00:20,000 --> 00:00:30,000\nIf we XOR C and C', that's going to be M XOR K XOR M' XOR K.\n\n7\n00:00:30,000 --> 00:00:35,000\nThe really useful thing that happens if you're trying to break this cipher\n\n8\n00:00:35,000 --> 00:00:37,000\nis these two Ks will cancel out.\n\n9\n00:00:37,000 --> 00:00:41,000\nThat's why you end up with M XOR M'.\n\n10\n00:00:41,000 --> 00:00:44,000\nThat doesn't tell right away what the message is.\n\n11\n00:00:44,000 --> 00:00:49,000\nIf the messages were exactly the same M XOR M' would just be zero,\n\n12\n00:00:49,000 --> 00:00:51,000\nand this wouldn't tell us anything.\n\n13\n00:00:51,000 --> 00:00:55,000\nThe ciphertext XORed will be zero, but they weren't exactly the same.\n\n14\n00:00:55,000 --> 00:00:59,000\nWhen the Allies XORed these ciphertexts they didn't get all zeros.\n\n15\n00:00:59,000 --> 00:01:03,000\nThe reason for that was because of the abbreviations that were used in the transmission.\n\n16\n00:01:03,000 --> 00:01:09,000\nAn example would be if the original message has Spruchnummber, \n\n17\n00:01:09,000 --> 00:01:18,000\nmeaning serial number, maybe in the retransmission it became an abbreviation Spruchnr.\n\n18\n00:01:18,000 --> 00:01:23,000\nThat would mean the place were the letters start to be different we start\n\n19\n00:01:23,000 --> 00:01:27,000\n to see differences between the ciphertext and the ciphertext prime.\n\n20\n00:01:27,000 --> 00:01:30,000\nUnlike the key which was pretty close to random, \n\n21\n00:01:30,000 --> 00:01:33,000\nthere were a lot of things you could guess about the messages.\n\n22\n00:01:33,000 --> 00:01:36,000\nThe Allies had a pretty good guess that the message was in German.\n\n23\n00:01:36,000 --> 00:01:40,000\nThe Allies could start trying. Let's say they guess the message.\n\n24\n00:01:40,000 --> 00:01:42,000\nWe'll guess it's M*.\n\n25\n00:01:42,000 --> 00:01:51,000\nThen we could try seeing what we get when we do M* XORed with a C XORed with a C'.\n\n26\n00:01:51,000 --> 00:01:53,000\nWe can make some guess for the message.\n\n27\n00:01:53,000 --> 00:01:56,000\nTry XORing it the intercepted ciphertext. \n\n28\n00:01:56,000 --> 00:01:59,000\nThat should give us back the other message, \n\n29\n00:01:59,000 --> 00:02:02,000\nand we'll look if that looks like a possible  message.\n\n30\n00:02:02,000 --> 00:02:05,000\nThis is definitely a painstaking process but something that can be done.\n\n31\n00:02:05,000 --> 00:02:08,000\nOnce you get the two messages by this guessing process,\n\n32\n00:02:08,000 --> 00:02:10,000\nthen it's easy to find the key.\n\n33\n00:02:10,000 --> 00:02:13,000\nOnce you have the two messages through this guessing,\n\n34\n00:02:13,000 --> 00:02:17,000\nyou had the ciphertext intercepted. Now you know the key.\n\n35\n00:02:17,000 --> 00:02:19,000\nLearning the messages might be useful. \n\n36\n00:02:19,000 --> 00:02:22,000\nBy the time you've done all this work maybe it's too late for the message to be useful,\n\n37\n00:02:22,000 --> 00:02:24,000\nbut learning the key could be really useful.\n\n38\n00:02:24,000 --> 00:02:29,000\nThis was done by Col. John Tiltman who took these two intercepts\n\n39\n00:02:29,000 --> 00:02:32,000\n and determined the key that produced them.\n\n40\n00:02:32,000 --> 00:02:36,000\nThey had enough content here that there were 4000 letters in the intercept,\n\n41\n00:02:36,000 --> 00:02:39,000\nso they had a 4000-long key.\n\n42\n00:02:39,000 --> 00:02:44,000\nThis key was given to Bill Tutte. This was his first assignment at Bletchley Park.\n\n43\n00:02:44,000 --> 00:02:47,000\nHe was to try to make sense of these key.\n\n44\n00:02:47,000 --> 00:02:50,000\nAfter about 6 months of work, he was able to determine\n\n45\n00:02:50,000 --> 00:02:53,000\nthe machine structure that produced that key,\n\n46\n00:02:53,000 --> 00:02:55,000\nand this is what it is.\n\n47\n00:02:55,000 --> 00:02:57,000\nYou have five lines going in. \n\n48\n00:02:57,000 --> 00:03:01,000\nThis is the five bits in the Baudot code for encoding  each character.\n\n49\n00:03:01,000 --> 00:03:04,000\nThe rest of the machine is to produce the key bits.\n\n50\n00:03:04,000 --> 00:03:07,000\nThere is an XOR with each of these wheels. \n\n51\n00:03:07,000 --> 00:03:11,000\nThese wheels will rotate with each character.\n\n52\n00:03:11,000 --> 00:03:16,000\nThen there is another set of wheels that sometimes rotate and sometimes don't.\n\n53\n00:03:16,000 --> 00:03:18,000\nWe have these two M wheels.\n\n54\n00:03:18,000 --> 00:03:24,000\nBased on the result of XORing the M wheels, either all the S wheels rotate one position\n\n55\n00:03:24,000 --> 00:03:27,000\nfor that character or none of them do.\n\n56\n00:03:27,000 --> 00:03:31,000\nThis was really the biggest weakness in Lorenz cipher--the S wheels all moved at once.\n\n", "id": 13003}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiRywEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/26001", "type": "Nugget", "id": 26001}, {"nuggetType": "lecture", "name": "Lorenz Cipher Machine", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "4e1144ac-c0af-4ede-bb2c-4a8f82b8b6c9", "name": "cs387_unit1_19_q_Lorenz-Cipher-Machine", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGMxlDA", "youtube_id": "_yfl3KOVzDE", "youtube_state": "done", "path": "Course/cs387/Media/13004", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nThis is the structure of the machine.\n\n2\n00:00:02,000 --> 00:00:09,000\nEach letter of the message would be divided into 5 bits, and those would be XOR'd\n\n3\n00:00:09,000 --> 00:00:13,000\nwith the value coming from the corresponding K wheel.\n\n4\n00:00:13,000 --> 00:00:18,000\nThese wheels would rotate with each letter,\n\n5\n00:00:18,000 --> 00:00:21,000\nand at each position they either had a 0 or a 1, \n\n6\n00:00:21,000 --> 00:00:25,000\ndepending on whether there was a pin in that position or not.\n\n7\n00:00:25,000 --> 00:00:29,000\nEach wheel had a different size.\n\n8\n00:00:29,000 --> 00:00:34,000\nThe last one had 23. The first one had 41. They were different-sized wheels.\n\n9\n00:00:34,000 --> 00:00:40,000\nThis would also be XOR'd with the result from the S wheels,\n\n10\n00:00:40,000 --> 00:00:42,000\nwhich worked similarly.\n\n11\n00:00:42,000 --> 00:00:46,000\nThey also had positions that were either 0s or 1s around the wheels.\n\n12\n00:00:46,000 --> 00:00:49,000\nThe different was the K wheels turned every character.\n\n13\n00:00:49,000 --> 00:00:54,000\nThe S wheels only turned conditionally on the result of 2 other wheels, \n\n14\n00:00:54,000 --> 00:00:59,000\nwhich were the M wheels. The M1 wheel would turn every time.\n\n15\n00:00:59,000 --> 00:01:03,000\nThe M2 wheel would rotate depending on the value of the M1 wheel\n\n16\n00:01:03,000 --> 00:01:06,000\nand depending on the XOR of those, either all the S wheels \n\n17\n00:01:06,000 --> 00:01:09,000\nwould rotate by 1 or none of them would.\n\n18\n00:01:09,000 --> 00:01:14,000\nThen the result of all these XORs is the cipher text.\n\n19\n00:01:14,000 --> 00:01:17,000\nThe is similar to the idea behind a one-time pat.\n\n20\n00:01:17,000 --> 00:01:21,000\nWe're XORing message with key.\n\n21\n00:01:21,000 --> 00:01:25,000\nBut the key is not a perfectly random sequence. It's the key generated by this machine.\n\n22\n00:01:25,000 --> 00:01:29,000\nTo break the cipher, once you knew the structure of the machine, that's not enough.\n\n23\n00:01:29,000 --> 00:01:31,000\nYou need to know the initial configuration.\n\n24\n00:01:31,000 --> 00:01:35,000\nHere's the intercepted message that was intercepted over the radio.\n\n25\n00:01:35,000 --> 00:01:39,000\nWe can think of all the characters in the message.\n\n26\n00:01:39,000 --> 00:01:42,000\nThe important thing to remember about the Lorenz cipher\n\n27\n00:01:42,000 --> 00:01:48,000\nis that the message encoding each character--each character is encoded into 5 bits, \n\n28\n00:01:48,000 --> 00:01:50,000\nusing the Baudot code.\n\n29\n00:01:50,000 --> 00:01:54,000\nThe cipher text is in these same sequences where each cipher text bit \n\n30\n00:01:54,000 --> 00:01:57,000\ncorresponds to one bit of that letter.\n\n31\n00:01:57,000 --> 00:02:00,000\nThe next one corresponds to the next bit of that letter.\n\n32\n00:02:00,000 --> 00:02:04,000\nWe can think of the cipher text being broken into channels\n\n33\n00:02:04,000 --> 00:02:08,000\ncorresponding to each part of the letter.\n\n34\n00:02:08,000 --> 00:02:14,000\nThat means each channel would be the sequences that repeat every 5.\n\n35\n00:02:14,000 --> 00:02:18,000\nThis would be part of the first letter, part of the first letter.\n\n36\n00:02:18,000 --> 00:02:20,000\nThis would be the second part of the first letter. \n\n37\n00:02:20,000 --> 00:02:22,000\nThis would be the second part of the second letter.\n\n38\n00:02:22,000 --> 00:02:24,000\nAnd this would be the third part of the first letter.\n\n39\n00:02:24,000 --> 00:02:29,000\nThis would be the third part of the second letter and so on.\n\n40\n00:02:29,000 --> 00:02:32,000\nWe can think of each of these as a separate channel.\n\n41\n00:02:32,000 --> 00:02:34,000\nWhat we're going to do is use a new notation.\n\n42\n00:02:34,000 --> 00:02:40,000\nWe're going to subscript Z by channel and the letter for that channel.\n\n43\n00:02:40,000 --> 00:02:45,000\nZc sub i is the ith letter for channel c.\n\n44\n00:02:45,000 --> 00:02:55,000\nIn terms of this mapping, if we look at channel 0, that's going to be  Z0, Z5,  Z10.\n\n45\n00:02:55,000 --> 00:02:58,000\nWe can just break the cipher text up into channels.\n\n46\n00:02:58,000 --> 00:03:05,000\nThe key reason for doing this is because of this weakness that was noticed in the cipher.\n\n47\n00:03:05,000 --> 00:03:10,000\nThe key weakness is that all these S wheels move in turn.\n\n48\n00:03:10,000 --> 00:03:14,000\nEither when we advance one position \n\n49\n00:03:14,000 --> 00:03:18,000\nthey're the same for all the channels or they advance by one for all the channels.\n\n50\n00:03:18,000 --> 00:03:23,000\nThe value of each of these depends on the message.\n\n51\n00:03:23,000 --> 00:03:27,000\nIt also depends on the outputs of the K wheels,\n\n52\n00:03:27,000 --> 00:03:32,000\nand it is also XOR'd without outputs of the S wheels.\n\n53\n00:03:32,000 --> 00:03:36,000\nBy separating it into those three pieces, we're going to be able to take advantage\n\n54\n00:03:36,000 --> 00:03:39,000\nof the properties that they have.\n\n55\n00:03:39,000 --> 00:03:42,000\nThe key insight is that the S wheels don't always turn.\n\n56\n00:03:42,000 --> 00:03:45,000\nIf we look at subsequent characters, \n\n57\n00:03:45,000 --> 00:03:49,000\nthere's a good chance that the S wheels have not changed.\n\n58\n00:03:49,000 --> 00:03:53,000\nWe're going to define \u0394Z sub c, i\n\n59\n00:03:53,000 --> 00:03:58,000\nas the difference between 2 subsequent characters in the cipher text for that channel.\n\n60\n00:03:58,000 --> 00:04:03,000\nThat's XOR'd with Zc of i plus 1.\n\n61\n00:04:03,000 --> 00:04:08,000\nNow because this is for that channel, these are five-characters apart\n\n62\n00:04:08,000 --> 00:04:13,000\nin the intercepted cipher text, but they're adjacent for that channel.\n\n63\n00:04:13,000 --> 00:04:17,000\nWhat happens when we look at these values for two different channels?\n\n64\n00:04:17,000 --> 00:04:20,000\nWe're going to look at channel 0, \n\n65\n00:04:20,000 --> 00:04:24,000\nand we're going to XOR that with the delta value for channel 1.\n\n66\n00:04:24,000 --> 00:04:31,000\nPlugging in the definitions, that's just the result of Z XORing all of these values.\n\n67\n00:04:31,000 --> 00:04:36,000\nWhere this becomes valuable is because we can break these down into the three parts.\n\n68\n00:04:36,000 --> 00:04:42,000\nLet's break them own into parts, separating the M, the K, and the S parts\n\n69\n00:04:42,000 --> 00:04:45,000\nthat combined into this cipher text.\n\n70\n00:04:45,000 --> 00:04:48,000\nWhat we get is these three things.\n\n71\n00:04:48,000 --> 00:04:56,000\nFor the message bits we have the XORs of all the message bits for the two channels adjacent\n\n72\n00:04:56,000 --> 00:04:59,000\nand the key bits XOR'd with the message bits.\n\n73\n00:04:59,000 --> 00:05:01,000\nThen we have this for the S bits as well.\n\n74\n00:05:01,000 --> 00:05:03,000\nI want to ask a brief quiz here.\n\n75\n00:05:03,000 --> 00:05:13,000\nFor each of these combinations--this is \u0394m, \u0394K, and \u0394S.\n\n76\n00:05:13,000 --> 00:05:16,000\nSupposing we could separate each of those, the question is which of these \n\n77\n00:05:16,000 --> 00:05:18,000\ninequalities are likely to be true.\n\n78\n00:05:18,000 --> 00:05:25,000\nEach one we're asking whether the probability of that part being 0 is greater than 1/2.\n\n79\n00:05:25,000 --> 00:05:29,000\nIf it was a uniform distribution, the probability would be equal to 1/2.\n\n80\n00:05:29,000 --> 00:05:35,000\nIf it's not uniformly distributed, then the probability could be less than or greater than 1/2.\n\n81\n00:05:35,000 --> 00:05:39,000\nI'm asking here are there any of these that we can be confident--\n\n82\n00:05:39,000 --> 00:05:44,000\nor at least have a good likelihood --that the probability of the delta for the component\n\n83\n00:05:44,000 --> 00:05:46,000\nis equal to zero.\n\n84\n00:05:46,000 --> 00:05:48,000\nLet me remind you what the components are.\n\n85\n00:05:48,000 --> 00:05:54,000\nThe message is text in a language, and in this case it's in the language German.\n\n86\n00:05:54,000 --> 00:05:58,000\nThese are the K wheels. Each wheel rotates with every character.\n\n87\n00:05:58,000 --> 00:06:02,000\nThey have pins around the wheels deciding if it's a 0 or a 1.\n\n88\n00:06:02,000 --> 00:06:04,000\nThese are the S wheels.\n\n89\n00:06:04,000 --> 00:06:09,000\nThe S wheels rotate only when the output of the M wheels is a 1.\n\n90\n00:06:09,000 --> 00:06:15,000\nSometimes they don't rotate at all. Sometimes they all rotate at the same time.\n\n", "id": 13004}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiSywEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/26002", "type": "Nugget", "id": 26002}, {"nuggetType": "lecture", "name": "Weakness In Keys", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "7d77e313-d88f-424b-9d82-5d7297655d39", "name": "cs387_unit1_21_q_Weakness-in-Keys", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGJ11DA", "youtube_id": "DdfUc-jYTuA", "youtube_state": "done", "path": "Course/cs387/Media/15005", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nWhat more do we know about K?\n\n2\n00:00:03,000 --> 00:00:07,000\nHere's our Lorenz machine, and we have the K wheels.\n\n3\n00:00:07,000 --> 00:00:10,000\nThat's what produces K, and each of these wheels might be a different size.\n\n4\n00:00:10,000 --> 00:00:15,000\nThe first one has 41 positions that are all set to either 0s or 1s.\n\n5\n00:00:15,000 --> 00:00:18,000\nThe second one has 31.\n\n6\n00:00:18,000 --> 00:00:25,000\nIf we're looking at \u0394Z for two channels--remember what we were producing here,\n\n7\n00:00:25,000 --> 00:00:34,000\nlooking at the XOR of \u0394Z from channel 0 XORed with \u0394Z from channel 1.\n\n8\n00:00:34,000 --> 00:00:38,000\nLet's focus just on these two channels--the outputs.\n\n9\n00:00:38,000 --> 00:00:41,000\nThe question is how many different configurations are there\n\n10\n00:00:41,000 --> 00:00:45,000\nfor the first two K wheels, the ones for channel 0 and channel 1.\n\n11\n00:00:45,000 --> 00:00:49,000\nThe numbers here are the size of those wheels.\n\n", "id": 15005}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiTywEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/26003", "type": "Nugget", "id": 26003}, {"nuggetType": "lecture", "name": "Guessing Keys", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "e07b9d16-8532-4338-8f70-c4557e741bf0", "name": "cs387_unit1_22_q_Guessing-Keys", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGJTLAQw", "youtube_id": "zon0TTAlL1E", "youtube_state": "done", "path": "Course/cs387/Media/26004", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Evans] So if you recall the separate channels, we divided the cipher \n\n2\n00:00:04,000 --> 00:00:09,000\ninto the message part, the key part, and the part from the S wheels,\n\n3\n00:00:09,000 --> 00:00:12,000\nand now we've concluded that if we can--\n\n4\n00:00:12,000 --> 00:00:16,000\nwe're going to try 1271 possible settings.\n\n5\n00:00:16,000 --> 00:00:20,000\nSo for 1 of those possible settings we're going to know all the key bits, \n\n6\n00:00:20,000 --> 00:00:24,000\nand that means if we guess the right setting the key will go to 0.\n\n7\n00:00:24,000 --> 00:00:27,000\nSo now all that's left is the other 2 parts.\n\n8\n00:00:27,000 --> 00:00:29,000\nThis is what we had before.\n\n9\n00:00:29,000 --> 00:00:33,000\nWe knew that the probability of delta M being zero was greater than a half,\n\n10\n00:00:33,000 --> 00:00:36,000\nand it was actually about 0.61 for German\n\n11\n00:00:36,000 --> 00:00:39,000\nbecause of the likelihood of message letters being repeated.\n\n12\n00:00:39,000 --> 00:00:44,000\nAnd we knew that the probability of delta S being 0 was about 0.73,\n\n13\n00:00:44,000 --> 00:00:46,000\nand that's because of the structure of the machine--\n\n14\n00:00:46,000 --> 00:00:49,000\nthat the S wheels don't advance every step.\n\n15\n00:00:49,000 --> 00:00:54,000\nOnly when the M wheels are on a 1 do the S wheels advance.\n\n16\n00:00:54,000 --> 00:01:01,000\nAnd so now we've said if we guess right, that means the probability that the key bits are 0\n\n17\n00:01:01,000 --> 00:01:03,000\ngoes to 1.\n\n18\n00:01:03,000 --> 00:01:05,000\nAnd it'll be 1 when we guess right.\n\n19\n00:01:05,000 --> 00:01:09,000\nWhen we don't guess right it'll be \u00bd.\n\n20\n00:01:09,000 --> 00:01:11,000\nSo in order to tell if we guess right, \n\n21\n00:01:11,000 --> 00:01:17,000\nwe need to know that the probability of the cipher text bits when we guess right,\n\n22\n00:01:17,000 --> 00:01:21,000\nthe probability of the delta Zs being 0 will be different from \u00bd.\n\n23\n00:01:21,000 --> 00:01:26,000\nSo the question is, what is the probability delta Z is 0 when we guess right?\n\n24\n00:01:26,000 --> 00:01:35,000\nAnd remember that what delta Z is is the XOR of delta M, delta K, and delta S.\n\n25\n00:01:35,000 --> 00:01:38,000\nSo to solve this you need to think about all the different things\n\n26\n00:01:38,000 --> 00:01:42,000\nthat would make delta Z equal to 0 and compute their probability.\n\n", "id": 26004}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiVywEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/26005", "type": "Nugget", "id": 26005}, {"nuggetType": "quiz", "name": "Keys And Kerchoffs Principle", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiXywEM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/26007", "type": "Nugget", "id": 26007}, {"nuggetType": "lecture", "name": "Otp Is A Perfect Cipher Pt 3", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "None", "name": "15_l_OTP-is-a-Perfect-Cipher-pt-3.mp4", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGJnmBQw", "youtube_id": "r_yVNQUqbBQ", "youtube_state": "processing", "path": "Course/cs387/Media/95001", "transcript": null, "id": 95001}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjM3wIM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/45004", "type": "Nugget", "id": 45004}, {"nuggetType": "lecture", "name": "Conditional Probability 2", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "022dad99-baeb-41e8-902e-c798953199a9", "name": "cs387_hw1_02_q_Conditional-Probability-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGMriAQw", "youtube_id": "_mDbqVVknFI", "youtube_state": "done", "path": "Course/cs387/Media/29002", "transcript": "\ufeff", "id": 29002}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiilgMM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/52002", "type": "Nugget", "id": 52002}, {"nuggetType": "lecture", "name": "Challenge Question", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "a fake dotsub id", "name": "cs387_hw1_08_p_Challenge-Question", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGM_ZBAw", "youtube_id": null, "youtube_state": "failed", "path": "Course/cs387/Media/77007", "transcript": null, "id": 77007}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjk1AMM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/60004", "type": "Nugget", "id": 60004}, {"nuggetType": "lecture", "name": "Secret Sharing Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "b3c7a099-271c-4030-977c-652a07f74b19", "name": "cs387_hw1_07_s_Secret-Sharing", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGKUfDA", "youtube_id": "d-iFZzQFvDk", "youtube_state": "done", "path": "Course/cs387/Media/4005", "transcript": "\ufeff", "id": 4005}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjIsgQM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/72008", "type": "Nugget", "id": 72008}, {"nuggetType": "quiz", "name": "Conditional Probability 2", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjJsgQM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/72009", "type": "Nugget", "id": 72009}, {"nuggetType": "program", "name": "Challenge Question", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjKsgQM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/72010", "suppliedCode": null, "type": "Nugget", "id": 72010}, {"nuggetType": "lecture", "name": "Lorenz Cipher", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "None", "name": "17_l_Lorenz-Cipher.mp4", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGObRBAw", "youtube_id": "14Sroze0uas", "youtube_state": "processing", "path": "Course/cs387/Media/76006", "transcript": null, "id": 76006}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjn0QQM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/76007", "type": "Nugget", "id": 76007}, {"nuggetType": "lecture", "name": "Conditional Probability 1", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "2134c8c6-1816-4e8b-bd57-e927a332e3a7", "name": "cs387_hw1_01_q_Conditional-Probability-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGLHqAQw", "youtube_id": "_5c5IT3B3rU", "youtube_state": "done", "path": "Course/cs387/Media/30001", "transcript": "\ufeff", "id": 30001}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjO2QQM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/77006", "type": "Nugget", "id": 77006}, {"nuggetType": "lecture", "name": "Conditional Probability 1 Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "0a0d230a-aae1-44d7-9f25-77ca80357dec", "name": "cs387_hw1_01_s_Conditional-Probability-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGJryAQw", "youtube_id": "kjSH7OjH3Ec", "youtube_state": "done", "path": "Course/cs387/Media/31002", "transcript": "\ufeff", "id": 31002}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiB8QQM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/80001", "type": "Nugget", "id": 80001}, {"nuggetType": "lecture", "name": "Toy Substitution Cipher 2", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "0a177474-ffce-465b-9cf9-17af4a084d39", "name": "cs387_hw1_06_q_Toy-Substitution-Cipher-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGPrSAQw", "youtube_id": "3GfmWntKsMI", "youtube_state": "done", "path": "Course/cs387/Media/27002", "transcript": "\ufeff", "id": 27002}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiC8QQM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/80002", "type": "Nugget", "id": 80002}, {"nuggetType": "lecture", "name": "Conditional Probability 2 Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "d13cde05-9b04-44df-be6c-1d230051754e", "name": "cs387_hw1_02_s_Conditional-Probability-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGOmBAgw", "youtube_id": "xIyuSp6gD38", "youtube_state": "done", "path": "Course/cs387/Media/33001", "transcript": "\ufeff", "id": 33001}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjp-AQM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/81001", "type": "Nugget", "id": 81001}, {"nuggetType": "quiz", "name": "Toy Substitution Cipher 1", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjq-AQM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/81002", "type": "Nugget", "id": 81002}, {"nuggetType": "lecture", "name": "Conditional Probability 3", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "d4be595b-f2e6-4ff8-8a7b-34831b981ab1", "name": "cs387_hw1_03_q_Conditional-Probability-3", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGNKJAgw", "youtube_id": "K9zD8xgWUT4", "youtube_state": "done", "path": "Course/cs387/Media/34002", "transcript": "\ufeff", "id": 34002}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjRgAUM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/82001", "type": "Nugget", "id": 82001}, {"nuggetType": "quiz", "name": "Secret Sharing", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjTgAUM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/82003", "type": "Nugget", "id": 82003}, {"nuggetType": "lecture", "name": "Toy Substitution Cipher 1", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "5efe3e2c-ad46-4688-a643-3b66e8808bd9", "name": "cs387_hw1_05_q_Toy-Substitution-Cipher-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGNmwAgw", "youtube_id": "5nX98t7sUTQ", "youtube_state": "done", "path": "Course/cs387/Media/39001", "transcript": "\ufeff", "id": 39001}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBi5iAUM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/83001", "type": "Nugget", "id": 83001}, {"nuggetType": "lecture", "name": "Toy Substitution Cipher 1 Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "2fad5091-8716-4f9b-a977-4abce5484baf", "name": "cs387_hw1_05_s_Toy-Substitution-Cipher-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGMG4Agw", "youtube_id": "fkksw_KyjNE", "youtube_state": "done", "path": "Course/cs387/Media/40001", "transcript": "\ufeff", "id": 40001}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBihkAUM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/84001", "type": "Nugget", "id": 84001}, {"nuggetType": "lecture", "name": "Toy Substitution Cipher 2 Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "676744db-e98f-4520-93d5-6da5b40e1412", "name": "cs387_hw1_06_s_Toy-Substitution-Cipher-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGKnAAgw", "youtube_id": "3obOJkG4IfI", "youtube_state": "done", "path": "Course/cs387/Media/41001", "transcript": "\ufeff", "id": 41001}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiJmAUM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/85001", "type": "Nugget", "id": 85001}, {"nuggetType": "quiz", "name": "Conditional Probability 1", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjxnwUM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/86001", "type": "Nugget", "id": 86001}, {"nuggetType": "quiz", "name": "Toy Substitution Cipher 2", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjBrwUM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/88001", "type": "Nugget", "id": 88001}, {"nuggetType": "lecture", "name": "Summary", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "5c58f9a4-53de-41f8-bad6-99e547ee4bda", "name": "cs387_unit1_26_l_Summary", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGM1lDA", "youtube_id": "4q9KijYd9Xc", "youtube_state": "done", "path": "Course/cs387/Media/13005", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\n[Evans] So we've reached the end of Unit 1.\n\n2\n00:00:02,000 --> 00:00:05,000\nLet me remind you what we've covered.\n\n3\n00:00:05,000 --> 00:00:08,000\nWe covered symmetric cryptosystems and introduced the terminology\n\n4\n00:00:08,000 --> 00:00:12,000\nand definitions we need to talk about encryption.\n\n5\n00:00:12,000 --> 00:00:16,000\nIn particular, we know what it means for a cryptosystem to be correct--\n\n6\n00:00:16,000 --> 00:00:20,000\nthat encryption and decryption are indeed inverses.\n\n7\n00:00:20,000 --> 00:00:25,000\nDefining security is a much trickier thing, and we talked about ways we could define security\n\n8\n00:00:25,000 --> 00:00:27,000\nfor a symmetric cryptosystem.\n\n9\n00:00:27,000 --> 00:00:32,000\nWe introduced the one-time pad, which is a very simple but important cryptosystem,\n\n10\n00:00:32,000 --> 00:00:35,000\nand it's all based on using the XOR operation.\n\n11\n00:00:35,000 --> 00:00:40,000\nAs long as we have a perfectly random key that's as long as the message,\n\n12\n00:00:40,000 --> 00:00:43,000\nthe one-time pad gives us perfect security.\n\n13\n00:00:43,000 --> 00:00:47,000\nWe looked at a formal way to define what a perfect cipher means\n\n14\n00:00:47,000 --> 00:00:50,000\nand prove that the one-time pad has that property.\n\n15\n00:00:50,000 --> 00:00:55,000\nWe also saw that in order to be perfect, a cipher has to be impractical--\n\n16\n00:00:55,000 --> 00:00:59,000\nthat the number of keys has to exceed the number of messages,\n\n17\n00:00:59,000 --> 00:01:03,000\nand that means that every cipher that's used in practice is potentially breakable.\n\n18\n00:01:03,000 --> 00:01:07,000\nWe saw one very interesting example of that with how the Allies at Bletchley Park\n\n19\n00:01:07,000 --> 00:01:10,000\nwere able to break the Lorenz cipher.\n\n20\n00:01:10,000 --> 00:01:14,000\nWe talked about modern symmetric ciphers which take advantage of computing power,\n\n21\n00:01:14,000 --> 00:01:18,000\nfollowing many of the same principles of the historical mechanical ciphers like Lorenz\n\n22\n00:01:18,000 --> 00:01:23,000\nbut using modern computing power and new ideas about how to scramble data\n\n23\n00:01:23,000 --> 00:01:28,000\nto produce much more confusion and make things much more challenging for cryptanalysis\n\n24\n00:01:28,000 --> 00:01:31,000\neven when attackers have access to the huge amounts of computing power \n\n25\n00:01:31,000 --> 00:01:33,000\navailable today.\n\n26\n00:01:33,000 --> 00:01:36,000\nI hope you enjoyed Unit 1 and have a good understanding\n\n27\n00:01:36,000 --> 00:01:40,000\nof some of the theory behind symmetric ciphers and how they're constructed.\n\n28\n00:01:40,000 --> 00:01:43,000\nIn Unit 2 we'll look at how to actually use symmetric ciphers \n\n29\n00:01:43,000 --> 00:01:46,000\nto solve problems like sending a message securely between 2 parties\n\n30\n00:01:46,000 --> 00:01:48,000\nover an insecure channel like the Internet\n\n31\n00:01:48,000 --> 00:01:51,000\nand being able to use symmetric ciphers to play games online\n\n32\n00:01:51,000 --> 00:01:54,000\nand to do important things like managing passwords.\n\n33\n00:01:54,000 --> 00:01:56,000\nHope to see everyone back for Unit 2.\n\n", "id": 13005}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBiRvwUM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/90001", "type": "Nugget", "id": 90001}, {"nuggetType": "lecture", "name": "Course Overview", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "92a950bc-3bd1-49d4-a8f1-36f97025a9cb", "name": "cs387_unit1_01_l_Course-Overview", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGKIfDA", "youtube_id": "na3D4OTJkBs", "youtube_state": "done", "path": "Course/cs387/Media/4002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nThe main things we're going to learn in this class:\n\n2\n00:00:02,000 --> 00:00:07,000\nthe first two units, we'll focus on symmetric cryptography and it's applications.\n\n3\n00:00:07,000 --> 00:00:11,000\nSymmetric cryptography means both parties have the same key.\n\n4\n00:00:11,000 --> 00:00:13,000\nSo if we have two people: Alice and Bob--\n\n5\n00:00:13,000 --> 00:00:16,000\nin cryptography we almost always talk about Alice and Bob--\n\n6\n00:00:16,000 --> 00:00:19,000\nit's not clear why, but, they're useful people to talk about\n\n7\n00:00:19,000 --> 00:00:22,000\nand they apparently have lots of secret messages to send between each other--\n\n8\n00:00:22,000 --> 00:00:26,000\nand they want to send messages.\n\n9\n00:00:26,000 --> 00:00:29,000\nThey want to know that they couldn't be intercepted\n\n10\n00:00:29,000 --> 00:00:31,000\nby some eavesdropper listening on the channel.\n\n11\n00:00:31,000 --> 00:00:36,000\nIn symmetric cryptography we assume that they both start knowing the same key,\n\n12\n00:00:36,000 --> 00:00:40,000\nand they can use that same key for both encryption and decryption,\n\n13\n00:00:40,000 --> 00:00:43,000\nwe'll see more of what that means soon in this unit.\n\n14\n00:00:43,000 --> 00:00:48,000\nWhat we'll do in units 3 and 4 is introduce asymmetric cryptography, \n\n15\n00:00:48,000 --> 00:00:50,000\nas well as some applications,\n\n16\n00:00:50,000 --> 00:00:55,000\nand asymmetric cryptography is also known as public key cryptography.\n\n17\n00:00:55,000 --> 00:00:58,000\nAnd the key difference between symmetric and asymmetric cryptography\n\n18\n00:00:58,000 --> 00:01:03,000\nis that the keys used to encrypt and decrypt can be different.\n\n19\n00:01:03,000 --> 00:01:07,000\nSo, our message gets encrypted, it means there's some function that takes a message \n\n20\n00:01:07,000 --> 00:01:11,000\nand a key produces some encrypted message--which we call ciphertext.\n\n21\n00:01:11,000 --> 00:01:17,000\nIn symmetric cryptography, the decryption uses the same key.\n\n22\n00:01:17,000 --> 00:01:22,000\nIn asymmetric cryptography, the decryption uses a different key,\n\n23\n00:01:22,000 --> 00:01:28,000\nand if the keys are different and unrelated, that means you can reveal one of the keys without revealing the other key,\n\n24\n00:01:28,000 --> 00:01:31,000\nand that's the power that asymmetric encryption gives us,\n\n25\n00:01:31,000 --> 00:01:35,000\nand we'll see lots of interesting ways to use that.\n\n26\n00:01:35,000 --> 00:01:37,000\nAnd in units 5 and 6, we'll look at protocols\n\n27\n00:01:37,000 --> 00:01:42,000\n that use both symmetric and asymmetric cryptography to solve interesting problems.\n\n28\n00:01:42,000 --> 00:01:45,000\nThe reason most interesting protocols combine both of these \n\n29\n00:01:45,000 --> 00:01:48,000\nis because asymmetric cryptography tends to be very expensive--\n\n30\n00:01:48,000 --> 00:01:52,000\nyou need big keys, you need lots of mathematics--\n\n31\n00:01:52,000 --> 00:01:54,000\nto do asymmetric cryptography--lots of computation. \n\n32\n00:01:54,000 --> 00:01:57,000\nWhereas symmetric cryptography can be very efficient.\n\n33\n00:01:57,000 --> 00:02:00,000\nSo that's why most interesting protocols--\n\n34\n00:02:00,000 --> 00:02:02,000\nlike the one we saw for accessing a secure website--\n\n35\n00:02:02,000 --> 00:02:05,000\ninvolve both symmetric and asymmetric cryptography.\n\n", "id": 4002}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjhzgUM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/92001", "type": "Nugget", "id": 92001}, {"nuggetType": "lecture", "name": "Course Overview", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "None", "name": "01_l_Course-Overview.mp4", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGPvSAQw", "youtube_id": "na3D4OTJkBs", "youtube_state": "uploading", "path": "Course/cs387/Media/27003", "transcript": null, "id": 27003}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBjJ1gUM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/93001", "type": "Nugget", "id": 93001}, {"nuggetType": "lecture", "name": "Symmetric Cryptosystems", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDA", "media": {"dotsub_id": "None", "name": "03_l_Symmetric-Cryptosystems.mp4", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGLO9Aww", "youtube_id": "dk40W6ULb0I", "youtube_state": "failed", "path": "Course/cs387/Media/57011", "transcript": null, "id": 57011}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKEfDAsSBk51Z2dldBix3gUM", "path": "Course/cs387/CourseRev/apr2012/Unit/4001/Nugget/94001", "type": "Nugget", "id": 94001}]}, {"name": "Homework 1", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgw", "type": "Unit", "evaluated": true, "closedAt": "04/24/2012 00:00", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQYyeIBDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQYmfIBDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQYqsACDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQYy-IBDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQYqB8M"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQY5LMBDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQYme8CDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQYoZkCDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQY6f4CDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQY2rACDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQYuY4DDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQYupECDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQYoZYDDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQY-c8CDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQY2a0DDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQY4dcCDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQY-cYFDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQw", "path": "Course/cs387/CourseRev/apr2012/Unit/27001", "open": true, "id": 27001, "nuggets": [{"nuggetType": "lecture", "name": "Introduction", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQw", "media": {"dotsub_id": "2136aaed-3040-41f3-9aca-2ccd92b290b8", "name": "cs387_hw1_00_l_Introduction", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGOHaAQw", "youtube_id": "2oNYndobcsI", "youtube_state": "done", "path": "Course/cs387/Media/28001", "transcript": "\ufeff", "id": 28001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQYyeIBDA", "path": "Course/cs387/CourseRev/apr2012/Unit/27001/Nugget/29001", "type": "Nugget", "id": 29001}, {"nuggetType": "lecture", "name": "Conditional Probability 1", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQw", "media": {"dotsub_id": "2134c8c6-1816-4e8b-bd57-e927a332e3a7", "name": "cs387_hw1_01_q_Conditional-Probability-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGLHqAQw", "youtube_id": "_5c5IT3B3rU", "youtube_state": "done", "path": "Course/cs387/Media/30001", "transcript": "\ufeff", "id": 30001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQYmfIBDA", "path": "Course/cs387/CourseRev/apr2012/Unit/27001/Nugget/31001", "type": "Nugget", "id": 31001}, {"nuggetType": "quiz", "name": "Conditional Probability 1", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQYqsACDA", "path": "Course/cs387/CourseRev/apr2012/Unit/27001/Nugget/41002", "type": "Nugget", "id": 41002}, {"nuggetType": "lecture", "name": "Conditional Probability 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQw", "media": {"dotsub_id": "022dad99-baeb-41e8-902e-c798953199a9", "name": "cs387_hw1_02_q_Conditional-Probability-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGMriAQw", "youtube_id": "_mDbqVVknFI", "youtube_state": "done", "path": "Course/cs387/Media/29002", "transcript": "\ufeff", "id": 29002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQYy-IBDA", "path": "Course/cs387/CourseRev/apr2012/Unit/27001/Nugget/29003", "type": "Nugget", "id": 29003}, {"nuggetType": "quiz", "name": "Conditional Probability 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQw", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQYqB8M", "path": "Course/cs387/CourseRev/apr2012/Unit/27001/Nugget/4008", "type": "Nugget", "id": 4008}, {"nuggetType": "lecture", "name": "Conditional Probability 3", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQw", "media": {"dotsub_id": "d4be595b-f2e6-4ff8-8a7b-34831b981ab1", "name": "cs387_hw1_03_q_Conditional-Probability-3", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGNKJAgw", "youtube_id": "K9zD8xgWUT4", "youtube_state": "done", "path": "Course/cs387/Media/34002", "transcript": "\ufeff", "id": 34002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQY5LMBDA", "path": "Course/cs387/CourseRev/apr2012/Unit/27001/Nugget/23012", "type": "Nugget", "id": 23012}, {"nuggetType": "quiz", "name": "Conditional Probability 3", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQYme8CDA", "path": "Course/cs387/CourseRev/apr2012/Unit/27001/Nugget/47001", "type": "Nugget", "id": 47001}, {"nuggetType": "lecture", "name": "One Time Pad", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQw", "media": {"dotsub_id": "c06f7665-042f-4cc2-9e4d-14f9da3da63d", "name": "cs387_hw1_04_q_One-Time-Pad", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGLmRAgw", "youtube_id": "lIGV4jZQGhM", "youtube_state": "done", "path": "Course/cs387/Media/35001", "transcript": "\ufeff", "id": 35001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQYoZkCDA", "path": "Course/cs387/CourseRev/apr2012/Unit/27001/Nugget/36001", "type": "Nugget", "id": 36001}, {"nuggetType": "quiz", "name": "One Time Pad", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQY6f4CDA", "path": "Course/cs387/CourseRev/apr2012/Unit/27001/Nugget/49001", "type": "Nugget", "id": 49001}, {"nuggetType": "lecture", "name": "Toy Substitution Cipher 1", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQw", "media": {"dotsub_id": "5efe3e2c-ad46-4688-a643-3b66e8808bd9", "name": "cs387_hw1_05_q_Toy-Substitution-Cipher-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGNmwAgw", "youtube_id": "5nX98t7sUTQ", "youtube_state": "done", "path": "Course/cs387/Media/39001", "transcript": "\ufeff", "id": 39001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQY2rACDA", "path": "Course/cs387/CourseRev/apr2012/Unit/27001/Nugget/39002", "type": "Nugget", "id": 39002}, {"nuggetType": "quiz", "name": "Toy Substitution Cipher 1", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQYuY4DDA", "path": "Course/cs387/CourseRev/apr2012/Unit/27001/Nugget/51001", "type": "Nugget", "id": 51001}, {"nuggetType": "lecture", "name": "Toy Substitution Cipher 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQw", "media": {"dotsub_id": "0a177474-ffce-465b-9cf9-17af4a084d39", "name": "cs387_hw1_06_q_Toy-Substitution-Cipher-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGPrSAQw", "youtube_id": "3GfmWntKsMI", "youtube_state": "done", "path": "Course/cs387/Media/27002", "transcript": "\ufeff", "id": 27002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQYupECDA", "path": "Course/cs387/CourseRev/apr2012/Unit/27001/Nugget/35002", "type": "Nugget", "id": 35002}, {"nuggetType": "quiz", "name": "Toy Substitution Cipher 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQYoZYDDA", "path": "Course/cs387/CourseRev/apr2012/Unit/27001/Nugget/52001", "type": "Nugget", "id": 52001}, {"nuggetType": "lecture", "name": "Secret Sharing", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQw", "media": {"dotsub_id": "516995ed-cf12-4376-8f07-7697e224aa07", "name": "cs387_hw1_07_q_Secret-Sharing", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGJLIAgw", "youtube_id": "npaHy-F7zoU", "youtube_state": "done", "path": "Course/cs387/Media/42002", "transcript": "\ufeff", "id": 42002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQY-c8CDA", "path": "Course/cs387/CourseRev/apr2012/Unit/27001/Nugget/43001", "type": "Nugget", "id": 43001}, {"nuggetType": "quiz", "name": "Secret Sharing", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQY2a0DDA", "path": "Course/cs387/CourseRev/apr2012/Unit/27001/Nugget/55001", "type": "Nugget", "id": 55001}, {"nuggetType": "lecture", "name": "Challenge Question", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQw", "media": {"dotsub_id": "6930401c-421f-440e-a0aa-0091865cb369", "name": "cs387_hw1_08_q_Challenge-Question", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzg3DA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzg3DAsSBU1lZGlhGKYfDA", "youtube_id": "Sg8GpahnxvI", "youtube_state": "done", "path": "Course/cs387/Media/4006", "transcript": null, "id": 4006}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQY4dcCDA", "path": "Course/cs387/CourseRev/apr2012/Unit/27001/Nugget/44001", "type": "Nugget", "id": 44001}, {"nuggetType": "program", "name": "Challenge Question", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzg3DAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GPnSAQwLEgZOdWdnZXQY-cYFDA", "path": "Course/cs387/CourseRev/apr2012/Unit/27001/Nugget/91001", "suppliedCode": "# Decode the two ciphertexts from the Instructors Box below, \n# or the C1, C2 variables - which are the same\n#\n# We highly recommend that you run your decoding code in the \n# programming language of your choice outside of the \n# this environment, as this system does not provide enough \n# computational resources to successfully decode\n#\n# After decoding the two ciphertexts, \n# replace the plaintext1 and plaintext2 variables below\n# with the decoded ciphertexts\n\n# C1 and C2 are messages in english, \n# encoded using string_to_bits, with 7bit ASCII\n# and then XOR'd with a secret key\n#\n# In pseudo-code:\n# C1 = XOR(string_to_bits(plaintext1), secret_key)\n# C2 = XOR(string_to_bits(plaintext2), secret_key)\n\nn\nn\n#####\n# CHANGE THESE VARIABLES\n\nplaintext1 = \"decoded message\"\nplaintext2 = \"the other decoded message\"\n\n# END\n#############\n\n#############\n# Below is some code that might be useful\n#\n\nBITS = ('0', '1')\nASCII_BITS = 7\n\ndef display_bits(b):\n    \"\"\"converts list of {0, 1}* to string\"\"\"\n    return ''.join([BITS[e] for e in b])\n\ndef seq_to_bits(seq):\n    return [0 if b == '0' else 1 for b in seq]\n\ndef pad_bits(bits, pad):\n    \"\"\"pads seq with leading 0s up to length pad\"\"\"\n    assert len(bits) <= pad\n    return [0] * (pad - len(bits)) + bits\n        \ndef convert_to_bits(n):\n    \"\"\"converts an integer `n` to bit array\"\"\"\n    result = []\n    if n == 0:\n        return [0]\n    while n > 0:\n        result = [(n % 2)] + result\n        n = n / 2\n    return result\n\ndef string_to_bits(s):\n    def chr_to_bit(c):\n        return pad_bits(convert_to_bits(ord(c)), ASCII_BITS)\n    return [b for group in \n            map(chr_to_bit, s)\n            for b in group]\n\ndef bits_to_char(b):\n    assert len(b) == ASCII_BITS\n    value = 0\n    for e in b:\n        value = (value * 2) + e\n    return chr(value)\n\ndef list_to_string(p):\n    return ''.join(p)\n\ndef bits_to_string(b):\n    return ''.join([bits_to_char(b[i:i + ASCII_BITS]) \n                    for i in range(0, len(b), ASCII_BITS)])\n", "type": "Nugget", "id": 91001}]}], "path": "Course/cs387/CourseRev/apr2012", "type": "CourseRev", "id": "apr2012"}, "course_title": "Applied Cryptography", "progress": {}, "rev_name": "April 2012", "magik": false, "course_edit_url": "/edit_course?id=cs387"}}