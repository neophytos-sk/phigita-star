{"version": "dacity-32", "payload": {"course": {"instructors": [{"bio": "David Evans is a Professor of Computer Science at the University of Virginia where he teaches computer science and leads <a href=\"http://www.jeffersonswheel.org\" target=\"_blank\"> research in computer\n\t\t\t\tsecurity</a>. He is the author of an <a\n\t\t\t\thref=\"http://www.computingbook.org\" target=\"_blank\"> introductory computer\n\t\t\t\tscience textbook</a> and has won Virginia's highest award for\n\t\t\tuniversity faculty. He has PhD, SM, and SB degrees from MIT.", "name": "David Evans", "parent": "None", "headshot_url": "/image/headshot/Instructor/811007", "key": "agpzfnVkYWNpdHl1chILEgpJbnN0cnVjdG9yGP-_MQw", "path": "Instructor/811007", "type": "Instructor", "id": 811007}, {"bio": "Sebastian Thrun is a Research Professor of Computer Science at\n\t\t\tStanford University, a Google Fellow, a member of the National\n\t\t\tAcademy of Engineering and the German Academy of Sciences. Thrun is\n\t\t\tbest known for his research in robotics and machine learning,\n\t\t\tspecifically his <a\n\t\t\t\thref=\"http://www.huffingtonpost.com/2011/12/06/self-driving-car_n_1130568.html\">work\n\t\t\t\twith self-driving cars</a>.", "name": "Sebastian Thrun", "parent": "None", "headshot_url": "/image/headshot/Instructor/836018", "key": "agpzfnVkYWNpdHl1chILEgpJbnN0cnVjdG9yGLKDMww", "path": "Instructor/836018", "type": "Instructor", "id": 836018}], "name": "Building a Search Engine", "parent": "None", "icon_url": "/icon/Course/cs101", "faq": "<p>\n<a href=\"#q1\">\nWhy should I learn about computing?\n</a>\n</p>\n<p>\n<a href=\"#q2\">\nWhat programming language does the course use?\n</a>\n</p>\n<p>\n<a href=\"#q3\">\nIs there a course textbook?\n</a>\n</p>\n<p>\n<a href=\"#q4\">\nCan you really build a search engine in seven weeks?\n</a>\n</p>\n<p>\n<a href=\"#q5\">\nAre there homework assignments?\n</a>\n</p>\n<p>\n<a href=\"#q6\">\nHow do I get help?\n</a>\n</p>\n<p>\n<a href=\"#q7\">\nWhat are office hours?\n</a>\n</p>\n<p>\n<a href=\"#q8\">\nI think one of the quizzes or homework assignments is judging my answer incorrectly, who do I contact?\n</a>\n</p>\n<p>\n<a href=\"#q9\">\nIs there a final exam?\n</a>\n</p>\n<p>\n<a href=\"#q10\">\nHow will my final grade be determined?\n</a>\n</p>\n<p>\n<a href=\"#q11\">\nWhat are the rules on collaboration?\n</a>\n</p>\n<p>\n<a href=\"#q12\">\nDo I need to download Python on my computer?\n</a>\n</p>\n<p>\n<a href=\"#q13\">\nSomething on the site isn't working, who do I contact?\n</a>\n</p>\n<hr/>\n\n<div><a name=\"q1\"></a>\n<p>\n<b class=\"sans\">\nWhy should I learn about computing?\n</b><br/>\nThere are three big reasons, the first two of which apply to everyone:\n</p>\n<ol>\n<li>\nTo understand the world, you need to understand computing and programming.<br/>\nSo much of our world today depends on computation whether you're talking about cars (a few wheels and an engine attached to many computers running huge programs), communications, or cooking.  Without understanding computers and how they are programmed, much of the world will increasingly seem like magic, and you will be at its mercy.\n</li>\n<li>\nBeing able to program provides personal empowerment.<br/>\nTwenty years ago, Steve Jobs famously talking about computers as bicycles for the mind.  Today, computers are far more powerful and connected worldwide --- super-tanker-sized hypersonic spaceships of the mind.  Without learning to program, you can still ride them if you are willing to remove your shoes at the security checkpoint and go where the pilot wants to go, but if you want to be the one flying you need to learn about programming.\n</li>\n<li>\nComputing opens the door to some of the best jobs in the world, and enables almost everyone to do their job better.<br/>\nLast year, <a href=\"http://money.cnn.com/magazines/moneymag/best-jobs/2011/fast-growing-jobs/1.html\">Money Magazine</a> reported that Software Developer as the #1 job for fast growth (#7 is IT Consultant). The <a href=\"http://www.sdtimes.com/link/35710\">SD Times</a> reported that computer science majors received more job offers than any other major.  <a href=\"http://www.careercast.com/jobs-rated/10-best-jobs-2011\">CareerCast</a> reports \"Software Engineer, a job that involves the design and creation of software for everything from operating systems to cell phone \"apps\" to interactive games, ranks as the best job of 2011.\"\n</li>\n</ol>\n</div>\n\n<div><a name=\"q2\"></a>\n<p>\n<b class=\"sans\">\nWhat programming language does the course use?\n</b><br/>\nWe will be using Python (Version 2.6). Python is a great language for learning to program since it simple and easy to get started in, but it is also powerful enough to be widely used for building web sites (including Google), performing scientific computation, and creating games. The concepts we cover in the class are not specific to Python, but apply to computer science in general no matter what programming language you are using.\n</p>\n</div>\n\n<div><a name=\"q3\"></a>\n<p>\n<b class=\"sans\">\nIs there a course textbook?\n</b><br/>\nThere is no required textbook for the course, and the course content does not follow any textbook. There are many books available on Python programming that may be helpful to students. For a comprehensive list of resources targeting new programmers, check out <a href=\"http://wiki.python.org/moin/BeginnersGuide/NonProgrammers\">Python for Non-Programmers</a> .\n</p>\n</div>\n\n<div><a name=\"q4\"></a>\n<p>\n<b class=\"sans\">\nCan you really build a search engine in seven weeks?\n</b><br/>\nYou can, and we'll show you how! The core components of a search engine are surprisingly simple, and with a language as concise as Python, the entire program is only about one page of code. You will write key parts of this code yourself, and should completely understand the full search engine code by the end of the course.\n</p>\n<p>\nOver the first three units, we will build a web crawler, which is a program that collects content from web pages to use in the search engine. In unit 4, we'll build an index to be able to respond to queries.  In unit 5, we'll make the index fast enough that it could scale to a large collection of pages. In unit 6, we'll implement a method for finding the best page for a search query, similar to the way Google ranks pages.\n</p>\n</div>\n\n<div><a name=\"q5\"></a>\n<p>\n<b class=\"sans\">\nAre there homework assignments?\n</b><br/>\nYes. To learn computer science, it is important to solve progressively more challenging problems on your own, so there will be six homework assignments, one at the end of each unit. There are no due dates for the homeworks.  The homework assignments will be similar to the in-class quizzes and mostly cover material from that week's unit, except the homework assignments will include larger problems for you to solve on your own.  You will receive instant feedback on these questions and can try them as many times as you like.\n</p>\n</div>\n\n<div><a name=\"q6\"></a>\n<p>\n<b class=\"sans\">\nHow do I get help?\n</b><br/>\n<!-- If your question relates to a particular quiz or lecture clip, you can comment below the video.  -->\nWe love to see an active academic community, so we encourage you to post your question to the <a href=\"http://forums.udacity.com/cs101-april2012\">forum</a>. Hopefully one of your peers will provide an adequate answer, but if not one of our course managers will chime in.\n</p>\n<!--\n<p>\n If you'd like to contribute a question to office hours, post your question to the course Google Moderator page.  \n</p>\n-->\n</div>\n\n<div><a name=\"q7\"></a>\n<p>\n<b class=\"sans\">\nWhat are office hours?\n</b><br/>\nOnce a week we will take some of the top questions from the <a href=\"http://forums.udacity.com/cs101-april2012\">forum</a> and Dave, Sarah, and other guests will answer them in a recorded video.  We will usually post office hours on Friday, so there is enough time to collect questions for that week's unit, but still some time for students to benefit from our responses in that unit's homework assignment.\n</p>\n</div>\n\n<div><a name=\"q8\"></a>\n<p>\n<b class=\"sans\">\nI think one of the quizzes or homework assignments is judging my answer incorrectly, who do I contact?\n</b><br/>\nPost your solution to the <a href=\"http://forums.udacity.com/cs101-april2012\">forum</a>. If we realize an error in grading, or that multiple answers are correct, we will regrade the homework. \n</p>\n\n</div>\n\n<div><a name=\"q9\"></a>\n<p>\n<b class=\"sans\">\nCan I get an extension on a homework assignment?\n</b><br/>\nThere are no deadlines for homework, so there is no need for an extension.\n</p>\n</div>\n\n<div><a name=\"q9\"></a>\n<p>\n<b class=\"sans\">\nIs there a final exam?\n</b><br/>\nYes. There will be at least two opportunities to take an exam for this course. \nOne after about 7 weeks and the other approximately 8 weeks later. Dates to be confirmed.\n</p>\n</div>\n\n<div><a name=\"q10\"></a>\n<p>\n<b class=\"sans\">\nHow will my final grade be determined?\n</b><br/>\nYour final grade will be determined by your exam grade.\n</p>\n</div>\n\n<div><a name=\"q11\"></a>\n<p>\n<b class=\"sans\">\nWhat are the rules on collaboration?\n</b><br/>\nWorking with other students is often the best way to learn new things, and we hope students in the class will form vibrant communities, both on-line and in-person, to help each other learn.  The key is to use collaboration as a way to enhance learning, not as a way of sharing answers without understanding them.  \n</p>\n<p>\nYou are welcome (and encouraged) to view the lectures with others, and discuss and work together on answering the in-lecture quizzes.  For the homeworks, you may discuss the questions with other students in the on-line forums and in-person study groups, but everything you submit should be your own work.  For the final exam, you are not permitted to work with anyone else, and should only ask clarification questions on the on-line forums which will be answered by the course staff.\n</p>\n</div>\n\n<div><a name=\"q12\"></a>\n<p>\n<b class=\"sans\">\nDo I need to download Python on my computer?\n</b><br/>\nYou do not need to download Python to take the course, as we provide all the necessary tools right in your browser. If you prefer to experiment locally you can download <a href=\"http://www.python.org/download/releases/2.6.7/\">Python</a>.\n</p>\n</div>\n\n<div><a name=\"q13\"></a>\n<p>\n<b class=\"sans\">\nSomething on the site isn't working, who do I contact?\n</b><br/>\nFill out the Contact Us form found at the bottom of each Udacity webpage.\n</p>\n</div>", "syllabus": "<p><b>Description</b>: This class will give you an introduction to \n\t\tcomputing.   In seven weeks, you will build your own search engine \n\t\tcomplete with a web crawler and way of ranking popular pages.  \n\t\tYou will understand some of the key concepts in computer science, \n\t\tand learn how to write your own computer programs.  No previous \n\t\tbackground in programming is expected.</p>\n\t\t\n\t\t<p class=\"syllabus-week\">Unit 1:</p>\n\t\t<p class=\"syllabus-desc\">\n\t\t<b>How to get started: your first program</b><br>\n\t\t   Extracting a link\n\t\t</p>\n\t\t<br class=\"clear\"/>\n\t\t<p class=\"syllabus-week\">Unit 2:</p>\n\t\t<p class=\"syllabus-desc\">\n\t\t<b>How to repeat</b><br>\n\t\t   Finding all the links on a page\n\t\t</p>\n\t\t<br class=\"clear\"/>\n\t\t<p class=\"syllabus-week\">Unit 3:</p>\n\t\t<p class=\"syllabus-desc\">\n\t\t<b>How to manage data</b><br>\n\t\t   Crawling the web\n\t\t</p>\n\t\t<br class=\"clear\"/>\n\t\t<p class=\"syllabus-week\">Unit 4:</p>\n\t\t<p class=\"syllabus-desc\">\n\t\t<b>How to solve problems</b><br>\n\t\t   Responding to search queries\n\t\t</p>\n\t\t<br class=\"clear\"/>\n\t\t<p class=\"syllabus-week\">Unit 5:</p>\n\t\t<p class=\"syllabus-desc\">\n\t\t<b>How programs run</b><br>\n\t\t   Making things fast\n\t\t</p>\n\t\t<br class=\"clear\"/>\n\t\t<p class=\"syllabus-week\">Unit 6:</p>\n\t\t<p class=\"syllabus-desc\">\n\t\t<b>How to have infinite power</b><br>\n\t\t   Ranking search results\n\t\t</p>\n\t\t<br class=\"clear\"/>\n\t\t<p class=\"syllabus-week\">Unit 7:</p>\n\t\t<p class=\"syllabus-desc\">\n\t\t<b>Where to go from here</b><br>\n\t\t   Exam testing your knowledge\n\t\t</p>", "teaser": {"dotsub_id": null, "name": "teaser", "parent": "None", "transcript": null, "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1cg0LEgVNZWRpYRi-2jAM", "youtube_id": "BQHMLD9bwq4", "youtube_state": null, "path": "Media/798014", "type": "Media", "id": 798014}, "prereqs": "<p>\n\tThis course expects no prior programming experience. Additionally, there is no required textbook for the course, and the course content does not follow any textbook. There are many books available on Python programming that may be helpful to students. For a comprehensive list of resources targeting new programmers, check out the official Python Beginner's Guide.\n\t</p>", "image_url": "/image/Course/cs101", "key": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "is_public": true, "course_id": "cs101", "path": "Course/cs101", "type": "Course", "id": "cs101", "description": "Learn key concepts in computer science and build a search engine like google!"}, "course_rev": {"unitLayout": [{"unit_key": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQw"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLmOAww"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAw"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHxCQw"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDww"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIv3Dww"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAw"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJmqGQw"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQw"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmqHgw"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAw"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmkIAw"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnpIww"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgw"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOHoJgw"}], "name": "February 2012", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "state": 0, "key": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "units": [{"name": "Unit 1", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjqBww"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBiiHww"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjSDww"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjZNgw"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBiKJww"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBgEDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBi6Fww"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBikHww"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBi7Fww"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjcNgw"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBgFDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBiOJww"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBiPJww"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjzLgw"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBj0Lgw"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBj1Lgw"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjVDww"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBj2Lgw"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjgNgw"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBiRJww"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjWDww"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBgHDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjiNgw"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjjNgw"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBi-Fww"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBi_Fww"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBj3Lgw"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjBFww"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjuBww"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjYDww"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjmNgw"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBgIDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjvBww"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBixHww"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBj4Lgw"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjnNgw"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjDFww"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBgJDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBi1Hww"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjbDww"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBgKDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjyBww"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjcDww"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBj7Lgw"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjzBww"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjGFww"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBgNDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBi3Hww"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBi4Hww"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjqNgw"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBj2Bww"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjsNgw"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBgPDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBi5Hww"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBj_Lgw"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBj3Bww"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjvNgw"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBicJww"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjwNgw"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBiDLww"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBgSDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjxNgw"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBj5Bww"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBgVDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBiFLww"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBiGLww"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBiHLww"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBi8Hww"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBieJww"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBifJww"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBj9Bww"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjhDww"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBiJLww"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBiKLww"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBgYDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjMFww"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBihJww"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBj0Ngw"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBijJww"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBikJww"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBiMLww"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBilJww"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "path": "Course/cs101/CourseRev/feb2012/Unit/2001", "open": false, "id": 2001, "nuggets": [{"nuggetType": "lecture", "name": "Programming", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "85ac61e4-88eb-4636-a4f5-67294533ae4e", "name": "cs101_unit1_03_l_Programming", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKMfDA", "youtube_id": "OBtIs_AVueY", "youtube_state": "done", "path": "Course/cs101/Media/4003", "transcript": null, "id": 4003}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBgEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/4", "type": "Nugget", "id": 4}, {"nuggetType": "program", "name": "First Programming Quiz", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBgFDA", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/5", "suppliedCode": "# This is a Python comment. Lines that begin with a '#' are ignored by the\n# Python interpreter. Comments are handy for documenting code or explaining\n# quiz questions!\n\n# Write a Python program that prints out the number of minutes in seven weeks.\n\n    ", "type": "Nugget", "id": 5}, {"nuggetType": "lecture", "name": "Python Expressions", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "c42aad51-35d2-4758-9a6e-9b3937e0d88b", "name": "cs101_unit1_11_q_Python-Expressions", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKsfDA", "youtube_id": "mFkc8ktkAXE", "youtube_state": "done", "path": "Course/cs101/Media/4011", "transcript": null, "id": 4011}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBgHDA", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/7", "type": "Nugget", "id": 7}, {"nuggetType": "program", "name": "Variables Quiz", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBgIDA", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/8", "suppliedCode": "#Given the variables defined here, write Python \n#code that prints out the distance, in meters, \n#that light travels in one processor cycle. \n\nspeed_of_light = 299792458.0\ncycles_per_second = 2700000000.0\n", "type": "Nugget", "id": 8}, {"nuggetType": "lecture", "name": "Varying Variables Quiz 2", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "05845bc0-2f92-46bc-8625-75db258aad08", "name": "cs101_unit1_19_q_Varying-Variables-Quiz-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLQfDA", "youtube_id": "4zjhyhbqqWk", "youtube_state": "done", "path": "Course/cs101/Media/4020", "transcript": null, "id": 4020}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBgJDA", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/9", "type": "Nugget", "id": 9}, {"nuggetType": "lecture", "name": "Spirit Age", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "a2c73901-d6c9-4ad6-ab13-4c1bbe764fea", "name": "cs101_unit1_20_p_Spirit-Age", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPEHDA", "youtube_id": "bj__AVo44q0", "youtube_state": "done", "path": "Course/cs101/Media/1009", "transcript": null, "id": 1009}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBgKDA", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/10", "type": "Nugget", "id": 10}, {"nuggetType": "lecture", "name": "Valid Strings Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "06c80c1e-47d2-4d9f-a741-12e731db8fd6", "name": "cs101_unit1_22_s_Valid-Strings", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1chwLEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGAwM", "youtube_id": "Mm15KMcRbn8", "youtube_state": "done", "path": "Course/cs101/Media/12", "transcript": null, "id": 12}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBgNDA", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/13", "type": "Nugget", "id": 13}, {"nuggetType": "lecture", "name": "Indexing Strings", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "e7ba8260-4894-4eb5-b03f-c07b118c69fd", "name": "cs101_unit1_26_l_Indexing-Strings", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGO02DA", "youtube_id": "xm2H2kiipfw", "youtube_state": "done", "path": "Course/cs101/Media/7021", "transcript": null, "id": 7021}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBgPDA", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/15", "type": "Nugget", "id": 15}, {"nuggetType": "lecture", "name": "Understanding Selection", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "23400d01-1671-4fa2-9c96-72972c8acae6", "name": "cs101_unit1_30_q_Understanding-Selection", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLofDA", "youtube_id": "Vc8yIC0RYyk", "youtube_state": "done", "path": "Course/cs101/Media/4026", "transcript": null, "id": 4026}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBgSDA", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/18", "type": "Nugget", "id": 18}, {"nuggetType": "lecture", "name": "Finding Strings In Strings", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "fa0fe0b3-f955-4ced-a77f-19f4e460ad11", "name": "cs101_unit1_31_l_Finding-Strings-in-Strings", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPoHDA", "youtube_id": "b8BJwANcGEI", "youtube_state": "done", "path": "Course/cs101/Media/1018", "transcript": null, "id": 1018}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBgVDA", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/21", "type": "Nugget", "id": 21}, {"nuggetType": "lecture", "name": "String Theory", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "520fa82f-b71c-48d2-bc69-60f0c6727cde", "name": "cs101_unit1_36_l_String-Theory", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIsvDA", "youtube_id": "7MgLbBSjR5Y", "youtube_state": "done", "path": "Course/cs101/Media/6027", "transcript": null, "id": 6027}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBgYDA", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/24", "type": "Nugget", "id": 24}, {"nuggetType": "lecture", "name": "Introduction", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "3e3bd292-cdb2-435e-9331-73d1b9939791", "name": "cs101_unit1_00_l_Introduction", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLkXDA", "youtube_id": "1uoh20TKvK0", "youtube_state": "done", "path": "Course/cs101/Media/3001", "transcript": null, "id": 3001}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjqBww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/1002", "type": "Nugget", "id": 1002}, {"nuggetType": "lecture", "name": "Grace Hopper", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "007b56fc-b0ba-457d-bab5-ff2dfde675b1", "name": "cs101_unit1_14_l_Grace-Hopper", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJYnDA", "youtube_id": "BttvTL_O31g", "youtube_state": "done", "path": "Course/cs101/Media/5014", "transcript": null, "id": 5014}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjuBww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/1006", "type": "Nugget", "id": 1006}, {"nuggetType": "lecture", "name": "Variables Quiz Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "403d4a10-58f4-462c-b73a-ae1f5ba9b730", "name": "cs101_unit1_16_s_Variables-Quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLAfDA", "youtube_id": "Va_1sUtgdkk", "youtube_state": "done", "path": "Course/cs101/Media/4016", "transcript": null, "id": 4016}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjvBww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/1007", "type": "Nugget", "id": 1007}, {"nuggetType": "program", "name": "Spirit Age", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjyBww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/1010", "suppliedCode": "#Write python code that defines the variable \n#age to be your age in years, and then prints \n#out the number of days you have been alive.\n\n", "type": "Nugget", "id": 1010}, {"nuggetType": "lecture", "name": "Valid Strings", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "0cde9846-21d1-4275-9249-2e8f95c3cfa4", "name": "cs101_unit1_22_q_Valid-Strings", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJknDA", "youtube_id": "7-Dfcr9_7nA", "youtube_state": "done", "path": "Course/cs101/Media/5017", "transcript": null, "id": 5017}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjzBww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/1011", "type": "Nugget", "id": 1011}, {"nuggetType": "lecture", "name": "Hello!!! Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "164f2edb-bbe8-4236-8336-d2cdce25f025", "name": "cs101_unit1_24_s_Hello!!!", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPUHDA", "youtube_id": "kmSxuQ2i890", "youtube_state": "done", "path": "Course/cs101/Media/1013", "transcript": null, "id": 1013}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBj2Bww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/1014", "type": "Nugget", "id": 1014}, {"nuggetType": "lecture", "name": "Same Value Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "7dc0b40e-b6df-469e-89a7-78f56a4e6f5c", "name": "cs101_unit1_27_s_Same-Value", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGO42DA", "youtube_id": "IpJopyvtq-4", "youtube_state": "done", "path": "Course/cs101/Media/7022", "transcript": null, "id": 7022}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBj3Bww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/1015", "type": "Nugget", "id": 1015}, {"nuggetType": "lecture", "name": "Understanding Selection Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "195d017f-2fa4-451d-ac13-c2cc0b97b146", "name": "cs101_unit1_30_s_Understanding-Selection", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1chwLEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGBQM", "youtube_id": "ib7n2szCjO4", "youtube_state": "done", "path": "Course/cs101/Media/20", "transcript": null, "id": 20}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBj5Bww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/1017", "type": "Nugget", "id": 1017}, {"nuggetType": "lecture", "name": "Finding With Numbers", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "c2638239-f70c-4821-87e5-4fcb2f8c8fe3", "name": "cs101_unit1_34_l_Finding-with-Numbers", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPwHDA", "youtube_id": "deJC1JKrTZY", "youtube_state": "done", "path": "Course/cs101/Media/1020", "transcript": null, "id": 1020}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBj9Bww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/1021", "type": "Nugget", "id": 1021}, {"nuggetType": "lecture", "name": "First Quiz", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "cbea7eb5-5799-4044-b20f-5d6b3a51b582", "name": "cs101_unit1_02_q_First-Quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIknDA", "youtube_id": "tc61HoVL0mc", "youtube_state": "done", "path": "Course/cs101/Media/5001", "transcript": null, "id": 5001}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjSDww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/2002", "type": "Nugget", "id": 2002}, {"nuggetType": "lecture", "name": "Grammar", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "9fb7fd12-a975-4057-97df-591131bd46f4", "name": "cs101_unit1_08_l_Grammar", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKkfDA", "youtube_id": "MDUusVkDCXA", "youtube_state": "done", "path": "Course/cs101/Media/4009", "transcript": null, "id": 4009}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjVDww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/2005", "type": "Nugget", "id": 2005}, {"nuggetType": "lecture", "name": "Eat Quiz Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "5e31b9bc-1e41-4b63-9833-010f57981293", "name": "cs101_unit1_10_s_Eat-Quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJInDA", "youtube_id": "_5k7FgZWUGY", "youtube_state": "done", "path": "Course/cs101/Media/5010", "transcript": null, "id": 5010}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjWDww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/2006", "type": "Nugget", "id": 2006}, {"nuggetType": "lecture", "name": "Variables", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "c8fecfa0-23fa-4c7a-80e5-09c8b49e177d", "name": "cs101_unit1_15_l_Variables", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOQ2DA", "youtube_id": "wge1dd4Nj-Y", "youtube_state": "done", "path": "Course/cs101/Media/7012", "transcript": null, "id": 7012}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjYDww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/2008", "type": "Nugget", "id": 2008}, {"nuggetType": "lecture", "name": "Varying Variables Quiz 2 Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "c7ef19ee-2f09-4507-9f3f-21381023c2ea", "name": "cs101_unit1_19_s_Varying-Variables-Quiz-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLYfDA", "youtube_id": "oTJQzTmEeDc", "youtube_state": "done", "path": "Course/cs101/Media/4022", "transcript": null, "id": 4022}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjbDww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/2011", "type": "Nugget", "id": 2011}, {"nuggetType": "lecture", "name": "Spirit Age Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "71d1e082-249a-4577-9f44-a4676fe45127", "name": "cs101_unit1_20_s_Spirit-Age", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1chwLEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGAsM", "youtube_id": "RCF3RN4oJPk", "youtube_state": "done", "path": "Course/cs101/Media/11", "transcript": null, "id": 11}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjcDww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/2012", "type": "Nugget", "id": 2012}, {"nuggetType": "lecture", "name": "Finding With Numbers Quiz", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "825b8d0f-8d88-4dc4-b366-1bac151087df", "name": "cs101_unit1_35_q_Finding-with-Numbers-Quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGL4fDA", "youtube_id": "zDOVXEJ7ppk", "youtube_state": "done", "path": "Course/cs101/Media/4030", "transcript": null, "id": 4030}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjhDww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/2017", "type": "Nugget", "id": 2017}, {"nuggetType": "lecture", "name": "What Is A Programming Language", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "e006a999-ca64-4713-ab34-4b5a02da9da7", "name": "cs101_unit1_04_q_What-is-a-Programming-Language", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIwnDA", "youtube_id": "tVWlU24quUk", "youtube_state": "done", "path": "Course/cs101/Media/5004", "transcript": null, "id": 5004}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBi6Fww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/3002", "type": "Nugget", "id": 3002}, {"nuggetType": "lecture", "name": "What Is A Programming Language Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "91762326-88a2-4425-9fcd-94ca29b0d342", "name": "cs101_unit1_04_s_What-is-a-Programming-Language", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKUfDA", "youtube_id": "Av-3FjzklVQ", "youtube_state": "done", "path": "Course/cs101/Media/4005", "transcript": null, "id": 4005}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBi7Fww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/3003", "type": "Nugget", "id": 3003}, {"nuggetType": "lecture", "name": "Speed Of Light", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "067bcdcd-8b80-4151-9c92-a846da8d0628", "name": "cs101_unit1_12_p_Speed-of-Light", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJQnDA", "youtube_id": "mo4RacVAZes", "youtube_state": "done", "path": "Course/cs101/Media/5012", "transcript": null, "id": 5012}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBi-Fww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/3006", "type": "Nugget", "id": 3006}, {"nuggetType": "program", "name": "Speed Of Light", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBi_Fww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/3007", "suppliedCode": "# Write Python code to print out how far light travels \n# in centimeters in one nanosecond.  Use the variables\n# defined below.    \n\nspeed_of_light = 299792458   # meters per second\nmeter = 100                  # one meter is 100 centimeters\nnanosecond = 1.0/1000000000  # one billionth of a second\n", "type": "Nugget", "id": 3007}, {"nuggetType": "lecture", "name": "Processors", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "d758538f-d587-46dc-90e7-f4643d52c396", "name": "cs101_unit1_13_l_Processors", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMAXDA", "youtube_id": "4v3kJ-4THds", "youtube_state": "done", "path": "Course/cs101/Media/3008", "transcript": null, "id": 3008}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjBFww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/3009", "type": "Nugget", "id": 3009}, {"nuggetType": "lecture", "name": "Varying Variables Quiz 1 Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "beb519d1-97d9-4c76-bcf8-3f0faeacc351", "name": "cs101_unit1_18_s_Varying-Variables-Quiz-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLIfDA", "youtube_id": "ATsJfzHTnbw", "youtube_state": "done", "path": "Course/cs101/Media/4018", "transcript": null, "id": 4018}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjDFww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/3011", "type": "Nugget", "id": 3011}, {"nuggetType": "quiz", "name": "Valid Strings", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjGFww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/3014", "type": "Nugget", "id": 3014}, {"nuggetType": "lecture", "name": "Extracting Links", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "2a215641-997d-4d2f-9cd3-d753e0af3d4c", "name": "cs101_unit1_37_p_Extracting-Links", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKAnDA", "youtube_id": "YhWsZEo80Wg", "youtube_state": "done", "path": "Course/cs101/Media/5024", "transcript": null, "id": 5024}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjMFww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/3020", "type": "Nugget", "id": 3020}, {"nuggetType": "lecture", "name": "Web Crawler", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "97d4e287-160c-4c13-8844-61a106f0a649", "name": "cs101_unit1_01_l_Web-Crawler", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKEfDA", "youtube_id": "CDXOcvUNBaA", "youtube_state": "done", "path": "Course/cs101/Media/4001", "transcript": null, "id": 4001}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBiiHww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/4002", "type": "Nugget", "id": 4002}, {"nuggetType": "quiz", "name": "What Is A Programming Language", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBikHww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/4004", "type": "Nugget", "id": 4004}, {"nuggetType": "lecture", "name": "Variables Can Vary", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "164fb712-71a5-495e-b072-199c5647c5fe", "name": "cs101_unit1_17_l_Variables-Can-Vary", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPAHDA", "youtube_id": "mMCEgtejUeo", "youtube_state": "done", "path": "Course/cs101/Media/1008", "transcript": null, "id": 1008}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBixHww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/4017", "type": "Nugget", "id": 4017}, {"nuggetType": "quiz", "name": "Varying Variables Quiz 2", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBi1Hww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/4021", "type": "Nugget", "id": 4021}, {"nuggetType": "lecture", "name": "Ada", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "7148d42d-0ea2-4300-a04c-bfa52eee5575", "name": "cs101_unit1_23_l_Ada", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1chwLEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGA4M", "youtube_id": "bz9EaoffU9o", "youtube_state": "done", "path": "Course/cs101/Media/14", "transcript": null, "id": 14}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBi3Hww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/4023", "type": "Nugget", "id": 4023}, {"nuggetType": "lecture", "name": "Hello!!!", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "984fcb03-c68a-456a-b01a-35924cf5f444", "name": "cs101_unit1_24_p_Hello!!!", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMcXDA", "youtube_id": "Q3V0vwn2nZc", "youtube_state": "done", "path": "Course/cs101/Media/3015", "transcript": null, "id": 3015}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBi4Hww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/4024", "type": "Nugget", "id": 4024}, {"nuggetType": "lecture", "name": "Same Value", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "f625f65d-9d72-49ed-85c6-1acc20976207", "name": "cs101_unit1_27_q_Same-Value", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1chwLEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGBAM", "youtube_id": "HMaj-bRNtMY", "youtube_state": "done", "path": "Course/cs101/Media/16", "transcript": null, "id": 16}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBi5Hww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/4025", "type": "Nugget", "id": 4025}, {"nuggetType": "lecture", "name": "Testing2", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "0540aac1-cfe2-4ce9-8332-c9241f14a1e8", "name": "cs101_unit1_33_q_Testing2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1chwLEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGBYM", "youtube_id": "e_hheAs6k0g", "youtube_state": "done", "path": "Course/cs101/Media/22", "transcript": null, "id": 22}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBi8Hww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/4028", "type": "Nugget", "id": 4028}, {"nuggetType": "lecture", "name": "First Quiz Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "8a084588-8af8-4d7b-aec3-37fb7cbcc0a4", "name": "cs101_unit1_02_s_First-Quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNo2DA", "youtube_id": "UM4Ep-Lw15M", "youtube_state": "done", "path": "Course/cs101/Media/7002", "transcript": null, "id": 7002}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBiKJww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/5002", "type": "Nugget", "id": 5002}, {"nuggetType": "lecture", "name": "First Programming Quiz Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "982aa1ab-752e-4e78-bce3-125dea6b9508", "name": "cs101_unit1_05_s_First-Programming-Quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPIuDA", "youtube_id": "Kk5nCrtXaCE", "youtube_state": "done", "path": "Course/cs101/Media/6002", "transcript": null, "id": 6002}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBiOJww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/5006", "type": "Nugget", "id": 5006}, {"nuggetType": "lecture", "name": "Congratulations", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "5df20b0e-55a5-43fe-968d-a3dadc826c77", "name": "cs101_unit1_06_l_Congratulations", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1chwLEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGAYM", "youtube_id": "uGaHHkl2rLI", "youtube_state": "done", "path": "Course/cs101/Media/6", "transcript": null, "id": 6}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBiPJww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/5007", "type": "Nugget", "id": 5007}, {"nuggetType": "quiz", "name": "Eat Quiz", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBiRJww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/5009", "type": "Nugget", "id": 5009}, {"nuggetType": "lecture", "name": "Capital Udacity", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "9ad84a07-1ea3-4f85-a827-950ffa24ec06", "name": "cs101_unit1_29_p_Capital-Udacity", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIEvDA", "youtube_id": "W8nlKNBXHCU", "youtube_state": "done", "path": "Course/cs101/Media/6017", "transcript": null, "id": 6017}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBicJww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/5020", "type": "Nugget", "id": 5020}, {"nuggetType": "quiz", "name": "Testing2", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBieJww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/5022", "type": "Nugget", "id": 5022}, {"nuggetType": "lecture", "name": "Testing2 Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "2fbfff5e-2601-406b-a149-03253ffce5cd", "name": "cs101_unit1_33_s_Testing2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMoXDA", "youtube_id": "y8tLVVFPdQM", "youtube_state": "done", "path": "Course/cs101/Media/3018", "transcript": null, "id": 3018}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBifJww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/5023", "type": "Nugget", "id": 5023}, {"nuggetType": "program", "name": "Extracting Links", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBihJww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/5025", "suppliedCode": "# Write Python code that initializes the variable\n# start_link to be the value of the position\n# where the first '<a href=' occurs in a page.\n\npage = '''<div id=\"top_bin\"> <div id=\"top_content\" class=\"width960\">\n   <div class=\"udacity float-left\"> <a href=\"/\">'''\n\nstart_link =", "type": "Nugget", "id": 5025}, {"nuggetType": "lecture", "name": "Final Quiz", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "4da4add4-5d78-4015-9943-9fe5e791e523", "name": "cs101_unit1_38_p_Final-Quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMEfDA", "youtube_id": "hN4EYK6o25g", "youtube_state": "done", "path": "Course/cs101/Media/4033", "transcript": null, "id": 4033}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBijJww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/5027", "type": "Nugget", "id": 5027}, {"nuggetType": "program", "name": "Final Quiz", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBikJww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/5028", "suppliedCode": "# Write Python code that assigns to the \n# variable url a string that is the value \n# of the first URL that appears in a link \n# tag in the string page.\n\n# page = contents of a web page\npage ='<div id=\"top_bin\"><div id=\"top_content\" class=\"width960\"><div class=\"udacity float-left\"><a href=\"http://www.xkcd.com\">'\nstart_link = page.find('<a href=') \n\n\n\n", "type": "Nugget", "id": 5028}, {"nuggetType": "lecture", "name": "Great Job!", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "336d3e22-fede-4fad-9da6-f492fd9c2a92", "name": "cs101_unit1_39_l_Great-Job!", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPY2DA", "youtube_id": "mYiUeVpsfHo", "youtube_state": "done", "path": "Course/cs101/Media/7030", "transcript": null, "id": 7030}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBilJww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/5029", "type": "Nugget", "id": 5029}, {"nuggetType": "lecture", "name": "Would You Rather", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "a1f96297-67de-4d01-836f-fbcb7d57e5a4", "name": "cs101_unit1_07_q_Would-You-Rather", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGN02DA", "youtube_id": "7lNWFzAJWys", "youtube_state": "done", "path": "Course/cs101/Media/7005", "transcript": null, "id": 7005}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjzLgw", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/6003", "type": "Nugget", "id": 6003}, {"nuggetType": "quiz", "name": "Would You Rather", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBj0Lgw", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/6004", "type": "Nugget", "id": 6004}, {"nuggetType": "lecture", "name": "Would You Rather Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "8a2eee70-cb97-4392-bc0a-f0eb7dc959c8", "name": "cs101_unit1_07_s_Would-You-Rather", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOwHDA", "youtube_id": "X_81jDNLq2g", "youtube_state": "done", "path": "Course/cs101/Media/1004", "transcript": null, "id": 1004}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBj1Lgw", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/6005", "type": "Nugget", "id": 6005}, {"nuggetType": "lecture", "name": "Backus Naur Form", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "4cbd451b-324d-454c-baf1-72ca90634142", "name": "cs101_unit1_09_l_Backus-Naur-Form", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGN42DA", "youtube_id": "B4wMpOhOako", "youtube_state": "done", "path": "Course/cs101/Media/7006", "transcript": null, "id": 7006}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBj2Lgw", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/6006", "type": "Nugget", "id": 6006}, {"nuggetType": "lecture", "name": "Speed Of Light Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "f98b0992-69cc-42ac-a580-0f2594ee3178", "name": "cs101_unit1_12_s_Speed-of-Light", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNcPDA", "youtube_id": "BfdgkQpQBz0", "youtube_state": "done", "path": "Course/cs101/Media/2007", "transcript": null, "id": 2007}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBj3Lgw", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/6007", "type": "Nugget", "id": 6007}, {"nuggetType": "lecture", "name": "Varying Variables Quiz 1", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "da75024c-f634-4152-b3f3-accf639de5c6", "name": "cs101_unit1_18_q_Varying-Variables-Quiz-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNoPDA", "youtube_id": "t5_baICblp0", "youtube_state": "done", "path": "Course/cs101/Media/2010", "transcript": null, "id": 2010}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBj4Lgw", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/6008", "type": "Nugget", "id": 6008}, {"nuggetType": "lecture", "name": "Strings", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "3fb2e0c5-ca51-4fa7-8bff-ae498b4a8881", "name": "cs101_unit1_21_l_Strings", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOk2DA", "youtube_id": "_VUBbQP5fag", "youtube_state": "done", "path": "Course/cs101/Media/7017", "transcript": null, "id": 7017}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBj7Lgw", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/6011", "type": "Nugget", "id": 6011}, {"nuggetType": "quiz", "name": "Same Value", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBj_Lgw", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/6015", "type": "Nugget", "id": 6015}, {"nuggetType": "lecture", "name": "Capital Udacity Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "cb5023c3-3eda-4c83-8c58-94c337646af9", "name": "cs101_unit1_29_s_Capital-Udacity", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1chwLEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGBEM", "youtube_id": "m97cebS6s9w", "youtube_state": "done", "path": "Course/cs101/Media/17", "transcript": null, "id": 17}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBiDLww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/6019", "type": "Nugget", "id": 6019}, {"nuggetType": "lecture", "name": "Testing", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "40e39111-dd96-4491-9320-50570c04bf31", "name": "cs101_unit1_32_q_Testing", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIQvDA", "youtube_id": "pGXMGI1p7LA", "youtube_state": "done", "path": "Course/cs101/Media/6020", "transcript": null, "id": 6020}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBiFLww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/6021", "type": "Nugget", "id": 6021}, {"nuggetType": "quiz", "name": "Testing", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBiGLww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/6022", "type": "Nugget", "id": 6022}, {"nuggetType": "lecture", "name": "Testing Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "368dd0ec-974d-4aff-93b8-e898d299f6f3", "name": "cs101_unit1_32_s_Testing", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLsfDA", "youtube_id": "LGhJLinTNOE", "youtube_state": "done", "path": "Course/cs101/Media/4027", "transcript": null, "id": 4027}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBiHLww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/6023", "type": "Nugget", "id": 6023}, {"nuggetType": "quiz", "name": "Finding With Numbers Quiz", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBiJLww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/6025", "type": "Nugget", "id": 6025}, {"nuggetType": "lecture", "name": "Finding With Numbers Quiz Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "cc67942d-dcbf-45e0-9664-6141a84e2d39", "name": "cs101_unit1_35_s_Finding-with-Numbers-Quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGL8fDA", "youtube_id": "um3utAKiX10", "youtube_state": "done", "path": "Course/cs101/Media/4031", "transcript": null, "id": 4031}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBiKLww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/6026", "type": "Nugget", "id": 6026}, {"nuggetType": "lecture", "name": "Final Quiz Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "e2c6ae3c-30d6-4b78-a7f5-426bd5947c4b", "name": "cs101_unit1_38_s_Final-Quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOIPDA", "youtube_id": "fY0GJ8_Ok4g", "youtube_state": "done", "path": "Course/cs101/Media/2018", "transcript": null, "id": 2018}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBiMLww", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/6028", "type": "Nugget", "id": 6028}, {"nuggetType": "quiz", "name": "First Quiz", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjZNgw", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/7001", "type": "Nugget", "id": 7001}, {"nuggetType": "lecture", "name": "First Programming Quiz", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "1490c42f-9684-4975-98dd-c86ef03e70c5", "name": "cs101_unit1_05_p_First-Programming-Quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNs2DA", "youtube_id": "YP3ADIf3Dgk", "youtube_state": "done", "path": "Course/cs101/Media/7003", "transcript": null, "id": 7003}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjcNgw", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/7004", "type": "Nugget", "id": 7004}, {"nuggetType": "lecture", "name": "Eat Quiz", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "9b479b92-07fd-414e-bd99-079f4596a7e2", "name": "cs101_unit1_10_q_Eat-Quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKofDA", "youtube_id": "PTmFPjEhF6A", "youtube_state": "done", "path": "Course/cs101/Media/4010", "transcript": null, "id": 4010}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjgNgw", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/7008", "type": "Nugget", "id": 7008}, {"nuggetType": "quiz", "name": "Python Expressions", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjiNgw", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/7010", "type": "Nugget", "id": 7010}, {"nuggetType": "lecture", "name": "Python Expressions Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "9e540249-f440-43fa-878c-6ae05db43bcf", "name": "cs101_unit1_11_s_Python-Expressions", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGK0fDA", "youtube_id": "0mZBE0SoO5k", "youtube_state": "done", "path": "Course/cs101/Media/4013", "transcript": null, "id": 4013}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjjNgw", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/7011", "type": "Nugget", "id": 7011}, {"nuggetType": "lecture", "name": "Variables Quiz", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "9f20a7a1-adf3-408d-a2e0-c23448380433", "name": "cs101_unit1_16_p_Variables-Quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOU2DA", "youtube_id": "vaHDAtDbiSU", "youtube_state": "done", "path": "Course/cs101/Media/7013", "transcript": null, "id": 7013}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjmNgw", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/7014", "type": "Nugget", "id": 7014}, {"nuggetType": "quiz", "name": "Varying Variables Quiz 1", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjnNgw", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/7015", "type": "Nugget", "id": 7015}, {"nuggetType": "program", "name": "Hello!!!", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjqNgw", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/7018", "suppliedCode": "# Define a variable, name, and assign to it a string that is your name.\n\n", "type": "Nugget", "id": 7018}, {"nuggetType": "lecture", "name": "Strings And Numbers", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "7e5e3fcd-6037-44be-977e-5d4fc1d903a6", "name": "cs101_unit1_25_l_Strings-and-Numbers", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPwuDA", "youtube_id": "4-PcaVx2sQU", "youtube_state": "done", "path": "Course/cs101/Media/6012", "transcript": null, "id": 6012}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjsNgw", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/7020", "type": "Nugget", "id": 7020}, {"nuggetType": "lecture", "name": "Selecting Sub Sequences", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "69feefd0-3314-43ae-a3d7-9dbbcb528a62", "name": "cs101_unit1_28_l_Selecting-Sub-Sequences", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIAvDA", "youtube_id": "-y3oDx-Vl-E", "youtube_state": "done", "path": "Course/cs101/Media/6016", "transcript": null, "id": 6016}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjvNgw", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/7023", "type": "Nugget", "id": 7023}, {"nuggetType": "program", "name": "Capital Udacity", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjwNgw", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/7024", "suppliedCode": "# Write Python code that prints out Udacity (with a capital U), \n# given the definition of s below.\n\ns = 'audacity'\n    ", "type": "Nugget", "id": 7024}, {"nuggetType": "quiz", "name": "Understanding Selection", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBjxNgw", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/7025", "type": "Nugget", "id": 7025}, {"nuggetType": "lecture", "name": "Extracting Links Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDA", "media": {"dotsub_id": "f5b48b07-ac5f-47c0-856d-45f08eb4af01", "name": "cs101_unit1_37_s_Extracting-Links", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKInDA", "youtube_id": "6wl1b2sYrpE", "youtube_state": "done", "path": "Course/cs101/Media/5026", "transcript": null, "id": 5026}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNEPDAsSBk51Z2dldBj0Ngw", "path": "Course/cs101/CourseRev/feb2012/Unit/2001/Nugget/7028", "type": "Nugget", "id": 7028}]}, {"name": "Homework 1", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": true, "closedAt": "03/01/2012 00:00", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQY4doBDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYseoBDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYkssBDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQY4toBDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYgfoBDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYk8sBDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQY0YkCDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYoZkCDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQY8agCDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYqcACDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQY-c8CDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQY6oECDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYs-oBDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYlMsBDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYk8gCDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYyd8CDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYupECDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQY27ACDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYmu8CDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQY7IECDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQY_dIBDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYwrgCDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYy98CDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYhPoBDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYnO8CDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYne8CDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQY-88CDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQw", "path": "Course/cs101/CourseRev/feb2012/Unit/26001", "open": false, "id": 26001, "nuggets": [{"nuggetType": "lecture", "name": "Search Engines And The Web Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQw", "media": {"dotsub_id": "9431730f-c138-433c-ba2b-7d98a3e1cf0b", "name": "cs101_hw1_00_s_Search-Engines-and-the-Web", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJnyAQw", "youtube_id": "AKvAf2IKlM4", "youtube_state": "done", "path": "Course/cs101/Media/31001", "transcript": null, "id": 31001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYkssBDA", "path": "Course/cs101/CourseRev/feb2012/Unit/26001/Nugget/26002", "type": "Nugget", "id": 26002}, {"nuggetType": "lecture", "name": "Python Programming 1 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQw", "media": {"dotsub_id": "5ca0372f-9bea-45b2-a123-d097e1082e05", "name": "cs101_hw1_01_s_Python-Programming-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIL6AQw", "youtube_id": "FCMXhN6JJG4", "youtube_state": "done", "path": "Course/cs101/Media/32002", "transcript": null, "id": 32002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYk8sBDA", "path": "Course/cs101/CourseRev/feb2012/Unit/26001/Nugget/26003", "type": "Nugget", "id": 26003}, {"nuggetType": "quiz", "name": "Strings", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYlMsBDA", "path": "Course/cs101/CourseRev/feb2012/Unit/26001/Nugget/26004", "type": "Nugget", "id": 26004}, {"nuggetType": "lecture", "name": "Find 1 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQw", "media": {"dotsub_id": "de3c25c6-6cac-49c8-974f-83959a0178cc", "name": "cs101_hw1_06_s_Find-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIP6AQw", "youtube_id": "rs9Y2fc5PYA", "youtube_state": "done", "path": "Course/cs101/Media/32003", "transcript": null, "id": 32003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQY_dIBDA", "path": "Course/cs101/CourseRev/feb2012/Unit/26001/Nugget/27005", "type": "Nugget", "id": 27005}, {"nuggetType": "lecture", "name": "Search Engines And The Web", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQw", "media": {"dotsub_id": "68a3ed4e-6f4a-4e41-ba2a-0d507e5d38cb", "name": "cs101_hw1_00_q_Search-Engines-and-the-Web", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPnSAQw", "youtube_id": "aD2l2KXwZmk", "youtube_state": "done", "path": "Course/cs101/Media/27001", "transcript": null, "id": 27001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQY4doBDA", "path": "Course/cs101/CourseRev/feb2012/Unit/26001/Nugget/28001", "type": "Nugget", "id": 28001}, {"nuggetType": "lecture", "name": "Python Programming 1", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQw", "media": {"dotsub_id": "467b88f5-8c32-4b61-89a6-6d8944a5a584", "name": "cs101_hw1_01_p_Python-Programming-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPrSAQw", "youtube_id": "VbKL0tdvKdA", "youtube_state": "done", "path": "Course/cs101/Media/27002", "transcript": null, "id": 27002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQY4toBDA", "path": "Course/cs101/CourseRev/feb2012/Unit/26001/Nugget/28002", "type": "Nugget", "id": 28002}, {"nuggetType": "quiz", "name": "Search Engines And The Web", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYseoBDA", "path": "Course/cs101/CourseRev/feb2012/Unit/26001/Nugget/30001", "type": "Nugget", "id": 30001}, {"nuggetType": "lecture", "name": "Strings", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQw", "media": {"dotsub_id": "d12110b7-81fa-47f6-bce4-e7346d14eecb", "name": "cs101_hw1_04_q_Strings", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPKoAgw", "youtube_id": "NHrMj9soQtU", "youtube_state": "done", "path": "Course/cs101/Media/38002", "transcript": null, "id": 38002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYs-oBDA", "path": "Course/cs101/CourseRev/feb2012/Unit/26001/Nugget/30003", "type": "Nugget", "id": 30003}, {"nuggetType": "program", "name": "Python Programming 1", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYgfoBDA", "path": "Course/cs101/CourseRev/feb2012/Unit/26001/Nugget/32001", "suppliedCode": "#Write Python code that prints out the number of hours in 7 weeks.\n\n#DO NOT USE IMPORT\n\n\n", "type": "Nugget", "id": 32001}, {"nuggetType": "lecture", "name": "Find 2 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQw", "media": {"dotsub_id": "732e9536-2005-40e1-9aca-3434b48bde40", "name": "cs101_hw1_07_s_Find-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJXLAQw", "youtube_id": "ZtjATmIHNSo", "youtube_state": "done", "path": "Course/cs101/Media/26005", "transcript": null, "id": 26005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYhPoBDA", "path": "Course/cs101/CourseRev/feb2012/Unit/26001/Nugget/32004", "type": "Nugget", "id": 32004}, {"nuggetType": "lecture", "name": "Speed Of Light Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQw", "media": {"dotsub_id": "c1bf2755-7acb-4abc-a0f1-ceac1f6f551c", "name": "cs101_hw1_03_s_Speed-of-Light", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOHXAgw", "youtube_id": "Zadjbb8UA14", "youtube_state": "done", "path": "Course/cs101/Media/44001", "transcript": null, "id": 44001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQY6oECDA", "path": "Course/cs101/CourseRev/feb2012/Unit/26001/Nugget/33002", "type": "Nugget", "id": 33002}, {"nuggetType": "program", "name": "Find 1", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQY7IECDA", "path": "Course/cs101/CourseRev/feb2012/Unit/26001/Nugget/33004", "suppliedCode": "#Assume text is a variable that\n#holds a string. Write Python code\n#that prints out the position\n#of the first occurrence of 'hoo'\n#in the value of text, or -1 if\n#it does not occur at all.\n\ntext = \"first hoo\" \n\n#DO NOT USE IMPORT\n\n#ENTER CODE BELOW HERE\n#ANY CODE ABOVE WILL CAUSE\n#HOMEWORK TO BE GRADED\n#INCORRECT\n\n\n\n\n\n\n\n\n\n\n\n\n", "type": "Nugget", "id": 33004}, {"nuggetType": "lecture", "name": "Python Programming 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQw", "media": {"dotsub_id": "5a9916e1-16ff-4d7f-919b-9cdbaa718ce2", "name": "cs101_hw1_02_q_Python-Programming-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOmBAgw", "youtube_id": "_hMfTnLwsHM", "youtube_state": "done", "path": "Course/cs101/Media/33001", "transcript": null, "id": 33001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQY0YkCDA", "path": "Course/cs101/CourseRev/feb2012/Unit/26001/Nugget/34001", "type": "Nugget", "id": 34001}, {"nuggetType": "program", "name": "Bodacious Udacity", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYupECDA", "path": "Course/cs101/CourseRev/feb2012/Unit/26001/Nugget/35002", "suppliedCode": "#Given the variables s and t defined as:\ns = 'udacity'\nt = 'bodacious'\n#write Python code that prints out udacious\n#without using any quote characters in\n#your code.\n\n#DO NOT USE IMPORT\n\n\n\n\n\n\n\n", "type": "Nugget", "id": 35002}, {"nuggetType": "quiz", "name": "Python Programming 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYoZkCDA", "path": "Course/cs101/CourseRev/feb2012/Unit/26001/Nugget/36001", "type": "Nugget", "id": 36001}, {"nuggetType": "lecture", "name": "Python Programming 2 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQw", "media": {"dotsub_id": "410616cb-ab0c-4214-a212-5beb42135d32", "name": "cs101_hw1_02_s_Python-Programming-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGImhAgw", "youtube_id": "NdQf3saLgAk", "youtube_state": "done", "path": "Course/cs101/Media/37001", "transcript": null, "id": 37001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQY8agCDA", "path": "Course/cs101/CourseRev/feb2012/Unit/26001/Nugget/38001", "type": "Nugget", "id": 38001}, {"nuggetType": "lecture", "name": "Bodacious Udacity Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQw", "media": {"dotsub_id": "30d7e0c8-834e-46b3-abe2-9dbedef5461b", "name": "cs101_hw1_05_s_Bodacious-Udacity", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNKJAgw", "youtube_id": "dgYeP1s8xkc", "youtube_state": "done", "path": "Course/cs101/Media/34002", "transcript": null, "id": 34002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQY27ACDA", "path": "Course/cs101/CourseRev/feb2012/Unit/26001/Nugget/39003", "type": "Nugget", "id": 39003}, {"nuggetType": "lecture", "name": "Find 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQw", "media": {"dotsub_id": "c5043fdf-4b7a-4b80-969b-564b9186e677", "name": "cs101_hw1_07_p_Find-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIH3Agw", "youtube_id": "MX2nLhPC0fY", "youtube_state": "done", "path": "Course/cs101/Media/48001", "transcript": null, "id": 48001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYwrgCDA", "path": "Course/cs101/CourseRev/feb2012/Unit/26001/Nugget/40002", "type": "Nugget", "id": 40002}, {"nuggetType": "lecture", "name": "Speed Of Light", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQw", "media": {"dotsub_id": "92a6f225-9d0f-4a0f-b362-7a476eb0c2d2", "name": "cs101_hw1_03_p_Speed-of-Light", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMG4Agw", "youtube_id": "yLzzJJPu6MQ", "youtube_state": "done", "path": "Course/cs101/Media/40001", "transcript": null, "id": 40001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYqcACDA", "path": "Course/cs101/CourseRev/feb2012/Unit/26001/Nugget/41001", "type": "Nugget", "id": 41001}, {"nuggetType": "lecture", "name": "Strings Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQw", "media": {"dotsub_id": "394c2592-7008-4275-bac3-c97e5dbaec3e", "name": "cs101_hw1_04_s_Strings", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJLIAgw", "youtube_id": "AFYigYIunQ4", "youtube_state": "done", "path": "Course/cs101/Media/42002", "transcript": null, "id": 42002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYk8gCDA", "path": "Course/cs101/CourseRev/feb2012/Unit/26001/Nugget/42003", "type": "Nugget", "id": 42003}, {"nuggetType": "program", "name": "Speed Of Light", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQY-c8CDA", "path": "Course/cs101/CourseRev/feb2012/Unit/26001/Nugget/43001", "suppliedCode": "#Write Python code that stores the distance \n#in meters that light travels in one \n#nanosecond in the variable, nanodistance. \n\n#These variables are defined for you:\nspeed_of_light = 299800000. #meters per second\nnano_per_sec = 1000000000. #1 Billion\n\n#After your code,running\n#print nanodistance\n#should output 0.2998\n\n#Note that nanodistance must be a decimal number.\n\n#DO NOT USE IMPORT\n\n\n\n\n\n\n#ASSIGN nanodistance HERE\n\nprint nanodistance", "type": "Nugget", "id": 43001}, {"nuggetType": "lecture", "name": "Rounding Numbers Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQw", "media": {"dotsub_id": "f5f70375-ed8b-4005-acc1-5a2053e2ca2e", "name": "cs101_hw1_08_s_Rounding-Numbers", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOPXAgw", "youtube_id": "l1coJkTxhBY", "youtube_state": "done", "path": "Course/cs101/Media/44003", "transcript": null, "id": 44003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQY-88CDA", "path": "Course/cs101/CourseRev/feb2012/Unit/26001/Nugget/43003", "type": "Nugget", "id": 43003}, {"nuggetType": "lecture", "name": "Bodacious Udacity", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQw", "media": {"dotsub_id": "21cb0b69-c148-4b6a-9343-7a29f68a8978", "name": "cs101_hw1_05_p_Bodacious-Udacity", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPrPAgw", "youtube_id": "nqAA4Lm5G6U", "youtube_state": "done", "path": "Course/cs101/Media/43002", "transcript": null, "id": 43002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYyd8CDA", "path": "Course/cs101/CourseRev/feb2012/Unit/26001/Nugget/45001", "type": "Nugget", "id": 45001}, {"nuggetType": "program", "name": "Find 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYy98CDA", "path": "Course/cs101/CourseRev/feb2012/Unit/26001/Nugget/45003", "suppliedCode": "#Assume text is a variable that\n#holds a string. Write Python code\n#that prints out the position\n#of the second occurrence of 'zip'\n#in text, or -1 if it does not occur\n#at least twice.\n\n#For example,\n#   text = 'all zip files are zipped' -> 18\n#   text = 'all zip files are compressed' -> -1\n\ntext = \"all zip files are zipped\" \n\n#DO NOT USE IMPORT\n\n#ENTER CODE BELOW HERE\n#ANY CODE ABOVE WILL CAUSE\n#HOMEWORK TO BE GRADED\n#INCORRECT\n\n\n\n\n\n\n\n\n\n\n\n", "type": "Nugget", "id": 45003}, {"nuggetType": "lecture", "name": "Find 1", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQw", "media": {"dotsub_id": "9d6fcf7f-6e7b-4fc0-9f3d-4dbb0182f270", "name": "cs101_hw1_06_p_Find-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJnvAgw", "youtube_id": "hN4AHfNXeYg", "youtube_state": "done", "path": "Course/cs101/Media/47001", "transcript": null, "id": 47001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYmu8CDA", "path": "Course/cs101/CourseRev/feb2012/Unit/26001/Nugget/47002", "type": "Nugget", "id": 47002}, {"nuggetType": "lecture", "name": "Rounding Numbers", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQw", "media": {"dotsub_id": "d3995275-b8b8-429c-bc26-a3537435c7ca", "name": "cs101_hw1_08_p_Rounding-Numbers", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJvvAgw", "youtube_id": "8vnR6H8euXY", "youtube_state": "done", "path": "Course/cs101/Media/47003", "transcript": null, "id": 47003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYnO8CDA", "path": "Course/cs101/CourseRev/feb2012/Unit/26001/Nugget/47004", "type": "Nugget", "id": 47004}, {"nuggetType": "program", "name": "Rounding Numbers", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJHLAQwLEgZOdWdnZXQYne8CDA", "path": "Course/cs101/CourseRev/feb2012/Unit/26001/Nugget/47005", "suppliedCode": "#Given a variable, x, that stores\n#the value of any decimal number,\n#write Python code that prints out\n#the nearest whole number to x.\n\n#You can assume x is not negative.\n\n# x = 3.14159 -> 3 (not 3.0)\n# x = 27.63 -> 28 (not 28.0)\n\nx = 3.14159\n\n#DO NOT USE IMPORT\n\n#ENTER CODE BELOW HERE\n#ANY CODE ABOVE WILL CAUSE\n#HOMEWORK TO BE GRADED\n#INCORRECT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "type": "Nugget", "id": 47005}]}, {"name": "Office Hours 1", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLmOAwwLEgZOdWdnZXQYiZ4DDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLmOAwwLEgZOdWdnZXQY8qUDDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLmOAwwLEgZOdWdnZXQYuo4DDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLmOAwwLEgZOdWdnZXQY-cwDDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLmOAwwLEgZOdWdnZXQYksUDDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLmOAwwLEgZOdWdnZXQYydwDDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLmOAww", "path": "Course/cs101/CourseRev/feb2012/Unit/51001", "open": false, "id": 51001, "nuggets": [{"nuggetType": "lecture", "name": "Why Python", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLmOAww", "media": {"dotsub_id": "54b46fc5-d2d9-434c-a111-adf0c820acd9", "name": "cs101_oo1_02_l_Why-Python", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMG1Aww", "youtube_id": "RIzA97RW8AM", "youtube_state": "done", "path": "Course/cs101/Media/56001", "transcript": null, "id": 56001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLmOAwwLEgZOdWdnZXQYuo4DDA", "path": "Course/cs101/CourseRev/feb2012/Unit/51001/Nugget/51002", "type": "Nugget", "id": 51002}, {"nuggetType": "lecture", "name": "Welcome To Office Hours", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLmOAww", "media": {"dotsub_id": "05d192f7-8dd5-4895-8836-3e6d547debc8", "name": "cs101_oo1_00_l_Welcome-to-Office-Hours", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKGWAww", "youtube_id": "PckSUEQu3F8", "youtube_state": "done", "path": "Course/cs101/Media/52001", "transcript": null, "id": 52001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLmOAwwLEgZOdWdnZXQYiZ4DDA", "path": "Course/cs101/CourseRev/feb2012/Unit/51001/Nugget/53001", "type": "Nugget", "id": 53001}, {"nuggetType": "lecture", "name": "Seed Pages", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLmOAww", "media": {"dotsub_id": "8c00169b-a958-4c90-9fb9-b645e99c4aea", "name": "cs101_oo1_01_l_Seed-Pages", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKKWAww", "youtube_id": "VonWCDIul58", "youtube_state": "done", "path": "Course/cs101/Media/52002", "transcript": null, "id": 52002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLmOAwwLEgZOdWdnZXQY8qUDDA", "path": "Course/cs101/CourseRev/feb2012/Unit/51001/Nugget/54002", "type": "Nugget", "id": 54002}, {"nuggetType": "lecture", "name": "Great Responsibility", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLmOAww", "media": {"dotsub_id": "31702b73-6a99-46bf-a88a-856bff37b0b2", "name": "cs101_oo1_04_l_Great-Responsibility", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOHUAww", "youtube_id": "w6IGIGTAcEw", "youtube_state": "done", "path": "Course/cs101/Media/60001", "transcript": null, "id": 60001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLmOAwwLEgZOdWdnZXQYksUDDA", "path": "Course/cs101/CourseRev/feb2012/Unit/51001/Nugget/58002", "type": "Nugget", "id": 58002}, {"nuggetType": "lecture", "name": "Doing More", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLmOAww", "media": {"dotsub_id": "3563d233-de0d-4d69-b5a6-c4a30c5f6143", "name": "cs101_oo1_03_l_Doing-More", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJHFAww", "youtube_id": "EQKQGA3mzpE", "youtube_state": "done", "path": "Course/cs101/Media/58001", "transcript": null, "id": 58001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLmOAwwLEgZOdWdnZXQY-cwDDA", "path": "Course/cs101/CourseRev/feb2012/Unit/51001/Nugget/59001", "type": "Nugget", "id": 59001}, {"nuggetType": "lecture", "name": "Helping Udacity", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLmOAww", "media": {"dotsub_id": "8e266e55-e5e6-4a63-8ddb-1330e59dcbb6", "name": "cs101_oo1_05_l_Helping-Udacity", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJTIAgw", "youtube_id": "sxki4LKQlSA", "youtube_state": "done", "path": "Course/cs101/Media/42004", "transcript": null, "id": 42004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLmOAwwLEgZOdWdnZXQYydwDDA", "path": "Course/cs101/CourseRev/feb2012/Unit/51001/Nugget/61001", "type": "Nugget", "id": 61001}]}, {"name": "Unit 2", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYgvQDDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYuYsEDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY8aIEDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYkcIEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY4dEEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYseEEDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYw7UDDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY6fgEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY0YAFDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYuYgFDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYipsEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY8Z8FDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY2acFDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYqbcFDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY6vgEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYytkEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYkb8FDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY6vsDDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY-cYFDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYm-kEDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY4tEEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYydYFDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY6_sDDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYvY4DDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYhPQDDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY8qIEDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYlcgCDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYu4sEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYnOkEDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYmcsBDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY26oEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYi5gFDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY7PsDDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY3KoEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY7vsDDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYx7UDDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYteEEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYm-YFDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY6fUFDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY6_UFDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY0oMEDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYnekEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYnOYFDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYmssBDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY5NEEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY5dEEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYyLUDDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYhvQDDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY-sYFDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY1oYDDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY7PUFDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYneYFDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY7fUFDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYzdkEDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY14YDDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYjZsEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY8PsDDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY_MkEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYjZgFDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY8vsDDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYjpsEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYu4gFDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYtuEEDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY4KoEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYy9wDDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY8_sDDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYj5sEDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYwI4DDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYkJsEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY26cFDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYuYUGDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY4qoEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYncsBDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYopMEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYxK8FDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYkpsEDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "path": "Course/cs101/CourseRev/feb2012/Unit/64001", "open": false, "id": 64001, "nuggets": [{"nuggetType": "lecture", "name": "Abbaize", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_13_p_abbaize", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLThBAw", "youtube_id": "DbZyAwGqIsY", "youtube_state": "done", "path": "Course/cs101/Media/78004", "transcript": null, "id": 78004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYmcsBDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/26009", "type": "Nugget", "id": 26009}, {"nuggetType": "lecture", "name": "Is Friend Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_17_s_is-friend", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLTeBQw", "youtube_id": "MXFqf078Dw8", "youtube_state": "done", "path": "Course/cs101/Media/94004", "transcript": null, "id": 94004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYmssBDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/26010", "type": "Nugget", "id": 26010}, {"nuggetType": "lecture", "name": "No Links Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_28_s_No-Links", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJzLAQw", "youtube_id": "hPeIZFdGVMk", "youtube_state": "done", "path": "Course/cs101/Media/26012", "transcript": null, "id": 26012}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYncsBDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/26013", "type": "Nugget", "id": 26013}, {"nuggetType": "lecture", "name": "Sum Of Three", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_12_p_sum-of-three", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGL6OAww", "youtube_id": "DqcXAHDBlGI", "youtube_state": "done", "path": "Course/cs101/Media/51006", "transcript": null, "id": 51006}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYlcgCDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/42005", "type": "Nugget", "id": 42005}, {"nuggetType": "lecture", "name": "No Links", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_28_q_No-Links", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNynBQw", "youtube_id": "3kEqq0ckEhc", "youtube_state": "done", "path": "Course/cs101/Media/87004", "transcript": null, "id": 87004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYz98CDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/45007", "type": "Nugget", "id": 45007}, {"nuggetType": "program", "name": "Biggest", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY1oYDDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/50006", "suppliedCode": "#Define a procedure, biggest, that takes three\n# numbers as inputs and returns the largest of\n# those three numbers.\n\ndef biggest():\n\n\n", "type": "Nugget", "id": 50006}, {"nuggetType": "lecture", "name": "While Loops 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_22_q_while-loops-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPOiBAw", "youtube_id": "vrAi9aeIp-A", "youtube_state": "done", "path": "Course/cs101/Media/70003", "transcript": null, "id": 70003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY14YDDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/50007", "type": "Nugget", "id": 50007}, {"nuggetType": "lecture", "name": "Square", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_11_p_square", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMa1Aww", "youtube_id": "vgb6J_z8NM0", "youtube_state": "done", "path": "Course/cs101/Media/56006", "transcript": null, "id": 56006}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYvY4DDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/51005", "type": "Nugget", "id": 51005}, {"nuggetType": "lecture", "name": "Multiple Assignment", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_27_q_Multiple-Assignment", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMm1Aww", "youtube_id": "VrdCZ6h_rOg", "youtube_state": "done", "path": "Course/cs101/Media/56009", "transcript": null, "id": 56009}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYwI4DDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/51008", "type": "Nugget", "id": 51008}, {"nuggetType": "lecture", "name": "Output", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_04_q_Output", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIHxBAw", "youtube_id": "o54Azk5TqIE", "youtube_state": "done", "path": "Course/cs101/Media/80001", "transcript": null, "id": 80001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYw7UDDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/56003", "type": "Nugget", "id": 56003}, {"nuggetType": "lecture", "name": "Equality Comparisons", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_15_q_equality-comparisons", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOLOBQw", "youtube_id": "ZAnJiwZiBWg", "youtube_state": "done", "path": "Course/cs101/Media/92002", "transcript": null, "id": 92002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYx7UDDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/56007", "type": "Nugget", "id": 56007}, {"nuggetType": "lecture", "name": "More Friends Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_18_s_more-friends", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGObRBAw", "youtube_id": "Rh_cy_tUcKA", "youtube_state": "done", "path": "Course/cs101/Media/76006", "transcript": null, "id": 76006}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYyLUDDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/56008", "type": "Nugget", "id": 56008}, {"nuggetType": "quiz", "name": "Break", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYy9wDDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/61003", "type": "Nugget", "id": 61003}, {"nuggetType": "lecture", "name": "Introduction", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_00_l_introduction-to-web-browsers", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOn7Aww", "youtube_id": "DXAS-my8mrE", "youtube_state": "done", "path": "Course/cs101/Media/65001", "transcript": null, "id": 65001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYgvQDDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/64002", "type": "Nugget", "id": 64002}, {"nuggetType": "program", "name": "Square", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYhPQDDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/64004", "suppliedCode": "#Define a procedure, square, that\n#takes one number as its input,\n#and outputs the square of that\n#number (result of multiplying\n#the number by itself).\n\n#print square(5) => 25\n\n", "type": "Nugget", "id": 64004}, {"nuggetType": "lecture", "name": "Or", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_19_l_or", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNODBAw", "youtube_id": "ZEI30J10OGo", "youtube_state": "done", "path": "Course/cs101/Media/66003", "transcript": null, "id": 66003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYhvQDDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/64006", "type": "Nugget", "id": 64006}, {"nuggetType": "lecture", "name": "Sum Procedure", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_09_q_sum-procedure", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJjLAQw", "youtube_id": "WzrS3Jtmzrs", "youtube_state": "done", "path": "Course/cs101/Media/26008", "transcript": null, "id": 26008}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY6vsDDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/65002", "type": "Nugget", "id": 65002}, {"nuggetType": "lecture", "name": "Sum Procedure With A Return Statement Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_10_s_sum-procedure-with-a-return-statement", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLHeBQw", "youtube_id": "gYCxn_rWoas", "youtube_state": "done", "path": "Course/cs101/Media/94001", "transcript": null, "id": 94001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY6_sDDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/65003", "type": "Nugget", "id": 65003}, {"nuggetType": "lecture", "name": "Find Second", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_14_p_find-second", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIX0Aww", "youtube_id": "V6V0Yj22Jq4", "youtube_state": "done", "path": "Course/cs101/Media/64005", "transcript": null, "id": 64005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY7PsDDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/65004", "type": "Nugget", "id": 65004}, {"nuggetType": "lecture", "name": "Find Second Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_14_s_find-second", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGO37Aww", "youtube_id": "2gKo_r9uVPQ", "youtube_state": "done", "path": "Course/cs101/Media/65005", "transcript": null, "id": 65005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY7vsDDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/65006", "type": "Nugget", "id": 65006}, {"nuggetType": "lecture", "name": "While Loops 2 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_22_s_while-loops-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJvLAQw", "youtube_id": "C6joTmBU4KQ", "youtube_state": "done", "path": "Course/cs101/Media/26011", "transcript": null, "id": 26011}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY8PsDDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/65008", "type": "Nugget", "id": 65008}, {"nuggetType": "lecture", "name": "Print Numbers Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_23_s_print-numbers", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPH7Aww", "youtube_id": "GOyvnDZHS_c", "youtube_state": "done", "path": "Course/cs101/Media/65009", "transcript": null, "id": 65009}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY8vsDDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/65010", "type": "Nugget", "id": 65010}, {"nuggetType": "lecture", "name": "Break Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_25_s_break", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGM7ZBAw", "youtube_id": "gty7KxxaTR8", "youtube_state": "done", "path": "Course/cs101/Media/77006", "transcript": null, "id": 77006}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY8_sDDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/65011", "type": "Nugget", "id": 65011}, {"nuggetType": "lecture", "name": "If Statements Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_16_s_if-statements", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMvZBAw", "youtube_id": "pGHR9PzaOe4", "youtube_state": "done", "path": "Course/cs101/Media/77003", "transcript": null, "id": 77003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY0oMEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/66002", "type": "Nugget", "id": 66002}, {"nuggetType": "lecture", "name": "Motivating Procedures", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_01_l_Motivating-Procedures", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNGDBAw", "youtube_id": "WsAFUaVpAjE", "youtube_state": "done", "path": "Course/cs101/Media/66001", "transcript": null, "id": 66001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYuYsEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/67001", "type": "Nugget", "id": 67001}, {"nuggetType": "program", "name": "Sum Of Three", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYu4sEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/67003", "suppliedCode": "#Define a procedure, sum3, that takes three\n#inputs, and outputs the sum of the three\n#input numbers.\n\n#print sum3(1,2,3) => 6\n\n\n\n", "type": "Nugget", "id": 67003}, {"nuggetType": "lecture", "name": "Print All Links", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_29_qs_print-all-links", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPH1BQw", "youtube_id": "Inr_DYUqxk8", "youtube_state": "done", "path": "Course/cs101/Media/97009", "transcript": null, "id": 97009}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYopMEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/68002", "type": "Nugget", "id": 68002}, {"nuggetType": "quiz", "name": "Return Statement", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYipsEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/69002", "type": "Nugget", "id": 69002}, {"nuggetType": "quiz", "name": "While Loops 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYjZsEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/69005", "type": "Nugget", "id": 69005}, {"nuggetType": "lecture", "name": "Factorial", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_24_p_factorial", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGI6YBQw", "youtube_id": "tCHpmimeIm4", "youtube_state": "done", "path": "Course/cs101/Media/85006", "transcript": null, "id": 85006}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYjpsEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/69006", "type": "Nugget", "id": 69006}, {"nuggetType": "lecture", "name": "Multiple Assignment", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_26_l_Multiple-Assignment", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMKyBAw", "youtube_id": "MagGZY7wHfU", "youtube_state": "done", "path": "Course/cs101/Media/72002", "transcript": null, "id": 72002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYj5sEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/69007", "type": "Nugget", "id": 69007}, {"nuggetType": "quiz", "name": "Multiple Assignment", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYkJsEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/69008", "type": "Nugget", "id": 69008}, {"nuggetType": "lecture", "name": "Print All Links Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_29_s_print-all-links", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJGbBAw", "youtube_id": "BFYeJzcejxM", "youtube_state": "done", "path": "Course/cs101/Media/69009", "transcript": null, "id": 69009}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYkpsEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/69010", "type": "Nugget", "id": 69010}, {"nuggetType": "lecture", "name": "Introducing Procedures", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_02_l_Introducing-Procedures", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGImbBAw", "youtube_id": "fWkAB0X0uUo", "youtube_state": "done", "path": "Course/cs101/Media/69001", "transcript": null, "id": 69001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY8aIEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/70001", "type": "Nugget", "id": 70001}, {"nuggetType": "lecture", "name": "Square Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_11_s_square", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPKfBQw", "youtube_id": "Jc-b2VOIHYU", "youtube_state": "done", "path": "Course/cs101/Media/86002", "transcript": null, "id": 86002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY8qIEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/70002", "type": "Nugget", "id": 70002}, {"nuggetType": "program", "name": "Abbaize", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY26oEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/71003", "suppliedCode": "#Define a procedure, abbaize, that takes\n#two strings as its inputs, and outputs\n#a string that is the first input,\n#followed by two repetitions of the second input,\n#followed by the first input.\n\n#abbaize('a','b') => 'abba'\n#abbaize('dog','cat') => 'dogcatcatdog'\n\n\n\n\n\n", "type": "Nugget", "id": 71003}, {"nuggetType": "program", "name": "Find Second", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY3KoEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/71004", "suppliedCode": "#Define a procedure, find_second, that takes\n#two strings as its inputs: a search string\n#and a target string. It should output a\n#number that is the position of the second\n#occurence of the target string in the\n#search string.\n\n#danton = \"De l'audace, encore de l'audace, toujours de l'audace\"\n#print find_second(danton, 'audace') => 25\n\n", "type": "Nugget", "id": 71004}, {"nuggetType": "lecture", "name": "Break", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_25_q_break", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGN-qBAw", "youtube_id": "F8Pt4o1_d24", "youtube_state": "done", "path": "Course/cs101/Media/71007", "transcript": null, "id": 71007}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY4KoEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/71008", "type": "Nugget", "id": 71008}, {"nuggetType": "program", "name": "No Links", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY4qoEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/71010", "suppliedCode": "# Modify the get_next_target procedure so that\n# if there is a link it behaves as before, but\n# if there is no link tag in the input string,\n# it outputs None, 0.\n\ndef get_next_target(page):\n    start_link = page.find('<a href=')\n\n    #Insert your code here\n    \n    start_quote = page.find('\"', start_link)\n    end_quote = page.find('\"', start_quote + 1)\n    url = page[start_quote + 1:end_quote]\n    return url, end_quote\n                 \n\n", "type": "Nugget", "id": 71010}, {"nuggetType": "lecture", "name": "Procedure Code", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_03_q_Procedure-Code", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKm6BAw", "youtube_id": "HovPhwYCtIk", "youtube_state": "done", "path": "Course/cs101/Media/73001", "transcript": null, "id": 73001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYkcIEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/74001", "type": "Nugget", "id": 74001}, {"nuggetType": "lecture", "name": "Print Numbers", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_23_p_print-numbers", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOTOBQw", "youtube_id": "oakvWqcXk1M", "youtube_state": "done", "path": "Course/cs101/Media/92004", "transcript": null, "id": 92004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY_MkEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/75004", "type": "Nugget", "id": 75004}, {"nuggetType": "quiz", "name": "Procedure Code", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY4dEEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/76001", "type": "Nugget", "id": 76001}, {"nuggetType": "lecture", "name": "Sum Procedure With A Return Statement", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_10_q_sum-procedure-with-a-return-statement", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMW1Aww", "youtube_id": "C0mwyqJUZQA", "youtube_state": "done", "path": "Course/cs101/Media/56005", "transcript": null, "id": 56005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY4tEEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/76002", "type": "Nugget", "id": 76002}, {"nuggetType": "lecture", "name": "More Friends", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_18_p_more-friends", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPvJBAw", "youtube_id": "l5JsIu2Rvn8", "youtube_state": "done", "path": "Course/cs101/Media/75003", "transcript": null, "id": 75003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY5NEEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/76004", "type": "Nugget", "id": 76004}, {"nuggetType": "program", "name": "More Friends", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY5dEEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/76005", "suppliedCode": "#Define a procedure, is_friend, that takes\n#a string as its input, and outputs a\n#Boolean indicating if the input string\n#is the name of a friend. Assume\n#I am friends with everyone whose name\n#starts with either D or N, but no one\n#else.\n\n#print is_friend('Diane') => True\n#print is_friend('Ned')  => True\n\n\n", "type": "Nugget", "id": 76005}, {"nuggetType": "quiz", "name": "Inc Procedure", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYytkEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/77002", "type": "Nugget", "id": 77002}, {"nuggetType": "lecture", "name": "While Loops Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_21_s_while-loops", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLXeBQw", "youtube_id": "_pXACs62FS8", "youtube_state": "done", "path": "Course/cs101/Media/94005", "transcript": null, "id": 94005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYzdkEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/77005", "type": "Nugget", "id": 77005}, {"nuggetType": "lecture", "name": "Procedure Code Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_03_s_Procedure-Code", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMnZBAw", "youtube_id": "3QdQlbM8EKM", "youtube_state": "done", "path": "Course/cs101/Media/77001", "transcript": null, "id": 77001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYseEEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/78001", "type": "Nugget", "id": 78001}, {"nuggetType": "quiz", "name": "Equality Comparisons", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYteEEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/78005", "type": "Nugget", "id": 78005}, {"nuggetType": "lecture", "name": "Factorial Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_24_s_factorial", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNSDBAw", "youtube_id": "2b0GdtuBVQU", "youtube_state": "done", "path": "Course/cs101/Media/66004", "transcript": null, "id": 66004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYtuEEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/78006", "type": "Nugget", "id": 78006}, {"nuggetType": "lecture", "name": "Sum Procedure Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_09_s_sum-procedure", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNOABQw", "youtube_id": "YZxj5ZJ3BHE", "youtube_state": "done", "path": "Course/cs101/Media/82003", "transcript": null, "id": 82003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYm-kEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/79003", "type": "Nugget", "id": 79003}, {"nuggetType": "lecture", "name": "Sum Of Three Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_12_s_sum-of-three", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNqqBAw", "youtube_id": "tKMgY-kERPI", "youtube_state": "done", "path": "Course/cs101/Media/71002", "transcript": null, "id": 71002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYnOkEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/79004", "type": "Nugget", "id": 79004}, {"nuggetType": "lecture", "name": "Is Friend", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_17_p_is-friend", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIPuBQw", "youtube_id": "Gm9oTD_YBVU", "youtube_state": "done", "path": "Course/cs101/Media/96003", "transcript": null, "id": 96003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYnekEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/79005", "type": "Nugget", "id": 79005}, {"nuggetType": "quiz", "name": "No Links", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYnukEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/79006", "type": "Nugget", "id": 79006}, {"nuggetType": "quiz", "name": "Output", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY6fgEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/81001", "type": "Nugget", "id": 81001}, {"nuggetType": "lecture", "name": "Inc Procedure", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_08_q_INC-Procedure", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNqnBQw", "youtube_id": "I6Wz2yXf09I", "youtube_state": "done", "path": "Course/cs101/Media/87002", "transcript": null, "id": 87002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY6vgEDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/81002", "type": "Nugget", "id": 81002}, {"nuggetType": "lecture", "name": "Output Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_04_s_Output", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJrpBAw", "youtube_id": "Je2vSCmDP-0", "youtube_state": "done", "path": "Course/cs101/Media/79002", "transcript": null, "id": 79002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY0YAFDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/82001", "type": "Nugget", "id": 82001}, {"nuggetType": "lecture", "name": "Return Statement", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_05_q_Return-Statement", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMS1Aww", "youtube_id": "IbwMz3Hgt4Y", "youtube_state": "done", "path": "Course/cs101/Media/56004", "transcript": null, "id": 56004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYuYgFDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/83001", "type": "Nugget", "id": 83001}, {"nuggetType": "program", "name": "Factorial", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYu4gFDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/83003", "suppliedCode": "#Define a procedure, factorial, that\n#takes one number as its input\n#and returns the factorial of\n#that number.\n\ndef factorial():\n    \n\n", "type": "Nugget", "id": 83003}, {"nuggetType": "lecture", "name": "Abbaize Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_13_s_abbaize", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPOfBQw", "youtube_id": "eHo45Y87BMw", "youtube_state": "done", "path": "Course/cs101/Media/86003", "transcript": null, "id": 86003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYi5gFDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/85003", "type": "Nugget", "id": 85003}, {"nuggetType": "program", "name": "Print Numbers", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYjZgFDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/85005", "suppliedCode": "# Define a procedure, print_numbers, that takes\n# as input a positive whole number, and prints \n# out all the whole numbers from 1 to the input\n# number.\n\n# Make sure your procedure prints \"upwards\", so\n# from 1 up to the input number.\n\ndef print_numbers():\n                  \n                 \n\n", "type": "Nugget", "id": 85005}, {"nuggetType": "lecture", "name": "Return Statement Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_05_s_Return-Statement", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGImYBQw", "youtube_id": "ksz9cVxrza4", "youtube_state": "done", "path": "Course/cs101/Media/85001", "transcript": null, "id": 85001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY8Z8FDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/86001", "type": "Nugget", "id": 86001}, {"nuggetType": "lecture", "name": "Dave Sebastian And Junior", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_06_l_Dave-Sebastian-and-Junior", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGM7fAgw", "youtube_id": "iNu3AwbTEQs", "youtube_state": "done", "path": "Course/cs101/Media/45006", "transcript": null, "id": 45006}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY2acFDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/87001", "type": "Nugget", "id": 87001}, {"nuggetType": "lecture", "name": "Multiple Assignment Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_27_s_Multiple-Assignment", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMOyBAw", "youtube_id": "I2UjHU2SD0M", "youtube_state": "done", "path": "Course/cs101/Media/72003", "transcript": null, "id": 72003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY26cFDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/87003", "type": "Nugget", "id": 87003}, {"nuggetType": "snippetQuiz", "name": "Print All Links", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYxK8FDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/88004", "type": "Nugget", "id": 88004}, {"nuggetType": "lecture", "name": "Using Procedures", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_07_l_Using-Procedures", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMGvBQw", "youtube_id": "TYA0kypoJwY", "youtube_state": "done", "path": "Course/cs101/Media/88001", "transcript": null, "id": 88001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYqbcFDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/89001", "type": "Nugget", "id": 89001}, {"nuggetType": "lecture", "name": "Inc Procedure Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_08_s_INC-Procedure", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMKvBQw", "youtube_id": "7ghubisyzh4", "youtube_state": "done", "path": "Course/cs101/Media/88002", "transcript": null, "id": 88002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYkb8FDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/90001", "type": "Nugget", "id": 90001}, {"nuggetType": "quiz", "name": "Sum Procedure", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY-cYFDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/91001", "type": "Nugget", "id": 91001}, {"nuggetType": "lecture", "name": "Biggest", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_20_p_biggest", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNWGAww", "youtube_id": "9_DLvUiv2EY", "youtube_state": "done", "path": "Course/cs101/Media/50005", "transcript": null, "id": 50005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY-sYFDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/91002", "type": "Nugget", "id": 91002}, {"nuggetType": "quiz", "name": "Sum Procedure With A Return Statement", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYydYFDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/93001", "type": "Nugget", "id": 93001}, {"nuggetType": "lecture", "name": "Equality Comparisons Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_15_s_equality-comparisons", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJrmBQw", "youtube_id": "uQsEpksGZwQ", "youtube_state": "done", "path": "Course/cs101/Media/95002", "transcript": null, "id": 95002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYm-YFDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/95003", "type": "Nugget", "id": 95003}, {"nuggetType": "program", "name": "Is Friend", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYnOYFDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/95004", "suppliedCode": "#Define a procedure, is_friend, that\n#takes a string as its input, and\n#outputs a Boolean indicating if\n#the input string is the name of\n#a friend. Assume I am friends with\n#everyone whose name starts with D\n#and no one else.\n\n#print is_friend('Diane') => True\n#print is_friend('Fred')  => False\n\n", "type": "Nugget", "id": 95004}, {"nuggetType": "lecture", "name": "While Loops", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_21_q_while-loops", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGN6qBAw", "youtube_id": "lr7FO3rr8jg", "youtube_state": "done", "path": "Course/cs101/Media/71006", "transcript": null, "id": 71006}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYneYFDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/95005", "type": "Nugget", "id": 95005}, {"nuggetType": "lecture", "name": "If Statements", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_16_p_if-statements", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNSGAww", "youtube_id": "h8NUS7NCaFs", "youtube_state": "done", "path": "Course/cs101/Media/50004", "transcript": null, "id": 50004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY6fUFDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/97001", "type": "Nugget", "id": 97001}, {"nuggetType": "program", "name": "If Statements", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY6_UFDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/97003", "suppliedCode": "#Define a procedure, bigger, that takes in\n#two numbers as inputs, and outputs the\n#greater of the two inputs.\n\n#bigger(2,7) => 7\n#bigger(3,2) => 3\n#bigger(3,3) => 3\n\n", "type": "Nugget", "id": 97003}, {"nuggetType": "lecture", "name": "Biggest Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_20_s_biggest", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIyYBQw", "youtube_id": "MV9Q4BFa67A", "youtube_state": "done", "path": "Course/cs101/Media/85004", "transcript": null, "id": 85004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY7PUFDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/97004", "type": "Nugget", "id": 97004}, {"nuggetType": "quiz", "name": "While Loops", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQY7fUFDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/97005", "type": "Nugget", "id": 97005}, {"nuggetType": "lecture", "name": "No Links", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0Aww", "media": {"dotsub_id": null, "name": "cs101_unit2_28_p_No-Links", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPT7Aww", "youtube_id": "3kEqq0ckEhc", "youtube_state": "failed", "path": "Course/cs101/Media/65012", "transcript": null, "id": 65012}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIH0AwwLEgZOdWdnZXQYuYUGDA", "path": "Course/cs101/CourseRev/feb2012/Unit/64001/Nugget/99001", "type": "Nugget", "id": 99001}]}, {"name": "Homework 2", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": true, "closedAt": "03/08/2012 00:00", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQY-b0IDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQY4cUIDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQYy9AHDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQY4sgHDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQY26QGDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQY4ssGDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQYzNAHDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQYys0IDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQY6ewIDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQY26EHDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQY3KQGDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQYufwIDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQYooQJDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQYiYwJDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQY2ZsJDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQYqasJDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQY6-wIDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQYwqMJDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQY-boJDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQY4sIJDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQYsdIJDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAw", "path": "Course/cs101/CourseRev/feb2012/Unit/137001", "open": false, "id": 137001, "nuggets": [{"nuggetType": "quiz", "name": "Proc", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQY26QGDA", "path": "Course/cs101/CourseRev/feb2012/Unit/137001/Nugget/103003", "type": "Nugget", "id": 103003}, {"nuggetType": "program", "name": "Blastoff", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQY3KQGDA", "path": "Course/cs101/CourseRev/feb2012/Unit/137001/Nugget/103004", "suppliedCode": "# Define a procedure, countdown, that takes a\n# positive whole number as its input, and prints \n# out a countdown from that number to 1, \n# followed by Blastoff! \n\ndef countdown():\n\n\n\n\n\n\n\n", "type": "Nugget", "id": 103004}, {"nuggetType": "lecture", "name": "Proc Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAw", "media": {"dotsub_id": "d402ddcb-e3ca-4e07-b5b0-bbcd2f081922", "name": "cs101_hmwk2_01_s_Proc", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKOKBww", "youtube_id": "6VaY3ZAvZlo", "youtube_state": "done", "path": "Course/cs101/Media/116003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nIn order to solve this problem, you need to have a good understanding \n\n2\n00:00:02,000 --> 00:00:05,000\nof what the original function, proc, does.\n\n3\n00:00:05,000 --> 00:00:10,000\nSo let's take the two cases that really embody the output of this function.\n\n4\n00:00:10,000 --> 00:00:14,000\nThere are 2 inputs, but the output only depends on the value of A.\n\n5\n00:00:14,000 --> 00:00:17,000\nSpecifically, the value of the function test on a.\n\n6\n00:00:17,000 --> 00:00:21,000\nIf test(a) is true, then we return the second parameter b.\n\n7\n00:00:21,000 --> 00:00:25,000\nIf test(a) is false, we return the first parameter a.\n\n8\n00:00:25,000 --> 00:00:28,000\nThat's what we need to check in each of these functions. Let's start looking at them. \n\n9\n00:00:28,000 --> 00:00:34,000\nIn proc1, if test(x), which is the first parameter is true we return y.\n\n10\n00:00:34,000 --> 00:00:36,000\nThis matches with the original function. \n\n11\n00:00:36,000 --> 00:00:41,000\nIf test of the fist parameter is true, we return the second, as we do in proc1.\n\n12\n00:00:41,000 --> 00:00:47,000\nIf test of the first parameter is false, we return that parameter x.\n\n13\n00:00:47,000 --> 00:00:51,000\nTest x is false, which is equivalent to test a is false,\n\n14\n00:00:51,000 --> 00:00:54,000\nand in both cases we return a and x, \n\n15\n00:00:54,000 --> 00:00:57,000\nwhich are just different names for the same variable in this function.\n\n16\n00:00:57,000 --> 00:01:00,000\nThis is equivalent.\n\n17\n00:01:00,000 --> 00:01:02,000\nLet's look at this second function--proc2.\n\n18\n00:01:02,000 --> 00:01:07,000\nNotice here that this condition is based on the value of b.\n\n19\n00:01:07,000 --> 00:01:12,000\nWe know this can't possible be equivalent to proc, our original function, \n\n20\n00:01:12,000 --> 00:01:16,000\nbecause the output here is not dependent on the value of b.\n\n21\n00:01:16,000 --> 00:01:20,000\nWe can tell right away that this is false. This is not equivalent to our original function.\n\n22\n00:01:20,000 --> 00:01:22,000\nLet's look at proc3. \n\n23\n00:01:22,000 --> 00:01:27,000\nThe structure here is a little different, but let's work our way through it both examples.\n\n24\n00:01:27,000 --> 00:01:33,000\nIn the event that test(a) is true, we set result to be and re-return result.\n\n25\n00:01:33,000 --> 00:01:37,000\nAs our original function did, if test(a) is true, we return b.\n\n26\n00:01:37,000 --> 00:01:42,000\nIf test(a) is false, we simply return result, which was set at the beginning to a.\n\n27\n00:01:42,000 --> 00:01:47,000\nSo the overall functionality is that if test(a) is true, we return a.\n\n28\n00:01:47,000 --> 00:01:50,000\nThis matches with our original function definition.\n\n29\n00:01:50,000 --> 00:01:53,000\nSo this is equivalent to proc.\n\n30\n00:01:53,000 --> 00:01:56,000\nNow we have the last function--proc4.\n\n31\n00:01:56,000 --> 00:01:59,000\nIt might throw you off that you see 'udacity' in quotes here, which is not present \n\n32\n00:01:59,000 --> 00:02:02,000\nin any other function, but it's important we work our way through the problem.\n\n33\n00:02:02,000 --> 00:02:07,000\nIf test(a) is true, then not test(a) is false.\n\n34\n00:02:07,000 --> 00:02:09,000\nWe return b.\n\n35\n00:02:09,000 --> 00:02:11,000\nIf test(a) is true, we return b.\n\n36\n00:02:11,000 --> 00:02:13,000\nThat matches with the original definition.\n\n37\n00:02:13,000 --> 00:02:16,000\nIf test(a) is false, not test(a) is true,\n\n38\n00:02:16,000 --> 00:02:20,000\nso we set b to 'udacity,' but then we return a.\n\n39\n00:02:20,000 --> 00:02:23,000\nIf test(a) is false, we change the value of b, \n\n40\n00:02:23,000 --> 00:02:26,000\nbut we don't do anything with it--we just return a. \n\n41\n00:02:26,000 --> 00:02:30,000\nThe result is the same as our original function proc.\n\n", "id": 116003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQY4ssGDA", "path": "Course/cs101/CourseRev/feb2012/Unit/137001/Nugget/108002", "type": "Nugget", "id": 108002}, {"nuggetType": "lecture", "name": "Blastoff", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAw", "media": {"dotsub_id": "3e53403d-e758-43b0-a540-86d1f6f318a8", "name": "cs101_hmwk2_03_p_Blastoff", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNL3Bww", "youtube_id": "veou4NDQ6l8", "youtube_state": "done", "path": "Course/cs101/Media/130002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,800\nThis question tests that you understand loops.\n\n2\n00:00:02,800 --> 00:00:05,670\nYour goal is to find a procedure called countdown,\n\n3\n00:00:05,670 --> 00:00:08,010\nthat takes a positive whole number as its input,\n\n4\n00:00:08,010 --> 00:00:12,780\nand it prints out a countdown from that number down to 1, followed by blastoff!\n\n5\n00:00:12,780 --> 00:00:14,980\nHere is an example--\n\n6\n00:00:14,980 --> 00:00:16,780\nIf we call countdown passing in 3--\n\n7\n00:00:16,780 --> 00:00:24,780\nyour procedure should output 3--2--1--blastoff.\n\n", "id": 130002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQY26EHDA", "path": "Course/cs101/CourseRev/feb2012/Unit/137001/Nugget/119003", "type": "Nugget", "id": 119003}, {"nuggetType": "lecture", "name": "Proc", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAw", "media": {"dotsub_id": "a14a29c8-7e89-4f4a-b979-231f36ffaf3c", "name": "cs101_hmwk2_01_q_Proc", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMnNCAw", "youtube_id": "gD-QN-BkrAA", "youtube_state": "done", "path": "Course/cs101/Media/141001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nQuestion 2 tests that you understand procedures as well as the if construct.\n\n2\n00:00:05,000 --> 00:00:10,000\nThe question is \"Which of the following have exactly the same behavior as the procedure below?\"\n\n3\n00:00:10,000 --> 00:00:13,000\nFor two procedures to have exactly the same behavior, that means \n\n4\n00:00:13,000 --> 00:00:16,000\nthat no matter what the inputs are, the caller couldn't tell \n\n5\n00:00:16,000 --> 00:00:19,000\nthe difference between the two procedures, so it produces the same output.\n\n6\n00:00:19,000 --> 00:00:23,000\nThey both have the same side effects.\n\n7\n00:00:23,000 --> 00:00:26,000\nIn this case, we've defined a procedure here.\n\n8\n00:00:26,000 --> 00:00:30,000\nIt uses the procedure \"test\"--we haven't shown you how test is defined.\n\n9\n00:00:30,000 --> 00:00:33,000\nYou should assume that test is a procedure that takes a number\n\n10\n00:00:33,000 --> 00:00:35,000\nas its input and outputs a Boolean.\n\n11\n00:00:35,000 --> 00:00:38,000\nBut you shouldn't assume anything else about test.\n\n12\n00:00:38,000 --> 00:00:42,000\nYour goal is no matter what the procedure test does to figure out \n\n13\n00:00:42,000 --> 00:00:46,000\nif the choice has exactly the same behavior as the procedure showing here.\n\n14\n00:00:46,000 --> 00:00:49,000\nHere are the choices--check all the choices that have\n\n15\n00:00:49,000 --> 00:00:53,000\nthat have the same behavior as the procedure defined here.\n\n", "id": 141001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQY4sgHDA", "path": "Course/cs101/CourseRev/feb2012/Unit/137001/Nugget/124002", "type": "Nugget", "id": 124002}, {"nuggetType": "lecture", "name": "Udacify Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAw", "media": {"dotsub_id": "c78e95a5-68ee-4ca5-82eb-3cfd38dc2c83", "name": "cs101_hmwk2_00_s_Udacify", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMrQBww", "youtube_id": "hPjfVdvfX-g", "youtube_state": "done", "path": "Course/cs101/Media/125002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nAs the problem states, we need to define this procedure.\n\n2\n00:00:03,000 --> 00:00:06,000\nIn Python it's really simple. We just use \"def.\"\n\n3\n00:00:06,000 --> 00:00:10,000\nThen the name of procedure, which is supposed to be called \"udacify,\"\n\n4\n00:00:10,000 --> 00:00:13,000\nand the parameters that it takes in.\n\n5\n00:00:13,000 --> 00:00:16,000\nWe'll take in 1 parameter, and we'll call it \"s.\"\n\n6\n00:00:16,000 --> 00:00:19,000\nDon't forget the colon.\n\n7\n00:00:19,000 --> 00:00:22,000\nNow we want to return the result, \n\n8\n00:00:22,000 --> 00:00:29,000\nwhich is the concatenation of the uppercase U plus the string that's passed into it.\n\n9\n00:00:29,000 --> 00:00:34,000\nIf we give it \"dacians,\" it'll be called \"s\" when we're executing this.\n\n10\n00:00:34,000 --> 00:00:37,000\nWe'll add \"U\" to the front, and we'll return \"Udacians.\"\n\n", "id": 125002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQYy9AHDA", "path": "Course/cs101/CourseRev/feb2012/Unit/137001/Nugget/125003", "type": "Nugget", "id": 125003}, {"nuggetType": "lecture", "name": "Median", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAw", "media": {"dotsub_id": "d2799856-429c-4259-b714-f67c07017060", "name": "cs101_hmwk2_02_p_Median", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJndCAw", "youtube_id": "TyRfeIlPwpI", "youtube_state": "failed", "path": "Course/cs101/Media/143001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,800\nFor question 3, your goal is to define a procedure called median,\n\n2\n00:00:03,800 --> 00:00:06,510\nthat takes three numbers as its inputs,\n\n3\n00:00:06,510 --> 00:00:10,410\nand outputs the median, which is the middle value, of those three numbers.\n\n4\n00:00:10,410 --> 00:00:13,210\nHere are a few examples--\n\n5\n00:00:13,210 --> 00:00:15,220\nIf the three inputs are 1, 2, and 3--\n\n6\n00:00:15,220 --> 00:00:17,650\nyour procedure should output 2--\n\n7\n00:00:17,650 --> 00:00:20,520\nif the three inputs are 9, 3, and 6--\n\n8\n00:00:20,520 --> 00:00:24,160\nyour output should be 6, since 3 is lower than 6--\n\n9\n00:00:24,160 --> 00:00:25,890\nbut 6 is lower than 9--\n\n10\n00:00:25,890 --> 00:00:30,230\nand if the three inputs are 7, 8, and 7--\n\n11\n00:00:30,230 --> 00:00:33,170\nwell, then the median is 7.\n\n12\n00:00:33,170 --> 00:00:38,000\nThis is a pretty tough question, so I am going to give it 1 gold star.\n\n", "id": 143001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQYzNAHDA", "path": "Course/cs101/CourseRev/feb2012/Unit/137001/Nugget/125004", "type": "Nugget", "id": 125004}, {"nuggetType": "lecture", "name": "Udacify", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAw", "media": {"dotsub_id": "729083d5-cd61-4a4e-b743-0861aec64bd0", "name": "cs101_hmwk2_00_p_Udacify", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJG2CAw", "youtube_id": "XIvdvzN87ec", "youtube_state": "done", "path": "Course/cs101/Media/138001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nFor the first question, we're going to see that you understand procedures.\n\n2\n00:00:03,000 --> 00:00:08,000\nYour goal is to define a procedure--called \"udacify\"--that takes as input a string\n\n3\n00:00:08,000 --> 00:00:12,000\nand outputs a string that is an uppercase \"U\" followed by the input string. \n\n4\n00:00:12,000 --> 00:00:14,000\nHere's an example. \n\n5\n00:00:14,000 --> 00:00:19,000\nIf you print the result of calling the udacify procedure that you defined,\n\n6\n00:00:19,000 --> 00:00:23,000\npassing in \"dacians\" as a string, the output should be the string \"Udacians\"\n\n7\n00:00:23,000 --> 00:00:25,000\nwith a capital \"U.\"\n\n8\n00:00:25,000 --> 00:00:28,000\nSee if you can define the procedure \"udacify.\"\n\n", "id": 138001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQY-b0IDA", "path": "Course/cs101/CourseRev/feb2012/Unit/137001/Nugget/139001", "type": "Nugget", "id": 139001}, {"nuggetType": "program", "name": "Udacify", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQY4cUIDA", "path": "Course/cs101/CourseRev/feb2012/Unit/137001/Nugget/140001", "suppliedCode": "# Define a procedure, udacify, that takes as \n# input a string, and returns a string that \n# is an uppercase 'U' followed by the input string.\n# for example, when we enter\n\n# print udacify('dacians')\n\n# the output should be the string 'Udacians'\n\n# Make sure your procedure has a return statement.\n\ndef udacify():\n\n\n\n\n\n\n\n", "type": "Nugget", "id": 140001}, {"nuggetType": "program", "name": "Median", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQYys0IDA", "path": "Course/cs101/CourseRev/feb2012/Unit/137001/Nugget/141002", "suppliedCode": "# Define a procedure, median, that takes three\n# numbers as its inputs, and outputs the median\n# of the three numbers.\n\n# Make sure your procedure has a return statement.\n\ndef bigger(a,b):\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef biggest(a,b,c):\n    return bigger(a,bigger(b,c))\n\ndef median():\n\n\n\n\n\n\n\n", "type": "Nugget", "id": 141002}, {"nuggetType": "lecture", "name": "Median Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAw", "media": {"dotsub_id": "f2cb7113-5bee-4c9d-844e-225f1b9ad5ec", "name": "cs101_hmwk2_02_s_Median", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIHlCAw", "youtube_id": "SKVnSMqaAtI", "youtube_state": "done", "path": "Course/cs101/Media/144001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,970\nOne way to solve this problem, is to look at the possibilities.\n\n2\n00:00:02,970 --> 00:00:12,580\nWe know that there is a bigger number, the median, and a smaller number.\n\n3\n00:00:12,580 --> 00:00:16,780\nAnd that we have 3 inputs--\n\n4\n00:00:16,780 --> 00:00:19,820\nLet's call them \"a,\" \"b,\" and \"c.\"\n\n5\n00:00:19,820 --> 00:00:21,720\nLet's say, for the sake of example--\n\n6\n00:00:21,720 --> 00:00:24,630\nthat we figure out that \"b\" is the bigger number.\n\n7\n00:00:24,630 --> 00:00:29,460\nWe could solve this using the bigger function that you defined in lecture.\n\n8\n00:00:29,460 --> 00:00:33,500\nFrom here, we only need to figure out what is the median and the smaller number.\n\n9\n00:00:33,500 --> 00:00:35,840\nWe know \"b\" can't be the median, \n\n10\n00:00:35,840 --> 00:00:37,910\nbecause we just decided that it was the bigger number.\n\n11\n00:00:37,910 --> 00:00:40,640\nFrom here, all we have to do is compare \"a\" and \"c.\"\n\n12\n00:00:40,640 --> 00:00:43,210\nThere are two cases at this point.\n\n13\n00:00:43,210 --> 00:00:46,010\nOne is where \"a\" is greater than \"c.\"\n\n14\n00:00:46,010 --> 00:00:49,420\nIf \"a\" is greater than \"c,\" we know \"c\" is the smaller number--\n\n15\n00:00:49,420 --> 00:00:51,490\nand \"a\" is the median.\n\n16\n00:00:51,490 --> 00:00:57,390\nIf \"c\" is greater than \"a,\" we know that \"a\" is the smaller number--\n\n17\n00:00:57,390 --> 00:00:59,190\nand \"c\" is the median.\n\n18\n00:00:59,190 --> 00:01:03,800\nWe can use this strategy to solve every possible case when defining our function.\n\n19\n00:01:03,800 --> 00:01:06,900\nSo let's take a crack at it by going right to the interpreter.\n\n20\n00:01:06,900 --> 00:01:09,670\nSo, first let's define our function.\n\n21\n00:01:09,670 --> 00:01:14,370\nAs specified in the problem, it's called median--and we take in 3 parameters.\n\n22\n00:01:14,370 --> 00:01:18,440\nAs I did before, we are going to call them \"a,\" \"b,\" and \"c.\"\n\n23\n00:01:18,440 --> 00:01:23,720\nAs I described earlier, we want to find the biggest number first, let's call it \"big.\"\n\n24\n00:01:23,720 --> 00:01:27,090\nHere's the perfect time to use the function that we defined in class, \"biggest.\"\n\n25\n00:01:27,090 --> 00:01:29,890\n\"Biggest\" will give us the biggest number, as the name describes--\n\n26\n00:01:29,890 --> 00:01:32,630\nby simply passing in those 3 parameters.\n\n27\n00:01:32,630 --> 00:01:34,930\nFrom here, we enumerate the possible cases.\n\n28\n00:01:34,930 --> 00:01:38,100\nAs I described earlier, if \"a\" is the biggest number, \n\n29\n00:01:38,100 --> 00:01:41,000\nyou want to return the bigger number of \"b\" and \"c.\"\n\n30\n00:01:41,000 --> 00:01:44,570\nIf \"b\" is the biggest number, we want to return the bigger number of \"a\" and \"c.\"\n\n31\n00:01:44,570 --> 00:01:46,840\nAnd lastly, if \"c\" is the biggest number, \n\n32\n00:01:46,840 --> 00:01:48,540\nwhich is satisfied by the else here,\n\n33\n00:01:48,540 --> 00:01:51,540\nwe want to return the bigger number of \"a\" and \"b.\"\n\n", "id": 144001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQY6ewIDA", "path": "Course/cs101/CourseRev/feb2012/Unit/137001/Nugget/145001", "type": "Nugget", "id": 145001}, {"nuggetType": "program", "name": "Find Last", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQY6-wIDA", "path": "Course/cs101/CourseRev/feb2012/Unit/137001/Nugget/145003", "suppliedCode": "# Define a procedure, find_last, that takes as input\n# two strings, a search string and a target string,\n# and outputs the last position in the search string\n# where the target string appears, or -1 if there\n# are no occurences.\n#\n# Example: find_last('aaaa', 'a') returns 3\n\n# Make sure your procedure has a return statement.\n\ndef find_last():\n\n\n\n\n\n\n\n", "type": "Nugget", "id": 145003}, {"nuggetType": "lecture", "name": "Blastoff Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAw", "media": {"dotsub_id": "63dd9a04-ea59-410d-935a-f7bdc69a17d3", "name": "cs101_hmwk2_03_s_Blastoff", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNH0CAw", "youtube_id": "A1OGjrROQc8", "youtube_state": "done", "path": "Course/cs101/Media/146001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,600\nIn this problem, we are told to define a function called countdown.\n\n2\n00:00:03,600 --> 00:00:06,770\nCountdown takes one parameter--the number that it countdowns from--\n\n3\n00:00:06,770 --> 00:00:09,810\nlet's call it \"n.\" Don't forget the colon.\n\n4\n00:00:09,810 --> 00:00:14,180\nThe goal here is to countdown from \"n\" all the way down to blastoff.\n\n5\n00:00:14,180 --> 00:00:16,520\nThis sounds like something that is going to need a while loop.\n\n6\n00:00:16,520 --> 00:00:19,990\nLet's get started. Let's leave the condition blank for now--\n\n7\n00:00:19,990 --> 00:00:22,860\nbecause we already know what we need to do inside the while loop,\n\n8\n00:00:22,860 --> 00:00:24,990\nand that is, print the number.\n\n9\n00:00:24,990 --> 00:00:27,460\nWe also know at the end, that we want to blastoff.\n\n10\n00:00:27,460 --> 00:00:29,560\nSo we have two things to fill in.\n\n11\n00:00:29,560 --> 00:00:33,030\nOne, how long we countdown for?\n\n12\n00:00:33,030 --> 00:00:36,070\nLastly, what do we do after every count?\n\n13\n00:00:36,070 --> 00:00:41,680\nIf we look at the sample, the last time that we count is when n=1.\n\n14\n00:00:41,680 --> 00:00:45,380\nSo, one way to do that is saying while \"n\" is greater than zero.\n\n15\n00:00:45,380 --> 00:00:49,920\nEvery time we countdown, we subtract 1 from \"n\"--so let's do that--\n\n16\n00:00:49,920 --> 00:00:53,920\nand all together, this will produce the outcome as expected.\n\n", "id": 146001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQYufwIDA", "path": "Course/cs101/CourseRev/feb2012/Unit/137001/Nugget/147001", "type": "Nugget", "id": 147001}, {"nuggetType": "lecture", "name": "Finish", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAw", "media": {"dotsub_id": "ca2410a8-e6f9-4634-a097-436153b83976", "name": "cs101_hmwk2_04_q_Finish", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLr8CAw", "youtube_id": "o7ing2Qx1X8", "youtube_state": "done", "path": "Course/cs101/Media/147002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,170\nQuestion 5 is a trickier question about loops.\n\n2\n00:00:03,170 --> 00:00:05,910\nFor each of the loops shown below, \n\n3\n00:00:05,910 --> 00:00:08,840\nyour goal is to determine whether or not the loop always finishes\n\n4\n00:00:08,840 --> 00:00:12,280\nno matter what positive value is initially assigned to \"n.\"\n\n5\n00:00:12,280 --> 00:00:16,580\nSo, for each of the 3 loops, and you can see the loop code shown below,\n\n6\n00:00:16,580 --> 00:00:20,720\nyour goal is to determine that no matter what value is initially assigned to \"n\" --\n\n7\n00:00:20,720 --> 00:00:22,220\nwhether the loop always finishes--\n\n8\n00:00:22,220 --> 00:00:25,230\nthat would mean for any possible value \"n\" is initialized as--\n\n9\n00:00:25,230 --> 00:00:26,930\nas long as it is a positive integer--\n\n10\n00:00:26,930 --> 00:00:28,430\nthe loop will eventually finish.\n\n11\n00:00:28,430 --> 00:00:31,030\nThe second option is that the loop sometimes runs forever, \n\n12\n00:00:31,030 --> 00:00:34,230\nthat there's some value that could be assigned to \"n\" \n\n13\n00:00:34,230 --> 00:00:37,850\nthat makes the loop run forever--that it never finishes.\n\n14\n00:00:37,850 --> 00:00:39,070\nAnd the third choice,\n\n15\n00:00:39,070 --> 00:00:41,980\nis that it is unknown--and that doesn't mean that it is unknown to you--\n\n16\n00:00:41,980 --> 00:00:44,510\nthat means that it is unknown to anyone in the known universe.\n\n17\n00:00:44,510 --> 00:00:49,000\nWhether that loop will always finish for all initial values of \"n.\"\n\n", "id": 147002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQYooQJDA", "path": "Course/cs101/CourseRev/feb2012/Unit/137001/Nugget/148002", "type": "Nugget", "id": 148002}, {"nuggetType": "quiz", "name": "Finish", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQYiYwJDA", "path": "Course/cs101/CourseRev/feb2012/Unit/137001/Nugget/149001", "type": "Nugget", "id": 149001}, {"nuggetType": "lecture", "name": "Finish Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAw", "media": {"dotsub_id": "29d8ab1a-5058-4033-866d-3c6ea15a2efb", "name": "cs101_hmwk2_04_s_Finish", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPGTCQw", "youtube_id": "UmbtSl6JYCk", "youtube_state": "done", "path": "Course/cs101/Media/150001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,750\nHere's our first loop. Let's think about what we know--\n\n2\n00:00:02,750 --> 00:00:06,000\n\"n\" is any positive integer and \"i\" is zero.\n\n3\n00:00:06,000 --> 00:00:12,000\nWhat we do know, that \"i\" is less than \"n\" \n\n4\n00:00:12,000 --> 00:00:14,410\nbecause zero is less than any positive integer.\n\n5\n00:00:14,410 --> 00:00:18,550\nThis loop runs while \"i\" is less than equal to \"n.\"\n\n6\n00:00:18,550 --> 00:00:21,560\nIn every iteration, \"i\" increases by 1.\n\n7\n00:00:21,560 --> 00:00:26,190\nWe know intuitively that eventually \"i\" will become greater than \"n\"\n\n8\n00:00:26,190 --> 00:00:27,290\n because \"n\" is fixed.\n\n9\n00:00:27,290 --> 00:00:32,830\nSo, we can say definitively, that this loop always finishes.\n\n10\n00:00:32,830 --> 00:00:38,040\nLike the previous loop, let's look at what we have.\n\n11\n00:00:38,040 --> 00:00:42,310\nWe have a positive integer-- \"n\"-- \"i\"--which starts at 1--\n\n12\n00:00:42,310 --> 00:00:43,940\nand here a while true loop.\n\n13\n00:00:43,940 --> 00:00:47,780\nIt will continue forever until we trigger the break.\n\n14\n00:00:47,780 --> 00:00:50,180\nSo, let's look at the inside--\n\n15\n00:00:50,180 --> 00:00:52,390\n\"i\" at every iteration, doubles--\n\n16\n00:00:52,390 --> 00:00:55,690\nand \"n\" at every iteration increases by 1.\n\n17\n00:00:55,690 --> 00:00:59,290\nThe point at which we break is when \"i\" becomes greater than \"n.\"\n\n18\n00:00:59,290 --> 00:01:03,030\nOne way to think about \"i\" is that it is an exponential function.\n\n19\n00:01:03,030 --> 00:01:05,330\nAt every iteration it doubles in size--\n\n20\n00:01:05,330 --> 00:01:10,970\n\"n\" is linear--every iteration increases by 1.\n\n21\n00:01:10,970 --> 00:01:15,180\nWe know \"i\" starts at 1, but every time it doubles--\n\n22\n00:01:15,180 --> 00:01:18,580\n\"n,\" however, can start at any positive integer.\n\n23\n00:01:18,580 --> 00:01:22,680\nIt can be anywhere on here. But we do know, that it increases very slowly.\n\n24\n00:01:22,680 --> 00:01:26,390\nIn fact, it's guaranteed that eventually \"i\" will surpass \"n.\"\n\n25\n00:01:26,390 --> 00:01:29,690\nI will leave the mathematical proof to you, but you can take my word for it for now.\n\n26\n00:01:29,690 --> 00:01:32,990\nConsidering that eventually \"i\" is going to be greater than \"n,\"\n\n27\n00:01:32,990 --> 00:01:34,860\nwe know that we will eventually break.\n\n28\n00:01:34,860 --> 00:01:39,200\nWhich proves that loop 2 always finishes.\n\n29\n00:01:39,200 --> 00:01:40,840\nSo, let's look at this last loop.\n\n30\n00:01:40,840 --> 00:01:42,500\nIt's pretty simple code.\n\n31\n00:01:42,500 --> 00:01:44,540\nWe're given an integer \"n,\" which is any positive integer.\n\n32\n00:01:44,540 --> 00:01:49,780\nWhile that integer is not equal to 1-- if it's even--\n\n33\n00:01:49,780 --> 00:01:53,710\nwe divide by 2, otherwise we multiply by 3 and add 1.\n\n34\n00:01:53,710 --> 00:01:55,650\nThis is pretty simple, however, \n\n35\n00:01:55,650 --> 00:01:58,290\nin order to figure out whether this loop terminates,\n\n36\n00:01:58,290 --> 00:02:00,190\nyou have to solve an open mathematical problem.\n\n37\n00:02:00,190 --> 00:02:04,090\nYou have to determine whether or not the Collatz conjecture is true.\n\n38\n00:02:04,090 --> 00:02:07,400\nThe Collatz conjecture states that given any positive integer \"n\"--\n\n39\n00:02:07,400 --> 00:02:09,300\nthis code will terminate.\n\n40\n00:02:09,300 --> 00:02:12,000\nIt's an open mathematical problem. And no one has solved it.\n\n41\n00:02:12,000 --> 00:02:15,570\nThis is just an example of why a really simple loop like this\n\n42\n00:02:15,570 --> 00:02:18,470\nis really hard to determine whether or not it terminates.\n\n43\n00:02:18,470 --> 00:02:20,240\nAs mentioned in the lecture, \n\n44\n00:02:20,240 --> 00:02:24,210\nit's actually impossible for a computer to solve this problem in general.\n\n45\n00:02:24,210 --> 00:02:30,000\nThe correct answer, this is unknown to anyone in the known universe.\n\n", "id": 150001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQY2ZsJDA", "path": "Course/cs101/CourseRev/feb2012/Unit/137001/Nugget/151001", "type": "Nugget", "id": 151001}, {"nuggetType": "lecture", "name": "Find Last Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAw", "media": {"dotsub_id": "0b36be33-3c70-4acb-829d-b2d861b6861f", "name": "cs101_hmwk2_05_s_Find-Last", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGN2kBgw", "youtube_id": "0oJww0RHWso", "youtube_state": "done", "path": "Course/cs101/Media/103005", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nThis problem asks you to define a function \n\n2\n00:00:02,000 --> 00:00:08,000\ncalled \"find_last\" that takes in 2 parameters:\n\n3\n00:00:08,000 --> 00:00:11,000\none string that we're searching in, another string that we're finding. \n\n4\n00:00:11,000 --> 00:00:13,000\nThe whole point of this function\n\n5\n00:00:13,000 --> 00:00:15,000\nis to find the position of the last occurrence of \"t\".\n\n6\n00:00:15,000 --> 00:00:18,000\nSo let's use a variable called \"last_pos\".\n\n7\n00:00:18,000 --> 00:00:20,000\nThe overall plan here \n\n8\n00:00:20,000 --> 00:00:22,000\nis while we keep finding occurrences of \"t\", \n\n9\n00:00:22,000 --> 00:00:24,000\nwe're going to keep running the \"find\" function\n\n10\n00:00:24,000 --> 00:00:26,000\nand updating our offset.\n\n11\n00:00:26,000 --> 00:00:29,000\nSo let's do that: \"while True:\"--\n\n12\n00:00:29,000 --> 00:00:31,000\nand since we don't know when we want to terminate yet, \n\n13\n00:00:31,000 --> 00:00:34,000\nwe're going to update a position\n\n14\n00:00:34,000 --> 00:00:37,000\nusing the \"find\" function,\n\n15\n00:00:37,000 --> 00:00:39,000\nwhere we're searching for \"t\",\n\n16\n00:00:39,000 --> 00:00:44,000\nbut we're starting at the last position, plus 1.\n\n17\n00:00:44,000 --> 00:00:46,000\nThe \"+1\" is important so that we \n\n18\n00:00:46,000 --> 00:00:50,000\ndon't keep finding the same string over and over again. \n\n19\n00:00:50,000 --> 00:00:53,000\nIf this returns \"-1\", \n\n20\n00:00:53,000 --> 00:00:56,000\nthat means we didn't find another occurrence of \"t\".\n\n21\n00:00:56,000 --> 00:01:00,000\nSo we want to return the previous refound occurrence,  \n\n22\n00:01:00,000 --> 00:01:02,000\nwhich we stored in \"last_pos\". \n\n23\n00:01:02,000 --> 00:01:04,000\nOtherwise, we want to update \"last_pos\" \n\n24\n00:01:04,000 --> 00:01:07,000\nwith the position that we just found. \n\n25\n00:01:07,000 --> 00:01:11,000\nSo the one thing left is: what do we initialize \"last_pos\" to? \n\n26\n00:01:11,000 --> 00:01:15,000\nIf we never find any occurrence of \"t\" in \"s\", \n\n27\n00:01:15,000 --> 00:01:18,000\nthe goal is to return \"-1\". \n\n28\n00:01:18,000 --> 00:01:20,000\nSo if \"position\" equals negative 1 \n\n29\n00:01:20,000 --> 00:01:23,000\nin the first iteration, we're just going to return \"last_pos\". \n\n30\n00:01:23,000 --> 00:01:27,000\nSo it makes sense to initialize it to \"-1\". \n\n", "id": 103005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQYwqMJDA", "path": "Course/cs101/CourseRev/feb2012/Unit/137001/Nugget/152002", "type": "Nugget", "id": 152002}, {"nuggetType": "lecture", "name": "Find Last", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAw", "media": {"dotsub_id": "26cc12f3-d7a7-4cea-aa7a-27b87305f194", "name": "cs101_hmwk2_05_p_Find-Last", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMGjCQw", "youtube_id": "xpsv4Ax4TOA", "youtube_state": "done", "path": "Course/cs101/Media/152001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:06,000\nSo for this question, your goal is to define a procedure, named \"find_last,\" that takes as input 2 strings.\n\n2\n00:00:06,000 --> 00:00:10,000\nThe first string is a search string; the second string is the target string.\n\n3\n00:00:10,000 --> 00:00:16,000\nAnd it outputs the last position in the search string where the target string appears, as long as it appears at least once.\n\n4\n00:00:16,000 --> 00:00:19,000\nIf it doesn't appear at all, then the output should be -1.\n\n", "id": 152001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQYqasJDA", "path": "Course/cs101/CourseRev/feb2012/Unit/137001/Nugget/153001", "type": "Nugget", "id": 153001}, {"nuggetType": "lecture", "name": "Multiplication Table", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAw", "media": {"dotsub_id": "83cf7d8a-1ff0-4287-9999-b1869403b1d9", "name": "cs101_hmwk2_06_p_multiplication-table", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJGzCQw", "youtube_id": "Tic5rtmDGmM", "youtube_state": "done", "path": "Course/cs101/Media/154001", "transcript": "\ufeff1\n00:00:16,000 --> 00:00:18,000\nSo here is an example.\n\n2\n00:00:18,000 --> 00:00:22,000\nIf the input is the number 2 what you should print out is: \n\n3\n00:00:36,000 --> 00:00:39,000\nI hope I got all those right without using the interpreter.\n\n4\n00:00:39,000 --> 00:00:44,000\nTo be correct, you must print them out in the same order as we're showing here.\n\n5\n00:00:44,000 --> 00:00:47,000\nThere will be a longer example in the coments to make sure the order is clear.\n\n6\n00:00:47,000 --> 00:00:50,000\nThey should match exactly this format as well.\n\n7\n00:00:50,000 --> 00:00:54,000\nThis is a pretty hard question, so it's worth a gold star.\n\n8\n00:00:54,000 --> 00:00:58,000\nActually, I'm going to make it worth two gold stars.\n\n9\n00:00:58,000 --> 00:01:03,000\nAs a hint, one of the things you need to think about to do this question \n\n10\n00:01:03,000 --> 00:01:05,000\nis something that we haven't seen before, \n\n11\n00:01:05,000 --> 00:01:08,000\nbut you've seen it for ifs.\n\n12\n00:01:08,000 --> 00:01:12,000\nWe saw in the lecture to define biggest that we used one if inside another if.\n\n13\n00:01:12,000 --> 00:01:15,000\nTo solve this you're going to have to think about using a while inside another while.\n\n", "id": 154001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQY-boJDA", "path": "Course/cs101/CourseRev/feb2012/Unit/137001/Nugget/155001", "type": "Nugget", "id": 155001}, {"nuggetType": "program", "name": "Multiplication Table", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQY4sIJDA", "path": "Course/cs101/CourseRev/feb2012/Unit/137001/Nugget/156002", "suppliedCode": "#2 GOLD STARS\n\n#Define a procedure,\n#print_multiplication_table,\n#that takes as input a positive whole\n#number, and prints out a multiplication,\n#table showing all the whole number\n#multiplications up to and including the\n#input number. The order in which the\n#equations are printed must match exactly.\n\n#print_multiplication_table(2)\n#1 * 1 = 1\n#1 * 2 = 2\n#2 * 1 = 2\n#2 * 2 = 4\n\ndef print_multiplication_table(n):\n    ", "type": "Nugget", "id": 156002}, {"nuggetType": "lecture", "name": "Multiplication Table Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAw", "media": {"dotsub_id": "0798f078-67dd-4911-bacc-125128f00c56", "name": "cs101_hmwk2_06_s_multiplication-table", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMnKCQw", "youtube_id": "sOIUNmXd5WI", "youtube_state": "done", "path": "Course/cs101/Media/157001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nFirst, let's describe the function, as the problem asked. \n\n2\n00:00:03,000 --> 00:00:05,000\nWe have a function: \"print_multiplication_table\"\n\n3\n00:00:05,000 --> 00:00:08,000\nthat takes in one number that we called \"n\". \n\n4\n00:00:08,000 --> 00:00:10,000\nIf you looked at the output in the example, \n\n5\n00:00:10,000 --> 00:00:13,000\nyou'll notice that the first operand goes from 1 to \"n\". \n\n6\n00:00:13,000 --> 00:00:15,000\nLet's write the \"while\" loop that does that. \n\n7\n00:00:15,000 --> 00:00:18,000\nHere, we called the first operand \"i\". \n\n8\n00:00:18,000 --> 00:00:20,000\nNow let's think about the second operand. \n\n9\n00:00:20,000 --> 00:00:23,000\nFor every value of the first operand, it goes from 1 to \"n\". \n\n10\n00:00:23,000 --> 00:00:25,000\nLet's write a second \"while\" loop \n\n11\n00:00:25,000 --> 00:00:27,000\ninside this \"while\" loop to do just that. \n\n12\n00:00:27,000 --> 00:00:29,000\nWe called our second operand \"j\". \n\n13\n00:00:29,000 --> 00:00:32,000\nEverything in the body of this \"while\" loop \n\n14\n00:00:32,000 --> 00:00:34,000\nis indented twice over from the beginning:\n\n15\n00:00:34,000 --> 00:00:37,000\nonce for the function definition, and another time for the \"while\" loop. \n\n16\n00:00:37,000 --> 00:00:40,000\nEverything in the inner \"while\" loop is indented 3 times:\n\n17\n00:00:40,000 --> 00:00:42,000\nonce for the function definition, \n\n18\n00:00:42,000 --> 00:00:44,000\nonce for the first \"while\" loop, \n\n19\n00:00:44,000 --> 00:00:46,000\nand a third time for this inner \"while\" loop. \n\n20\n00:00:46,000 --> 00:00:51,000\nThe last thing that remains is printing the output. \n\n21\n00:00:51,000 --> 00:00:53,000\nThis may look right, but we have to remember\n\n22\n00:00:53,000 --> 00:00:56,000\nthat we can't add a number and a string. \n\n23\n00:00:56,000 --> 00:00:58,000\nIf you looked at the hint below the question, you know that\n\n24\n00:00:58,000 --> 00:01:02,000\nthe \"str\" function will turn any integer into a string.\n\n25\n00:01:02,000 --> 00:01:05,000\nFrom there, we can add the 2 strings. \n\n26\n00:01:05,000 --> 00:01:07,000\n[Yay! Nested Loops!]\n\n", "id": 157001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmuCAwLEgZOdWdnZXQYsdIJDA", "path": "Course/cs101/CourseRev/feb2012/Unit/137001/Nugget/158001", "type": "Nugget", "id": 158001}]}, {"name": "Office Hours 2", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHxCQwLEgZOdWdnZXQYoYEKDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHxCQwLEgZOdWdnZXQY8pAKDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHxCQwLEgZOdWdnZXQYqagKDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHxCQwLEgZOdWdnZXQY4b8KDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHxCQwLEgZOdWdnZXQYsc8KDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHxCQwLEgZOdWdnZXQYgd8KDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHxCQw", "path": "Course/cs101/CourseRev/feb2012/Unit/162001", "open": false, "id": 162001, "nuggets": [{"nuggetType": "lecture", "name": "Office Hours 1", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHxCQw", "media": {"dotsub_id": "1747f1f6-a28a-48c6-a63f-ff70ec7300a4", "name": "cs101_oo2_00_l_office-hours-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLn5CQw", "youtube_id": "vzZnvOzyWac", "youtube_state": "done", "path": "Course/cs101/Media/163001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nWelcome to office hours for Unit 2.\n\n2\n00:00:03,000 --> 00:00:05,000\nWe'll get started right away with questions.\n\n3\n00:00:05,000 --> 00:00:08,000\nLet's start with Catherine from New Hampshire.\n\n4\n00:00:08,000 --> 00:00:11,000\nShe says, \"I believe there were at least one or two instances where I\n\n5\n00:00:11,000 --> 00:00:14,000\ngave up in frustration and viewed a solution before getting a correct\n\n6\n00:00:14,000 --> 00:00:18,000\nanswer in a unit quiz.\"\n\n7\n00:00:18,000 --> 00:00:21,000\nShe wants to know, what do the unit quizzes mean?\n\n8\n00:00:21,000 --> 00:00:24,000\nShould she be concerned if she gets it right?\n\n9\n00:00:24,000 --> 00:00:27,000\nShould she be frustrated if she's getting them wrong?\n\n10\n00:00:27,000 --> 00:00:31,000\nI hope people aren't frustrated on the unit quizzes.\n\n11\n00:00:31,000 --> 00:00:34,000\nThe quizzes in the units are really there to help keep you engaged--\n\n12\n00:00:34,000 --> 00:00:36,000\nto help you learn.\n\n13\n00:00:36,000 --> 00:00:38,000\nIf you can't get the answer, that's okay that we do have\n\n14\n00:00:38,000 --> 00:00:40,000\nanswers recorded after them.\n\n15\n00:00:40,000 --> 00:00:42,000\nYou're not being graded on the quizzes.\n\n16\n00:00:42,000 --> 00:00:44,000\nThey are really there to help you learn.\n\n17\n00:00:44,000 --> 00:00:46,000\nSome of the quizzes are harder than others.\n\n18\n00:00:46,000 --> 00:00:49,000\nOne of the things that we do on the quizzes is rate them with gold stars.\n\n19\n00:00:49,000 --> 00:00:52,000\nDon't be surprised if you're not necessarily able to handle\n\n20\n00:00:52,000 --> 00:00:54,000\nthose with gold stars. \n\n21\n00:00:54,000 --> 00:00:56,000\nThose are questions that will require a lot of thought.\n\n22\n00:00:56,000 --> 00:00:59,000\nThose are going to be really hard, especially for beginning students.\n\n23\n00:00:59,000 --> 00:01:01,000\nThose are questions that--I hope by thinking about them--you'll be \n\n24\n00:01:01,000 --> 00:01:03,000\nable to solve yourself.\n\n25\n00:01:03,000 --> 00:01:05,000\nIf you're not able to solve it yourself, don't get frustrated.\n\n26\n00:01:05,000 --> 00:01:07,000\nYou can watch the answer--hopefully you'll understand the answer--\n\n27\n00:01:07,000 --> 00:01:09,000\nand then maybe you'll be able to try it on your own again\n\n28\n00:01:09,000 --> 00:01:11,000\nafter you've seen the answer.\n\n29\n00:01:11,000 --> 00:01:13,000\nThe quizzes don't count towards your grade.\n\n30\n00:01:13,000 --> 00:01:15,000\nYou shouldn't be frustrated or stressed about that.\n\n31\n00:01:15,000 --> 00:01:17,000\nThey are really there to help you learn.\n\n", "id": 163001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHxCQwLEgZOdWdnZXQYoYEKDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162001/Nugget/164001", "type": "Nugget", "id": 164001}, {"nuggetType": "lecture", "name": "Office Hours 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHxCQw", "media": {"dotsub_id": "3a26b135-5c48-414d-bde4-b0abc9fdf978", "name": "cs101_oo2_01_l_office-hours-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPGQCgw", "youtube_id": "TxrJsNdvqsA", "youtube_state": "done", "path": "Course/cs101/Media/166001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nCatherine from New Hampshire has a second question.\n\n2\n00:00:03,000 --> 00:00:07,000\n\"What are students allowed to talk about related to homework questions\n\n3\n00:00:07,000 --> 00:00:10,000\non the forums and outside to other students?\"\n\n4\n00:00:10,000 --> 00:00:12,000\nThis is a good question.\n\n5\n00:00:12,000 --> 00:00:14,000\nIt's great to see all the discussion on the forums.\n\n6\n00:00:14,000 --> 00:00:17,000\nWe do want students to be able to discuss questions on the forums to\n\n7\n00:00:17,000 --> 00:00:19,000\nprovide hints if people get stuck.\n\n8\n00:00:19,000 --> 00:00:22,000\nWhat we don't want is for people to give out the actual answers, \n\n9\n00:00:22,000 --> 00:00:25,000\nand for you to submit homework when you didn't understand it\n\n10\n00:00:25,000 --> 00:00:27,000\nor solve it yourself.\n\n11\n00:00:27,000 --> 00:00:33,000\nI am on the forums often as many people who post on the forums know.\n\n12\n00:00:33,000 --> 00:00:36,000\nI often comment and answer questions. \n\n13\n00:00:36,000 --> 00:00:39,000\nI do look very closely at the questions related to the homework.\n\n14\n00:00:39,000 --> 00:00:43,000\nI remove anything that I deem over the line.\n\n15\n00:00:43,000 --> 00:00:47,000\nSo far, I've been really impressed with students policing themselves and\n\n16\n00:00:47,000 --> 00:00:49,000\nrestricting themselves to not giving away answers.\n\n17\n00:00:49,000 --> 00:00:51,000\nI've been really impressed.\n\n18\n00:00:51,000 --> 00:00:54,000\nWhere I usually draw the line is step-by-step solutions--\n\n19\n00:00:54,000 --> 00:01:01,000\nstart one, do this; step two, do this; or a general framework for how\n\n20\n00:01:01,000 --> 00:01:02,000\nto solve the problem.\n\n21\n00:01:02,000 --> 00:01:05,000\nThe other thing that's over the line is posting code.\n\n22\n00:01:05,000 --> 00:01:08,000\nThat just has the answer and says, \"here's how you solve it.\"\n\n23\n00:01:08,000 --> 00:01:10,000\nThat's no good.\n\n24\n00:01:10,000 --> 00:01:13,000\nIn general, though, I don't really want to police the forum that strictly.\n\n25\n00:01:13,000 --> 00:01:16,000\nI want to encourage students to have a conversation, talk about the problems,\n\n26\n00:01:16,000 --> 00:01:18,000\nand help each other through them.\n\n27\n00:01:18,000 --> 00:01:20,000\nI think that really is the way you learn.\n\n28\n00:01:20,000 --> 00:01:23,000\nIf the problem is hard, start getting some hints on how to get started,\n\n29\n00:01:23,000 --> 00:01:25,000\nbut still work out the solution yourself.\n\n30\n00:01:25,000 --> 00:01:28,000\nUsing the forums to do that is a great way to learn more \n\n31\n00:01:28,000 --> 00:01:31,000\nand to be able to understand the homework problems.\n\n", "id": 166001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHxCQwLEgZOdWdnZXQY8pAKDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162001/Nugget/166002", "type": "Nugget", "id": 166002}, {"nuggetType": "lecture", "name": "Office Hours 3", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHxCQw", "media": {"dotsub_id": "271bc0f5-574a-43c4-b49c-974d0cbad22a", "name": "cs101_oo2_02_l_office-hours-3", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMGgCgw", "youtube_id": "FLthiKlsqFQ", "youtube_state": "done", "path": "Course/cs101/Media/168001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nOur next question from student, MTRTMK, from Pakistan. \n\n2\n00:00:05,000 --> 00:00:08,000\nThis student asks, \"What are some good programming practices,\n\n3\n00:00:08,000 --> 00:00:10,000\nand how important is it to follow programming practices\n\n4\n00:00:10,000 --> 00:00:13,000\nused by professionals--things related to like \n\n5\n00:00:13,000 --> 00:00:16,000\nnaming variables, commenting the code,\n\n6\n00:00:16,000 --> 00:00:19,000\nbeing consistent with the structure--things like that?\"\n\n7\n00:00:19,000 --> 00:00:21,000\nSo this is a great question. \n\n8\n00:00:21,000 --> 00:00:23,000\nThere are definitely many things that people learn\n\n9\n00:00:23,000 --> 00:00:26,000\nas they get more experienced in programming. \n\n10\n00:00:26,000 --> 00:00:28,000\nWe're focused, in this class, on learning the basic concepts--\n\n11\n00:00:28,000 --> 00:00:32,000\non getting you able to write and understand short programs. \n\n12\n00:00:32,000 --> 00:00:35,000\nI'm trying to use good practices in most of the programs \n\n13\n00:00:35,000 --> 00:00:38,000\nand, hopefully, those will come across. \n\n14\n00:00:38,000 --> 00:00:41,000\nBut people have different opinions about the right way to code things. \n\n15\n00:00:41,000 --> 00:00:43,000\nSome opinions are better than others. \n\n16\n00:00:43,000 --> 00:00:47,000\nI think, in most cases, the opinions that I have are reasonably good ones. \n\n17\n00:00:47,000 --> 00:00:49,000\nMost cases--not always. >>Most of the time--we hope.\n\n18\n00:00:49,000 --> 00:00:51,000\nAnd you'll develop your own style. \n\n19\n00:00:51,000 --> 00:00:53,000\nYou'll develop your own experience\n\n20\n00:00:53,000 --> 00:00:56,000\nas you get more experience as a programmer--how you like to do things--\n\n21\n00:00:56,000 --> 00:00:58,000\nbut there are conventions that it's useful to follow, \n\n22\n00:00:58,000 --> 00:01:01,000\nand part of the reason it's useful to follow conventions \n\n23\n00:01:01,000 --> 00:01:04,000\nis you want it so other programmers can understand your code. \n\n24\n00:01:04,000 --> 00:01:07,000\nAnd things like using lower case names--\n\n25\n00:01:07,000 --> 00:01:10,000\nusing lower cased letters at the start of a variable name\n\n26\n00:01:10,000 --> 00:01:12,000\nare just conventions, and that's used to distinguish \n\n27\n00:01:12,000 --> 00:01:15,000\nvariable names from other things you might see in a program. \n\n28\n00:01:15,000 --> 00:01:17,000\nThere's no really good reason for that, but that's \n\n29\n00:01:17,000 --> 00:01:19,000\na convention that most programmers follow,\n\n30\n00:01:19,000 --> 00:01:21,000\nand it's good for you to follow it too so \n\n31\n00:01:21,000 --> 00:01:23,000\nif other people need to read your code\n\n32\n00:01:23,000 --> 00:01:25,000\nthey'll be able to the code as well. \n\n", "id": 168001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHxCQwLEgZOdWdnZXQYqagKDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162001/Nugget/169001", "type": "Nugget", "id": 169001}, {"nuggetType": "lecture", "name": "Office Hours 4", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHxCQw", "media": {"dotsub_id": "379a783e-996f-4614-8489-1b1ca5fa943b", "name": "cs101_oo2_03_l_office-hours-4", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPm3Cgw", "youtube_id": "hlr7Cxahbro", "youtube_state": "done", "path": "Course/cs101/Media/171001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nAnesh, from India, asks:\n\n2\n00:00:02,000 --> 00:00:04,000\nWhat are some of the aspects that go into \n\n3\n00:00:04,000 --> 00:00:06,000\nbuilding a practical Real World search engine\n\n4\n00:00:06,000 --> 00:00:09,000\nand how should you use existing tools, \n\n5\n00:00:09,000 --> 00:00:11,000\nsuch as preexisting libraries, to help build your search engine? \n\n6\n00:00:11,000 --> 00:00:13,000\nSo one example he gives in his post,\n\n7\n00:00:13,000 --> 00:00:16,000\nwhich has a lot of great deal in there--and I encourage people to look at it--\n\n8\n00:00:16,000 --> 00:00:18,000\nis Beautiful Soup,\n\n9\n00:00:18,000 --> 00:00:21,000\nwhich is a Python library to parse really complicated HTML.\n\n10\n00:00:21,000 --> 00:00:23,000\nSo in our web crawler, we just parse\n\n11\n00:00:23,000 --> 00:00:25,000\nvery strict, kind of string match, \n\n12\n00:00:25,000 --> 00:00:28,000\nand it doesn't always follow that rule so Beautiful Soup can help with that. \n\n13\n00:00:28,000 --> 00:00:31,000\nShould we be aware of these libraries, and how should we include them? \n\n14\n00:00:31,000 --> 00:00:34,000\nYeah--so there's a lot of things that are more complicated\n\n15\n00:00:34,000 --> 00:00:36,000\nif you want to build a robust search engine \n\n16\n00:00:36,000 --> 00:00:39,000\nthat's going to work on all the pages out there on the Web. \n\n17\n00:00:39,000 --> 00:00:42,000\nAnd Anesh has a good list of some of the things that you need to think about,\n\n18\n00:00:42,000 --> 00:00:45,000\nand for the advanced students that are wanting to go beyond \n\n19\n00:00:45,000 --> 00:00:48,000\nwhat we're doing in class,  it's great to start thinking about those things. \n\n20\n00:00:48,000 --> 00:00:51,000\nAnd it is also the case that you don't want to build everything yourself. \n\n21\n00:00:51,000 --> 00:00:53,000\nIn this class, we're building things ourselves because\n\n22\n00:00:53,000 --> 00:00:55,000\nwe want to learn what's going on underneath \n\n23\n00:00:55,000 --> 00:00:58,000\nand build as much and understand as much about computing as we can. \n\n24\n00:00:58,000 --> 00:01:01,000\nIf you're building Real software, you want to try to start from libraries\n\n25\n00:01:01,000 --> 00:01:03,000\nthat other people have already written that are available for you to use\n\n26\n00:01:03,000 --> 00:01:07,000\nand Beautiful Soup is a very useful library for parsing HTML--\n\n27\n00:01:07,000 --> 00:01:09,000\nfor doing the kinds of things that get real complicated, \n\n28\n00:01:09,000 --> 00:01:12,000\nif you want to find links in Real HTML code \n\n29\n00:01:12,000 --> 00:01:16,000\nthat can be much more complex than what we're focusing on so far. \n\n30\n00:01:16,000 --> 00:01:19,000\nIt's still using the same kinds of ideas that we do in the class,\n\n31\n00:01:19,000 --> 00:01:21,000\nbut someone else has put a lot of effort into writing that code \n\n32\n00:01:21,000 --> 00:01:26,000\nand making it work, and it's definitely a good idea to reuse libraries that are available.\n\n33\n00:01:26,000 --> 00:01:28,000\nYou have to check, carefully, what the license is on those libraries--\n\n34\n00:01:28,000 --> 00:01:30,000\nwhether you can use them or not.\n\n35\n00:01:30,000 --> 00:01:33,000\nBut it's definitely--when you start building more complex programs, \n\n36\n00:01:33,000 --> 00:01:36,000\nrather than starting from scratch and writing everything yourself,\n\n37\n00:01:36,000 --> 00:01:39,000\ntrying to find a library that will help you get what you need done more quickly\n\n38\n00:01:39,000 --> 00:01:41,000\nis a great idea. \n\n", "id": 171001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHxCQwLEgZOdWdnZXQY4b8KDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162001/Nugget/172001", "type": "Nugget", "id": 172001}, {"nuggetType": "lecture", "name": "Office Hours 5", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHxCQw", "media": {"dotsub_id": "5b8f6fbd-9e40-414e-83ef-a99b8d98c222", "name": "cs101_oo2_04_l_office-hours-5", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMnHCgw", "youtube_id": "_Ayx8ECAHUg", "youtube_state": "done", "path": "Course/cs101/Media/173001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nVasco, from Portugal, asks:\n\n2\n00:00:02,000 --> 00:00:04,000\nIn a world where we already have Google and other search engines, \n\n3\n00:00:04,000 --> 00:00:07,000\nwhat are the advantages of building another search engine? \n\n4\n00:00:07,000 --> 00:00:09,000\nSo certainly, you don't want to try to duplicate something \n\n5\n00:00:09,000 --> 00:00:11,000\nthat behaves exactly like Google does,\n\n6\n00:00:11,000 --> 00:00:14,000\nbecause Google works pretty well at what it does. \n\n7\n00:00:14,000 --> 00:00:16,000\nBut there are lots of things you can do that would be \n\n8\n00:00:16,000 --> 00:00:18,000\ndifferent from what Google does. \n\n9\n00:00:18,000 --> 00:00:21,000\nOne of the best examples of that is the search engine called DuckDuckGo,\n\n10\n00:00:21,000 --> 00:00:23,000\nand we had a visit from Gabriel Weinberg a few weeks ago.\n\n11\n00:00:23,000 --> 00:00:26,000\nThere's a video, with a few clips from that visit,\n\n12\n00:00:26,000 --> 00:00:29,000\nwhere he talks about what motivated him to build DuckDuckGo. \n\n13\n00:00:29,000 --> 00:00:31,000\nThere''ll be a few more clips of that later in this course\n\n14\n00:00:31,000 --> 00:00:33,000\nwhere you'll get some idea of the kinds of things \n\n15\n00:00:33,000 --> 00:00:35,000\nthat he thought were interesting to make a new search engine,\n\n16\n00:00:35,000 --> 00:00:38,000\nand why he was motivated to build one. \n\n17\n00:00:38,000 --> 00:00:40,000\nBut there are lots of things that you can think about that would be \n\n18\n00:00:40,000 --> 00:00:43,000\nnew features that are different from what Google does--\n\n19\n00:00:43,000 --> 00:00:45,000\nor specializing your search engine for a particular kind of \n\n20\n00:00:45,000 --> 00:00:47,000\ncorpus that you're searching for.\n\n21\n00:00:47,000 --> 00:00:51,000\nProbably, you don't want to try to build a generic Web search engine, like Google,\n\n22\n00:00:51,000 --> 00:00:53,000\nunless you've got some ideas how to go beyond that or \n\n23\n00:00:53,000 --> 00:00:55,000\nto do things differently, that would be more interesting. \n\n", "id": 173001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHxCQwLEgZOdWdnZXQYsc8KDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162001/Nugget/174001", "type": "Nugget", "id": 174001}, {"nuggetType": "lecture", "name": "Office Hours 6", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHxCQw", "media": {"dotsub_id": "5ff24aa2-b85c-43d5-923d-2ee0e48510a7", "name": "cs101_oo2_05_l_office-hours-6", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJnXCgw", "youtube_id": "Bfbo0jXIruw", "youtube_state": "done", "path": "Course/cs101/Media/175001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nDavid Harris, from Colorado Springs, is asking about the courses we have\n\n2\n00:00:04,000 --> 00:00:06,000\nlisted on the bottom of our home page. \n\n3\n00:00:06,000 --> 00:00:09,000\nSo we do have plans to offer more courses. \n\n4\n00:00:09,000 --> 00:00:11,000\nI gather you've noticed the ones listed\n\n5\n00:00:11,000 --> 00:00:13,000\non the bottom of the home page are fairly vague.\n\n6\n00:00:13,000 --> 00:00:16,000\nThey don't say, specifically, what the courses are or when they're going to start. \n\n7\n00:00:16,000 --> 00:00:18,000\nWe will be announcing some courses soon; we don't want to announce \n\n8\n00:00:18,000 --> 00:00:20,000\nspecifics about courses until we're really sure they're in place. \n\n9\n00:00:20,000 --> 00:00:24,000\nBut there will be new courses starting in April, including several courses \n\n10\n00:00:24,000 --> 00:00:27,000\nthat you'll be able to take, building just on this CS101course,\n\n11\n00:00:27,000 --> 00:00:29,000\nand I think they're going to be really exciting--but I can't announce them just yet. \n\n12\n00:00:29,000 --> 00:00:33,000\nBut you will be hearing more about those very soon. >>Soon.\n\n", "id": 175001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHxCQwLEgZOdWdnZXQYgd8KDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162001/Nugget/176001", "type": "Nugget", "id": 176001}]}, {"name": "Unit 3", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY6uYKDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYuvYKDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYiYYLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY8Y0LDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYwp0LDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYqqULDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYyscKDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYkq0LDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY-bQLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYi4YLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY4bwLDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY0u4KDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY0_EJDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYo_4KDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYvPYKDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYycQLDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYjYYLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY0-4KDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYpf4KDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYscwLDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYgdwLDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYxJ0LDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY0esLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY25ULDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYysQLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYj4YLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY9o0LDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYuvMLDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYioMMDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY8ooMDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY25gKDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYm9QLDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYiokKDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYwZoMDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY940LDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYovsLDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYqaIMDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY-bEMDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY0-sLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY-7EMDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYkqoMDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYla0LDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYzccKDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYs88KDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY47wLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY6-MLDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYycEMDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYxZ0LDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYkoYLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYo_sLDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY9IoMDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY4r8KDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY7eMLDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY-I0LDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYz8cKDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY7uMLDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY4rkMDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYhdwLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYjYMMDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYzMQLDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY5LwLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYndQLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY-Y0LDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYv_kJDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYysEMDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY5bwLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY2-4KDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYq6IMDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY3O4KDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY8OYKDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY3e4KDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYsskMDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYwPkJDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYlKoMDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYtM8KDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYrKIMDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYpPsLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYzcQLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYpfsLDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYgdkMDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY45ULDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY5b8KDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYlaoMDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYlIYLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY8uMLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY1fEJDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYhd8KDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYm9EMDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYtc8KDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY1usLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYloYLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYtcwLDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY_bQLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYtswLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYgtkMDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYmIYLDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "path": "Course/cs101/CourseRev/feb2012/Unit/162002", "open": false, "id": 162002, "nuggets": [{"nuggetType": "program", "name": "Relative Size", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY0_EJDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/162003", "suppliedCode": "#Given the variable countries defined as:\n\n\n#             Name      Capital  Populations (millions)\ncountries = [['China','Beijing',1350],\n             ['India','Delhi',1210],\n             ['Romania','Bucharest',21],\n             ['United States','Washington',307]]\n\n#What multiple of Romania's population is the population\n#of China? Please print your result.\n\n\n\n", "type": "Nugget", "id": 162003}, {"nuggetType": "lecture", "name": "Crawl Web Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "2861b1aa-1e21-47c5-88b3-cf2f7fa4a52f", "name": "cs101_unit3_39_s_crawl-web", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNTxCQw", "youtube_id": "s_11NCwfLDg", "youtube_state": "done", "path": "Course/cs101/Media/162004", "transcript": null, "id": 162004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY1fEJDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/162005", "type": "Nugget", "id": 162005}, {"nuggetType": "lecture", "name": "Pop", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "6bee0bd5-599e-478e-9790-5e6a73fa8def", "name": "cs101_unit3_29_l_pop", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGK-lCww", "youtube_id": "iADxz6EFdXE", "youtube_state": "done", "path": "Course/cs101/Media/185007", "transcript": null, "id": 185007}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYv_kJDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/163007", "type": "Nugget", "id": 163007}, {"nuggetType": "lecture", "name": "Starting Get All Links Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "22ed8b83-8b59-4350-9250-0b552a6c0889", "name": "cs101_unit3_34_s_starting-get-all-links", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMOaDAw", "youtube_id": "0_EkY7QqglY", "youtube_state": "done", "path": "Course/cs101/Media/200003", "transcript": null, "id": 200003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYwPkJDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/163008", "type": "Nugget", "id": 163008}, {"nuggetType": "lecture", "name": "Append Quiz", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "2fc333ad-b33a-43d8-b799-0cba150869b4", "name": "cs101_unit3_16_q_append-quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIuDDAw", "youtube_id": "EMzW9LLZG48", "youtube_state": "done", "path": "Course/cs101/Media/197003", "transcript": null, "id": 197003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYiokKDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/165002", "type": "Nugget", "id": 165002}, {"nuggetType": "quiz", "name": "Len Quiz", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY25gKDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/167003", "type": "Nugget", "id": 167003}, {"nuggetType": "program", "name": "Measure Udacity", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY4r8KDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/172002", "suppliedCode": "#Define a procedure, measure_udacity,\n#that takes its input a list of Strings,\n#and outputs a number that is a count\n#of the number of elements in the input\n#list that start with the letter 'U'\n#(uppercase).\n\n#For example,\n\n#measure_udacity(['Dave','Sebastian','Katy']) => 0\n\n#measure_udacity(['Umika','Umberto']) => 2\n\n\n", "type": "Nugget", "id": 172002}, {"nuggetType": "quiz", "name": "Crawling Process", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY5b8KDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/172005", "type": "Nugget", "id": 172005}, {"nuggetType": "lecture", "name": "Days In A Month Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "86f7cb3b-873a-40a3-9b7d-9848050f70a7", "name": "cs101_unit3_02_s_days-in-a-month", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJGtCww", "youtube_id": "rXJaFSHhzKg", "youtube_state": "done", "path": "Course/cs101/Media/186001", "transcript": null, "id": 186001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYyscKDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/173002", "type": "Nugget", "id": 173002}, {"nuggetType": "lecture", "name": "Hard Drives Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "445e160c-5ab8-4b8c-bc2d-3d2daf4555a8", "name": "cs101_unit3_20_s_hard-drives", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPOKDAw", "youtube_id": "KpTJOhGW0Ig", "youtube_state": "done", "path": "Course/cs101/Media/198003", "transcript": null, "id": 198003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYzccKDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/173005", "type": "Nugget", "id": 173005}, {"nuggetType": "program", "name": "Find Element", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYz8cKDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/173007", "suppliedCode": "#Define a procedure, find_element,\n#that takes as its inputs a List\n#and a value of any type, and\n#outputs the index of the first\n#element in the input list that\n#matches the value.\n\n#If there is no matching element,\n#output -1.\n\n#find_element([1,2,3],3) => 2\n\n#find_element(['alpha','beta'],'gamma') => -1\n\n", "type": "Nugget", "id": 173007}, {"nuggetType": "lecture", "name": "Loops On Lists", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "dffd69e7-b1fc-4f9e-b749-4216ed41684b", "name": "cs101_unit3_21_qs_loops-on-lists", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPyxDAw", "youtube_id": "RWUnHFjwM7s", "youtube_state": "done", "path": "Course/cs101/Media/203004", "transcript": null, "id": 203004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYs88KDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/174003", "type": "Nugget", "id": 174003}, {"nuggetType": "snippetQuiz", "name": "Updating Links", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYtM8KDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/174004", "type": "Nugget", "id": 174004}, {"nuggetType": "lecture", "name": "Crawl Web Loop Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "988bae1d-1ec6-432d-ab3c-5aae1483cd49", "name": "cs101_unit3_40_s_crawl-web-loop", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOa_Cgw", "youtube_id": "zDTKSTvFqHY", "youtube_state": "done", "path": "Course/cs101/Media/172006", "transcript": null, "id": 172006}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYtc8KDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/174005", "type": "Nugget", "id": 174005}, {"nuggetType": "lecture", "name": "Crawl Web Loop", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "917a791b-501a-4ce0-aba8-518018281ec4", "name": "cs101_unit3_40_qs_crawl-web-loop", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOa8Cww", "youtube_id": "Udk3vxmWgLY", "youtube_state": "done", "path": "Course/cs101/Media/188006", "transcript": null, "id": 188006}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYhd8KDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/176005", "type": "Nugget", "id": 176005}, {"nuggetType": "lecture", "name": "Introduction", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "f8f42705-c25d-4143-adc7-009a5bf0abf0", "name": "cs101_unit3_00_l_introduction", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOnmCgw", "youtube_id": "bqCI42n-7jg", "youtube_state": "done", "path": "Course/cs101/Media/177001", "transcript": null, "id": 177001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY6uYKDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/177002", "type": "Nugget", "id": 177002}, {"nuggetType": "lecture", "name": "Links", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "48d99f41-4e0c-4a7d-8987-f65854c5f061", "name": "cs101_unit3_33_l_links", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPqNCww", "youtube_id": "7r_dCHmadkg", "youtube_state": "done", "path": "Course/cs101/Media/182010", "transcript": null, "id": 182010}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY8OYKDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/177008", "type": "Nugget", "id": 177008}, {"nuggetType": "lecture", "name": "Relative Size", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "671f747d-56c4-4227-b176-c760ac529886", "name": "cs101_unit3_05_p_relative-size", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPONCww", "youtube_id": "Ups9SHqgT7w", "youtube_state": "done", "path": "Course/cs101/Media/182003", "transcript": null, "id": 182003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY0u4KDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/178002", "type": "Nugget", "id": 178002}, {"nuggetType": "program", "name": "Different Stooges", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY0-4KDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/178003", "suppliedCode": "#We defined:\n\nstooges = ['Moe','Larry','Curly']\n\n#but in some Stooges films, Curly was\n#replaced by Shemp.\n\n#Write one line of code that changes\n#the value of stooges to be:\n\n['Moe','Larry','Shemp']\n\n#but does not create a new List\n#object.\n\n", "type": "Nugget", "id": 178003}, {"nuggetType": "lecture", "name": "Pop Quiz Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "c0228417-437c-497a-bb4c-76fc62777a1d", "name": "cs101_unit3_30_s_pop-quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOCVCww", "youtube_id": "c4yfw-b2ohU", "youtube_state": "done", "path": "Course/cs101/Media/183008", "transcript": null, "id": 183008}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY2-4KDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/178011", "type": "Nugget", "id": 178011}, {"nuggetType": "lecture", "name": "Get All Links", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "a531cbd7-123d-40ae-8321-6d9172dd0676", "name": "cs101_unit3_32_l_get-all-links", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOGVCww", "youtube_id": "hKpXNEa2kHo", "youtube_state": "done", "path": "Course/cs101/Media/183009", "transcript": null, "id": 183009}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY3O4KDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/178012", "type": "Nugget", "id": 178012}, {"nuggetType": "lecture", "name": "Starting Get All Links", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "ef320c20-df96-449f-8bb9-2e6f51409aee", "name": "cs101_unit3_34_qs_starting-get-all-links", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPHjCww", "youtube_id": "kC8nY3k3m5U", "youtube_state": "done", "path": "Course/cs101/Media/193009", "transcript": null, "id": 193009}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY3e4KDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/178013", "type": "Nugget", "id": 178013}, {"nuggetType": "lecture", "name": "Stooges", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "7d004cd3-6ff4-48f4-910c-6039be0ac28e", "name": "cs101_unit3_01_qs_stooges", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLn2Cgw", "youtube_id": "4XAJkl5Ezvs", "youtube_state": "done", "path": "Course/cs101/Media/179001", "transcript": null, "id": 179001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYuvYKDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/179002", "type": "Nugget", "id": 179002}, {"nuggetType": "lecture", "name": "Mutation", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "4310ec4b-4830-4f8a-a3ad-07b9bcdd3248", "name": "cs101_unit3_06_l_mutation", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKulCww", "youtube_id": "6IzlmzkzQH0", "youtube_state": "done", "path": "Course/cs101/Media/185003", "transcript": null, "id": 185003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYvPYKDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/179004", "type": "Nugget", "id": 179004}, {"nuggetType": "lecture", "name": "Relative Size Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "f3b7605f-1fbf-40ab-8713-62efadeeca16", "name": "cs101_unit3_05_s_relative-size", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIyGCww", "youtube_id": "yEbkLY4vUKU", "youtube_state": "done", "path": "Course/cs101/Media/181004", "transcript": null, "id": 181004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYo_4KDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/180003", "type": "Nugget", "id": 180003}, {"nuggetType": "lecture", "name": "Different Stooges Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "ab745598-4c56-45e4-9401-2ec37282feb6", "name": "cs101_unit3_08_s_different-stooges", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLr5CQw", "youtube_id": "zHcSQDH56V4", "youtube_state": "done", "path": "Course/cs101/Media/163002", "transcript": null, "id": 163002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYpf4KDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/180005", "type": "Nugget", "id": 180005}, {"nuggetType": "snippetQuiz", "name": "Stooges", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYiYYLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/181001", "type": "Nugget", "id": 181001}, {"nuggetType": "program", "name": "Countries", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYi4YLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/181003", "suppliedCode": "#Given the variable countries defined as:\n\n\n#             Name      Capital  Populations (millions)\ncountries = [['China','Beijing',1350],\n             ['India','Delhi',1210],\n             ['Romania','Bucharest',21],\n             ['United States','Washington',307]]\n\n#Write code to print out the capital of India\n#by accessing the array.\n\n", "type": "Nugget", "id": 181003}, {"nuggetType": "lecture", "name": "Different Stooges", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "4b911c5d-a13d-4806-b3bc-aed7ead55c87", "name": "cs101_unit3_08_p_different-stooges", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPq0Cww", "youtube_id": "HHbhu-ZQHqw", "youtube_state": "done", "path": "Course/cs101/Media/187002", "transcript": null, "id": 187002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYjYYLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/181005", "type": "Nugget", "id": 181005}, {"nuggetType": "program", "name": "Replace Spy", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYj4YLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/181007", "suppliedCode": "#Define a procedure, replace_spy,\n#that takes as its input a list of\n#three numbers, and modifies the\n#value of the third element in the\n#input list to be one more than its\n#previous value.\n\nspy = [0,0,7]\n\n#replace_spy(spy)\n#print spy => [0,0,8]\n\n\n", "type": "Nugget", "id": 181007}, {"nuggetType": "program", "name": "Sum List", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYkoYLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/181010", "suppliedCode": "#Define a procedure, sum_list,\n#that takes as its input a\n#List of numbers, and produces\n#as its output the sum of all\n#the elements in the input list.\n\n#For example,\n#sum_list([1,7,4]) => 12\n\n", "type": "Nugget", "id": 181010}, {"nuggetType": "lecture", "name": "Crawl Web", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "851362cf-355e-42ef-b2cf-03912ad9aa76", "name": "cs101_unit3_39_qs_crawl-web", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLTMCww", "youtube_id": "FhvQeUuUYgA", "youtube_state": "done", "path": "Course/cs101/Media/190004", "transcript": null, "id": 190004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYlIYLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/181012", "type": "Nugget", "id": 181012}, {"nuggetType": "snippetQuiz", "name": "Crawl If", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYloYLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/181014", "type": "Nugget", "id": 181014}, {"nuggetType": "lecture", "name": "Conclusion", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "2b8db063-5889-4bc6-b71c-ff8b034db45c", "name": "cs101_unit3_43_l_conclusion", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJeGCww", "youtube_id": "gqlQ3ziV3Kc", "youtube_state": "done", "path": "Course/cs101/Media/181015", "transcript": null, "id": 181015}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYmIYLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/181016", "type": "Nugget", "id": 181016}, {"nuggetType": "lecture", "name": "Stooges Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "6d1fe196-9309-4f42-b75f-4c93ef04972b", "name": "cs101_unit3_01_s_stooges", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOvmCgw", "youtube_id": "oE1vXZ6Wvv4", "youtube_state": "done", "path": "Course/cs101/Media/177003", "transcript": null, "id": 177003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY8Y0LDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/182001", "type": "Nugget", "id": 182001}, {"nuggetType": "lecture", "name": "Replace Spy Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "a9dd9eca-a7e1-4b89-a168-1509f7481964", "name": "cs101_unit3_12_s_replace-spy", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGL35CQw", "youtube_id": "TFhoMehfKjQ", "youtube_state": "done", "path": "Course/cs101/Media/163005", "transcript": null, "id": 163005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY9o0LDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/182006", "type": "Nugget", "id": 182006}, {"nuggetType": "lecture", "name": "Append Quiz Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "036b7a5d-c8d6-4d69-8d17-643a12ccbf0f", "name": "cs101_unit3_16_s_append-quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGK2lCww", "youtube_id": "mqbKvEo3ezw", "youtube_state": "done", "path": "Course/cs101/Media/185005", "transcript": null, "id": 185005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY940LDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/182007", "type": "Nugget", "id": 182007}, {"nuggetType": "lecture", "name": "Find Element", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "323f428c-7832-4535-877c-2dc939507670", "name": "cs101_unit3_25_p_find-element", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIPfCgw", "youtube_id": "4ykk8uHxFx0", "youtube_state": "done", "path": "Course/cs101/Media/176003", "transcript": null, "id": 176003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY-I0LDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/182008", "type": "Nugget", "id": 182008}, {"nuggetType": "lecture", "name": "Union Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "75eff87a-40ae-47eb-a8b6-d4322a3d61a6", "name": "cs101_unit3_28_s_union", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIbcCww", "youtube_id": "J0cRg8Aiedg", "youtube_state": "done", "path": "Course/cs101/Media/192006", "transcript": null, "id": 192006}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY-Y0LDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/182009", "type": "Nugget", "id": 182009}, {"nuggetType": "lecture", "name": "Secret Agent Man Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "d17e0c4b-2ce5-45a5-9dad-130ed5d6e5f4", "name": "cs101_unit3_11_s_secret-agent-man", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPWNCww", "youtube_id": "K1T2J93SkOE", "youtube_state": "done", "path": "Course/cs101/Media/182005", "transcript": null, "id": 182005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY25ULDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/183003", "type": "Nugget", "id": 183003}, {"nuggetType": "lecture", "name": "Crawling Process", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "be3d80c4-4492-4246-87b1-7bafb3c198a5", "name": "cs101_unit3_38_q_crawling-process", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNDHCgw", "youtube_id": "yipZ-wUagew", "youtube_state": "done", "path": "Course/cs101/Media/173008", "transcript": null, "id": 173008}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY45ULDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/183011", "type": "Nugget", "id": 183011}, {"nuggetType": "lecture", "name": "Days In A Month", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "73afeb2e-1250-4cdd-ac35-6ef889cc4b83", "name": "cs101_unit3_02_p_days-in-a-month", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMGdCww", "youtube_id": "YSFdxWgTYgY", "youtube_state": "done", "path": "Course/cs101/Media/184001", "transcript": null, "id": 184001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYwp0LDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/184002", "type": "Nugget", "id": 184002}, {"nuggetType": "lecture", "name": "Secret Agent Man", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "2a33192b-6726-45fb-a3dc-c1734c646552", "name": "cs101_unit3_11_q_secret-agent-man", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJStCww", "youtube_id": "OzN_x-Zgfk0", "youtube_state": "done", "path": "Course/cs101/Media/186004", "transcript": null, "id": 186004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYxJ0LDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/184004", "type": "Nugget", "id": 184004}, {"nuggetType": "lecture", "name": "Sum List", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "2f58cf87-537a-4e18-b728-7c4ca6d547b4", "name": "cs101_unit3_23_p_sum-list", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJatCww", "youtube_id": "zKMcN_oljNo", "youtube_state": "done", "path": "Course/cs101/Media/186006", "transcript": null, "id": 186006}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYxZ0LDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/184005", "type": "Nugget", "id": 184005}, {"nuggetType": "program", "name": "Days In A Month", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYqqULDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/185002", "suppliedCode": "#Given the variable,\n\ndays_in_month = [31,28,31,30,31,30,31,31,30,31,30,31]\n\n#define a procedure, how_many_days,\n#that takes as input a number\n#representing a month, and outputs\n#the number of days in that month.\n\n#how_many_days(1) => 31\n#how_many_days(9) => 30\n", "type": "Nugget", "id": 185002}, {"nuggetType": "lecture", "name": "Nested Lists", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "e96d2a2f-2e37-4b85-8618-a37eb598a8ac", "name": "cs101_unit3_03_l_nested-lists", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMvHCgw", "youtube_id": "IZO8xYDL3nA", "youtube_state": "done", "path": "Course/cs101/Media/173003", "transcript": null, "id": 173003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYkq0LDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/186002", "type": "Nugget", "id": 186002}, {"nuggetType": "quiz", "name": "Hard Drives", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYla0LDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/186005", "type": "Nugget", "id": 186005}, {"nuggetType": "lecture", "name": "Countries", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "a3f8f5d9-e5ac-4714-a481-e65ad50ff57c", "name": "cs101_unit3_04_p_countries", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIqGCww", "youtube_id": "GOAqISpkKzg", "youtube_state": "done", "path": "Course/cs101/Media/181002", "transcript": null, "id": 181002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY-bQLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/187001", "type": "Nugget", "id": 187001}, {"nuggetType": "lecture", "name": "Finishing Crawl Web", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "4a1d0896-8c47-4579-a3b3-767e02998032", "name": "cs101_unit3_42_p_finishing-crawl-web", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGI6DDAw", "youtube_id": "RrMDcdImLCw", "youtube_state": "done", "path": "Course/cs101/Media/197006", "transcript": null, "id": 197006}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY_bQLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/187005", "type": "Nugget", "id": 187005}, {"nuggetType": "lecture", "name": "Countries Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "b37cd9bc-4f9b-4911-a7ae-9c7fd47676e0", "name": "cs101_unit3_04_s_countries", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGILfCgw", "youtube_id": "z3u9SY1CQKw", "youtube_state": "done", "path": "Course/cs101/Media/176002", "transcript": null, "id": 176002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY4bwLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/188001", "type": "Nugget", "id": 188001}, {"nuggetType": "snippetQuiz", "name": "Loops On Lists", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY47wLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/188003", "type": "Nugget", "id": 188003}, {"nuggetType": "lecture", "name": "Union", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "727ce367-4369-4cbd-b554-0e1f19ca6c4a", "name": "cs101_unit3_28_p_union", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNruCgw", "youtube_id": "qznJC9Xsybc", "youtube_state": "done", "path": "Course/cs101/Media/178010", "transcript": null, "id": 178010}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY5LwLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/188004", "type": "Nugget", "id": 188004}, {"nuggetType": "quiz", "name": "Pop Quiz", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY5bwLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/188005", "type": "Nugget", "id": 188005}, {"nuggetType": "lecture", "name": "A List Of Strings", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "58a9885b-c7ed-44ab-995a-733b836e89cd", "name": "cs101_unit3_07_l_a-list-of-strings", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNqVCww", "youtube_id": "Y251IQnCAGA", "youtube_state": "done", "path": "Course/cs101/Media/183002", "transcript": null, "id": 183002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYycQLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/189001", "type": "Nugget", "id": 189001}, {"nuggetType": "lecture", "name": "Replace Spy", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "1258496f-343b-4e53-a73c-0284f47a0980", "name": "cs101_unit3_12_p_replace-spy", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNyVCww", "youtube_id": "K3QyhhOQOOE", "youtube_state": "done", "path": "Course/cs101/Media/183004", "transcript": null, "id": 183004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYysQLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/189002", "type": "Nugget", "id": 189002}, {"nuggetType": "lecture", "name": "Guest Speaker", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "3bd761f9-f7f0-4657-bb02-3a2297237962", "name": "cs101_unit3_27_l_guest-speaker", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGO_jCww", "youtube_id": "4R3JZ6mNrpU", "youtube_state": "done", "path": "Course/cs101/Media/193007", "transcript": null, "id": 193007}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYzMQLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/189004", "type": "Nugget", "id": 189004}, {"nuggetType": "quiz", "name": "Finishing Get All Links", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYzcQLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/189005", "type": "Nugget", "id": 189005}, {"nuggetType": "lecture", "name": "Yello Mutation", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "be5b7e46-b06f-4f37-8450-a0920265c55f", "name": "cs101_unit3_09_l_yello-mutation", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLv5CQw", "youtube_id": "aiFSwOk7iiU", "youtube_state": "done", "path": "Course/cs101/Media/163003", "transcript": null, "id": 163003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYscwLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/190001", "type": "Nugget", "id": 190001}, {"nuggetType": "lecture", "name": "Crawl If Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "4f5a90ad-b1bd-401a-9d4f-8b54c63c2fe6", "name": "cs101_unit3_41_s_crawl-if", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLPJDAw", "youtube_id": "gHgrC3ws8lk", "youtube_state": "done", "path": "Course/cs101/Media/206003", "transcript": null, "id": 206003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYtcwLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/190005", "type": "Nugget", "id": 190005}, {"nuggetType": "program", "name": "Finishing Crawl Web", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYtswLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/190006", "suppliedCode": "#Finish crawl web\n\n\ndef get_page(url):\n    try:\n        if url == \"http://xkcd.com/353\":\n            return  '<?xml version=\"1.0\" encoding=\"utf-8\" ?><?xml-stylesheet href=\"http://imgs.xkcd.com/s/c40a9f8.css\" type=\"text/css\" media=\"screen\" ?><!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\"> <head> <title>xkcd: Python</title> <link rel=\"stylesheet\" type=\"text/css\" href=\"http://imgs.xkcd.com/s/c40a9f8.css\" media=\"screen\" title=\"Default\" /> <!--[if IE]><link rel=\"stylesheet\" type=\"text/css\" href=\"http://imgs.xkcd.com/s/ecbbecc.css\" media=\"screen\" title=\"Default\" /><![endif]--> <link rel=\"alternate\" type=\"application/atom+xml\" title=\"Atom 1.0\" href=\"/atom.xml\" /> <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS 2.0\" href=\"/rss.xml\" /> <link rel=\"icon\" href=\"http://imgs.xkcd.com/s/919f273.ico\" type=\"image/x-icon\" /> <link rel=\"shortcut icon\" href=\"http://imgs.xkcd.com/s/919f273.ico\" type=\"image/x-icon\" /> </head> <body> <div id=\"container\"> <div id=\"topContainer\"> <div id=\"topLeft\" class=\"dialog\"> <div class=\"hd\"><div class=\"c\"></div></div> <div class=\"bd\"> <div class=\"c\"> <div class=\"s\">\\t<ul> <li><a href=\"http://xkcd.com/554\"\">Archive</a><br /></li>\\t <li><a href=\"http://blag.xkcd.com/\">News/Blag</a><br /></li> <li><a href=\"http://store.xkcd.com/\">Store</a><br /></li> <li><a href=\"/about/\">About</a><br /></li> <li><a href=\"http://forums.xkcd.com/\">Forums</a><br /></li> </ul> </div> </div> </div> <div class=\"ft\"><div class=\"c\"></div></div> </div> <div id=\"topRight\" class=\"dialog\"> <div class=\"hd\"><div class=\"c\"></div></div> <div class=\"bd\"> <div class=\"c\"> <div class=\"s\"> <div id=\"topRightContainer\"> <div id=\"logo\"> <a href=\"/\"><img src=\"http://imgs.xkcd.com/s/9be30a7.png\" alt=\"xkcd.com logo\" height=\"83\" width=\"185\"/></a> <h2><br />A webcomic of romance,<br/> sarcasm, math, and language.</h2> <div class=\"clearleft\"></div> <br />XKCD updates every Monday, Wednesday, and Friday. </div> </div> </div> </div> </div> <div class=\"ft\"><div class=\"c\"></div></div> </div> </div> <div id=\"contentContainer\"> <div id=\"middleContent\" class=\"dialog\"> <div class=\"hd\"><div class=\"c\"></div></div> <div class=\"bd\"> <div class=\"c\"> <div class=\"s\"><h1>Python</h1><br/><br /><div class=\"menuCont\"> <ul> <li><a href=\"/1/\">|&lt;</a></li> <li><a href=\"/352/\" accesskey=\"p\">&lt; Prev</a></li> <li><a href=\"http://dynamic.xkcd.com/random/comic/\" id=\"rnd_btn_t\">Random</a></li> <li><a href=\"/354/\" accesskey=\"n\">Next &gt;</a></li> <li><a href=\"/\">&gt;|</a></li> </ul></div><br/><br/><img src=\"http://imgs.xkcd.com/comics/python.png\" title=\"I wrote 20 short programs in Python yesterday. It was wonderful. Perl, Im leaving you.\" alt=\"Python\" /><br/><br/><div class=\"menuCont\"> <ul> <li><a href=\"/1/\">|&lt;</a></li> <li><a href=\"/352/\" accesskey=\"p\">&lt; Prev</a></li> <li><a href=\"http://dynamic.xkcd.com/random/comic/\" id=\"rnd_btn_b\">Random</a></li> <li><a href=\"/354/\" accesskey=\"n\">Next &gt;</a></li> <li><a href=\"/\">&gt;|</a></li> </ul></div><h3>Permanent link to this comic: http://xkcd.com/353/</h3><h3>Image URL (for hotlinking/embedding): http://imgs.xkcd.com/comics/python.png</h3><div id=\"transcript\" style=\"display: none\">[[ Guy 1 is talking to Guy 2, who is floating in the sky ]]Guy 1: You39;re flying! How?Guy 2: Python!Guy 2: I learned it last night! Everything is so simple!Guy 2: Hello world is just 39;print &quot;Hello, World!&quot; 39;Guy 1: I dunno... Dynamic typing? Whitespace?Guy 2: Come join us! Programming is fun again! It39;s a whole new world up here!Guy 1: But how are you flying?Guy 2: I just typed 39;import antigravity39;Guy 1: That39;s it?Guy 2: ...I also sampled everything in the medicine cabinet for comparison.Guy 2: But i think this is the python.{{ I wrote 20 short programs in Python yesterday. It was wonderful. Perl, I39;m leaving you. }}</div> </div> </div> </div> <div class=\"ft\"><div class=\"c\"></div></div> </div> <div id=\"middleFooter\" class=\"dialog\"> <div class=\"hd\"><div class=\"c\"></div></div> <div class=\"bd\"> <div class=\"c\"> <div class=\"s\"> <img src=\"http://imgs.xkcd.com/s/a899e84.jpg\" width=\"520\" height=\"100\" alt=\"Selected Comics\" usemap=\" comicmap\" /> <map name=\"comicmap\"> <area shape=\"rect\" coords=\"0,0,100,100\" href=\"/150/\" alt=\"Grownups\" /> <area shape=\"rect\" coords=\"104,0,204,100\" href=\"/730/\" alt=\"Circuit Diagram\" /> <area shape=\"rect\" coords=\"208,0,308,100\" href=\"/162/\" alt=\"Angular Momentum\" /> <area shape=\"rect\" coords=\"312,0,412,100\" href=\"/688/\" alt=\"Self-Description\" /> <area shape=\"rect\" coords=\"416,0,520,100\" href=\"/556/\" alt=\"Alternative Energy Revolution\" /> </map><br/><br />Search comic titles and transcripts:<br /><script type=\"text/javascript\" src=\"//www.google.com/jsapi\"></script><script type=\"text/javascript\"> google.load(\\\"search\\\", \\\"1\\\"); google.setOnLoadCallback(function() { google.search.CustomSearchControl.attachAutoCompletion( \\\"012652707207066138651:zudjtuwe28q\\\", document.getElementById(\\\"q\\\"), \\\"cse-search-box\\\"); });</script><form action=\"//www.google.com/cse\" id=\"cse-search-box\"> <div> <input type=\"hidden\" name=\"cx\" value=\"012652707207066138651:zudjtuwe28q\" /> <input type=\"hidden\" name=\"ie\" value=\"UTF-8\" /> <input type=\"text\" name=\"q\" id=\"q\" autocomplete=\"off\" size=\"31\" /> <input type=\"submit\" name=\"sa\" value=\"Search\" /> </div></form><script type=\"text/javascript\" src=\"//www.google.com/cse/brand?form=cse-search-box&lang=en\"></script><a href=\"/rss.xml\">RSS Feed</a> - <a href=\"/atom.xml\">Atom Feed</a><br /> <br/> <div id=\"comicLinks\"> Comics I enjoy:<br/> <a href=\"http://www.qwantz.com\">Dinosaur Comics</a>, <a href=\"http://www.asofterworld.com\">A Softer World</a>, <a href=\"http://pbfcomics.com/\">Perry Bible Fellowship</a>, <a href=\"http://www.boltcity.com/copper/\">Copper</a>, <a href=\"http://questionablecontent.net/\">Questionable Content</a>, <a href=\"http://achewood.com/\">Achewood</a>, <a href=\"http://wondermark.com/\">Wondermark</a>, <a href=\"http://thisisindexed.com/\">Indexed</a>, <a href=\"http://www.buttercupfestival.com/buttercupfestival.htm\">Buttercup Festival</a> </div> <br/> Warning: this comic occasionally contains strong language (which may be unsuitable for children), unusual humor (which may be unsuitable for adults), and advanced mathematics (which may be unsuitable for liberal-arts majors).<br/> <br/> <h4>We did not invent the algorithm. The algorithm consistently finds Jesus. The algorithm killed Jeeves. <br />The algorithm is banned in China. The algorithm is from Jersey. The algorithm constantly finds Jesus.<br />This is not the algorithm. This is close.</h4><br/> <div class=\"line\"></div> <br/> <div id=\"licenseText\"> <!-- <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc/2.5/\"><img alt=\"Creative Commons License\" style=\"border:none\" src=\"http://imgs.xkcd.com/static/somerights20.png\" /></a><br/> --> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc/2.5/\">Creative Commons Attribution-NonCommercial 2.5 License</a>.<!-- <rdf:RDF xmlns=\"http://web.resource.org/cc/\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns \"><Work rdf:about=\"\"><dc:creator>Randall Munroe</dc:creator><dcterms:rightsHolder>Randall Munroe</dcterms:rightsHolder><dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /><dc:source rdf:resource=\"http://www.xkcd.com/\"/><license rdf:resource=\"http://creativecommons.org/licenses/by-nc/2.5/\" /></Work><License rdf:about=\"http://creativecommons.org/licenses/by-nc/2.5/\"><permits rdf:resource=\"http://web.resource.org/cc/Reproduction\" /><permits rdf:resource=\"http://web.resource.org/cc/Distribution\" /><requires rdf:resource=\"http://web.resource.org/cc/Notice\" /><requires rdf:resource=\"http://web.resource.org/cc/Attribution\" /><prohibits rdf:resource=\"http://web.resource.org/cc/CommercialUse\" /><permits rdf:resource=\"http://web.resource.org/cc/DerivativeWorks\" /></License></rdf:RDF> --> <br/> This means you\\\"re free to copy and share these comics (but not to sell them). <a href=\"/license.html\">More details</a>.<br/> </div> </div> </div> </div> <div class=\"ft\"><div class=\"c\"></div></div> </div> </div> </div> </body></html> '\n        elif url == \"http://xkcd.com/554\":\n            return  '<?xml version=\"1.0\" encoding=\"utf-8\" ?> <?xml-stylesheet href=\"http://imgs.xkcd.com/s/c40a9f8.css\" type=\"text/css\" media=\"screen\" ?> <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"> <html xmlns=\"http://www.w3.org/1999/xhtml\"> <head> <title>xkcd: Not Enough Work</title> <link rel=\"stylesheet\" type=\"text/css\" href=\"http://imgs.xkcd.com/s/c40a9f8.css\" media=\"screen\" title=\"Default\" /> <!--[if IE]><link rel=\"stylesheet\" type=\"text/css\" href=\"http://imgs.xkcd.com/s/ecbbecc.css\" media=\"screen\" title=\"Default\" /><![endif]--> <link rel=\"alternate\" type=\"application/atom+xml\" title=\"Atom 1.0\" href=\"/atom.xml\" /> <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS 2.0\" href=\"/rss.xml\" /> <link rel=\"icon\" href=\"http://imgs.xkcd.com/s/919f273.ico\" type=\"image/x-icon\" /> <link rel=\"shortcut icon\" href=\"http://imgs.xkcd.com/s/919f273.ico\" type=\"image/x-icon\" /> </head> <body> <div id=\"container\"> <div id=\"topContainer\"> <div id=\"topLeft\" class=\"dialog\"> <div class=\"hd\"><div class=\"c\"></div></div> <div class=\"bd\"> <div class=\"c\"> <div class=\"s\"> <ul> <li><a href=\"/archive/\">Archive</a><br /></li> <li><a href=\"http://blag.xkcd.com/\">News/Blag</a><br /></li> <li><a href=\"http://store.xkcd.com/\">Store</a><br /></li> <li><a href=\"/about/\">About</a><br /></li> <li><a href=\"http://forums.xkcd.com/\">Forums</a><br /></li> </ul> </div> </div> </div> <div class=\"ft\"><div class=\"c\"></div></div> </div> <div id=\"topRight\" class=\"dialog\"> <div class=\"hd\"><div class=\"c\"></div></div> <div class=\"bd\"> <div class=\"c\"> <div class=\"s\"> <div id=\"topRightContainer\"> <div id=\"logo\"> <a href=\"/\"><img src=\"http://imgs.xkcd.com/s/9be30a7.png\" alt=\"xkcd.com logo\" height=\"83\" width=\"185\"/></a> <h2><br />A webcomic of romance,<br/> sarcasm, math, and language.</h2> <div class=\"clearleft\"></div> XKCD updates every Monday, Wednesday, and Friday. <br /> Blag: Remember geohashing? <a href=\"http://blog.xkcd.com/2012/02/27/geohashing-2/\">Something pretty cool</a> happened Sunday. </div> </div> </div> </div> </div> <div class=\"ft\"><div class=\"c\"></div></div> </div> </div> <div id=\"contentContainer\"> <div id=\"middleContent\" class=\"dialog\"> <div class=\"hd\"><div class=\"c\"></div></div> <div class=\"bd\"> <div class=\"c\"> <div class=\"s\"> <h1>Not Enough Work</h1><br/> <br /> <div class=\"menuCont\"> <ul> <li><a href=\"/1/\">|&lt;</a></li> <li><a href=\"/553/\" accesskey=\"p\">&lt; Prev</a></li> <li><a href=\"http://dynamic.xkcd.com/random/comic/\" id=\"rnd_btn_t\">Random</a></li> <li><a href=\"/555/\" accesskey=\"n\">Next &gt;</a></li> <li><a href=\"/\">&gt;|</a></li> </ul> </div> <br/> <br/> <img src=\"http://imgs.xkcd.com/comics/not_enough_work.png\" title=\"It39;s even harder if you39;re an asshole who pronounces &lt;&gt; brackets.\" alt=\"Not Enough Work\" /><br/> <br/> <div class=\"menuCont\"> <ul> <li><a href=\"/1/\">|&lt;</a></li> <li><a href=\"/553/\" accesskey=\"p\">&lt; Prev</a></li> <li><a href=\"http://dynamic.xkcd.com/random/comic/\" id=\"rnd_btn_b\">Random</a></li> <li><a href=\"/555/\" accesskey=\"n\">Next &gt;</a></li> <li><a href=\"/\">&gt;|</a></li> </ul> </div> <h3>Permanent link to this comic: http://xkcd.com/554/</h3> <h3>Image URL (for hotlinking/embedding): http://imgs.xkcd.com/comics/not_enough_work.png</h3> <div id=\"transcript\" style=\"display: none\">Narration: Signs your coders don39;t have enough work to do: [[A man sitting at his workstation; a female co-worker behind him]] Man: I39;m almost up to my old typing speed in dvorak [[Two men standing by a server rack]] Man  1: Our servers now support gopher. Man  1: Just in case. [[A woman standing near her workstation speaking to a male co-worker]] Woman: Our pages are now HTML, XHTML-STRICT, and haiku-compliant Man: Haiku? Woman: &lt;div class=&quot;main&quot;&gt; Woman: &lt;span id=&quot;marquee&quot;&gt; Woman: Blog!&lt; span&gt;&lt; div&gt; [[A woman sitting at her workstation]] Woman: Hey! Have you guys seen this webcomic? {{title text: It39;s even harder if you39;re an asshole who pronounces &lt;&gt; brackets.}}</div> </div> </div> </div> <div class=\"ft\"><div class=\"c\"></div></div> </div> <div id=\"middleFooter\" class=\"dialog\"> <div class=\"hd\"><div class=\"c\"></div></div> <div class=\"bd\"> <div class=\"c\"> <div class=\"s\"> <img src=\"http://imgs.xkcd.com/s/a899e84.jpg\" width=\"520\" height=\"100\" alt=\"Selected Comics\" usemap=\" comicmap\" /> <map name=\"comicmap\"> <area shape=\"rect\" coords=\"0,0,100,100\" href=\"/150/\" alt=\"Grownups\" /> <area shape=\"rect\" coords=\"104,0,204,100\" href=\"/730/\" alt=\"Circuit Diagram\" /> <area shape=\"rect\" coords=\"208,0,308,100\" href=\"/162/\" alt=\"Angular Momentum\" /> <area shape=\"rect\" coords=\"312,0,412,100\" href=\"/688/\" alt=\"Self-Description\" /> <area shape=\"rect\" coords=\"416,0,520,100\" href=\"/556/\" alt=\"Alternative Energy Revolution\" /> </map><br/><br /> Search comic titles and transcripts:<br /> <script type=\"text/javascript\" src=\"//www.google.com/jsapi\"></script> <script type=\"text/javascript\"> google.load(\"search\", \"1\"); google.search.CustomSearchControl.attachAutoCompletion( \"012652707207066138651:zudjtuwe28q\", document.getElementById(\"q\"), \"cse-search-box\"); }); </script> <form action=\"//www.google.com/cse\" id=\"cse-search-box\"> <div> <input type=\"hidden\" name=\"cx\" value=\"012652707207066138651:zudjtuwe28q\" /> <input type=\"hidden\" name=\"ie\" value=\"UTF-8\" /> <input type=\"text\" name=\"q\" id=\"q\" autocomplete=\"off\" size=\"31\" /> <input type=\"submit\" name=\"sa\" value=\"Search\" /> </div> </form> <script type=\"text/javascript\" src=\"//www.google.com/cse/brand?form=cse-search-box&lang=en\"></script> <a href=\"/rss.xml\">RSS Feed</a> - <a href=\"/atom.xml\">Atom Feed</a> <br /> <br/> <div id=\"comicLinks\"> Comics I enjoy:<br/> <a href=\"http://threewordphrase.com/\">Three Word Phrase</a>, <a href=\"http://oglaf.com/\">Oglaf</a> (nsfw), <a href=\"http://www.smbc-comics.com/\">SMBC</a>, <a href=\"http://www.qwantz.com\">Dinosaur Comics</a>, <a href=\"http://www.asofterworld.com\">A Softer World</a>, <a href=\"http://buttersafe.com/\">Buttersafe</a>, <a href=\"http://pbfcomics.com/\">Perry Bible Fellowship</a>, <a href=\"http://questionablecontent.net/\">Questionable Content</a>, <a href=\"http://www.buttercupfestival.com/buttercupfestival.htm\">Buttercup Festival</a> </div> <br/> Warning: this comic occasionally contains strong language (which may be unsuitable for children), unusual humor (which may be unsuitable for adults), and advanced mathematics (which may be unsuitable for liberal-arts majors).<br/> <br/> <h4>We did not invent the algorithm. The algorithm consistently finds Jesus. The algorithm killed Jeeves. <br />The algorithm is banned in China. The algorithm is from Jersey. The algorithm constantly finds Jesus.<br />This is not the algorithm. This is close.</h4><br/> <div class=\"line\"></div> <br/> <div id=\"licenseText\"> <!-- <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc/2.5/\"><img alt=\"Creative Commons License\" style=\"border:none\" src=\"http://imgs.xkcd.com/static/somerights20.png\" /></a><br/> --> This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc/2.5/\">Creative Commons Attribution-NonCommercial 2.5 License</a>. <!-- <rdf:RDF xmlns=\"http://web.resource.org/cc/\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns \"><Work rdf:about=\"\"><dc:creator>Randall Munroe</dc:creator><dcterms:rightsHolder>Randall Munroe</dcterms:rightsHolder><dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /><dc:source rdf:resource=\"http://www.xkcd.com/\"/><license rdf:resource=\"http://creativecommons.org/licenses/by-nc/2.5/\" /></Work><License rdf:about=\"http://creativecommons.org/licenses/by-nc/2.5/\"><permits rdf:resource=\"http://web.resource.org/cc/Reproduction\" /><permits rdf:resource=\"http://web.resource.org/cc/Distribution\" /><requires rdf:resource=\"http://web.resource.org/cc/Notice\" /><requires rdf:resource=\"http://web.resource.org/cc/Attribution\" /><prohibits rdf:resource=\"http://web.resource.org/cc/CommercialUse\" /><permits rdf:resource=\"http://web.resource.org/cc/DerivativeWorks\" /></License></rdf:RDF> --> <br/> This means you\"re free to copy and share these comics (but not to sell them). <a href=\"/license.html\">More details</a>.<br/> </div> </div> </div> </div> <div class=\"ft\"><div class=\"c\"></div></div> </div> </div> </div> </body> </html> '\n    except:\n        return \"\"\n    return \"\"\n\ndef get_next_target(page):\n    start_link = page.find('<a href=')\n    if start_link == -1: \n        return None, 0\n    start_quote = page.find('\"', start_link)\n    end_quote = page.find('\"', start_quote + 1)\n    url = page[start_quote + 1:end_quote]\n    return url, end_quote\n\ndef union(p,q):\n    for e in q:\n        if e not in p:\n            p.append(e)\n\n\ndef get_all_links(page):\n    links = []\n    while True:\n        url,endpos = get_next_target(page)\n        if url:\n            links.append(url)\n            page = page[endpos:]\n        else:\n            break\n    return links\n\ndef crawl_web(seed):\n    tocrawl = [seed]\n    crawled = []\n    while tocrawl:\n        page = tocrawl.pop()\n        if page not in crawled:\n\n", "type": "Nugget", "id": 190006}, {"nuggetType": "lecture", "name": "Len Quiz Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "5a068b89-0882-4e21-a831-fe800e9c29b8", "name": "cs101_unit3_15_s_len-quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJrUCww", "youtube_id": "OgLygGKBT2w", "youtube_state": "done", "path": "Course/cs101/Media/191002", "transcript": null, "id": 191002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYm9QLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/191003", "type": "Nugget", "id": 191003}, {"nuggetType": "program", "name": "Union", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYndQLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/191005", "suppliedCode": "#Define a procedure, union,\n#that takes as inputs two lists.\n#It should modify the first input\n#list to be the set union of the two\n#lists.\n\n#a = [1,2,3]\n#b = [2,4,6]\n#union(a,b)\n#a => [1,2,3,4,6]\n#b => [2,4,6]\n", "type": "Nugget", "id": 191005}, {"nuggetType": "lecture", "name": "Aliasing", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "1bea4d53-9d56-4f24-957e-05976c4436b7", "name": "cs101_unit3_10_l_aliasing", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJnUCww", "youtube_id": "2Rvf3Vhp3uc", "youtube_state": "done", "path": "Course/cs101/Media/191001", "transcript": null, "id": 191001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYgdwLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/192001", "type": "Nugget", "id": 192001}, {"nuggetType": "program", "name": "Index", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYhdwLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/192005", "suppliedCode": "#Define a procedure, find_element,\n#using index that takes as its\n#inputs a List and a value of any\n#type, and outputs the index of\n#the first element in the input\n#list that matches the value.\n\n#If there is no matching element,\n#output -1.\n\n#find_element([1,2,3],3) => 2\n\n#find_element(['alpha','beta'],'gamma') => -1\n\n", "type": "Nugget", "id": 192005}, {"nuggetType": "lecture", "name": "Loops On Lists Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "d4278f92-b86a-4746-9e26-d2d26a008b65", "name": "cs101_unit3_21_s_loops-on-lists", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNfuCgw", "youtube_id": "rJ5CeF0htGo", "youtube_state": "done", "path": "Course/cs101/Media/178007", "transcript": null, "id": 178007}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY6-MLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/193003", "type": "Nugget", "id": 193003}, {"nuggetType": "lecture", "name": "Measure Udacity Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "98598bd2-86d2-4d36-bf74-11d4f7abdad1", "name": "cs101_unit3_24_s_measure-udacity", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOzjCww", "youtube_id": "725qG9lSOZo", "youtube_state": "done", "path": "Course/cs101/Media/193004", "transcript": null, "id": 193004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY7eMLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/193005", "type": "Nugget", "id": 193005}, {"nuggetType": "lecture", "name": "Find Element Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "234f9a4e-76be-4f0f-977f-8a24358c17e7", "name": "cs101_unit3_25_s_find-element", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNjuCgw", "youtube_id": "4LuptOHjKK4", "youtube_state": "done", "path": "Course/cs101/Media/178008", "transcript": null, "id": 178008}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY7uMLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/193006", "type": "Nugget", "id": 193006}, {"nuggetType": "snippetQuiz", "name": "Crawl Web", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY8uMLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/193010", "type": "Nugget", "id": 193010}, {"nuggetType": "quiz", "name": "Secret Agent Man", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY0esLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/194001", "type": "Nugget", "id": 194001}, {"nuggetType": "quiz", "name": "Memory Hierarchy", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY0-sLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/194003", "type": "Nugget", "id": 194003}, {"nuggetType": "lecture", "name": "Crawl If", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "ce5f81d9-de3c-4d83-b368-90ecc1659338", "name": "cs101_unit3_41_qs_crawl-if", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOe8Cww", "youtube_id": "0TY5MKpyh_k", "youtube_state": "done", "path": "Course/cs101/Media/188007", "transcript": null, "id": 188007}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY1usLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/194006", "type": "Nugget", "id": 194006}, {"nuggetType": "lecture", "name": "List Operations", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "7140b9fd-2f5e-4d9e-a36e-c4e80d8959d0", "name": "cs101_unit3_13_l_list-operations", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKH7Cww", "youtube_id": "5MqHaOrwJh4", "youtube_state": "done", "path": "Course/cs101/Media/196001", "transcript": null, "id": 196001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYuvMLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/195002", "type": "Nugget", "id": 195002}, {"nuggetType": "lecture", "name": "How Computers Store Data", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "b5473bd8-3745-4faf-8f43-44743d8bf99a", "name": "cs101_unit3_17_l_how-computers-store-data", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJGGCww", "youtube_id": "phqQM6V6r8M", "youtube_state": "done", "path": "Course/cs101/Media/181009", "transcript": null, "id": 181009}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYovsLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/196002", "type": "Nugget", "id": 196002}, {"nuggetType": "lecture", "name": "Sum List Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "892fa470-80de-4282-8857-ad9a6d151fef", "name": "cs101_unit3_23_s_sum-list", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLHJDAw", "youtube_id": "5UrpdXTJgoI", "youtube_state": "done", "path": "Course/cs101/Media/206001", "transcript": null, "id": 206001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYo_sLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/196003", "type": "Nugget", "id": 196003}, {"nuggetType": "lecture", "name": "Finishing Get All Links", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "1d4785a8-90c8-48ec-a7a4-32aaad582df6", "name": "cs101_unit3_36_q_finishing-get-all-links", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLLMCww", "youtube_id": "uKcQLWJQrTk", "youtube_state": "done", "path": "Course/cs101/Media/190002", "transcript": null, "id": 190002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYpPsLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/196004", "type": "Nugget", "id": 196004}, {"nuggetType": "lecture", "name": "Finishing Get All Links Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "e2314cb6-3025-43b2-8dc5-f2006693438f", "name": "cs101_unit3_36_s_finishing-get-all-links", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLPMCww", "youtube_id": "eQgzHq_pWuU", "youtube_state": "done", "path": "Course/cs101/Media/190003", "transcript": null, "id": 190003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYpfsLDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/196005", "type": "Nugget", "id": 196005}, {"nuggetType": "lecture", "name": "List Addition And Length", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "ac989a0b-37a3-4684-bb1b-fdbea04ae9d9", "name": "cs101_unit3_14_l_list-addition-and-length", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGImDDAw", "youtube_id": "GKUrLZaGbKE", "youtube_state": "done", "path": "Course/cs101/Media/197001", "transcript": null, "id": 197001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYioMMDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/197002", "type": "Nugget", "id": 197002}, {"nuggetType": "lecture", "name": "Index Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "9f6893b3-592e-4a79-8d83-1fde60a6f98f", "name": "cs101_unit3_26_s_index", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJOGCww", "youtube_id": "NOXL4DImjis", "youtube_state": "done", "path": "Course/cs101/Media/181011", "transcript": null, "id": 181011}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYjYMMDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/197005", "type": "Nugget", "id": 197005}, {"nuggetType": "lecture", "name": "Len Quiz", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "f38d18c8-7856-4f98-9aa7-48df0e3a9368", "name": "cs101_unit3_15_q_len-quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPGKDAw", "youtube_id": "qzKukgt-th8", "youtube_state": "done", "path": "Course/cs101/Media/198001", "transcript": null, "id": 198001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY8ooMDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/198002", "type": "Nugget", "id": 198002}, {"nuggetType": "lecture", "name": "Measure Udacity", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "29d882db-4b73-43a8-97ed-02874f6d7a7f", "name": "cs101_unit3_24_p_measure-udacity", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGM7HCgw", "youtube_id": "sF4ozuwSCv0", "youtube_state": "done", "path": "Course/cs101/Media/173006", "transcript": null, "id": 173006}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY9IoMDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/198004", "type": "Nugget", "id": 198004}, {"nuggetType": "quiz", "name": "Append Quiz", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYwZoMDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/200001", "type": "Nugget", "id": 200001}, {"nuggetType": "lecture", "name": "Dram", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "e8cfaa41-5e6b-494f-8cf1-3cdb1f1bdd6c", "name": "cs101_unit3_18_l_dram", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIyDDAw", "youtube_id": "EqI-hPs8d-8", "youtube_state": "done", "path": "Course/cs101/Media/197004", "transcript": null, "id": 197004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYqaIMDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/201001", "type": "Nugget", "id": 201001}, {"nuggetType": "lecture", "name": "Collecting Links", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "dd451ebf-1b34-4d4d-bd5b-8cafdf8c05cd", "name": "cs101_unit3_31_l_collecting-links", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPy0Cww", "youtube_id": "K_ArZ2B8aiQ", "youtube_state": "done", "path": "Course/cs101/Media/187004", "transcript": null, "id": 187004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYq6IMDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/201003", "type": "Nugget", "id": 201003}, {"nuggetType": "lecture", "name": "Updating Links Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "646f7c10-b2bb-4a06-a4f4-032cb45d5634", "name": "cs101_unit3_35_s_updating-links", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJnRDAw", "youtube_id": "ajO81qzenSo", "youtube_state": "done", "path": "Course/cs101/Media/207001", "transcript": null, "id": 207001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYrKIMDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/201004", "type": "Nugget", "id": 201004}, {"nuggetType": "lecture", "name": "Hard Drives", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "0b7c8f31-4df2-4f77-be0b-c214f115e14b", "name": "cs101_unit3_20_q_hard-drives", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJzUCww", "youtube_id": "3JAcjwrTcW0", "youtube_state": "done", "path": "Course/cs101/Media/191004", "transcript": null, "id": 191004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYkqoMDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/202002", "type": "Nugget", "id": 202002}, {"nuggetType": "lecture", "name": "Updating Links", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "be5976de-7664-4138-92e2-fdf3cfb47554", "name": "cs101_unit3_35_qs_updating-links", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGP-xDAw", "youtube_id": "w4KWTfzdPgo", "youtube_state": "done", "path": "Course/cs101/Media/203007", "transcript": null, "id": 203007}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYlKoMDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/202004", "type": "Nugget", "id": 202004}, {"nuggetType": "lecture", "name": "Crawling Process Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "f773301f-7d3a-4b29-8758-c99397a94107", "name": "cs101_unit3_38_s_crawling-process", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOngDAw", "youtube_id": "njQIt0zVo5g", "youtube_state": "done", "path": "Course/cs101/Media/209001", "transcript": null, "id": 209001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYlaoMDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/202005", "type": "Nugget", "id": 202005}, {"nuggetType": "lecture", "name": "Memory Hierarchy", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "5f1eba7e-584a-4622-b320-6269d514c2c8", "name": "cs101_unit3_19_q_memory-hierarchy", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJGqDAw", "youtube_id": "uGHJ42x1SDc", "youtube_state": "done", "path": "Course/cs101/Media/202001", "transcript": null, "id": 202001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY-bEMDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/203001", "type": "Nugget", "id": 203001}, {"nuggetType": "lecture", "name": "Memory Hierarchy Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "b4c40aa8-e855-4e21-bbcc-15efa0f9c53e", "name": "cs101_unit3_19_s_memory-hierarchy", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPqxDAw", "youtube_id": "axg5oigoKIQ", "youtube_state": "done", "path": "Course/cs101/Media/203002", "transcript": null, "id": 203002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY-7EMDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/203003", "type": "Nugget", "id": 203003}, {"nuggetType": "lecture", "name": "Index", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "55453d1d-02db-4d8a-a082-e0c6944ea8f0", "name": "cs101_unit3_26_p_index", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGN-VCww", "youtube_id": "GwOFHuPMCpM", "youtube_state": "done", "path": "Course/cs101/Media/183007", "transcript": null, "id": 183007}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQY4rkMDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/204002", "type": "Nugget", "id": 204002}, {"nuggetType": "lecture", "name": "For Loops", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "c6e09bbd-a2c1-40d0-ae8c-2363d61b2893", "name": "cs101_unit3_22_l_for-loops", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIPcCww", "youtube_id": "JyWQCJfXuZU", "youtube_state": "done", "path": "Course/cs101/Media/192003", "transcript": null, "id": 192003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYycEMDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/205001", "type": "Nugget", "id": 205001}, {"nuggetType": "lecture", "name": "Pop Quiz", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "9244c947-9e79-4879-b23e-0c4c0839b674", "name": "cs101_unit3_30_q_pop-quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOS_Cgw", "youtube_id": "8z1ALITHkyg", "youtube_state": "done", "path": "Course/cs101/Media/172004", "transcript": null, "id": 172004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYysEMDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/205002", "type": "Nugget", "id": 205002}, {"nuggetType": "snippetQuiz", "name": "Starting Get All Links", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYsskMDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/206002", "type": "Nugget", "id": 206002}, {"nuggetType": "snippetQuiz", "name": "Crawl Web Loop", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYm9EMDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/207003", "type": "Nugget", "id": 207003}, {"nuggetType": "lecture", "name": "Finishing The Web Crawler", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "e462624a-02f7-4d26-9282-4422418663a6", "name": "cs101_unit3_37_l_finishing-the-web-crawler", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNXrCww", "youtube_id": "hAt0tRQ3LNs", "youtube_state": "done", "path": "Course/cs101/Media/194005", "transcript": null, "id": 194005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYgdkMDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/208001", "type": "Nugget", "id": 208001}, {"nuggetType": "lecture", "name": "Finishing Crawl Web Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQw", "media": {"dotsub_id": "aa4b4f8f-1b62-4093-81eb-20c35c47d602", "name": "cs101_unit3_42_s_finishing-crawl-web", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGN_uCgw", "youtube_id": "FaOzNXDRiT8", "youtube_state": "done", "path": "Course/cs101/Media/178015", "transcript": null, "id": 178015}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNLxCQwLEgZOdWdnZXQYgtkMDA", "path": "Course/cs101/CourseRev/feb2012/Unit/162002/Nugget/208002", "type": "Nugget", "id": 208002}]}, {"name": "Homework 3", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": true, "closedAt": "03/14/2012 00:00", "nuggetLayout": [[null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQYw5QODA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQY_JwTDA"}], [null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQYqpkPDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQYoeMTDA"}], [null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQYscAPDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQY098PDA"}], [null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQYmcgPDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQYs8YNDA"}], [null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQYgtAPDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQYkZIUDA"}], [null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQY6dcPDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQYy7UQDA"}], [null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQYuecPDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQYyakUDA"}], [null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQY4rAPDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQY2voTDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDww", "path": "Course/cs101/CourseRev/feb2012/Unit/252001", "open": false, "id": 252001, "nuggets": [{"nuggetType": "lecture", "name": "Greatest Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDww", "media": {"dotsub_id": "e6d28b2e-6938-4a6d-b62e-1e10f1456bb4", "name": "cs101_hw3_03_s_Greatest", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNn6Eww", "youtube_id": "okAtgJROqgs", "youtube_state": "done", "path": "Course/cs101/Media/327001", "transcript": null, "id": 327001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQYs8YNDA", "path": "Course/cs101/CourseRev/feb2012/Unit/252001/Nugget/222003", "type": "Nugget", "id": 222003}, {"nuggetType": "snippetQuiz", "name": "Lists", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQYw5QODA", "path": "Course/cs101/CourseRev/feb2012/Unit/252001/Nugget/232003", "type": "Nugget", "id": 232003}, {"nuggetType": "quiz", "name": "Mutating Lists", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQYqpkPDA", "path": "Course/cs101/CourseRev/feb2012/Unit/252001/Nugget/249002", "type": "Nugget", "id": 249002}, {"nuggetType": "program", "name": "Sudoku", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQY4rAPDA", "path": "Course/cs101/CourseRev/feb2012/Unit/252001/Nugget/252002", "suppliedCode": "#THREE GOLD STARS\n\n#Sudoku [http://en.wikipedia.org/wiki/Sudoku]\n#is a logic puzzle where a game\n#is defined by a partially filled\n#9 x 9 square of digits where each square\n#contains one of the digits 1,2,3,4,5,6,7,8,9.\n#For this question we will generalize\n#and simplify the game.\n\n\n#Define a procedure, check_sudoku,\n#that takes as input a square list\n#of lists representing an n x n\n#sudoku puzzle solution and returns\n#True if the input is a valid\n#sudoku square and returns False\n#otherwise.\n\n#A valid sudoku square satisfies these\n#two properties:\n\n#   1. Each column of the square contains\n#       each of the numbers from 1 to n exactly once.\n\n#   2. Each row of the square contains each\n#       of the numbers from 1 to n exactly once.\n\ncorrect = [[1,2,3],\n           [2,3,1],\n           [3,1,2]]\n\nincorrect = [[1,2,3,4],\n             [2,3,1,3],\n             [3,1,2,3],\n             [4,4,4,4]]\n\n\ndef check_sudoku():\n    \n", "type": "Nugget", "id": 252002}, {"nuggetType": "program", "name": "Product List", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQYscAPDA", "path": "Course/cs101/CourseRev/feb2012/Unit/252001/Nugget/254001", "suppliedCode": "#Define a procedure, product_list,\n#takes as input a list of numbers,\n#and returns a number that is\n#the result of multiplying all\n#those numbers together.\n\n#product_list([9]) => 9\n#product_list([1,2,3,4]) => 24\n\ndef product_list():\n    \n", "type": "Nugget", "id": 254001}, {"nuggetType": "program", "name": "Greatest", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQYmcgPDA", "path": "Course/cs101/CourseRev/feb2012/Unit/252001/Nugget/255001", "suppliedCode": "#Define a procedure, greatest,\n#that takes as input a list\n#of positive numbers, and\n#returns the greatest number\n#in that list. If the input\n#list is empty, the output\n#should be 0.\n\n#greatest([4,23,1]) => 23\n#greatest([]) => 0\n\ndef greatest():\n    \n\n\n    \n", "type": "Nugget", "id": 255001}, {"nuggetType": "program", "name": "Lists Of Lists", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQYgtAPDA", "path": "Course/cs101/CourseRev/feb2012/Unit/252001/Nugget/256002", "suppliedCode": "#Define a procedure, total_enrollment,\n#that takes as an input a list of elements,\n#where each element is a list containing\n#three elements: a university name,\n#the total number of students enrollect,\n#and the annual tuition.\n\n#The procedure should return two numbers,\n#not a string,\n#giving the total number of students\n#enrolled at all of the universities\n#in the list, and the total tuition\n#(which is the sum of the number\n#of students enrolled times the\n#tuition for each university).\n\nudacious_univs = [['Udacity',90000,0]]\n\nusa_univs = [ ['California Institute of Technology',2175,37704],\n              ['Harvard',19627,39849],\n              ['Massachusetts Institute of Technology',10566,40732],\n              ['Princeton',7802,37000],\n              ['Rice',5879,35551],\n              ['Stanford',19535,40569],\n              ['Yale',11701,40500]  ]\n\n#>>> print total_enrollment(udacious_univs)\n#(90000,0)\n\n#>>> print total_enrollment(usa_univs)\n#(77285,3058581079L)\n\ndef total_enrollment():\n    \n", "type": "Nugget", "id": 256002}, {"nuggetType": "program", "name": "Max Pages", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQY6dcPDA", "path": "Course/cs101/CourseRev/feb2012/Unit/252001/Nugget/257001", "suppliedCode": "#The web crawler we built at the\n#end of Unit 2 has some serious\n#flaws if we were going to use\n#it in a real crawler. One\n#problem is if we start with\n#a good seed page, it might\n#run for an extremely long\n#time (even forever, since the\n#number of URLS on the web is not\n#actually finite). The final two\n#questions of the homework ask\n#you to explore two different ways\n#to limit the pages that it can\n#crawl.\n\n\n#######\n\n\n#Modify the crawl_web procedure\n#to take a second parameter,\n#max_pages, that limits the\n#number of pages to crawl.\n#Your procedure should\n#terminate the crawl after\n#max_pages different pages\n#have been crawled, or when\n#there are no more pages to crawl.\n\n\n\n#The following definition of\n#get_page provides an interface\n#to the website found at\n#http://www.udacity.com/cs101x/index.html\n\n#The function output order does not affect grading.\n\n#crawl_web(\"http://www.udacity.com/cs101x/index.html\",1) => ['http://www.udacity.com/cs101x/index.html']\n#crawl_web(\"http://www.udacity.com/cs101x/index.html\",3) => ['http://www.udacity.com/cs101x/index.html', 'http://www.udacity.com/cs101x/flying.html', 'http://www.udacity.com/cs101x/walking.html']\n#crawl_web(\"http://www.udacity.com/cs101x/index.html\",500) => ['http://www.udacity.com/cs101x/index.html', 'http://www.udacity.com/cs101x/flying.html', 'http://www.udacity.com/cs101x/walking.html', 'http://www.udacity.com/cs101x/crawling.html', 'http://www.udacity.com/cs101x/kicking.html']\n\ndef get_page(url):\n    try:\n        if url == \"http://www.udacity.com/cs101x/index.html\":\n            return  '<html> <body> This is a test page for learning to crawl! <p> It is a good idea to  <a href=\"http://www.udacity.com/cs101x/crawling.html\">learn to crawl</a> before you try to  <a href=\"http://www.udacity.com/cs101x/walking.html\">walk</a> or  <a href=\"http://www.udacity.com/cs101x/flying.html\">fly</a>. </p> </body> </html> '\n        elif url == \"http://www.udacity.com/cs101x/crawling.html\":\n            return  '<html> <body> I have not learned to crawl yet, but I am quite good at  <a href=\"http://www.udacity.com/cs101x/kicking.html\">kicking</a>. </body> </html>'\n        elif url == \"http://www.udacity.com/cs101x/walking.html\":\n            return '<html> <body> I cant get enough  <a href=\"http://www.udacity.com/cs101x/index.html\">crawling</a>! </body> </html>'\n        elif url == \"http://www.udacity.com/cs101x/flying.html\":\n            return '<html> <body> The magic words are Squeamish Ossifrage! </body> </html>'\n    except:\n        return \"\"\n    return \"\"\n\ndef get_next_target(page):\n    start_link = page.find('<a href=')\n    if start_link == -1: \n        return None, 0\n    start_quote = page.find('\"', start_link)\n    end_quote = page.find('\"', start_quote + 1)\n    url = page[start_quote + 1:end_quote]\n    return url, end_quote\n\ndef union(p,q):\n    for e in q:\n        if e not in p:\n            p.append(e)\n\n\ndef get_all_links(page):\n    links = []\n    while True:\n        url,endpos = get_next_target(page)\n        if url:\n            links.append(url)\n            page = page[endpos:]\n        else:\n            break\n    return links\n\n\ndef crawl_web(seed,max_pages):\n    tocrawl = [seed]\n    crawled = []\n    while tocrawl:\n        page = tocrawl.pop()\n        if page not in crawled:\n            union(tocrawl, get_all_links(get_page(page)))\n            crawled.append(page)\n    return crawled\n    \n", "type": "Nugget", "id": 257001}, {"nuggetType": "lecture", "name": "Product List Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDww", "media": {"dotsub_id": "89ad309c-d8e4-4dd2-bfa1-4a6202946acf", "name": "cs101_hw3_02_s_Product-List", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGInrEww", "youtube_id": "RTPL87SBv6o", "youtube_state": "done", "path": "Course/cs101/Media/325001", "transcript": null, "id": 325001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQY098PDA", "path": "Course/cs101/CourseRev/feb2012/Unit/252001/Nugget/258003", "type": "Nugget", "id": 258003}, {"nuggetType": "program", "name": "Max Depth", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQYuecPDA", "path": "Course/cs101/CourseRev/feb2012/Unit/252001/Nugget/259001", "suppliedCode": "#The web crawler we built at the\n#end of Unit 2 has some serious\n#flaws if we were going to use\n#it in a real crawler. One\n#problem is if we start with\n#a good seed page, it might\n#run for an extremely long\n#time (even forever, since the\n#number of URLS on the web is not\n#actually finite). The final two\n#questions of the homework ask\n#you to explore two different ways\n#to limit the pages that it can\n#crawl.\n\n\n#######\n\n#TWO GOLD STARS#\n\n#Modify the crawl_web procedure\n#to take a second parameter,\n#max_depth, that limits the\n#minimum number of consecutive\n#links that would need to be followed\n#from the seed page to reach this\n#page. For example, if max_depth\n#is 0, the only page that should\n#be crawled is the seed page.\n#If max_depth is 1, the pages\n#that should be crawled are the\n#seed page and every page that links\n#to it directly. If max_depth is 2,\n#the crawl should also include all pages\n#that are linked to by these pages.\n\n\n#The following definition of\n#get_page provides an interface\n#to the website found at\n#http://www.udacity.com/cs101x/index.html\n\n#The function output order does not affect grading.\n\n#crawl_web(\"http://www.udacity.com/cs101x/index.html\",0) => ['http://www.udacity.com/cs101x/index.html']\n#crawl_web(\"http://www.udacity.com/cs101x/index.html\",1) => ['http://www.udacity.com/cs101x/index.html', 'http://www.udacity.com/cs101x/flying.html', 'http://www.udacity.com/cs101x/walking.html', 'http://www.udacity.com/cs101x/crawling.html']\n#crawl_web(\"http://www.udacity.com/cs101x/index.html\",50) => ['http://www.udacity.com/cs101x/index.html', 'http://www.udacity.com/cs101x/flying.html', 'http://www.udacity.com/cs101x/walking.html', 'http://www.udacity.com/cs101x/crawling.html', 'http://www.udacity.com/cs101x/kicking.html']\n\n\ndef get_page(url):\n    try:\n        if url == \"http://www.udacity.com/cs101x/index.html\":\n            return  '<html> <body> This is a test page for learning to crawl! <p> It is a good idea to  <a href=\"http://www.udacity.com/cs101x/crawling.html\">learn to crawl</a> before you try to  <a href=\"http://www.udacity.com/cs101x/walking.html\">walk</a> or  <a href=\"http://www.udacity.com/cs101x/flying.html\">fly</a>. </p> </body> </html> '\n        elif url == \"http://www.udacity.com/cs101x/crawling.html\":\n            return  '<html> <body> I have not learned to crawl yet, but I am quite good at  <a href=\"http://www.udacity.com/cs101x/kicking.html\">kicking</a>. </body> </html>'\n        elif url == \"http://www.udacity.com/cs101x/walking.html\":\n            return '<html> <body> I cant get enough  <a href=\"http://www.udacity.com/cs101x/index.html\">crawling</a>! </body> </html>'\n        elif url == \"http://www.udacity.com/cs101x/flying.html\":\n            return '<html> <body> The magic words are Squeamish Ossifrage! </body> </html>'\n    except:\n        return \"\"\n    return \"\"\n\ndef get_next_target(page):\n    start_link = page.find('<a href=')\n    if start_link == -1: \n        return None, 0\n    start_quote = page.find('\"', start_link)\n    end_quote = page.find('\"', start_quote + 1)\n    url = page[start_quote + 1:end_quote]\n    return url, end_quote\n\ndef union(p,q):\n    for e in q:\n        if e not in p:\n            p.append(e)\n\n\ndef get_all_links(page):\n    links = []\n    while True:\n        url,endpos = get_next_target(page)\n        if url:\n            links.append(url)\n            page = page[endpos:]\n        else:\n            break\n    return links\n\n\ndef crawl_web(seed,max_depth):\n    tocrawl = [seed]\n    crawled = []\n    while tocrawl:\n        page = tocrawl.pop()\n        if page not in crawled:\n            union(tocrawl, get_all_links(get_page(page)))\n            crawled.append(page)\n    return crawled\n    \n", "type": "Nugget", "id": 259001}, {"nuggetType": "lecture", "name": "Max Pages Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDww", "media": {"dotsub_id": "dd0c2489-b1ca-490f-ae9e-ddf52f7ef83d", "name": "cs101_hw3_05_s_Max-Pages", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPmZFAw", "youtube_id": "Mh0Rw9fV9UU", "youtube_state": "done", "path": "Course/cs101/Media/331001", "transcript": null, "id": 331001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQYy7UQDA", "path": "Course/cs101/CourseRev/feb2012/Unit/252001/Nugget/269003", "type": "Nugget", "id": 269003}, {"nuggetType": "lecture", "name": "Lists Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDww", "media": {"dotsub_id": "acee8391-91a5-4a69-b1cb-bd99c6c3b85e", "name": "cs101_hw3_00_s_Lists", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOnLEww", "youtube_id": "fzaaNzGDcCg", "youtube_state": "done", "path": "Course/cs101/Media/321001", "transcript": null, "id": 321001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQY_JwTDA", "path": "Course/cs101/CourseRev/feb2012/Unit/252001/Nugget/315004", "type": "Nugget", "id": 315004}, {"nuggetType": "lecture", "name": "Mutating Lists Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDww", "media": {"dotsub_id": "9e9885e1-ca78-4225-bb1a-276baf706805", "name": "cs101_hw3_01_s_Mutating-Lists", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLnbEww", "youtube_id": "kFEMVfPAP-A", "youtube_state": "done", "path": "Course/cs101/Media/323001", "transcript": null, "id": 323001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQYoeMTDA", "path": "Course/cs101/CourseRev/feb2012/Unit/252001/Nugget/324001", "type": "Nugget", "id": 324001}, {"nuggetType": "lecture", "name": "Sudoku Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDww", "media": {"dotsub_id": "479cc9a2-440b-481c-82b5-68094af29f94", "name": "cs101_hw3_07_s_Sudoku", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNTfDww", "youtube_id": "60wESSZRSp0", "youtube_state": "done", "path": "Course/cs101/Media/258004", "transcript": null, "id": 258004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQY2voTDA", "path": "Course/cs101/CourseRev/feb2012/Unit/252001/Nugget/327002", "type": "Nugget", "id": 327002}, {"nuggetType": "lecture", "name": "Lists Of Lists Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDww", "media": {"dotsub_id": "6fda454d-b8d5-4c77-abc7-0fc110e96d3c", "name": "cs101_hw3_04_s_Lists-Of-Lists", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKmKFAw", "youtube_id": "xk4fB0yfq58", "youtube_state": "done", "path": "Course/cs101/Media/329001", "transcript": null, "id": 329001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQYkZIUDA", "path": "Course/cs101/CourseRev/feb2012/Unit/252001/Nugget/330001", "type": "Nugget", "id": 330001}, {"nuggetType": "lecture", "name": "Max Depth Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDww", "media": {"dotsub_id": "b1a52da5-1fdc-4e7b-990a-726fbf43bf84", "name": "cs101_hw3_06_s_Max-Depth", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIrrEww", "youtube_id": "mZIZmjFMNH8", "youtube_state": "done", "path": "Course/cs101/Media/325002", "transcript": null, "id": 325002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOGwDwwLEgZOdWdnZXQYyakUDA", "path": "Course/cs101/CourseRev/feb2012/Unit/252001/Nugget/333001", "type": "Nugget", "id": 333001}]}, {"name": "Office Hours 3", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIv3DwwLEgZOdWdnZXQY-ZwTDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIv3DwwLEgZOdWdnZXQYyawTDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIv3DwwLEgZOdWdnZXQYsbQTDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIv3DwwLEgZOdWdnZXQYq5YQDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIv3DwwLEgZOdWdnZXQY-5wTDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIv3DwwLEgZOdWdnZXQYgcQTDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIv3DwwLEgZOdWdnZXQY5LMODA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIv3Dww", "path": "Course/cs101/CourseRev/feb2012/Unit/261003", "open": false, "id": 261003, "nuggets": [{"nuggetType": "lecture", "name": "Office Hours 7", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIv3Dww", "media": {"dotsub_id": "94ed3fd0-ded0-47ed-91ad-71f9f8b830a9", "name": "cs101_oo3_06_l_Office-Hours-7", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOOzDgw", "youtube_id": "OOUD2j-l7BI", "youtube_state": "done", "path": "Course/cs101/Media/236003", "transcript": "\ufeff1\n00:00:08,000 --> 00:00:11,000\nTalked about tests. >>Yeah. Hello?\n\n2\n00:00:15,000 --> 00:00:18,000\nHi. Can you try again? We couldn't quite hear.\n\n3\n00:00:26,000 --> 00:00:29,000\nYou may want to try typing your question.\n\n4\n00:00:42,000 --> 00:00:44,000\nLet's see.\n\n5\n00:00:56,000 --> 00:01:01,000\nI do see that a lot. What kind of math are we talking about when we talk cryptography.\n\n6\n00:01:01,000 --> 00:01:06,000\nOh, so what are the actual math background is expected for the cryptography class.\n\n7\n00:01:06,000 --> 00:01:08,000\nOr also what kind of math is related to computer science.\n\n8\n00:01:08,000 --> 00:01:10,000\nOkay, so two different questions.\n\n9\n00:01:10,000 --> 00:01:16,000\nSo in general for computer science most of the math that we use is discrete math,\n\n10\n00:01:16,000 --> 00:01:24,000\nand what \"discrete\" means is values that are in a well-defined set so the integers are discrete.\n\n11\n00:01:24,000 --> 00:01:27,000\nThere's an infinite number-- >>Countable. There's an infinite number. \n\n12\n00:01:27,000 --> 00:01:31,000\nThere's a countable number as opposed to the real numbers where \n\n13\n00:01:31,000 --> 00:01:34,000\nthere's an uncountable number of real numbers.\n\n14\n00:01:34,000 --> 00:01:39,000\nAnd so discrete things are things that are countable. You can count how many there are.\n\n15\n00:01:39,000 --> 00:01:44,000\nContinuous math like calculus comes up in some areas of computer science\n\n16\n00:01:44,000 --> 00:01:46,000\nbut not nearly as often as discrete math.\n\n17\n00:01:46,000 --> 00:01:49,000\nThe reason discrete math comes up is because in computers\n\n18\n00:01:49,000 --> 00:01:53,000\n we're representing things using the digital abstraction.\n\n19\n00:01:53,000 --> 00:01:58,000\nWe're representing things at the level in the computer as 0s or 1s where \n\n20\n00:01:58,000 --> 00:02:03,000\nalthough there is physical things that are analog that are storing the values,\n\n21\n00:02:03,000 --> 00:02:08,000\nwe're doing all the processing on them as discrete values.\n\n22\n00:02:08,000 --> 00:02:12,000\nMost of the math that is most fundamental to computer science is discrete math.\n\n23\n00:02:12,000 --> 00:02:14,000\nLogic is a big part of that. \n\n24\n00:02:14,000 --> 00:02:19,000\nYou've been doing logic. You've been using If and predicate tests.\n\n25\n00:02:19,000 --> 00:02:21,000\nYou've really been doing logic. \n\n26\n00:02:21,000 --> 00:02:25,000\nThere's a lot of formalism behind the logic that we haven't covered in CS 101,\n\n27\n00:02:25,000 --> 00:02:30,000\nand we will have a discrete math course that will be one of the courses that starts in June.\n\n28\n00:02:30,000 --> 00:02:33,000\nThe other kinds of math that are important--\n\n29\n00:02:33,000 --> 00:02:37,000\nfor cryptography we use probability a lot.\n\n30\n00:02:37,000 --> 00:02:42,000\nThat's probably the most important background to have for the cryptography course.\n\n31\n00:02:42,000 --> 00:02:49,000\nNumber theory is used a lot in cryptography, so things like modular arithmetic is used a lot.\n\n32\n00:02:49,000 --> 00:02:56,000\nThat's used in all of computing but becomes especially important in cryptography. What else?\n\n33\n00:02:56,000 --> 00:02:58,000\nSebastian's class uses a lot of linear algebra.\n\n34\n00:02:58,000 --> 00:03:05,000\nYes. Linear algebra is definitely the--Sebastian's class, robotics, AI, graphics, all use linear algebra a lot.\n\n35\n00:03:05,000 --> 00:03:10,000\nCryptography does use linear algebra but not the cryptography \n\n36\n00:03:10,000 --> 00:03:13,000\nthat I'm going to focus on in the course that I'm going to teach,\n\n37\n00:03:13,000 --> 00:03:16,000\nbut there are parts of cryptography that are based heavily on using lattices,\n\n38\n00:03:16,000 --> 00:03:20,000\nand that's all building on linear algebra.\n\n39\n00:03:29,000 --> 00:03:31,000\nWe did talk about homework 2.5 earlier.\n\n40\n00:03:31,000 --> 00:03:34,000\nAh, the Collatz conjecture question.\n\n41\n00:03:34,000 --> 00:03:36,000\nWhen we post this video on the website--\n\n42\n00:03:36,000 --> 00:03:41,000\nI'm surprised we haven't had more questions about that yet, but hopefully people saw  the discussion earlier.\n\n43\n00:03:44,000 --> 00:03:46,000\nWe'll post it on the website. >>Yes.\n\n44\n00:03:50,000 --> 00:03:52,000\nWhy numbers are immutable?\n\n45\n00:03:52,000 --> 00:03:58,000\nWhat was that? Oh, the question where you assign x plus 1 to x.\n\n46\n00:03:58,000 --> 00:04:00,000\nWhy does that create a new number?\n\n47\n00:04:00,000 --> 00:04:03,000\nDoes that create a new number?\n\n48\n00:04:03,000 --> 00:04:06,000\nIt's a good question to think about.\n\n49\n00:04:06,000 --> 00:04:12,000\nWhen we think about what programs mean, we have an abstract model saying, \n\n50\n00:04:12,000 --> 00:04:16,000\nwe're not modifying a number. We're creating a new number.\n\n51\n00:04:16,000 --> 00:04:19,000\nWe're not actually creating something new to build that number.\n\n52\n00:04:19,000 --> 00:04:21,000\nWe just need to store that number.\n\n53\n00:04:21,000 --> 00:04:27,000\nSo often the way we think about programs executing as  model doesn't correspond\n\n54\n00:04:27,000 --> 00:04:31,000\nvery closely to actual the actual resources that are used to execute the program.\n\n55\n00:04:31,000 --> 00:04:35,000\nAnother example, depending on how far you've seen the lectures, \n\n56\n00:04:35,000 --> 00:04:39,000\nthe range takes in two numbers.\n\n57\n00:04:39,000 --> 00:04:43,000\nWe think of that as producing a list between the two numbers, and that's what it does,\n\n58\n00:04:43,000 --> 00:04:46,000\nbut when it's used in a for loop, the Python interpreter is much smarter \n\n59\n00:04:46,000 --> 00:04:48,000\nand doesn't actually have to build that list.\n\n60\n00:04:48,000 --> 00:04:54,000\nThat's why it's faster to use the for with the range than to use the while loop with adding 1.\n\n61\n00:04:54,000 --> 00:04:59,000\nThese are things where it's helpful to have a simple model that shows how the program executes\n\n62\n00:04:59,000 --> 00:05:02,000\nand is correct in terms of the semantics and the meaning of the program.\n\n63\n00:05:02,000 --> 00:05:05,000\nIn terms of what's actually implemented, there are lots of ways\n\n64\n00:05:05,000 --> 00:05:10,000\n that things might be implemented that don't actually involve doing everything that our model says.\n\n65\n00:05:23,000 --> 00:05:25,000\nAccessing the Python interpretor.\n\n66\n00:05:25,000 --> 00:05:31,000\nOkay. The question is being able to access the interpreter at any time.\n\n67\n00:05:31,000 --> 00:05:35,000\nWe hope the sight will soon have a button that makes it easy\n\n68\n00:05:35,000 --> 00:05:39,000\n to pop up the interpreter and try things on your own.\n\n69\n00:05:39,000 --> 00:05:44,000\nThere are other ways to run Python, and depending on what kind of machine you have,\n\n70\n00:05:44,000 --> 00:05:46,000\nthat could be quite easy.\n\n71\n00:05:46,000 --> 00:05:52,000\nIf you have Mac and open a Mac shell and type \"python,\" you get a Python interpreter.\n\n72\n00:05:52,000 --> 00:05:54,000\nYou can try things yourself that way.\n\n73\n00:05:54,000 --> 00:05:59,000\nIf you don't have a Mac, you can go to Python.org and download the Python distribution,\n\n74\n00:05:59,000 --> 00:06:04,000\nand that includes a way to run Python that works on almost all platforms.\n\n75\n00:06:04,000 --> 00:06:10,000\nThere are lots of ways to run Python separately from the way we run it in class.\n\n76\n00:06:10,000 --> 00:06:15,000\nWe think have the embedded interpreter that you can run right in the browser is helpful,\n\n77\n00:06:15,000 --> 00:06:18,000\nand you don't need to install any software to do the class.\n\n78\n00:06:18,000 --> 00:06:20,000\nWe hope to make it easier to access that, \n\n79\n00:06:20,000 --> 00:06:24,000\nbut for now it's only when you have a quiz or homework problem that uses it.\n\n80\n00:06:24,000 --> 00:06:28,000\nThe next question is \"am I your student?\"\n\n81\n00:06:28,000 --> 00:06:31,000\nDo I answer that or do you answer it?\n\n82\n00:06:31,000 --> 00:06:37,000\nI don't know. Well, I'm not taking the Udacity course right now. That's true.\n\n83\n00:06:37,000 --> 00:06:44,000\nI am a student in Dave's security research group back at the University of Virginia.\n\n84\n00:06:44,000 --> 00:06:50,000\nPeter was a TA for me back at the University of Virginia and a student in my research group.\n\n85\n00:06:50,000 --> 00:06:56,000\nHe has done a lot of very exciting research on security, which is what my group does work on.\n\n86\n00:06:56,000 --> 00:07:00,000\nSince he managed to finish all his course requirements a semester early\n\n87\n00:07:00,000 --> 00:07:06,000\nis able to come out here to be a TA for this class, which is much more than a full time job.\n\n88\n00:07:06,000 --> 00:07:08,000\nYes. This is true.\n\n89\n00:07:08,000 --> 00:07:13,000\nI guess he's still sort of a student. >>Well, it's 9 o'clock and we're still here.\n\n90\n00:07:13,000 --> 00:07:18,000\nYes. >>It's kind of a 9-to-5-to-9 job.\n\n91\n00:07:18,000 --> 00:07:21,000\nThey do say like once a student, always a student.\n\n92\n00:07:21,000 --> 00:07:24,000\nIt's all about the mindset.\n\n93\n00:07:24,000 --> 00:07:28,000\nWe talked about the Udacity name earlier.\n\n94\n00:07:28,000 --> 00:07:30,000\nI think we should take one last question from a live person.\n\n95\n00:07:30,000 --> 00:07:32,000\nDoes anyone have a last question?\n\n96\n00:07:32,000 --> 00:07:36,000\nIf anyone has a last question-- >>My battery is about to die anyway.\n\n97\n00:07:36,000 --> 00:07:38,000\nI've got one question. >>Great. >>Sure. Go for it.\n\n98\n00:07:38,000 --> 00:07:42,000\nDo you plan on offering graduate level classes \n\n99\n00:07:42,000 --> 00:07:48,000\nor classes that would involve research and more interaction with students?\n\n100\n00:07:48,000 --> 00:07:50,000\nWe definitely plan to offer more advanced courses, \n\n101\n00:07:50,000 --> 00:07:56,000\nand the course Sebastian is teaching now is fairly graduate level, I think.\n\n102\n00:07:56,000 --> 00:08:03,000\nYeah, it's pretty hard. >>I think it's definitely much beyond what most undergraduate courses would be.\n\n103\n00:08:03,000 --> 00:08:08,000\nThe planned courses that we'll have in June are probably\n\n104\n00:08:08,000 --> 00:08:13,000\nthe 200 level courses and then some more advanced undergraduate-level courses.\n\n105\n00:08:13,000 --> 00:08:19,000\nWe'll definitely have a mix of more introductory and more advanced courses as we go forward.\n\n106\n00:08:19,000 --> 00:08:26,000\nA lot of the experience of doing a PhD is really an individual focused on a research problem,\n\n107\n00:08:26,000 --> 00:08:28,000\nworking very closely with a professor. >>For years.\n\n108\n00:08:28,000 --> 00:08:32,000\nThat's something that involves a lot of one-on-one interaction \n\n109\n00:08:32,000 --> 00:08:36,000\nand working to define a problem to work on. It's a very unique experience.\n\n110\n00:08:36,000 --> 00:08:42,000\nIt's not something that you can scale or offer without having many in-person meetings.\n\n111\n00:08:42,000 --> 00:08:49,000\nReally to do a PhD is a very different kind of teaching than the classes would be.\n\n112\n00:08:49,000 --> 00:08:53,000\nBut we think we can definitely offer and do plan to offer high-level graduate courses\n\n113\n00:08:53,000 --> 00:08:57,000\nthat will probably be a little bit later before we have many graduate courses,\n\n114\n00:08:57,000 --> 00:09:02,000\nbut we will have them.\n\n115\n00:09:02,000 --> 00:09:05,000\nWell, thanks everyone for joining the Hangout.\n\n116\n00:09:05,000 --> 00:09:10,000\nThis was an experiment it was good, more or less. We had some glitches getting started.\n\n117\n00:09:10,000 --> 00:09:14,000\nWe realize the people are in different timezones, so if we do this again,\n\n118\n00:09:14,000 --> 00:09:18,000\nwe'll schedule it at a time that more convenient for Africa and Europe,\n\n119\n00:09:18,000 --> 00:09:21,000\nand we'll move the time around to work well for different students.\n\n120\n00:09:21,000 --> 00:09:24,000\nBut thanks everyone who joined us, and thanks for the questions.\n\n121\n00:09:24,000 --> 00:09:29,000\nAnd we'll post them on the website if you came in late and want to see them.\n\n122\n00:09:29,000 --> 00:09:32,000\nOkay. Good night. Thank you.\n\n", "id": 236003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIv3DwwLEgZOdWdnZXQY5LMODA", "path": "Course/cs101/CourseRev/feb2012/Unit/261003/Nugget/236004", "type": "Nugget", "id": 236004}, {"nuggetType": "lecture", "name": "Office Hours 4", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIv3Dww", "media": {"dotsub_id": "38263ca4-f344-4a06-b040-6aa383d132b3", "name": "cs101_oo3_03_l_Office-Hours-4", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNLWEgw", "youtube_id": "WJxyxdK_-xA", "youtube_state": "done", "path": "Course/cs101/Media/306002", "transcript": "\ufeff1\n00:00:02,000 --> 00:00:04,000\nI don't know what the question there is.\n\n2\n00:00:04,000 --> 00:00:10,000\nOkay. >>People like it. >>Okay. Good. I'm glad Anisha likes it.\n\n3\n00:00:10,000 --> 00:00:15,000\nOkay. A question about the upcoming classes. >>I see this a lot.\n\n4\n00:00:15,000 --> 00:00:19,000\nWill they also be using Python? Yes, they will.\n\n5\n00:00:19,000 --> 00:00:23,000\nWe have four new classes that will be starting in April.\n\n6\n00:00:23,000 --> 00:00:26,000\nre-offering these two classes.\n\n7\n00:00:26,000 --> 00:00:30,000\nThree of the new courses are 200 level courses \n\n8\n00:00:30,000 --> 00:00:34,000\nthat if you complete 101 and understand what we do in 101, \n\n9\n00:00:34,000 --> 00:00:36,000\nyou'll be ready to take those.\n\n10\n00:00:36,000 --> 00:00:38,000\nI think they're three really, really exciting courses.\n\n11\n00:00:38,000 --> 00:00:42,000\nOne will be about building web applications, and that's going to be taught by Steve Huffman\n\n12\n00:00:42,000 --> 00:00:48,000\nwho was the cofounder of Reddit as well as Hipmunk, yes, which are two of the coolest websites.\n\n13\n00:00:48,000 --> 00:00:52,000\nIf you haven't checked those out, I encourage you to do so.\n\n14\n00:00:52,000 --> 00:00:55,000\nOne will be a programming languages course that will use the goal \n\n15\n00:00:55,000 --> 00:00:59,000\nof building a web browser to focus the course, and that's going to be take by Wes Weimer,\n\n16\n00:00:59,000 --> 00:01:02,000\nwho has been out here recording parts of that class this week.\n\n17\n00:01:02,000 --> 00:01:05,000\nThat's going to be a terrific class.\n\n18\n00:01:05,000 --> 00:01:09,000\nThe third of the 200 level courses is going to taught by Peter Norvig,\n\n19\n00:01:09,000 --> 00:01:15,000\nand he's really a legendary programmer and is going to look at ways of using Python\n\n20\n00:01:15,000 --> 00:01:20,000\nin more advanced that what we do in CS101 to solve a whole range of interesting problems.\n\n21\n00:01:20,000 --> 00:01:24,000\nThe fourth class that will be offered will also use Python in the course.\n\n22\n00:01:24,000 --> 00:01:27,000\nI'm going to teach an applied cryptography.\n\n23\n00:01:27,000 --> 00:01:29,000\nThat course is going to be a 300 level course.\n\n24\n00:01:29,000 --> 00:01:33,000\nIf you have fairly good confidence in math--\n\n25\n00:01:33,000 --> 00:01:37,000\nthe Python programming that we use will not go beyond what you've learned in 101.\n\n26\n00:01:37,000 --> 00:01:40,000\nYou would be able to take that class. \n\n27\n00:01:40,000 --> 00:01:44,000\nI'm going to assume a little bit more math background than you might have otherwise,\n\n28\n00:01:44,000 --> 00:01:49,000\nbut it won't assume any more programming background than you'll have from 101.\n\n29\n00:01:49,000 --> 00:01:53,000\nDoes anyone have a question?\n\n30\n00:01:53,000 --> 00:01:58,000\nFollowup to that one--f we take the three 200 level classes,\n\n31\n00:01:58,000 --> 00:02:02,000\n what would your goal be for what we would be able to do on our own once we've done that?\n\n32\n00:02:02,000 --> 00:02:06,000\nIf you take all of them at once? >>Well, once completing them.\n\n33\n00:02:06,000 --> 00:02:12,000\nOkay, yeah. If you take all of them at once I think you'll be very tired.\n\n34\n00:02:12,000 --> 00:02:16,000\nI commend anyone who wants to attempt to take all three at once.\n\n35\n00:02:16,000 --> 00:02:19,000\nYou're certainly allowed to and welcome to.\n\n36\n00:02:19,000 --> 00:02:23,000\nI think each one of those is going to be a substantial amount of work. >>They're time consuming.\n\n37\n00:02:23,000 --> 00:02:27,000\nSo I think it's going to be really hard to take all three, \n\n38\n00:02:27,000 --> 00:02:29,000\nbut they will be offered again.\n\n39\n00:02:29,000 --> 00:02:32,000\nOur plan is to keep offering the courses every 8-week cycle,\n\n40\n00:02:32,000 --> 00:02:36,000\nso whichever one or two you can take starting in April, \n\n41\n00:02:36,000 --> 00:02:40,000\nyou'll have a chance to take the other one starting in June.\n\n42\n00:02:40,000 --> 00:02:45,000\nEach of those courses has a different goal in terms of what material it covers.\n\n43\n00:02:45,000 --> 00:02:49,000\nDefinitely, if you take all three you'll be quite an experienced programmer.\n\n44\n00:02:49,000 --> 00:02:53,000\nYou'll really be able to build and understand complex programs.\n\n45\n00:02:53,000 --> 00:02:56,000\nThe goal for the web applications course is by the end of that course \n\n46\n00:02:56,000 --> 00:02:58,000\nyou'll be able to build a web application. \n\n47\n00:02:58,000 --> 00:03:01,000\nNot only you'll be able to--you will build one.\n\n48\n00:03:01,000 --> 00:03:05,000\nIt will be a blog. It will have user accounts. \n\n49\n00:03:05,000 --> 00:03:11,000\nYou'll learn how to use APIs to interact with other websites like Facebook API,\n\n50\n00:03:11,000 --> 00:03:14,000\nand you'll learn about how to make it scale, \n\n51\n00:03:14,000 --> 00:03:17,000\nwhich since Steve Huffman is teaching it, he's built websites that scale--\n\n52\n00:03:17,000 --> 00:03:20,000\nHas some experience in that. >>Many millions of users.\n\n53\n00:03:20,000 --> 00:03:22,000\nI think that will be really interesting.\n\n54\n00:03:22,000 --> 00:03:25,000\nIf you take the programming languages course, at the end of that \n\n55\n00:03:25,000 --> 00:03:32,000\nyou'll understand how to build an interpreter so it's focused around a browser,\n\n56\n00:03:32,000 --> 00:03:37,000\nbut the core part of a browser interprets the JavaScript programs that are in the browser.\n\n57\n00:03:37,000 --> 00:03:43,000\nJavaScript is a language fairly similar to Python that runs inside almost all web browsers today.\n\n58\n00:03:43,000 --> 00:03:48,000\nWhat you'll do in that class is build an interpreter that can handle not all of JavaScript\n\n59\n00:03:48,000 --> 00:03:53,000\nbut a core of JavaScript, enough to really understand how an interpreter would work.\n\n60\n00:03:53,000 --> 00:03:57,000\nYou'll also won't be building an interpreter for Python in that class. \n\n61\n00:03:57,000 --> 00:04:01,000\nbut you'll have a much better understand of what's going on behind the scenes\n\n62\n00:04:01,000 --> 00:04:05,000\nwhen you run a Python program from having built a JavaScript interpreter as well.\n\n63\n00:04:08,000 --> 00:04:10,000\nAnyone else have a question?\n\n64\n00:04:17,000 --> 00:04:22,000\nSo the question is for the CS101 class being offered in April,\n\n65\n00:04:22,000 --> 00:04:28,000\nwill it be a re-broadcast of the exact class or talk live again.\n\n66\n00:04:28,000 --> 00:04:32,000\nNone of the lectures are actually live now.\n\n67\n00:04:32,000 --> 00:04:35,000\nThere's a lot of editing that goes into producing the lectures.\n\n68\n00:04:35,000 --> 00:04:39,000\nWhen the course is re-offered, we'll be reusing a lot of the content.\n\n69\n00:04:39,000 --> 00:04:43,000\nProbably most of the lecture content will be reused.\n\n70\n00:04:43,000 --> 00:04:49,000\nThe things that we have ideas how to do better than we did this time we'll try to improve.\n\n71\n00:04:49,000 --> 00:04:55,000\nMany of the problems from the homework, some will be reused, some will have new problems.\n\n72\n00:04:55,000 --> 00:04:59,000\nOur goal is to take advantage of the content that we've developed \n\n73\n00:04:59,000 --> 00:05:02,000\nand to be able to use that to offer the course again.\n\n74\n00:05:02,000 --> 00:05:06,000\nBut it will still be an experience similar to this one where we do hope to have a group of students\n\n75\n00:05:06,000 --> 00:05:09,000\ngoing through the course together, doing the homeworks together.\n\n76\n00:05:09,000 --> 00:05:17,000\nWe haven't figured out exactly how to manage the forums that we have from this offering of the course\n\n77\n00:05:17,000 --> 00:05:20,000\nstarting new forums or having ways to access the old forums \n\n78\n00:05:20,000 --> 00:05:23,000\nand maybe have them scheduled along with the course.\n\n79\n00:05:23,000 --> 00:05:25,000\nWe don't plan on deleting the old forums.\n\n80\n00:05:25,000 --> 00:05:27,000\nRight. We don't want to delete the old forums. We have all this content.\n\n81\n00:05:27,000 --> 00:05:31,000\nBut we also don't want the students taking the April course\n\n82\n00:05:31,000 --> 00:05:35,000\n to see the answers to the questions before they have a chance to have their own discussions\n\n83\n00:05:35,000 --> 00:05:38,000\nand figure them out themselves.\n\n84\n00:05:38,000 --> 00:05:42,000\nWe haven't figured out exactly how we're going to do that, but well try to make it so\n\n85\n00:05:42,000 --> 00:05:46,000\nit feels like students are going through a class together that's a real class\n\n86\n00:05:46,000 --> 00:05:50,000\nrunning at the same time but still taking advantage of all the content\n\n87\n00:05:50,000 --> 00:05:54,000\nand being able to improve the content based on what we've learned from all of you\n\n88\n00:05:54,000 --> 00:05:56,000\nfrom taking it this time.\n\n89\n00:05:58,000 --> 00:06:02,000\nI have another grading question. >>Sure. >>Okay.\n\n90\n00:06:02,000 --> 00:06:06,000\nThis may sound silly, but what exactly is the purpose of the grading?\n\n91\n00:06:06,000 --> 00:06:10,000\nIs it just for motivation for those of us who are motivated by it?\n\n92\n00:06:10,000 --> 00:06:15,000\nThis is a question about what's the purpose of the grading.\n\n93\n00:06:15,000 --> 00:06:19,000\nIt is really up to you if you care about the grading.\n\n94\n00:06:19,000 --> 00:06:23,000\nWe're providing grading. For many students I think that makes it feel more like a real class.\n\n95\n00:06:23,000 --> 00:06:25,000\nIt's a motivating factor.\n\n96\n00:06:25,000 --> 00:06:29,000\nIt is the case that students do the homeworks on the deadlines and take the exam,\n\n97\n00:06:29,000 --> 00:06:32,000\nthe ones who get above the threshold will get a certificate ,\n\n98\n00:06:32,000 --> 00:06:37,000\nand based on how well they do, they can get a certificate that indicates that.\n\n99\n00:06:37,000 --> 00:06:42,000\nWe also have a long-term plan--at least long term meaning this year--\n\n100\n00:06:42,000 --> 00:06:48,000\nto have enough courses that you'd be able to do something comparable to a top-level university degree,\n\n101\n00:06:48,000 --> 00:06:50,000\ntaking courses through Udacity.\n\n102\n00:06:50,000 --> 00:06:53,000\nStudents who are doing that because they want to build a transcript,\n\n103\n00:06:53,000 --> 00:06:57,000\nthey want to be able to get a job, they want to have something they can show to an employer\n\n104\n00:06:57,000 --> 00:06:59,000\nthat shows here's what I've learned. \n\n105\n00:06:59,000 --> 00:07:03,000\nThis demonstrates my ability from having grades in these classes.\n\n106\n00:07:03,000 --> 00:07:06,000\nHaving grades that are meaningful will help us do that.\n\n107\n00:07:06,000 --> 00:07:12,000\nSo I see a lot of stress on the forums and in emails to me about the grades.\n\n108\n00:07:12,000 --> 00:07:15,000\nIf you're taking the class because you want to learn to program, \n\n109\n00:07:15,000 --> 00:07:18,000\nand you're not worried about that, that's perfectly okay.\n\n110\n00:07:18,000 --> 00:07:21,000\nI hope people don't get too stressed out about the grades.\n\n111\n00:07:21,000 --> 00:07:23,000\nIt's really about learning.\n\n112\n00:07:23,000 --> 00:07:28,000\nBut for students who do want to pursue something like a complete CS degree\n\n113\n00:07:28,000 --> 00:07:31,000\nor take a large set of courses with us and build a transcript,\n\n114\n00:07:31,000 --> 00:07:35,000\nthen the grades will start to be meaningful and valuable.\n\n115\n00:07:35,000 --> 00:07:39,000\nProbably from 101, that's not going to be enough to have a transcript.\n\n116\n00:07:39,000 --> 00:07:46,000\nFor at least most employers, having just had the one class the grading of that class won't matter too much.\n\n117\n00:07:46,000 --> 00:07:50,000\nBut I think it is a motivator, and I hope people will value the certificates that they get,\n\n118\n00:07:50,000 --> 00:07:53,000\nbecause it is a lot of work to do while in the class.\n\n119\n00:07:53,000 --> 00:07:56,000\nWe definitely appreciate your efforts and want to recognize them.\n\n120\n00:08:08,000 --> 00:08:13,000\nSorry. Couldn't hear you. >>I had the audio muted, so could you repeat your question?\n\n121\n00:08:13,000 --> 00:08:21,000\nOh, it's okay. What programming languages will you be offering courses in after this one?\n\n122\n00:08:21,000 --> 00:08:24,000\nIt's a good question. I don't have an answer to that yet.\n\n123\n00:08:24,000 --> 00:08:28,000\nWe're working on planning the June courses.\n\n124\n00:08:28,000 --> 00:08:31,000\nWe don't have anything ready to announce about those courses yet.\n\n125\n00:08:31,000 --> 00:08:35,000\nWe will definitely eventually have some courses that use languages other than Python,\n\n126\n00:08:35,000 --> 00:08:39,000\nbut all the courses we have planned now are still using Python.\n\n", "id": 306002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIv3DwwLEgZOdWdnZXQYq5YQDA", "path": "Course/cs101/CourseRev/feb2012/Unit/261003/Nugget/265003", "type": "Nugget", "id": 265003}, {"nuggetType": "lecture", "name": "Office Hours 1", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIv3Dww", "media": {"dotsub_id": "66e02603-b7eb-4117-ac8b-61d14d810d6d", "name": "cs101_oo3_00_l_Office-Hours-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIz6Dgw", "youtube_id": "ArTngcG0Ljs", "youtube_state": "done", "path": "Course/cs101/Media/245004", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nThere have been a lot of questions about this problem from homework 2\n\n2\n00:00:05,000 --> 00:00:08,000\nabout whether this loop would ever terminate.\n\n3\n00:00:08,000 --> 00:00:12,000\nIn particular, the third one where knowing whether or not the loop would terminate\n\n4\n00:00:12,000 --> 00:00:17,000\ndepended on the Collatz conjecture, which is an open mathematical problem.\n\n5\n00:00:17,000 --> 00:00:21,000\nThis was definitely a hard question to try to make sense out of \n\n6\n00:00:21,000 --> 00:00:24,000\nbased on what we've seen just in the class, but my hope was that that question\n\n7\n00:00:24,000 --> 00:00:28,000\nwould get you thinking about several important things in computer science,\n\n8\n00:00:28,000 --> 00:00:31,000\nand I think it did from the discussion.\n\n9\n00:00:31,000 --> 00:00:34,000\nIt may have got you thinking about them in a more frustrating way than I would've hoped,\n\n10\n00:00:34,000 --> 00:00:38,000\nand I'm sorry for people who found this very frustrating.\n\n11\n00:00:38,000 --> 00:00:40,000\nBut there is some important lessons to draw from that.\n\n12\n00:00:40,000 --> 00:00:44,000\nThe first one is that you can never make a conclusion about \n\n13\n00:00:44,000 --> 00:00:48,000\nhow a program will behave in all cases just based on experiments.\n\n14\n00:00:48,000 --> 00:00:52,000\nAny interesting program has an infinite number of inputs\n\n15\n00:00:52,000 --> 00:00:55,000\n like that loop where there are infinitely many different numbers,\n\n16\n00:00:55,000 --> 00:01:00,000\nand you can't try it it for all the integers because there are infinitely many of them.\n\n17\n00:01:00,000 --> 00:01:04,000\nYou can do experiments running it for a bunch of them and see that it always seems to stop.\n\n18\n00:01:04,000 --> 00:01:06,000\nThe loop always finishes for all the ones you try, \n\n19\n00:01:06,000 --> 00:01:09,000\nbut that's not enough to know that it always finishes for all input.\n\n20\n00:01:09,000 --> 00:01:13,000\nThat's a very different claim than what you can show by any experiment.\n\n21\n00:01:13,000 --> 00:01:18,000\nThe other point that I hope that question made, and I hope without too much frustration,\n\n22\n00:01:18,000 --> 00:01:21,000\nbut I understand especially if you didn't find the hint that\n\n23\n00:01:21,000 --> 00:01:24,000\n this was a very hard thing to figure out what to do with,\n\n24\n00:01:24,000 --> 00:01:28,000\nwas that reasoning about code and especially reasoning about properties\n\n25\n00:01:28,000 --> 00:01:32,000\nthat depend on following paths through a code is very difficult.\n\n26\n00:01:32,000 --> 00:01:36,000\nIt's not just difficult. It's been proven that it's impossible in general.\n\n27\n00:01:36,000 --> 00:01:39,000\nThere is no way in general to take some code \n\n28\n00:01:39,000 --> 00:01:42,000\nand answer this question of whether that code always finishes.\n\n29\n00:01:42,000 --> 00:01:45,000\nFor some code there is a way to answer that question,\n\n30\n00:01:45,000 --> 00:01:49,000\nand that was the case for the other two parts of that question.\n\n31\n00:01:49,000 --> 00:01:52,000\nFor the third one, even though it looked like fairly simple code \n\n32\n00:01:52,000 --> 00:01:55,000\nand didn't use anything that we haven't seen in class so far \n\n33\n00:01:55,000 --> 00:01:58,000\nthat you couldn't understand from the class.\n\n34\n00:01:58,000 --> 00:02:03,000\nEven for that simple code, determining whether or not that code would terminate on some input\n\n35\n00:02:03,000 --> 00:02:06,000\nis equivalent to solving some known open mathematical problem\n\n36\n00:02:06,000 --> 00:02:09,000\nthat no one knows the answer to.\n\n37\n00:02:09,000 --> 00:02:12,000\nThere are other cases where we can actually prove that it's impossible\n\n38\n00:02:12,000 --> 00:02:17,000\nto determine in general whether some code has some property or not.\n\n39\n00:02:17,000 --> 00:02:20,000\nThose are things we're not going to get into too deeply in this class.\n\n40\n00:02:20,000 --> 00:02:23,000\nThere are things that am glad that you're starting to think about,\n\n41\n00:02:23,000 --> 00:02:25,000\nand we will continue t o encounter them.\n\n42\n00:02:25,000 --> 00:02:29,000\nI hope you'll be asking these questions and be disturbed enough by these questions\n\n43\n00:02:29,000 --> 00:02:34,000\nthat you'll want to take a theory class later that will really get into the reason behind this\n\n44\n00:02:34,000 --> 00:02:37,000\nand understand the theory of what kinds of things computers can solve\n\n45\n00:02:37,000 --> 00:02:40,000\nand the things that they can't solve.\n\n46\n00:02:40,000 --> 00:02:45,000\nThat was the intent of that question, and I'm sorry people found it frustrating,\n\n47\n00:02:45,000 --> 00:02:48,000\nbut I hope you also learned a lot from that and started to think about problems the way\n\n48\n00:02:48,000 --> 00:02:51,000\ncomputer scientists think about problems by doing that.\n\n49\n00:02:51,000 --> 00:02:57,000\nI think we do have some people on our hangout now.\n\n50\n00:02:57,000 --> 00:02:59,000\nHello. >>Hi.\n\n51\n00:02:59,000 --> 00:03:04,000\nSo our connection with the Hangout has been a little flaky, so hopefully we won't lose it again.\n\n52\n00:03:04,000 --> 00:03:07,000\nWelcome. >>Hi. >>Do you have a question? \n\n53\n00:03:07,000 --> 00:03:11,000\nFirst, if you would like to introduce yourself and tell us where you're from?\n\n54\n00:03:11,000 --> 00:03:17,000\nMy name is Michelle. I'm from upstate New York.\n\n55\n00:03:17,000 --> 00:03:23,000\nHi Michelle. It must be pretty late there. >>It is. It's about my bedtime.\n\n56\n00:03:23,000 --> 00:03:27,000\nBut I'm just actually starting today with the course,\n\n57\n00:03:27,000 --> 00:03:30,000\nbecause I flaked out a little bit.\n\n58\n00:03:30,000 --> 00:03:33,000\nOkay. Well, welcome. It's not too late to get started.\n\n59\n00:03:33,000 --> 00:03:37,000\nThan you. So I don't really have any questions.\n\n60\n00:03:37,000 --> 00:03:42,000\nI just kind of wanted to see what was going on and try the Hangout.\n\n61\n00:03:42,000 --> 00:03:45,000\nOkay. Well, we're trying the Hangout too. >>Yeah, this is an experiment.\n\n62\n00:03:45,000 --> 00:03:50,000\nIt's an experiment, and hopefully things will work. \n\n63\n00:03:50,000 --> 00:03:55,000\nIt seems to crash every time there's more than about 3 or 4 people that join,\n\n64\n00:03:55,000 --> 00:03:58,000\nso we'll see if it works better this time.\n\n65\n00:03:58,000 --> 00:04:00,000\nAnd where are you located? \n\n66\n00:04:00,000 --> 00:04:06,000\nWe're in Palo Alto, California. >>Oh, okay. >>More people?\n\n67\n00:04:06,000 --> 00:04:08,000\nWe have two more people here now.\n\n68\n00:04:08,000 --> 00:04:12,000\nWell, while we're waiting, I guess we can go to another question from the forums.\n\n69\n00:04:12,000 --> 00:04:16,000\nOkay. Oh, we lost Luke.\n\n70\n00:04:16,000 --> 00:04:19,000\nAll right. So back to the forums. We talked about the Collatz conjecture.\n\n71\n00:04:19,000 --> 00:04:27,000\nEveryone had fun with that. Let's see.\n\n72\n00:04:39,000 --> 00:04:41,000\nA lot of these are suggestions. \n\n73\n00:04:41,000 --> 00:04:48,000\nOkay. Well, we could discuss some of the suggestions.\n\n74\n00:04:48,000 --> 00:04:51,000\nHomework is hard. >>More discussion about the Collatz conjecture.\n\n75\n00:04:51,000 --> 00:04:55,000\nI think there's almost an infinite amount of discussion on the Collatz conjecture.\n\n76\n00:04:55,000 --> 00:05:00,000\nWanting live office hours. >>Well, that's what we're doing. >>We're trying.\n\n77\n00:05:00,000 --> 00:05:05,000\nA Google Hangout could work.\n\n78\n00:05:05,000 --> 00:05:07,000\nWhat else do we have?\n\n79\n00:05:07,000 --> 00:05:10,000\nThe Python reference. Do you know what the status of that is?\n\n80\n00:05:10,000 --> 00:05:12,000\nThere is a Python reference posted for each unit.\n\n81\n00:05:12,000 --> 00:05:16,000\nThere was a bit of a delay getting it posted for Unit 2,\n\n82\n00:05:16,000 --> 00:05:20,000\nbut there are Python references posted for both Unit 2 and Unit 3 now.\n\n83\n00:05:20,000 --> 00:05:25,000\nThey include everything that's been covered in the class up to an including that unit.\n\n84\n00:05:25,000 --> 00:05:29,000\nSo the Unit 3.1 includes 1, 2, and 3.\n\n85\n00:05:29,000 --> 00:05:31,000\nWhere do we find those references?\n\n86\n00:05:31,000 --> 00:05:35,000\nI believe they are in the supplemental materials. Is that correct?\n\n87\n00:05:35,000 --> 00:05:40,000\nYes. Below the video and the unit, you click on the supplemental materials tab.\n\n88\n00:05:40,000 --> 00:05:48,000\nYou will see course notes for that section and also there's likes to the reference materials\n\n89\n00:05:48,000 --> 00:05:51,000\nrelating specifically to Python.\n\n", "id": 245004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIv3DwwLEgZOdWdnZXQY-ZwTDA", "path": "Course/cs101/CourseRev/feb2012/Unit/261003/Nugget/315001", "type": "Nugget", "id": 315001}, {"nuggetType": "lecture", "name": "Office Hours 5", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIv3Dww", "media": {"dotsub_id": "de77248f-5de2-4890-ba3b-374535ce6e7c", "name": "cs101_oo3_04_l_Office-Hours-5", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPqcEww", "youtube_id": "ZlK2kEOLZq0", "youtube_state": "done", "path": "Course/cs101/Media/315002", "transcript": "\ufeff1\n00:00:01,000 --> 00:00:06,000\nQuestion on homework autograder about whether or not it parses like feedback on that.\n\n2\n00:00:06,000 --> 00:00:11,000\nOh, to get more feedback? Yeah. This is a good question.\n\n3\n00:00:11,000 --> 00:00:17,000\nFor the quizzes in lecture you get immediate feedback, and we think that's useful. \n\n4\n00:00:17,000 --> 00:00:21,000\nFor the homeworks, you don't get any feedback until after the deadline\n\n5\n00:00:21,000 --> 00:00:25,000\nThis is something we're thinking about how to provide some feedback on the homeworks\n\n6\n00:00:25,000 --> 00:00:30,000\nbut still make them different from the quizzes in lecture.\n\n7\n00:00:30,000 --> 00:00:37,000\nYou're getting some feedback but not getting the answer until after the deadline.\n\n8\n00:00:37,000 --> 00:00:40,000\nUntil we have something like that in place, though, it's important that--\n\n9\n00:00:40,000 --> 00:00:43,000\nI've seen a lot of people that edit it in an external editor, \n\n10\n00:00:43,000 --> 00:00:46,000\nand then they paste it into our programming environment.\n\n11\n00:00:46,000 --> 00:00:52,000\nIt can mess with the formatting, and Python is one of those languages where formatting matters.\n\n12\n00:00:52,000 --> 00:00:57,000\nRight. It's a good idea to run your code when you submit the homework to see the output.\n\n13\n00:00:57,000 --> 00:01:01,000\nI got three questions wrong in homework 2 for not doing that.\n\n14\n00:01:01,000 --> 00:01:06,000\nIt's a good idea for everyone.\n\n15\n00:01:06,000 --> 00:01:11,000\nIt's good the grading policy drops one homework. >>Yeah. You're going to need that one.\n\n16\n00:01:11,000 --> 00:01:15,000\nI think I'll do a canned exam, but we'll see.\n\n17\n00:01:15,000 --> 00:01:21,000\nSo we have are you enjoying teaching a massive online open course?\n\n18\n00:01:21,000 --> 00:01:24,000\nOkay. So Michelle is asking if it's my first experience in a MOOC. It is my first experience in a MOOC.\n\n19\n00:01:24,000 --> 00:01:29,000\nThe largest course I taught before this one had about 100 students, less than 100 students in it.\n\n20\n00:01:29,000 --> 00:01:36,000\nIt was for CS? >>It was actually the data structures and data representation class.\n\n21\n00:01:36,000 --> 00:01:41,000\nThe intro CS course that I teach at UVA last semester had 50 students in it.\n\n22\n00:01:41,000 --> 00:01:45,000\nThat's been a typical size.\n\n23\n00:01:45,000 --> 00:01:47,000\nThe first time I taught I had 9 students.\n\n24\n00:01:47,000 --> 00:01:50,000\nSo the great thing in teaching small classes is getting to know all the students\n\n25\n00:01:50,000 --> 00:01:55,000\nand being able to understand at that level what everyone was doing,\n\n26\n00:01:55,000 --> 00:02:01,000\nbut it's really terrific to be able to teach a class like this and have many thousands of students\n\n27\n00:02:01,000 --> 00:02:05,000\nfrom all around the world and the range of backgrounds.\n\n28\n00:02:05,000 --> 00:02:09,000\nThere was a post in the forum about the background that several hundred of you posted in\n\n29\n00:02:09,000 --> 00:02:12,000\nand it's really interesting for me to see that and to see \n\n30\n00:02:12,000 --> 00:02:15,000\nhow diverse the group of students that we have in the class is. >>It's inspiring.\n\n31\n00:02:15,000 --> 00:02:20,000\nIt's inspiring and it is an opportunity that I think we're very humbled by and I'm humbled by\n\n32\n00:02:20,000 --> 00:02:25,000\nto have a chance to introduce this many people to computer science.\n\n33\n00:02:25,000 --> 00:02:29,000\nI hope we don't lose people, but I hope people are enjoying it and getting a lot out of it.\n\n34\n00:02:29,000 --> 00:02:34,000\nIt's really gratifying to me to see what's happening and see how many people are contributing\n\n35\n00:02:34,000 --> 00:02:37,000\nin the forums and other ways to make the class better.\n\n36\n00:02:37,000 --> 00:02:41,000\nIt is a really wonderful and amazing experience.\n\n37\n00:02:41,000 --> 00:02:45,000\nWe have a question from Graham. How did you learn to firm program?\n\n38\n00:02:45,000 --> 00:02:48,000\nI think it is how did you both, so you can answer this as well.\n\n39\n00:02:48,000 --> 00:02:54,000\nI guess I'll go first, because I learned earlier since Peter was not alive when I learned to program.\n\n40\n00:02:54,000 --> 00:02:59,000\nI got started in programming when I was in elementary school. >>What?\n\n41\n00:02:59,000 --> 00:03:01,000\nMy school got a Teletype computer.\n\n42\n00:03:01,000 --> 00:03:05,000\nThis was a computer where it had paper and it was printing on it.\n\n43\n00:03:05,000 --> 00:03:10,000\nThe year after that we got Apple 2s, and you had colors in screens.\n\n44\n00:03:10,000 --> 00:03:15,000\nBut my first experience was with this Teletype computer that you called in \"put a phone\"\n\n45\n00:03:15,000 --> 00:03:19,000\non coupler, and you could log into the computer--\n\n46\n00:03:19,000 --> 00:03:21,000\nDid you have to have a trial CD?\n\n47\n00:03:21,000 --> 00:03:25,000\nThere was no trial CD. You just called in.\n\n48\n00:03:25,000 --> 00:03:30,000\nThe cool thing about computing in those days was the code was written in a language called \"Basic,\"\n\n49\n00:03:30,000 --> 00:03:32,000\nand all the programs you could see what they were.\n\n50\n00:03:32,000 --> 00:03:35,000\nI started playing these games on the computer. \n\n51\n00:03:35,000 --> 00:03:41,000\nI wanted to do better in the games, because I was trying to win the games,\n\n52\n00:03:41,000 --> 00:03:44,000\nand you could type \"list\" and see all the code,\n\n53\n00:03:44,000 --> 00:03:46,000\nand it didn't make much sense to me at first, \n\n54\n00:03:46,000 --> 00:03:50,000\nbut I started to look at it and try to understand what's going on and tried to change the code.\n\n55\n00:03:50,000 --> 00:03:53,000\nYou were cheating? >>I was cheating in the games.\n\n56\n00:03:53,000 --> 00:04:00,000\nOnce we got Apple 2s you could start to do cool things with colors and make pictures. It got really fun.\n\n57\n00:04:00,000 --> 00:04:02,000\nThat's how I got started in programming.\n\n58\n00:04:02,000 --> 00:04:06,000\nI got started with little Legos.\n\n59\n00:04:06,000 --> 00:04:09,000\nThere were these Lego sets--they're called Lego Mindstorm.\n\n60\n00:04:09,000 --> 00:04:13,000\nSo basically it's a bunch of Legos with a couple motors, \n\n61\n00:04:13,000 --> 00:04:17,000\nand it's hooked up to a little processing unit that also powers the motors,\n\n62\n00:04:17,000 --> 00:04:20,000\nand you just hook it up to a computer.\n\n63\n00:04:20,000 --> 00:04:23,000\nThe programming environment is block-based.\n\n64\n00:04:23,000 --> 00:04:27,000\nYou just have a little Lego block that you do to do the command,\n\n65\n00:04:27,000 --> 00:04:29,000\nso it might be move forward for 30 seconds.\n\n66\n00:04:29,000 --> 00:04:32,000\nThings like a conditional that's like an if statement.\n\n67\n00:04:32,000 --> 00:04:34,000\nThat's really the first thing I did programming.\n\n68\n00:04:34,000 --> 00:04:40,000\nI built a little robot that crawled around on my floor and would pick up \"trash.\"\n\n69\n00:04:40,000 --> 00:04:42,000\nIt couldn't pick up anything that heavy. Bits of paper.\n\n70\n00:04:42,000 --> 00:04:45,000\nCouple it tell whether something was trash or not? >>No, no.\n\n71\n00:04:45,000 --> 00:04:48,000\nIt would basically patrol my floor until I threw things on the ground,\n\n72\n00:04:48,000 --> 00:04:51,000\nwhich was often, I suppose.\n\n73\n00:04:51,000 --> 00:04:53,000\nIt's called the Roomba now.\n\n74\n00:04:53,000 --> 00:04:58,000\nYeah, it's called a Roomba. They beat me to it. Dang. \n\n75\n00:04:58,000 --> 00:05:04,000\nI was always interesting in playing with the stuff--kind of building computers and things like that.\n\n76\n00:05:04,000 --> 00:05:10,000\nThen I went to a summer camp in middle school where we programmed in C, \n\n77\n00:05:10,000 --> 00:05:13,000\nand programming in C is not the funnest thing.\n\n78\n00:05:13,000 --> 00:05:16,000\nYeah. Programming in Python is a lot more fun than the languages.\n\n79\n00:05:16,000 --> 00:05:19,000\nYeah. You kids have it so easy.\n\n80\n00:05:19,000 --> 00:05:24,000\nWhen something breaks, it tells you what happened. Not in C.\n\n81\n00:05:27,000 --> 00:05:31,000\nDo we have any other questions?\n\n82\n00:05:34,000 --> 00:05:36,000\nOkay. We can go to the forums.\n\n83\n00:05:36,000 --> 00:05:38,000\nDo you want to pick one from the--\n\n84\n00:05:38,000 --> 00:05:41,000\nLet's see. We've got many pages of this.\n\n", "id": 315002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIv3DwwLEgZOdWdnZXQY-5wTDA", "path": "Course/cs101/CourseRev/feb2012/Unit/261003/Nugget/315003", "type": "Nugget", "id": 315003}, {"nuggetType": "lecture", "name": "Office Hours 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIv3Dww", "media": {"dotsub_id": "6e3f5c14-3f60-4163-9ecb-7d2c3d8bb452", "name": "cs101_oo3_01_l_Office-Hours-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOrdDQw", "youtube_id": "9MGFeFElIR4", "youtube_state": "done", "path": "Course/cs101/Media/225002", "transcript": "\ufeff1\n00:00:04,000 --> 00:00:09,000\nHow to determine what test cases to run against code or procedures that we write.\n\n2\n00:00:09,000 --> 00:00:16,000\nThis is a tough question--figuring out how to test code is something that requires a lot of experience,\n\n3\n00:00:16,000 --> 00:00:22,000\nand it's something we will have an entire course on software testing fairly soon.\n\n4\n00:00:22,000 --> 00:00:28,000\nThe way to think about testing is definitely to think about what all the inputs are.\n\n5\n00:00:28,000 --> 00:00:33,000\nAny procedure has infinitely many inputs, so you definitely can't try them all.\n\n6\n00:00:33,000 --> 00:00:36,000\nThat means you need to think about the different kinds of inputs.\n\n7\n00:00:36,000 --> 00:00:39,000\nBoundary cases are usually good things to test for.\n\n8\n00:00:39,000 --> 00:00:44,000\nIf the inputs are things like strings, the boundary case is an empty string.\n\n9\n00:00:44,000 --> 00:00:48,000\nYou might want to test the procedure with an empty string with a long string\n\n10\n00:00:48,000 --> 00:00:50,000\nwith some other strings.\n\n11\n00:00:50,000 --> 00:00:55,000\nIf it's something where the content of the string matters, like the last question from homework 2,\n\n12\n00:00:55,000 --> 00:00:58,000\nthen you've also got to think about different kinds of content in the string--\n\n13\n00:00:58,000 --> 00:01:03,000\nwhere maybe there are no matches at all, where there's lots of matches, where there's one match.\n\n14\n00:01:03,000 --> 00:01:07,000\nIt definitely requires some creativity to think of all the boundary cases and to test them,\n\n15\n00:01:07,000 --> 00:01:10,000\nbut that's really what you're trying to do is to think of all the things \n\n16\n00:01:10,000 --> 00:01:13,000\nthat might make your code behave differently and all the things \n\n17\n00:01:13,000 --> 00:01:18,000\nthat maybe, if you didn't think about them, your code wouldn't behave correctly for.\n\n18\n00:01:18,000 --> 00:01:20,000\nYeah, boundary cases are a good place to start.\n\n19\n00:01:20,000 --> 00:01:27,000\nMake sure even if you think your procedure will only take in negative numbers or positive.\n\n20\n00:01:27,000 --> 00:01:30,000\nIf you think your procedure only takes in positive numbers, \n\n21\n00:01:30,000 --> 00:01:34,000\nit doesn't hurt to design the case where it handles things outside its boundaries.\n\n22\n00:01:34,000 --> 00:01:39,000\nRight, and often for the homeworks for this class, we're trying to specify fairly limited sets of inputs\n\n23\n00:01:39,000 --> 00:01:43,000\nthat you have to think about--that it only has to work for positive integers.\n\n24\n00:01:43,000 --> 00:01:47,000\nBut as you're writing code, especially if you write code that goes up on the web,\n\n25\n00:01:47,000 --> 00:01:50,000\nyou have no control over what input that people send to it.\n\n26\n00:01:50,000 --> 00:01:53,000\nThat's often where problems happen--not thinking about those problem cases.\n\n27\n00:01:53,000 --> 00:01:59,000\nYeah. We plan on trying to be as clear as possible in the future on what kind of inputs one can expect.\n\n28\n00:01:59,000 --> 00:02:02,000\nThat was something we could've done better on early on.\n\n29\n00:02:02,000 --> 00:02:06,000\nWe try to make sure there's nothing surprising in there, but sometimes--\n\n30\n00:02:06,000 --> 00:02:10,000\nThere was some tricky test cases for definitely that find last question from homework.\n\n31\n00:02:10,000 --> 00:02:17,000\nYes, find last had some-- >>Had trickier test cases than might have been fair for that one.\n\n32\n00:02:17,000 --> 00:02:20,000\nThat causes some difficulty. >>Yes. That was regretful.\n\n33\n00:02:20,000 --> 00:02:22,000\nProbably shouldn't have tested empty strings.\n\n34\n00:02:22,000 --> 00:02:24,000\nRight. Testing an empty string meant--\n\n35\n00:02:24,000 --> 00:02:29,000\nWhat it does is even kind of undefined when you're searching for an empty string in an empty string.\n\n36\n00:02:29,000 --> 00:02:34,000\nRight. And one of the error cases for that was your code runs for ever \n\n37\n00:02:34,000 --> 00:02:40,000\nThere were lots of pretty close solutions to this that on the empty code example your code would run forever,\n\n38\n00:02:40,000 --> 00:02:45,000\nwhich unfortunately the server is working out made it look like\n\n39\n00:02:45,000 --> 00:02:50,000\nyou couldn't tell the difference between that and one the server was done.\n\n40\n00:02:50,000 --> 00:02:55,000\nSo that definitely was not the ideal way for that question to work.\n\n41\n00:02:55,000 --> 00:02:59,000\nWe've had many people join. Who has a question?\n\n42\n00:03:04,000 --> 00:03:08,000\nWell, I've got a question. >>Go for it. >>Would you like to introduce yourself?\n\n43\n00:03:08,000 --> 00:03:12,000\nDo you guys have like enrollment numbers and how many are in each course?\n\n44\n00:03:12,000 --> 00:03:14,000\nA bunch of people asked in the forums.\n\n45\n00:03:14,000 --> 00:03:20,000\nYes. So we've seen this question, and we understand people wanting to know these numbers.\n\n46\n00:03:20,000 --> 00:03:23,000\nWe are a little reluctant to release them when we actually don't have \n\n47\n00:03:23,000 --> 00:03:28,000\nnumbers specific for courses right now.\n\n48\n00:03:28,000 --> 00:03:34,000\nPart of the reluctance to release is there is a lot of noise about numbers of students enrolled in classes.\n\n49\n00:03:34,000 --> 00:03:38,000\nThose really aren't the numbers that we care about or should care about,\n\n50\n00:03:38,000 --> 00:03:42,000\nand if people start competing for numbers of students in courses,\n\n51\n00:03:42,000 --> 00:03:44,000\nthat's really measuring the wrong thing.\n\n52\n00:03:44,000 --> 00:03:49,000\nIt's sort of the same reason that in the early days on Google's search engine\n\n53\n00:03:49,000 --> 00:03:52,000\nthey said the number of pages they indexed on the web,\n\n54\n00:03:52,000 --> 00:03:57,000\nand they'd keep increasing that number and having \"we've indexed billions and billions of pages.\"\n\n55\n00:03:57,000 --> 00:04:01,000\nThen other search engines started competing by trying to have higher numbers.\n\n56\n00:04:01,000 --> 00:04:03,000\nThen Google decided to remove that. \n\n57\n00:04:03,000 --> 00:04:07,000\nIt's not a good measure of how good a search engine is just the number of pages you index.\n\n58\n00:04:07,000 --> 00:04:12,000\nIf your goal is to increase that number there are lots of ways to index more pages\n\n59\n00:04:12,000 --> 00:04:17,000\nthat make your search engine worse that you're indexing the same page multiple times.\n\n60\n00:04:17,000 --> 00:04:21,000\nSo it's actually quite hard to get an accurate count of how many people are really taking the class,\n\n61\n00:04:21,000 --> 00:04:25,000\nand we want to do that. We're trying to figure out good ways to do that.\n\n62\n00:04:25,000 --> 00:04:28,000\nBut we want to be a little careful not to release meaningless numbers just based on \n\n63\n00:04:28,000 --> 00:04:31,000\nthe number of email addresses we have or the number of people that come to the web site.\n\n64\n00:04:31,000 --> 00:04:35,000\nThe answer to your question is right now we don't really know.\n\n65\n00:04:35,000 --> 00:04:38,000\nOkay. Will that be something you'll figure out once the course ends\n\n66\n00:04:38,000 --> 00:04:41,000\nand kind of track how many people--\n\n67\n00:04:41,000 --> 00:04:44,000\nWe'll definitely know at the end of the course how many people completed the course.\n\n68\n00:04:44,000 --> 00:04:47,000\nI think we'll release that number.\n\n69\n00:04:47,000 --> 00:04:55,000\nWhat matters to use is the number of students that are getting a lot of value out fo the course.\n\n70\n00:04:55,000 --> 00:04:58,000\nWe should have those numbers at the end of the course, \n\n71\n00:04:58,000 --> 00:05:01,000\nand I'd certainly like to release them. I think we'll be able to.\n\n72\n00:05:01,000 --> 00:05:04,000\nAt this point we don't really have a meaningful number that we can release.\n\n73\n00:05:04,000 --> 00:05:07,000\nAnd the course isn't over yet.\n\n74\n00:05:07,000 --> 00:05:10,000\nAnd we still have new students joining.\n\n75\n00:05:10,000 --> 00:05:15,000\nWe hope that new students will keep joining and still be able to catch up in the course.\n\n76\n00:05:15,000 --> 00:05:18,000\nSo we have a text question.\n\n77\n00:05:31,000 --> 00:05:34,000\nCan they see the text question?\n\n78\n00:05:34,000 --> 00:05:40,000\nThis is from Ydnayaba--I'm not sure how to pronounce that.\n\n79\n00:05:40,000 --> 00:05:43,000\nIf they're actually here, maybe they can tell us.\n\n80\n00:05:43,000 --> 00:05:49,000\nThey question is about could we cover some debugging topics and approaches in the recorded office hours.\n\n81\n00:05:49,000 --> 00:05:55,000\nThat's definitely an important question is how do you debug code.\n\n82\n00:05:55,000 --> 00:05:58,000\nI think it's pretty hard to learn debugging, \n\n83\n00:05:58,000 --> 00:06:01,000\nso the best way I can think of to learn debugging \n\n84\n00:06:01,000 --> 00:06:04,000\nis to do things so you can observe watch your code is doing.\n\n85\n00:06:04,000 --> 00:06:09,000\nTo figure out what's wrong, often just printing out what's going on to see.\n\n86\n00:06:09,000 --> 00:06:12,000\nAs the problems get more complex like they did in homework 2,\n\n87\n00:06:12,000 --> 00:06:14,000\nthere are many stages along the way.\n\n88\n00:06:14,000 --> 00:06:17,000\nThe way to debug is to test each stage one part at a time.\n\n89\n00:06:17,000 --> 00:06:19,000\nThat could be done just with prints.\n\n90\n00:06:19,000 --> 00:06:23,000\nIf you print out what you want to be there, you can check that.\n\n91\n00:06:23,000 --> 00:06:27,000\nYou have to be careful to remember to remove those prints when you submit the homework,\n\n92\n00:06:27,000 --> 00:06:30,000\nat least for problems where the goal is to print something out.\n\n93\n00:06:30,000 --> 00:06:35,000\nThat will prevent if from being graded correctly if you forget to remove them.\n\n94\n00:06:35,000 --> 00:06:38,000\nBut just to do things where you're really thinking like a detective,\n\n95\n00:06:38,000 --> 00:06:43,000\nthat you're trying to do observations and set up things where you can learn\n\n96\n00:06:43,000 --> 00:06:46,000\nas much about what's going right and what's going wrong about your code\n\n97\n00:06:46,000 --> 00:06:48,000\nto isolate what the problem is.\n\n98\n00:06:48,000 --> 00:06:53,000\nFigure out, be confident that you know this is correct, and then you're looking at the next step.\n\n99\n00:06:53,000 --> 00:06:58,000\nOften where things take the most time is when you assume the first step is correct\n\n100\n00:06:58,000 --> 00:07:01,000\nand spend all your time trying to figure out what's wrong with the second step,\n\n101\n00:07:01,000 --> 00:07:04,000\nbut really the first step wasn't correct, and the second step was fine.\n\n102\n00:07:04,000 --> 00:07:09,000\nThat's where being careful and testing as you go and doing things in small steps is really\n\n103\n00:07:09,000 --> 00:07:12,000\nwhat makes it easier, and as the problems get more complex,\n\n104\n00:07:12,000 --> 00:07:14,000\nit's really necessary to break them.\n\n105\n00:07:14,000 --> 00:07:16,000\nThe key is to isolate the problem.\n\n106\n00:07:16,000 --> 00:07:20,000\nWe see a lot of people starting to program. They write the function and it doesn't work.\n\n107\n00:07:20,000 --> 00:07:26,000\nTheir response is, well, it doesn't work, and their intuition is to start over or just become frustrated,\n\n108\n00:07:26,000 --> 00:07:28,000\nwhich it is frustrating.\n\n109\n00:07:28,000 --> 00:07:33,000\nYou really have to start printing out your variables as you go through.\n\n110\n00:07:33,000 --> 00:07:36,000\nI know this should equal this. Look into it to see what's happening.\n\n111\n00:07:36,000 --> 00:07:38,000\nYou want to be systematic. \n\n112\n00:07:38,000 --> 00:07:42,000\nWhere people get frustrated and it doesn't work to solve the problem\n\n113\n00:07:42,000 --> 00:07:47,000\nis usually if you start trying random thing and seeing if it works.\n\n114\n00:07:47,000 --> 00:07:51,000\nThat's tempting, because it is frustrating when it doesn't work,\n\n115\n00:07:51,000 --> 00:07:53,000\nbut that rarely helps you solve the problem.\n\n116\n00:07:53,000 --> 00:07:58,000\nIt's much better to try to be systematic and do things in small steps.\n\n", "id": 225002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIv3DwwLEgZOdWdnZXQYyawTDA", "path": "Course/cs101/CourseRev/feb2012/Unit/261003/Nugget/317001", "type": "Nugget", "id": 317001}, {"nuggetType": "lecture", "name": "Office Hours 3", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIv3Dww", "media": {"dotsub_id": "44925c46-25b9-40d6-89ec-28a3bedc2994", "name": "cs101_oo3_02_l_Office-Hours-3", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMSRDww", "youtube_id": "E-_dRwVNoHg", "youtube_state": "done", "path": "Course/cs101/Media/248004", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nOkay. Does someone have another question?\n\n2\n00:00:12,000 --> 00:00:14,000\nYes. We are real people. \n\n3\n00:00:14,000 --> 00:00:16,000\nGraham says asking a live question produced a weird effect\n\n4\n00:00:16,000 --> 00:00:19,000\nas by now we're very used to hearing recorded video.\n\n5\n00:00:19,000 --> 00:00:21,000\nWe don't make mistakes on video.\n\n6\n00:00:21,000 --> 00:00:25,000\nI can also show you my arm is really not transparent.\n\n7\n00:00:25,000 --> 00:00:28,000\nI have to eat a lot of rice noodles to make it transparent for the recordings,\n\n8\n00:00:28,000 --> 00:00:31,000\nbut normally it's not.\n\n9\n00:00:31,000 --> 00:00:38,000\nYou were saying you had a question--Graham.\n\n10\n00:00:38,000 --> 00:00:40,000\nWe can click on someone?\n\n11\n00:00:40,000 --> 00:00:44,000\nWell, you just have their name and you can see right here.\n\n12\n00:00:44,000 --> 00:00:46,000\nGo ahead, Graham.\n\n13\n00:00:46,000 --> 00:00:49,000\nOh no, I said not a question.\n\n14\n00:00:49,000 --> 00:00:52,000\nOkay. Who has a question? >>I have a question.\n\n15\n00:00:52,000 --> 00:00:59,000\nGo ahead. John. Where are you from John? >>I'm from New York.\n\n16\n00:00:59,000 --> 00:01:03,000\nHi, John from New York. What's the question.\n\n17\n00:01:03,000 --> 00:01:06,000\nIt seems to me that all of the homework problems--\n\n18\n00:01:06,000 --> 00:01:12,000\nI mean, do they all count for equal points even though some of them are much harder than others.?\n\n19\n00:01:12,000 --> 00:01:14,000\nThis is very true.\n\n20\n00:01:14,000 --> 00:01:17,000\nThey question is does each homework question count the same \n\n21\n00:01:17,000 --> 00:01:21,000\neven though there's a big difference in how hard the questions are?\n\n22\n00:01:21,000 --> 00:01:25,000\nThis is the way things are now that every question counts for 1 point,\n\n23\n00:01:25,000 --> 00:01:27,000\nand we don't have a way to give partial credit.\n\n24\n00:01:27,000 --> 00:01:33,000\nThis is definitely a limitation of our grading system that we would--\n\n25\n00:01:33,000 --> 00:01:36,000\nthere are questions that definitely involve a lot more work than others, \n\n26\n00:01:36,000 --> 00:01:40,000\nand there are questions that we would like to be able to give partial credit for.\n\n27\n00:01:40,000 --> 00:01:44,000\nThat's probably something we'll be able to do in future offerings of the course.\n\n28\n00:01:44,000 --> 00:01:47,000\nAt this point that's a limitation of the way grading works.\n\n29\n00:01:47,000 --> 00:01:51,000\nEvery question is worth the same amount of points.\n\n30\n00:01:51,000 --> 00:01:54,000\nI encourage people not to get too caught up in the grading.\n\n31\n00:01:54,000 --> 00:01:58,000\nSo definitely my hope is that for the harder questions that you feel like\n\n32\n00:01:58,000 --> 00:02:01,000\n you've accomplished something and learned a lot by doing it\n\n33\n00:02:01,000 --> 00:02:05,000\neven if it's only worth 1 point, or even worse, if it's worth 1 point,\n\n34\n00:02:05,000 --> 00:02:09,000\nbut because of some quirk in the grading system or you forget to remove a stray print or something,\n\n35\n00:02:09,000 --> 00:02:13,000\nyou don't get that point, try not to get too upset and frustrated by that.\n\n36\n00:02:13,000 --> 00:02:17,000\nThe goal of the homeworks is really for you to learn from that.\n\n37\n00:02:17,000 --> 00:02:20,000\nHopefully you feel that you've accomplished something and even if you didn't get the point \n\n38\n00:02:20,000 --> 00:02:23,000\nbecause the way it was graded, you know that you actually were on the right track\n\n39\n00:02:23,000 --> 00:02:27,000\nand understood the things that we wanted you to get out of that question.\n\n40\n00:02:27,000 --> 00:02:33,000\nExpanding on that question, since I did just kind of start today,\n\n41\n00:02:33,000 --> 00:02:39,000\nI was wondering if the due dates matters?\n\n42\n00:02:39,000 --> 00:02:47,000\nYou should repeat that. >>The question is since Michelle is starting late if the due dates matter.\n\n43\n00:02:47,000 --> 00:02:50,000\nThey do in the sense of the grades \n\n44\n00:02:50,000 --> 00:02:55,000\nthat you get for the homework are based on the answers that you submit before the due date.\n\n45\n00:02:55,000 --> 00:02:57,000\nThey don't matter other than that.\n\n46\n00:02:57,000 --> 00:02:59,000\nYou can do the homeworks after the deadline.\n\n47\n00:02:59,000 --> 00:03:03,000\nIf you submit them after the deadline, you see right away whether the answer is correct.\n\n48\n00:03:03,000 --> 00:03:07,000\nYou can get all the same learning benefit out of the homeworks.\n\n49\n00:03:07,000 --> 00:03:11,000\nAlso, you can still get a perfect score in the class even if you missed the homeworks,\n\n50\n00:03:11,000 --> 00:03:17,000\nboth because one of the ways of grading now is just counting the exam.\n\n51\n00:03:17,000 --> 00:03:21,000\nStudents who join the class late aren't able to get credit for the early homeworks, \n\n52\n00:03:21,000 --> 00:03:24,000\nbut if they learn the material and do well on the exam\n\n53\n00:03:24,000 --> 00:03:29,000\nyou still have a chance to get a perfect score in the class.\n\n54\n00:03:29,000 --> 00:03:34,000\nI hope students do value the grades they get on the homeworks, \n\n55\n00:03:34,000 --> 00:03:37,000\nbut definitely if you are starting the class late, you can still do the homeworks,\n\n56\n00:03:37,000 --> 00:03:42,000\nstill learn from them, and still have a chance to get a perfect score in the class.\n\n57\n00:03:42,000 --> 00:03:46,000\nPart of the reason to do that is it's a really good just keeping everyone together.\n\n58\n00:03:46,000 --> 00:03:51,000\nIt'd be hard to hold a session like this if we had half our students on Unit 4\n\n59\n00:03:51,000 --> 00:03:55,000\nand a third on Unit 1, and another third on another unit.\n\n60\n00:03:55,000 --> 00:04:01,000\nThat's a good point that there are online classes you can do complete at your own pace.\n\n61\n00:04:01,000 --> 00:04:03,000\nFor many people that works well.\n\n62\n00:04:03,000 --> 00:04:07,000\nFor the other people without having the pressure of a deadline and the community experience \n\n63\n00:04:07,000 --> 00:04:11,000\nof going through a course at the same time and being able to do something like we're doing now\n\n64\n00:04:11,000 --> 00:04:14,000\nwith live office hours, you really miss that experience, \n\n65\n00:04:14,000 --> 00:04:18,000\nand it's much harder to keep up with the course if you don't have deadlines.\n\n66\n00:04:18,000 --> 00:04:22,000\nBut we don't want people to feel like they'll drop out of the course \n\n67\n00:04:22,000 --> 00:04:26,000\nbecause you missed 1 deadline because you weren't able to get the grade on that homework.\n\n68\n00:04:26,000 --> 00:04:34,000\nDefinitely, the deadlines, if they're helpful for you then take the deadline seriously,\n\n69\n00:04:34,000 --> 00:04:40,000\nbut it's certainly not required to take the deadlines that seriously. >>Thank you.\n\n70\n00:04:40,000 --> 00:04:47,000\nThere's a text question about using third-party libraries for web development.\n\n71\n00:04:47,000 --> 00:04:50,000\nOkay, so this is a text question for me.\n\n72\n00:04:50,000 --> 00:04:59,000\nThis is also a good point, that our goal in this class is to teach computer science concepts,\n\n73\n00:04:59,000 --> 00:05:05,000\nusing the goal of building a search engine as a vehicle for doing that.\n\n74\n00:05:05,000 --> 00:05:08,000\nIf your real goal was just to build the best search engine you could\n\n75\n00:05:08,000 --> 00:05:13,000\nthen you'd be much better off using existing libraries and putting them together\n\n76\n00:05:13,000 --> 00:05:17,000\nrather than learning how to build your own extracting a links function, say.\n\n77\n00:05:17,000 --> 00:05:20,000\nWhat we did in Unit 1.\n\n78\n00:05:20,000 --> 00:05:25,000\nIt's definitely a trade-off, and the trade off we're making here is to learn computer science concepts.\n\n79\n00:05:25,000 --> 00:05:28,000\nIf your goal was to just build a search engine as quickly as you could, \n\n80\n00:05:28,000 --> 00:05:32,000\nthe way we're doing it in class would not be the best way to do that.\n\n81\n00:05:37,000 --> 00:05:40,000\nSomeone asks, \"Are there plans to robots.txt?\"\n\n82\n00:05:40,000 --> 00:05:42,000\nThis is a good question.\n\n83\n00:05:42,000 --> 00:05:47,000\n I hope you saw the interview with Anna Patterson at the end of Unit 3\n\n84\n00:05:47,000 --> 00:05:51,000\nwhere she talks about how important it is to be polite in a real web crawler.\n\n85\n00:05:51,000 --> 00:05:55,000\nSomeone did ask on the forums what it means to be \"polite.\"\n\n86\n00:05:55,000 --> 00:05:58,000\nHow can a computer be polite to another computer.\n\n87\n00:05:58,000 --> 00:06:03,000\nYes, and politeness is--I'm glad that Anna used the word \"polite\"\n\n88\n00:06:03,000 --> 00:06:05,000\nbecause it's not the normal word people would use,\n\n89\n00:06:05,000 --> 00:06:11,000\nbut it's actually a good way to think about it that just like when people interact\n\n90\n00:06:11,000 --> 00:06:15,000\nyou're not supposed to interrupt people or yell at them all the time. That's impolite to do that.\n\n91\n00:06:15,000 --> 00:06:21,000\nWhen computer interact with other computers, they're not people getting offended in the same way.\n\n92\n00:06:21,000 --> 00:06:24,000\nBut if you do the kinds of things that are rude when people do them\n\n93\n00:06:24,000 --> 00:06:26,000\nthey cause problems for the other computers.\n\n94\n00:06:26,000 --> 00:06:31,000\nSo if you're sending requests as fast as you can at the same server\n\n95\n00:06:31,000 --> 00:06:36,000\nand trying to crawl that entire server and sending millions of requests to it\n\n96\n00:06:36,000 --> 00:06:38,000\nthat's really rude. That's taking resources away from the server.\n\n97\n00:06:38,000 --> 00:06:40,000\nIt costs money. \n\n98\n00:06:40,000 --> 00:06:43,000\nIt's costing the server operator money, and it's preventing people that actually want to get\n\n99\n00:06:43,000 --> 00:06:47,000\nthe content because they're looking for that page from getting it.\n\n100\n00:06:47,000 --> 00:06:52,000\nTo be a good citizen on the web, if you're writing a web crawler, you have to follow rules\n\n101\n00:06:52,000 --> 00:06:57,000\nand limit the resources that you take from the servers that you're crawling.\n\n102\n00:06:57,000 --> 00:07:03,000\nRobots.text is a file that servers can put on the server that says, \n\n103\n00:07:03,000 --> 00:07:06,000\n\"Here's rules about how you should crawl this server.\"\n\n104\n00:07:06,000 --> 00:07:10,000\nIt might give a rate limit. It might say, \"Don't crawl these pages.\"\n\n105\n00:07:10,000 --> 00:07:13,000\nIt might say how often can you request-- >>Sometimes that's for privacy reasons.\n\n106\n00:07:13,000 --> 00:07:16,000\nYeah, it could be for privacy. It could be for resource us.\n\n107\n00:07:16,000 --> 00:07:21,000\nIt could be there are pages on the site that they don't want to end up in an index.\n\n108\n00:07:21,000 --> 00:07:27,000\nA well-behaved web crawler will always check this before requesting any other pages from the site.\n\n109\n00:07:27,000 --> 00:07:30,000\nFor the crawler that we built in this class, we're not doing that, \n\n110\n00:07:30,000 --> 00:07:34,000\nand the reason we're not doing that is our goal is to make things as simple as possible\n\n111\n00:07:34,000 --> 00:07:37,000\nand to understand as much computer science.\n\n112\n00:07:37,000 --> 00:07:41,000\nThe work of reading the robots.txt file, understanding what's in it,\n\n113\n00:07:41,000 --> 00:07:45,000\nregulating the crawler, well, that would be hundreds of lines of code.\n\n114\n00:07:45,000 --> 00:07:51,000\nThe entire web crawler by the very end of this class will be less than 70 lines of code. >>70?\n\n115\n00:07:51,000 --> 00:07:56,000\nOur goal is to really make it so you understand everything that's going on in core web crawler,\n\n116\n00:07:56,000 --> 00:07:59,000\nand the search engine is all included in the 70 lines,\n\n117\n00:07:59,000 --> 00:08:03,000\nbut not need to get into a lot of the details that if you were building \n\n118\n00:08:03,000 --> 00:08:07,000\na real web crawler it'd be important to get into.\n\n119\n00:08:07,000 --> 00:08:12,000\nThe good part of this is at least if you're running the code through our server,\n\n120\n00:08:12,000 --> 00:08:15,000\nyou don't have to worry about politeness, because we're not actually allowing any of \n\n121\n00:08:15,000 --> 00:08:18,000\nthe programs you submit to make arbitrary web requests.\n\n122\n00:08:18,000 --> 00:08:23,000\nAll the reponses that you get are just for the test pages that we have cached the results for at our server.\n\n123\n00:08:23,000 --> 00:08:27,000\nWhen you submit code, even if it used get_page to request pages,\n\n124\n00:08:27,000 --> 00:08:32,000\nit's not actually sending out real web requests, so it's being polite. >>Yes.\n\n125\n00:08:32,000 --> 00:08:34,000\nDid we want take--does someone have a question they want to ask?\n\n126\n00:08:34,000 --> 00:08:40,000\nYeah, does someone have a question whose is a non-typing question? >>Go for it.\n\n127\n00:08:43,000 --> 00:08:46,000\nNo one. >>I have one.\n\n128\n00:08:46,000 --> 00:08:50,000\nGood. Well, we have another typed one.\n\n129\n00:08:50,000 --> 00:08:54,000\nWe got what did the--that's an easy one.\n\n130\n00:08:54,000 --> 00:09:00,000\nRishad wants to know where the name \"Udacity\" come from.\n\n131\n00:09:00,000 --> 00:09:05,000\nIt has a couple different possibilities.\n\n132\n00:09:05,000 --> 00:09:11,000\nThe most obvious is there is a word \"audacity,\" which means boldness, daring,\n\n133\n00:09:11,000 --> 00:09:15,000\nand we removed the \"a\" from audacity to get Udacity.\n\n134\n00:09:15,000 --> 00:09:18,000\nWe like it starting with a U because that sounds like a university.\n\n135\n00:09:18,000 --> 00:09:23,000\nThe \"-city\" sort of also sounds like university, so that's where the name came from.\n\n136\n00:09:23,000 --> 00:09:27,000\nI know some people hate, some people like it. It's the name we're going to use.\n\n137\n00:09:27,000 --> 00:09:30,000\nI hope everyone comes to like it.\n\n", "id": 248004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIv3DwwLEgZOdWdnZXQYsbQTDA", "path": "Course/cs101/CourseRev/feb2012/Unit/261003/Nugget/318001", "type": "Nugget", "id": 318001}, {"nuggetType": "lecture", "name": "Office Hours 6", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIv3Dww", "media": {"dotsub_id": "0cb239ca-316d-4840-8e67-fde7632d22f6", "name": "cs101_oo3_05_l_Office-Hours-6", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJm8Eww", "youtube_id": "-4Ak2tvDn20", "youtube_state": "done", "path": "Course/cs101/Media/319001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nThis is an interesting question.\n\n2\n00:00:02,000 --> 00:00:04,000\nThis is from Kevin E.\n\n3\n00:00:04,000 --> 00:00:07,000\nThis is from Kevin from Oregon.\n\n4\n00:00:07,000 --> 00:00:13,000\nHe is a high school math  teacher. Nice. >>Cool--and a cross-country skier.\n\n5\n00:00:16,000 --> 00:00:19,000\nHe has a pretty interesting question. \n\n6\n00:00:19,000 --> 00:00:24,000\nHe's asking, \"There has been talk within the press and the media about programming\n\n7\n00:00:24,000 --> 00:00:29,000\nand knowledge of programming becoming a 3rd required literacy of education.\"\n\n8\n00:00:29,000 --> 00:00:34,000\nAt least in the United States it's very common that you have verbal requirements,\n\n9\n00:00:34,000 --> 00:00:40,000\nlearning how to read and write, and mathematics requirements, learning how to do algebra.\n\n10\n00:00:40,000 --> 00:00:45,000\nI guess he's asking do you feel that programming could be that 3rd section that's kind of required\n\n11\n00:00:45,000 --> 00:00:48,000\nand designed into every curriculum everywhere?\n\n12\n00:00:48,000 --> 00:00:51,000\nI think this is a really interesting question. >>It is interesting.\n\n13\n00:00:51,000 --> 00:00:59,000\nI think there's definitely a tremendous value for students learning programming early in school.\n\n14\n00:00:59,000 --> 00:01:04,000\nI think there's a lot of things that in the traditional grade school curriculum--\n\n15\n00:01:04,000 --> 00:01:09,000\nI'm speaking about the U.S, I don't know much about how that works in other parts of the world--\n\n16\n00:01:09,000 --> 00:01:13,000\nhopefully they're more forward thinking than America has been.\n\n17\n00:01:13,000 --> 00:01:19,000\nBut what's taught in grade school is--and this actually goes through high school--\n\n18\n00:01:19,000 --> 00:01:22,000\nis pretty much 1950s curriculum.\n\n19\n00:01:22,000 --> 00:01:29,000\nIt really hasn't changed, and there's a lot of time spent on learning how to do mechanical calculations.\n\n20\n00:01:29,000 --> 00:01:36,000\nStudents are basically learning algorithms for doing division, for solving complex problems\n\n21\n00:01:36,000 --> 00:01:41,000\nby following mechanical steps, and they're learning how to do this very carefully and precisely--\n\n22\n00:01:41,000 --> 00:01:43,000\nthe kinds of things that computers should be doing, \n\n23\n00:01:43,000 --> 00:01:48,000\nand it would be much better if students were learning how to think about things algorithmically,\n\n24\n00:01:48,000 --> 00:01:51,000\nhow to think about how to describe the way to solve problems\n\n25\n00:01:51,000 --> 00:01:55,000\nrather than following steps the way a computer follows them.\n\n26\n00:01:55,000 --> 00:02:03,000\nI think I'm probably not the one who knows how to redesign our elementary school curriculum,\n\n27\n00:02:03,000 --> 00:02:06,000\nalthough it's definitely a good thing to think about.\n\n28\n00:02:06,000 --> 00:02:11,000\nI think there are great ways to learn about math by doing programming,\n\n29\n00:02:11,000 --> 00:02:16,000\nand there are programs that are seeking to do that. >>At Euler?\n\n30\n00:02:16,000 --> 00:02:22,000\nEuler. There's also a project that started at Northeastern doing this.\n\n31\n00:02:22,000 --> 00:02:26,000\nSo I there's a lot of--actual that started at Brown,\n\n32\n00:02:26,000 --> 00:02:33,000\nI'm forgetting the name of it now. I was just hearing about it earlier today from our field trip to Missoula.\n\n33\n00:02:33,000 --> 00:02:38,000\nBut there are projects that are doing things where the best way to learn about physics \n\n34\n00:02:38,000 --> 00:02:42,000\nor to learn about math is really to build a simulation yourself.\n\n35\n00:02:42,000 --> 00:02:50,000\nThat's true also learning about lots of things in society like elections or how people interact with eachother.\n\n36\n00:02:50,000 --> 00:02:54,000\nIf students learned about programming when they were in school, \n\n37\n00:02:54,000 --> 00:02:57,000\nthey would understand these things much better than the, I think,\n\n38\n00:02:57,000 --> 00:03:01,000\nmuch more difficult ways of understand them as mathematical models.\n\n39\n00:03:01,000 --> 00:03:05,000\nA lot of it is it's just a systematic way of thinking.\n\n40\n00:03:05,000 --> 00:03:09,000\nI like the idea of thinking of it as a third branch of literacy \n\n41\n00:03:09,000 --> 00:03:14,000\nthat everyone who wants to function well in the world and understand how things work\n\n42\n00:03:14,000 --> 00:03:16,000\nreally should understand programming.\n\n43\n00:03:16,000 --> 00:03:19,000\nThey don't have to be expert programmers, \n\n44\n00:03:19,000 --> 00:03:24,000\nbut at least enough to be able to understand how things work.\n\n45\n00:03:24,000 --> 00:03:29,000\nIs there an age requirement at Udacity?\n\n46\n00:03:29,000 --> 00:03:32,000\nWhere are our lawyers? I hope our lawyers aren't watching. >>Maybe we shouldn't answer that.\n\n47\n00:03:32,000 --> 00:03:34,000\nWe have no age requirement. \n\n48\n00:03:34,000 --> 00:03:37,000\nThere are laws in the U.S. about \n\n49\n00:03:37,000 --> 00:03:42,000\nif you collect an email address from someone what age they can be.\n\n50\n00:03:42,000 --> 00:03:45,000\nIdentifiable information.\n\n51\n00:03:45,000 --> 00:03:50,000\nWe are happy to have all students in the class.\n\n52\n00:03:50,000 --> 00:03:53,000\nStudents that are under whatever legal age the U.S. law would say are--\n\n53\n00:03:53,000 --> 00:03:56,000\nWell, our content is creative commons licensed.\n\n54\n00:03:56,000 --> 00:04:02,000\n--yes, can definitely take the class, and we assume anyone tells us that their age is below\n\n55\n00:04:02,000 --> 00:04:05,000\nwhatever the minimum legal is--\n\n56\n00:04:05,000 --> 00:04:07,000\nBut what I'm more interested in is can you be too old? \n\n57\n00:04:07,000 --> 00:04:12,000\nYou can't be too old. I know we definitely have 80-year-olds in the class.\n\n58\n00:04:12,000 --> 00:04:15,000\nI hope we have a 90-year-old. I haven't heard from one directly yet.\n\n59\n00:04:15,000 --> 00:04:18,000\nI had a conversation with an 82-year-old. That's cool.\n\n60\n00:04:18,000 --> 00:04:21,000\nHe was following along pretty well.\n\n61\n00:04:21,000 --> 00:04:24,000\nI think it's great that there's lots of retired people in the class.\n\n62\n00:04:24,000 --> 00:04:27,000\nI can say my mom is taking the class as well as my dad.\n\n63\n00:04:27,000 --> 00:04:33,000\nI don't mention their ages. It's under 82, so that's good.\n\n64\n00:04:33,000 --> 00:04:35,000\nDoes anyone have a question they want to ask verbally?\n\n65\n00:04:41,000 --> 00:04:46,000\nYou got a compliment about I hope people are enjoying it as much as we here.\n\n66\n00:04:46,000 --> 00:04:54,000\nWe're having a great time, and a lot of what makes a class work are the contributions of students as well.\n\n67\n00:04:54,000 --> 00:04:57,000\nThat's fantastic. >>And that's very evident on the forums.\n\n68\n00:04:57,000 --> 00:05:02,000\nSome of the stuff we see on the forums we share around the office.\n\n69\n00:05:02,000 --> 00:05:06,000\nIt's pretty amazing what some of our students do. That's my shout out to our students.\n\n70\n00:05:15,000 --> 00:05:18,000\nHow do programmers make a new programming language?\n\n71\n00:05:18,000 --> 00:05:23,000\nOkay, yeah. How and why do people make a new programming language.\n\n72\n00:05:23,000 --> 00:05:25,000\nWhy would you need a new programming language?\n\n73\n00:05:25,000 --> 00:05:31,000\nOne of the things I may have mentioned--I don't remember.\n\n74\n00:05:31,000 --> 00:05:35,000\nAll programming languages are exactly as powerful in terms of \n\n75\n00:05:35,000 --> 00:05:39,000\nonce you have the things--and I did talk about in Unit 2\n\n76\n00:05:39,000 --> 00:05:45,000\nthat once you know about if and procedures and variables and arithmetic, \n\n77\n00:05:45,000 --> 00:05:48,000\nyou've got enough to write every possible program.\n\n78\n00:05:48,000 --> 00:05:50,000\nEvery programming language is equally powerful.\n\n79\n00:05:50,000 --> 00:05:54,000\nThey can all write the same exact set of all possible programs.\n\n80\n00:05:54,000 --> 00:05:57,000\nIn a theory class, that's explained more precisely what that means, \n\n81\n00:05:57,000 --> 00:06:02,000\nbut once you have those few basic things, that's really enough to build everything else.\n\n82\n00:06:02,000 --> 00:06:06,000\nThat raises the good question of why are there thousands of programming languages.\n\n83\n00:06:06,000 --> 00:06:11,000\nThere are thousands, and there are people making up new programming languages all time.\n\n84\n00:06:11,000 --> 00:06:15,000\nThere are lots of different reasons to make a new language.\n\n85\n00:06:15,000 --> 00:06:18,000\nSometimes it's just for fun, and it's definitely something that you learn a lot from.\n\n86\n00:06:18,000 --> 00:06:21,000\nI think those of you who take the programming languages class next\n\n87\n00:06:21,000 --> 00:06:24,000\nwill get a sense for how easy it is to change what a language means\n\n88\n00:06:24,000 --> 00:06:27,000\nand how interesting it is to do that.\n\n89\n00:06:27,000 --> 00:06:30,000\nThere are joke languages too. >>There are. Yeah. \n\n90\n00:06:30,000 --> 00:06:33,000\nLanguages created just to be funny.\n\n91\n00:06:33,000 --> 00:06:37,000\nThat's one reason. There are more serious reasons to create a new language.\n\n92\n00:06:37,000 --> 00:06:41,000\nAll of language design is really a trade off. You're trading off different things.\n\n93\n00:06:41,000 --> 00:06:47,000\nYou're trading off how easy it is to write programs with how fast your programs can fun.\n\n94\n00:06:47,000 --> 00:06:51,000\nWe've chosen to teach 101 in a language that's Python that is designed\n\n95\n00:06:51,000 --> 00:06:56,000\nwhere making it easy to write programs is more important than making the programs run fast.\n\n96\n00:06:56,000 --> 00:07:00,000\nThere are other languages, and if you're writing code for, say,\n\n97\n00:07:00,000 --> 00:07:06,000\ncontrolling the fighter jet, how fast it takes to make decisions is more important\n\n98\n00:07:06,000 --> 00:07:09,000\nthan how easy it is for the code to write.\n\n99\n00:07:09,000 --> 00:07:12,000\nYou can spend millions of dollars getting the code written. You hope it's correct.\n\n100\n00:07:12,000 --> 00:07:16,000\nBut performance is much more important. That's one trade off. \n\n101\n00:07:16,000 --> 00:07:20,000\nAnother trade off is between how expressive the language is \n\n102\n00:07:20,000 --> 00:07:25,000\nand how easy it is to write something that doesn't mean what you want it to mean.\n\n103\n00:07:25,000 --> 00:07:27,000\nPython is quite an expressive language. \n\n104\n00:07:27,000 --> 00:07:30,000\nIt's easy to write things in Python \n\n105\n00:07:30,000 --> 00:07:34,000\nthat seem correct but don't mean exactly what you wanted them to mean.\n\n106\n00:07:34,000 --> 00:07:39,000\nThere are other languages that try much harder to make it so if you write code\n\n107\n00:07:39,000 --> 00:07:44,000\nand the code runs, it's more likely to mean exactly what you thought it meant.\n\n108\n00:07:44,000 --> 00:07:48,000\nThose languages do things that make it harder to accidentally write a program\n\n109\n00:07:48,000 --> 00:07:50,000\nthat means something different.\n\n110\n00:07:50,000 --> 00:07:54,000\nThere are lots of different programming languages for both reasons of style and taste,\n\n111\n00:07:55,000 --> 00:08:00,000\nbut there are also some good engineering reasons why we need many different programming languages.\n\n112\n00:08:10,000 --> 00:08:12,000\nFeel free to ask a question. \n\n113\n00:08:12,000 --> 00:08:15,000\nUntil then we're going to just look through the forums.\n\n114\n00:08:15,000 --> 00:08:20,000\nDo we have the audio on? >>Audio is on. Oh, I don't have audio on. Sorry.\n\n115\n00:08:20,000 --> 00:08:28,000\nIf someone was talking, would you please repeat the question? I've got to get better at that.\n\n", "id": 319001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIv3DwwLEgZOdWdnZXQYgcQTDA", "path": "Course/cs101/CourseRev/feb2012/Unit/261003/Nugget/320001", "type": "Nugget", "id": 320001}]}, {"name": "Unit 4", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYmcUQDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQY6dQQDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYgtYNDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYueQQDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYifQQDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQY2YMRDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYwYsRDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYg9YNDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQY1NwQDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYkZsRDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYkpsRDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYgs0QDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYi_oODA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYyrIRDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQY7NcPDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYmcIRDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQY-qIRDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYm8sODA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYlJ4QDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQY7tcPDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYkZUTDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYueERDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYifERDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYwYgSDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQY2oASDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQY24ASDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYqZASDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYkZgSDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQY-Z8SDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQY4acSDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYmb8SDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQY6c4SDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYyq8SDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYwogSDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYoeYSDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQY8fUSDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYqpASDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYi_ERDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQY2f0SDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYq5ASDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYrJMRDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "path": "Course/cs101/CourseRev/feb2012/Unit/269001", "open": false, "id": 269001, "nuggets": [{"nuggetType": "quiz", "name": "Data Structures", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYgtYNDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/224002", "type": "Nugget", "id": 224002}, {"nuggetType": "lecture", "name": "Lookup", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "a86e84d4-dd70-4be8-8dfe-e73c3f39fd9e", "name": "cs101_unit4_03_p_Lookup", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNPcEAw", "youtube_id": "hzDJhLS4yCo", "youtube_state": "done", "path": "Course/cs101/Media/274003", "transcript": null, "id": 274003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYg9YNDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/224003", "type": "Nugget", "id": 224003}, {"nuggetType": "lecture", "name": "Startup", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "60604ff2-68ab-4a54-a04e-adb4462be368", "name": "cs101_unit4_07_l_Startup", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKqTEQw", "youtube_id": "1XElSoLZfKQ", "youtube_state": "done", "path": "Course/cs101/Media/281002", "transcript": null, "id": 281002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYm8sODA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/239003", "type": "Nugget", "id": 239003}, {"nuggetType": "program", "name": "Add Page To Index", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYi_oODA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/245003", "suppliedCode": "#Define a procedure, add_page_to_index,\n#that takes three inputs:\n\n#   - index\n#   - url (String)\n#   - content (String)\n\n#It should update the index to include\n#all of the word occurences found in the\n#page content by adding the url to the\n#word's associated url list.\n\n\nindex = []\n\n#add_page_to_index(index,'fake.text',\"This is a test\")\n#print index => [['This', ['fake.text']], ['is', ['fake.text']], ['a', ['fake.text']], ['test', ['fake.text']]]\n\ndef add_to_index(index,keyword,url):\n    for entry in index:\n        if entry[0] == keyword:\n            entry[1].append(url)\n            return\n    index.append([keyword,[url]])\n\ndef add_page_to_index(index,url,content):\n\n", "type": "Nugget", "id": 245003}, {"nuggetType": "lecture", "name": "Finishing The Web Crawler", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "67320ab2-6750-43f8-977f-d5f9608dc1d0", "name": "cs101_unit4_06_qs_Finishing-the-Web-Crawler", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPqlEAw", "youtube_id": "dQjsf-4cWo0", "youtube_state": "done", "path": "Course/cs101/Media/267002", "transcript": null, "id": 267002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQY7NcPDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/257004", "type": "Nugget", "id": 257004}, {"nuggetType": "lecture", "name": "Networks", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "dbf2e7cd-d4f8-4bb3-b02a-a8f06469e958", "name": "cs101_unit4_09_q_Networks", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOOtEAw", "youtube_id": "GyQLioSa608", "youtube_state": "failed", "path": "Course/cs101/Media/268003", "transcript": null, "id": 268003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQY7tcPDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/257006", "type": "Nugget", "id": 257006}, {"nuggetType": "lecture", "name": "The Internet", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "1f2dfd11-9380-4c68-b3e2-d03835c650ad", "name": "cs101_unit4_08_l_The-Internet", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMq1EAw", "youtube_id": "bABUWxp7wAU", "youtube_state": "done", "path": "Course/cs101/Media/269002", "transcript": null, "id": 269002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYlJ4QDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/266004", "type": "Nugget", "id": 266004}, {"nuggetType": "lecture", "name": "Introduction", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "0e88c67d-d8a9-494a-b5b3-cda35a1b1db6", "name": "cs101_unit4_00_l_Introduction", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLG9EAw", "youtube_id": "xi4gMr4nCQI", "youtube_state": "done", "path": "Course/cs101/Media/270001", "transcript": null, "id": 270001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYmcUQDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/271001", "type": "Nugget", "id": 271001}, {"nuggetType": "lecture", "name": "Add Page To Index", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "04f4259e-23ab-4cdb-b261-c0dd3db5228a", "name": "cs101_unit4_05_p_Add-Page-to-Index", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJObEQw", "youtube_id": "_5rpzWzFnJM", "youtube_state": "done", "path": "Course/cs101/Media/282003", "transcript": null, "id": 282003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYgs0QDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/272002", "type": "Nugget", "id": 272002}, {"nuggetType": "lecture", "name": "Data Structures", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "89e7c31a-e408-405b-a9bd-126572bfc9f2", "name": "cs101_unit4_01_q_Data-Structures", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIHNEAw", "youtube_id": "pv5-RgG1pdk", "youtube_state": "done", "path": "Course/cs101/Media/272001", "transcript": null, "id": 272001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQY6dQQDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/273001", "type": "Nugget", "id": 273001}, {"nuggetType": "program", "name": "Lookup", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQY1NwQDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/274004", "suppliedCode": "#Define a procedure, lookup,\n#that takes two inputs:\n\n#   - an index\n#   - keyword\n\n#The output should be a list\n#of the urls associated\n#with the keyword. If the keyword\n#is not in the index, the output\n#should be an empty list.\n\nindex = [['udacity', ['http://udacity.com', 'http://npr.org']], ['computing', ['http://acm.org']]]\n\n#lookup(index,'udacity') => ['http://udacity.com','http://npr.org']\n\n\ndef lookup(index,keyword):", "type": "Nugget", "id": 274004}, {"nuggetType": "lecture", "name": "Data Structures Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "0b587864-bf2b-44d1-b6fc-a37608c0c630", "name": "cs101_unit4_01_s_Data-Structures", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJOeEAw", "youtube_id": "nNEXCEH0dEw", "youtube_state": "done", "path": "Course/cs101/Media/266003", "transcript": null, "id": 266003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYueQQDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/275001", "type": "Nugget", "id": 275001}, {"nuggetType": "lecture", "name": "Add To Index", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "7b04dd5b-5c2a-4f77-90e7-baecdfc9ee43", "name": "cs101_unit4_02_p_Add-to-Index", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKHsEAw", "youtube_id": "B2J-bDQ4M1o", "youtube_state": "done", "path": "Course/cs101/Media/276001", "transcript": null, "id": 276001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYifQQDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/277001", "type": "Nugget", "id": 277001}, {"nuggetType": "program", "name": "Add To Index", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQY2YMRDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/279001", "suppliedCode": "#Define a procedure, add_to_index,\n#that takes 3 inputs:\n\n# - an index: [[<keyword>,[<url>,...]],...]\n# - a keyword: String\n# - a url: String\n\n#If the keyword is already\n#in the index, add the url\n#to the list of urls associated\n#with that keyword.\n\n#If the keyword is not in the index,\n#add an entry to the index: [keyword,[url]]\n\nindex = []\n\n\n#add_to_index(index,'udacity','http://udacity.com')\n#add_to_index(index,'computing','http://acm.org')\n#add_to_index(index,'udacity','http://npr.org')\n#print index => [['udacity', ['http://udacity.com', 'http://npr.org']], ['computing', ['http://acm.org']]]\n\ndef add_to_index(index,keyword,url): ", "type": "Nugget", "id": 279001}, {"nuggetType": "lecture", "name": "Add To Index Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "33e0e53f-63c1-4bbd-9727-c4db82f5b4b0", "name": "cs101_unit4_02_s_Add-to-Index", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNLcEAw", "youtube_id": "SGkb6vqS7zA", "youtube_state": "done", "path": "Course/cs101/Media/274002", "transcript": null, "id": 274002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYwYsRDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/280001", "type": "Nugget", "id": 280001}, {"nuggetType": "lecture", "name": "Conclusion", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "4e60def2-562d-4877-9000-b41564ca2987", "name": "cs101_unit4_20_l_Conclusion", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMGFEww", "youtube_id": "FTBmkCDDAUQ", "youtube_state": "done", "path": "Course/cs101/Media/312001", "transcript": null, "id": 312001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYrJMRDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/281004", "type": "Nugget", "id": 281004}, {"nuggetType": "lecture", "name": "Lookup Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "805bb517-fdb0-4267-9007-dd40b76e93aa", "name": "cs101_unit4_03_s_Lookup", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOrUEAw", "youtube_id": "bVjECgrnKj4", "youtube_state": "done", "path": "Course/cs101/Media/273002", "transcript": null, "id": 273002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYkZsRDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/282001", "type": "Nugget", "id": 282001}, {"nuggetType": "lecture", "name": "Building The Web Index", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "504afa76-0a87-4327-a70e-b5f88665a45e", "name": "cs101_unit4_04_l_Building-the-Web-Index", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLrkEAw", "youtube_id": "aRteT5uKqfg", "youtube_state": "done", "path": "Course/cs101/Media/275002", "transcript": null, "id": 275002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYkpsRDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/282002", "type": "Nugget", "id": 282002}, {"nuggetType": "lecture", "name": "Finishing The Web Crawler Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "d0269d6d-2b24-4b34-90c9-44197f862e99", "name": "cs101_unit4_06_s_Finishing-the-Web-Crawler", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPL7EAw", "youtube_id": "cPKnNmFTS80", "youtube_state": "done", "path": "Course/cs101/Media/278002", "transcript": null, "id": 278002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQY-qIRDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/283002", "type": "Nugget", "id": 283002}, {"nuggetType": "lecture", "name": "Add Page To Index Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "3f457b12-4916-4269-ba32-84dc7f62f107", "name": "cs101_unit4_05_s_Add-Page-to-Index", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMmyEQw", "youtube_id": "i3V-Aw4y-hg", "youtube_state": "done", "path": "Course/cs101/Media/285001", "transcript": null, "id": 285001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYyrIRDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/285002", "type": "Nugget", "id": 285002}, {"nuggetType": "snippetQuiz", "name": "Finishing The Web Crawler", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYmcIRDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/287001", "type": "Nugget", "id": 287001}, {"nuggetType": "lecture", "name": "Networks", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": null, "name": "cs101_unit4_09_q_Networks", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLvtDQw", "youtube_id": "GyQLioSa608", "youtube_state": "done", "path": "Course/cs101/Media/227003", "transcript": null, "id": 227003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQY6dERDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/289001", "type": "Nugget", "id": 289001}, {"nuggetType": "lecture", "name": "Networks Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "e6784ad5-a1bd-4925-aa92-99ccefc7a21a", "name": "cs101_unit4_09_s_Networks", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNHZEQw", "youtube_id": "QvYL3fRvd2Y", "youtube_state": "done", "path": "Course/cs101/Media/290001", "transcript": null, "id": 290001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYueERDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/291001", "type": "Nugget", "id": 291001}, {"nuggetType": "lecture", "name": "Smoke Signals", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "7ee102f6-0863-49a3-9a42-6f440383f0d1", "name": "cs101_unit4_10_l_Smoke-Signals", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLvkEAw", "youtube_id": "VhHUzspMhhw", "youtube_state": "done", "path": "Course/cs101/Media/275003", "transcript": null, "id": 275003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYifERDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/293001", "type": "Nugget", "id": 293001}, {"nuggetType": "lecture", "name": "Traveling Data Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "6f93bde2-211a-48ef-91cf-5e107c763efe", "name": "cs101_unit4_17_s_Traveling-Data", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJWbEQw", "youtube_id": "AWvMI4Cz1Ps", "youtube_state": "done", "path": "Course/cs101/Media/282005", "transcript": null, "id": 282005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYi_ERDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/293003", "type": "Nugget", "id": 293003}, {"nuggetType": "quiz", "name": "Latency", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQY2oASDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/295002", "type": "Nugget", "id": 295002}, {"nuggetType": "lecture", "name": "Latency Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "8ffcd7a7-e2f7-45f0-82de-3c93270aff6a", "name": "cs101_unit4_11_s_Latency", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNLlDQw", "youtube_id": "XCq5g-qBcEE", "youtube_state": "done", "path": "Course/cs101/Media/226002", "transcript": null, "id": 226002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQY24ASDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/295003", "type": "Nugget", "id": 295003}, {"nuggetType": "lecture", "name": "Latency", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "7b7ef24d-c872-4b82-ae96-ab1fde3e433b", "name": "cs101_unit4_11_q_Latency", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNmAEgw", "youtube_id": "hgfezkV5kdY", "youtube_state": "done", "path": "Course/cs101/Media/295001", "transcript": null, "id": 295001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYwYgSDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/296001", "type": "Nugget", "id": 296001}, {"nuggetType": "lecture", "name": "What Is Your Bandwidth Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "1e0ad55f-1272-4cb8-9dfd-0999b431ca7a", "name": "cs101_unit4_15_s_What-is-your-bandwidth", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJSbEQw", "youtube_id": "q-jdSNBGkco", "youtube_state": "done", "path": "Course/cs101/Media/282004", "transcript": null, "id": 282004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYwogSDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/296002", "type": "Nugget", "id": 296002}, {"nuggetType": "lecture", "name": "Bandwidth", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "e91e93f9-55a0-4a72-8b9d-db511fd83cda", "name": "cs101_unit4_12_l_Bandwidth", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKP1DQw", "youtube_id": "rximsqWQpmQ", "youtube_state": "done", "path": "Course/cs101/Media/228003", "transcript": null, "id": 228003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYqZASDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/297001", "type": "Nugget", "id": 297001}, {"nuggetType": "quiz", "name": "Traveling Data", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYqpASDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/297002", "type": "Nugget", "id": 297002}, {"nuggetType": "lecture", "name": "Protocols", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "f30cc8e2-5dd8-4e60-b6ab-138f5b08dffd", "name": "cs101_unit4_19_l_Protocols", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKX1DQw", "youtube_id": "V7PjN7QJ49k", "youtube_state": "done", "path": "Course/cs101/Media/228005", "transcript": null, "id": 228005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYq5ASDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/297003", "type": "Nugget", "id": 297003}, {"nuggetType": "lecture", "name": "Bits", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "50f74c34-d4e9-4390-bab2-c2251f865c88", "name": "cs101_unit4_13_q_Bits", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLrhEQw", "youtube_id": "GCkXJhEyDeA", "youtube_state": "done", "path": "Course/cs101/Media/291002", "transcript": null, "id": 291002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYkZgSDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/298001", "type": "Nugget", "id": 298001}, {"nuggetType": "quiz", "name": "Bits", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQY-Z8SDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/299001", "type": "Nugget", "id": 299001}, {"nuggetType": "lecture", "name": "Bits Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "c7bfe93e-e843-4f93-a38c-cb0109047665", "name": "cs101_unit4_13_s_Bits", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOKtEAw", "youtube_id": "9E7t0PSVLIc", "youtube_state": "done", "path": "Course/cs101/Media/268002", "transcript": null, "id": 268002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQY4acSDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/300001", "type": "Nugget", "id": 300001}, {"nuggetType": "quiz", "name": "What Is Your Bandwidth", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYyq8SDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/301002", "type": "Nugget", "id": 301002}, {"nuggetType": "lecture", "name": "Buckets Of Bits", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "0e062bb7-0316-4359-83ba-0df6c3319883", "name": "cs101_unit4_14_l_Buckets-of-Bits", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLG3Egw", "youtube_id": "Wcg0ubJ68IE", "youtube_state": "done", "path": "Course/cs101/Media/302001", "transcript": null, "id": 302001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYmb8SDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/303001", "type": "Nugget", "id": 303001}, {"nuggetType": "lecture", "name": "What Is Your Bandwidth", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "8929a32b-fa7a-4532-9fa8-ca61d38fd721", "name": "cs101_unit4_15_q_What-is-your-bandwidth", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIrxEQw", "youtube_id": "sfX9yT0BDmI", "youtube_state": "done", "path": "Course/cs101/Media/293002", "transcript": null, "id": 293002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQY6c4SDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/305001", "type": "Nugget", "id": 305001}, {"nuggetType": "lecture", "name": "Traceroute", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "8b3e4b66-faa2-4089-8d59-b95a00859453", "name": "cs101_unit4_16_l_Traceroute", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJq_Egw", "youtube_id": "kU30juVBCBg", "youtube_state": "done", "path": "Course/cs101/Media/303002", "transcript": null, "id": 303002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYoeYSDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/308001", "type": "Nugget", "id": 308001}, {"nuggetType": "lecture", "name": "Traveling Data", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "360f3998-367c-420e-a7e7-1250528d2ba3", "name": "cs101_unit4_17_q_Traveling-Data", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGInuEgw", "youtube_id": "F0zNr2lKD-I", "youtube_state": "done", "path": "Course/cs101/Media/309001", "transcript": null, "id": 309001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQY8fUSDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/310001", "type": "Nugget", "id": 310001}, {"nuggetType": "lecture", "name": "Making A Network", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "media": {"dotsub_id": "0844b7b3-e22d-4780-990c-4ff7b6c09c4d", "name": "cs101_unit4_18_l_Making-a-Network", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJOnDQw", "youtube_id": "VIQS3VZNpWg", "youtube_state": "done", "path": "Course/cs101/Media/218003", "transcript": null, "id": 218003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQY2f0SDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/311001", "type": "Nugget", "id": 311001}, {"nuggetType": "quiz", "name": "Networks", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMm1EAwLEgZOdWdnZXQYkZUTDA", "path": "Course/cs101/CourseRev/feb2012/Unit/269001/Nugget/314001", "type": "Nugget", "id": 314001}]}, {"name": "Homework 4", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": true, "closedAt": "03/21/2012 00:00", "nuggetLayout": [[null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAwLEgZOdWdnZXQYlZ4QDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAwLEgZOdWdnZXQYuckZDA"}], [null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAwLEgZOdWdnZXQY6cgUDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAwLEgZOdWdnZXQYidkZDA"}], [null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAwLEgZOdWdnZXQYudgUDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAwLEgZOdWdnZXQYxfkWDA"}], [null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAwLEgZOdWdnZXQY8vgRDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAwLEgZOdWdnZXQY2ugZDA"}], [null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAwLEgZOdWdnZXQYoeAUDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAwLEgZOdWdnZXQYkoAaDA"}], [null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAwLEgZOdWdnZXQYyqkUDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAwLEgZOdWdnZXQY-YcaDA"}], [null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAwLEgZOdWdnZXQY8e8UDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAwLEgZOdWdnZXQY4Y8aDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAw", "path": "Course/cs101/CourseRev/feb2012/Unit/335001", "open": false, "id": 335001, "nuggets": [{"nuggetType": "quiz", "name": "Data Structures", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAwLEgZOdWdnZXQYlZ4QDA", "path": "Course/cs101/CourseRev/feb2012/Unit/335001/Nugget/266005", "type": "Nugget", "id": 266005}, {"nuggetType": "quiz", "name": "Latency", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAwLEgZOdWdnZXQY8vgRDA", "path": "Course/cs101/CourseRev/feb2012/Unit/335001/Nugget/294002", "type": "Nugget", "id": 294002}, {"nuggetType": "program", "name": "Improving The Index", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAwLEgZOdWdnZXQYyqkUDA", "path": "Course/cs101/CourseRev/feb2012/Unit/335001/Nugget/333002", "suppliedCode": "#The current index includes a url in the list of urls\n#for a keyword multiple times if the keyword appears\n#on that page more than once.\n\n#It might be better to only include the same url\n#once in the url list for a keyword, even if it appears\n#many times.\n\n#Modify add_to_index so that a given url is only\n#included once in the url list for a keyword,\n#no matter how many times that keyword appears.\n\n#index = crawl_web(\"http://www.udacity.com/cs101x/index.html\")\n#print lookup(index,\"is\") => ['http://www.udacity.com/cs101x/index.html']\n\n\ndef add_to_index(index, keyword, url):\n    for entry in index:\n        if entry[0] == keyword:\n            entry[1].append(url)\n            return\n    # not found, add new keyword to index\n    index.append([keyword, [url]])\n\n\ndef get_page(url):\n    try:\n        if url == \"http://www.udacity.com/cs101x/index.html\":\n            return  '<html> <body> This is a test page for learning to crawl! <p> It is a good idea to  <a href=\"http://www.udacity.com/cs101x/crawling.html\">learn to crawl</a> before you try to  <a href=\"http://www.udacity.com/cs101x/walking.html\">walk</a> or  <a href=\"http://www.udacity.com/cs101x/flying.html\">fly</a>. </p> </body> </html> '\n        elif url == \"http://www.udacity.com/cs101x/crawling.html\":\n            return  '<html> <body> I have not learned to crawl yet, but I am quite good at  <a href=\"http://www.udacity.com/cs101x/kicking.html\">kicking</a>. </body> </html>'\n        elif url == \"http://www.udacity.com/cs101x/walking.html\":\n            return '<html> <body> I cant get enough  <a href=\"http://www.udacity.com/cs101x/index.html\">crawling</a>! </body> </html>'\n        elif url == \"http://www.udacity.com/cs101x/flying.html\":\n            return '<html> <body> The magic words are Squeamish Ossifrage! </body> </html>'\n    except:\n        return \"\"\n    return \"\"\n\ndef union(a, b):\n    for e in b:\n        if e not in a:\n            a.append(e)\n\ndef get_next_target(page):\n    start_link = page.find('<a href=')\n    if start_link == -1: \n        return None, 0\n    start_quote = page.find('\"', start_link)\n    end_quote = page.find('\"', start_quote + 1)\n    url = page[start_quote + 1:end_quote]\n    return url, end_quote\n\ndef get_all_links(page):\n    links = []\n    while True:\n        url, endpos = get_next_target(page)\n        if url:\n            links.append(url)\n            page = page[endpos:]\n        else:\n            break\n    return links\n\ndef crawl_web(seed):\n    tocrawl = [seed]\n    crawled = []\n    index = []\n    while tocrawl: \n        page = tocrawl.pop()\n        if page not in crawled:\n            content = get_page(page)\n            add_page_to_index(index, page, content)\n            union(tocrawl, get_all_links(content))\n            crawled.append(page)\n    return index\n\ndef add_page_to_index(index, url, content):\n    words = content.split()\n    for word in words:\n        add_to_index(index, word, url)\n\ndef lookup(index, keyword):\n    for entry in index:\n        if entry[0] == keyword:\n            return entry[1]\n    return None\n", "type": "Nugget", "id": 333002}, {"nuggetType": "quiz", "name": "Ben Bitdiddle ", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAwLEgZOdWdnZXQY6cgUDA", "path": "Course/cs101/CourseRev/feb2012/Unit/335001/Nugget/337001", "type": "Nugget", "id": 337001}, {"nuggetType": "quiz", "name": "Networking", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAwLEgZOdWdnZXQYudgUDA", "path": "Course/cs101/CourseRev/feb2012/Unit/335001/Nugget/339001", "type": "Nugget", "id": 339001}, {"nuggetType": "program", "name": "Better Splitting", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAwLEgZOdWdnZXQYoeAUDA", "path": "Course/cs101/CourseRev/feb2012/Unit/335001/Nugget/340001", "suppliedCode": "#1 Gold Star\n\n#The built-in <string>.split() procedure works\n#okay, but fails to find all the words on a page\n#because it only uses whitespace to split the\n#string. To do better, we should also use punctuation\n#marks to split the page into words.\n\n#Define a procedure, split_string, that takes two\n#inputs: the string to split and a string containing\n#all of the characters considered separators. The\n#procedure should output a list of strings that break\n#the source string up by the characters in the \n#splitlist.\n\n#out = split_string(\"This is a test-of the,string separation-code!\", \" ,!-\")\n#print out => ['This', 'is', 'a', 'test', 'of', 'the', 'string', 'separation', 'code']\n\n#out = split_string(\"After  the flood   ...  all the colors came out.\", \" .\")\n#print out => ['After', 'the', 'flood', 'all', 'the', 'colors', 'came', 'out']\n\ndef split_string(source,splitlist):\n", "type": "Nugget", "id": 340001}, {"nuggetType": "program", "name": "Counting Clicks", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAwLEgZOdWdnZXQY8e8UDA", "path": "Course/cs101/CourseRev/feb2012/Unit/335001/Nugget/342001", "suppliedCode": "#2 Gold Stars\n\n#One way search engines rank pages\n#is to count the number of times a\n#searcher clicks on a returned link.\n#This indicates that the person doing\n#the query thought this was a useful\n#link for the query, so it should be\n#higher in the rankings next time.\n\n#(In Unit 6, we will look at a different\n#way of ranking pages that does not depend\n#on user clicks.)\n\n#Modify the index such that for each url in a\n#list for a keyword, there is also a number\n#that counts the number of times a user\n#clicks on that link for this keyword.\n\n#The result of lookup(index,keyword) should\n#now be a list of url entries, where each url\n#entry is a list of a url and a number\n#indicating the number of times that url\n#was clicked for this query keyword.\n\n#You should define a new procedure to simulate\n#user clicks for a given link:\n\n#record_user_click(index,word,url)\n\n#that modifies the entry in the index for\n#the input word by increasing the count associated\n#with the url by 1.\n\n#You also will have to modify add_to_index\n#in order to correctly create the new data\n#structure.\n\n#Here is an example showing a sequence of interactions:\n\n\n#index = crawl_web('http://www.udacity.com/cs101x/index.html')\n#print lookup(index, 'good') => [['http://www.udacity.com/cs101x/index.html', 0], ['http://www.udacity.com/cs101x/crawling.html', 0]]\n#record_user_click(index, 'good', 'http://www.udacity.com/cs101x/crawling.html')\n#print lookup(index, 'good') => [['http://www.udacity.com/cs101x/index.html', 0], ['http://www.udacity.com/cs101x/crawling.html', 1]]\n\ndef record_user_click(index,keyword,url):\n\n\ndef add_to_index(index, keyword, url):\n    for entry in index:\n        if entry[0] == keyword:\n            entry[1].append(url)\n            return\n    # not found, add new keyword to index\n    index.append([keyword, [url]])\n\n\ndef get_page(url):\n    try:\n        if url == \"http://www.udacity.com/cs101x/index.html\":\n            return  '<html> <body> This is a test page for learning to crawl! <p> It is a good idea to  <a href=\"http://www.udacity.com/cs101x/crawling.html\">learn to crawl</a> before you try to  <a href=\"http://www.udacity.com/cs101x/walking.html\">walk</a> or  <a href=\"http://www.udacity.com/cs101x/flying.html\">fly</a>. </p> </body> </html> '\n        elif url == \"http://www.udacity.com/cs101x/crawling.html\":\n            return  '<html> <body> I have not learned to crawl yet, but I am quite good at  <a href=\"http://www.udacity.com/cs101x/kicking.html\">kicking</a>. </body> </html>'\n        elif url == \"http://www.udacity.com/cs101x/walking.html\":\n            return '<html> <body> I cant get enough  <a href=\"http://www.udacity.com/cs101x/index.html\">crawling</a>! </body> </html>'\n        elif url == \"http://www.udacity.com/cs101x/flying.html\":\n            return '<html> <body> The magic words are Squeamish Ossifrage! </body> </html>'\n    except:\n        return \"\"\n    return \"\"\n\ndef union(a, b):\n    for e in b:\n        if e not in a:\n            a.append(e)\n\ndef get_next_target(page):\n    start_link = page.find('<a href=')\n    if start_link == -1: \n        return None, 0\n    start_quote = page.find('\"', start_link)\n    end_quote = page.find('\"', start_quote + 1)\n    url = page[start_quote + 1:end_quote]\n    return url, end_quote\n\ndef get_all_links(page):\n    links = []\n    while True:\n        url, endpos = get_next_target(page)\n        if url:\n            links.append(url)\n            page = page[endpos:]\n        else:\n            break\n    return links\n\ndef crawl_web(seed):\n    tocrawl = [seed]\n    crawled = []\n    index = []\n    while tocrawl: \n        page = tocrawl.pop()\n        if page not in crawled:\n            content = get_page(page)\n            add_page_to_index(index, page, content)\n            union(tocrawl, get_all_links(content))\n            crawled.append(page)\n    return index\n\ndef add_page_to_index(index, url, content):\n    words = content.split()\n    for word in words:\n        add_to_index(index, word, url)\n\ndef lookup(index, keyword):\n    for entry in index:\n        if entry[0] == keyword:\n            return entry[1]\n    return None\n\n", "type": "Nugget", "id": 342001}, {"nuggetType": "lecture", "name": "Networking Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAw", "media": {"dotsub_id": "d89e862f-b26d-4f18-8061-901bd31552e2", "name": "cs101_hw4_02_s_Networking", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNnoGQw", "youtube_id": "rl7zOmndGLY", "youtube_state": "done", "path": "Course/cs101/Media/423001", "transcript": null, "id": 423001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAwLEgZOdWdnZXQYxfkWDA", "path": "Course/cs101/CourseRev/feb2012/Unit/335001/Nugget/376005", "type": "Nugget", "id": 376005}, {"nuggetType": "lecture", "name": "Data Structures Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAw", "media": {"dotsub_id": "d66d953f-7d3c-4295-a3ce-15e0fd542480", "name": "cs101_hw4_00_s_Data-Structures", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNHBGQw", "youtube_id": "6rE8vvdYn2c", "youtube_state": "done", "path": "Course/cs101/Media/418001", "transcript": null, "id": 418001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAwLEgZOdWdnZXQYuckZDA", "path": "Course/cs101/CourseRev/feb2012/Unit/335001/Nugget/419001", "type": "Nugget", "id": 419001}, {"nuggetType": "lecture", "name": "Ben Bitdiddle Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAw", "media": {"dotsub_id": "80cb11d9-973d-4360-b888-fd1f799dc642", "name": "cs101_hw4_01_s_Ben-Bitdiddle", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKHRGQw", "youtube_id": "h5KA5t8yo3I", "youtube_state": "done", "path": "Course/cs101/Media/420001", "transcript": null, "id": 420001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAwLEgZOdWdnZXQYidkZDA", "path": "Course/cs101/CourseRev/feb2012/Unit/335001/Nugget/421001", "type": "Nugget", "id": 421001}, {"nuggetType": "lecture", "name": "Latency Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAw", "media": {"dotsub_id": "93aba871-da6b-41e5-93a9-04353a508573", "name": "cs101_hw4_03_s_Latency", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMHwGQw", "youtube_id": "mFrA8bkGa-c", "youtube_state": "done", "path": "Course/cs101/Media/424001", "transcript": null, "id": 424001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAwLEgZOdWdnZXQY2ugZDA", "path": "Course/cs101/CourseRev/feb2012/Unit/335001/Nugget/423002", "type": "Nugget", "id": 423002}, {"nuggetType": "lecture", "name": "Better Splitting Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAw", "media": {"dotsub_id": "f3b1d16f-b73e-4d8c-b918-49ddf9ecc54e", "name": "cs101_hw4_04_s_Better-Splitting", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJGAGgw", "youtube_id": "alpdXaaSfGI", "youtube_state": "done", "path": "Course/cs101/Media/426001", "transcript": null, "id": 426001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAwLEgZOdWdnZXQYkoAaDA", "path": "Course/cs101/CourseRev/feb2012/Unit/335001/Nugget/426002", "type": "Nugget", "id": 426002}, {"nuggetType": "lecture", "name": "Improving The Index Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAw", "media": {"dotsub_id": "6b342b5b-d884-4101-8459-d2e90c5eb6cf", "name": "cs101_hw4_05_s_Improving-the-Index", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMb5Fgw", "youtube_id": "GD98Z_3cANU", "youtube_state": "done", "path": "Course/cs101/Media/376006", "transcript": null, "id": 376006}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAwLEgZOdWdnZXQY-YcaDA", "path": "Course/cs101/CourseRev/feb2012/Unit/335001/Nugget/427001", "type": "Nugget", "id": 427001}, {"nuggetType": "lecture", "name": "Counting Clicks Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAw", "media": {"dotsub_id": "9ff41d59-22f9-4ea3-9f4b-2091f8989ae4", "name": "cs101_hw4_06_s_Counting-Clicks", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNvoGQw", "youtube_id": "I2cK45tNbj0", "youtube_state": "done", "path": "Course/cs101/Media/423003", "transcript": null, "id": 423003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJm5FAwLEgZOdWdnZXQY4Y8aDA", "path": "Course/cs101/CourseRev/feb2012/Unit/335001/Nugget/428001", "type": "Nugget", "id": 428001}]}, {"name": "Office Hours 4", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJmqGQwLEgZOdWdnZXQY6bkZDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJmqGQw", "path": "Course/cs101/CourseRev/feb2012/Unit/415001", "open": false, "id": 415001, "nuggets": [{"nuggetType": "lecture", "name": "Office Hours Week 4", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJmqGQw", "media": {"dotsub_id": "9ec3e0b2-5560-4b55-becc-167110c001e3", "name": "cs101_oo4_00_l_Office-Hours-Week-4", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIGyGQw", "youtube_id": "zXzcbspcPeQ", "youtube_state": "done", "path": "Course/cs101/Media/416001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nWelcome to office hours for week 4.\n\n2\n00:00:03,000 --> 00:00:05,000\nI'm here with Andy. >>Hi.\n\n3\n00:00:05,000 --> 00:00:10,000\nHe's the assistant instructor for Sebastian's class, CS 373.\n\n4\n00:00:10,000 --> 00:00:13,000\nToday I'm going to take the role that Peter usually takes.\n\n5\n00:00:13,000 --> 00:00:15,000\nDave is out of town.\n\n6\n00:00:15,000 --> 00:00:18,000\nPeter will be Dave, and I'm going to ask some questions. So let's get started.\n\n7\n00:00:18,000 --> 00:00:22,000\nI'll try to do my best Dave impression. >>I'm sure you can manage.\n\n8\n00:00:22,000 --> 00:00:25,000\nBefore we get into content, let's talk a little bit about grading. >>Yes.\n\n9\n00:00:25,000 --> 00:00:28,000\nOver the last couple days we noticed some bugs \n\n10\n00:00:28,000 --> 00:00:31,000\nin actually the version of Python that we're using that would misgrade assignments\n\n11\n00:00:31,000 --> 00:00:34,000\nthat ended in a comment, which is very unfortunate\n\n12\n00:00:34,000 --> 00:00:36,000\nbecause comments shouldn't affect how a program runs.\n\n13\n00:00:36,000 --> 00:00:38,000\nSo we fixed that,\n\n14\n00:00:38,000 --> 00:00:43,000\nand, going forward, your assignments you submit won't be affected by that bug.\n\n15\n00:00:43,000 --> 00:00:49,000\nAnd we've also been working to address submitted code \n\n16\n00:00:49,000 --> 00:00:52,000\nthat was copied from an external editor into our IDE\n\n17\n00:00:52,000 --> 00:00:55,000\nthat had syntax errors going into it.\n\n18\n00:00:55,000 --> 00:00:59,000\nAnd we're going to regrade everything once we get the infrastructure to do so.\n\n19\n00:00:59,000 --> 00:01:03,000\nSo we're going to go back, all of the faulty programming assignments will be regraded,\n\n20\n00:01:03,000 --> 00:01:06,000\nand your grade will be changed accordingly.\n\n21\n00:01:06,000 --> 00:01:08,000\nJust one point, though.\n\n22\n00:01:08,000 --> 00:01:12,000\nMake sure that when the assignment calls for, let's say, a function titled Search\n\n23\n00:01:12,000 --> 00:01:14,000\nthat you title your function Search.\n\n24\n00:01:14,000 --> 00:01:18,000\nOtherwise when we try to call that function there's going to be an error. \n\n25\n00:01:18,000 --> 00:01:20,000\nOkay? >>Yeah.\n\n26\n00:01:20,000 --> 00:01:22,000\nAll right. Let's move on to content.\n\n27\n00:01:22,000 --> 00:01:25,000\nThe first question is one that I had, actually. >>Really? >>Yes.\n\n28\n00:01:25,000 --> 00:01:30,000\nI was going through 101, and I was curious about latency, networks,\n\n29\n00:01:30,000 --> 00:01:34,000\nbandwidth, and especially this thing called a packet. >>Hmm.\n\n30\n00:01:34,000 --> 00:01:36,000\nSo what is a packet?\n\n31\n00:01:36,000 --> 00:01:38,000\nOkay, a packet.\n\n32\n00:01:38,000 --> 00:01:42,000\nA packet is kind of how we transmit data on the Internet,\n\n33\n00:01:42,000 --> 00:01:46,000\nand this was a design decision to address a pretty basic problem.\n\n34\n00:01:46,000 --> 00:01:49,000\nSo let's imagine we're sitting in the Udacity office\n\n35\n00:01:49,000 --> 00:01:55,000\nand Andy is sitting across from me and he's streaming his music through his headphones\n\n36\n00:01:55,000 --> 00:01:57,000\nand I'm trying to download a file.\n\n37\n00:01:57,000 --> 00:02:01,000\nOver the air you can only send 1 thing at a time.\n\n38\n00:02:01,000 --> 00:02:05,000\nAnd so if you're streaming music constantly and I just want to download a file,\n\n39\n00:02:05,000 --> 00:02:07,000\nI can't do that at the same time.\n\n40\n00:02:07,000 --> 00:02:12,000\nSo the solution is to not download your file all at once in 1 single stream\n\n41\n00:02:12,000 --> 00:02:15,000\nbut to break it up in chunks.\n\n42\n00:02:15,000 --> 00:02:18,000\nAnd those chunks are called packets. >>Yes. >>Okay.\n\n43\n00:02:18,000 --> 00:02:22,000\nAnd so you download a chunk and then in between those chunks\n\n44\n00:02:22,000 --> 00:02:27,000\nI can still download my file, make requests, goof off on the Internet and whatnot\n\n45\n00:02:27,000 --> 00:02:30,000\nand occasionally answer questions on the forum. >>Get some work done, maybe?\n\n46\n00:02:30,000 --> 00:02:33,000\nSometimes. >>Okay, thank you.\n\n47\n00:02:33,000 --> 00:02:37,000\nAnd on the head of each of those packets is a header, I think you were telling me.\n\n48\n00:02:37,000 --> 00:02:41,000\nYeah. That's how the packets know where to go.\n\n49\n00:02:41,000 --> 00:02:46,000\nThey have an address and it's an IP address--you've probably heard that before.\n\n50\n00:02:46,000 --> 00:02:50,000\nAll that stands for is Internet Protocol address. It's just an address.\n\n51\n00:02:50,000 --> 00:02:52,000\nIt's like an address when you mail a letter.\n\n52\n00:02:52,000 --> 00:02:56,000\nIt says where it's going and if something goes wrong who to send it back to.\n\n53\n00:02:56,000 --> 00:02:59,000\nAnd the routers know what to do with those addresses to get it.\n\n54\n00:02:59,000 --> 00:03:03,000\nThey know where. It's the same way that a mailman knows where they go, the address.\n\n55\n00:03:03,000 --> 00:03:07,000\nThey just know where things are. >>Routers are little mailmen.\n\n56\n00:03:07,000 --> 00:03:10,000\nLittle mailmen. >>Okay, great.\n\n57\n00:03:10,000 --> 00:03:14,000\nFirst content question from a user is from Splashes,\n\n58\n00:03:14,000 --> 00:03:17,000\nand he wants to know how important as a computer scientist\n\n59\n00:03:17,000 --> 00:03:20,000\nis it to learn multiple languages.\n\n60\n00:03:20,000 --> 00:03:25,000\nIt's not as important as introductory students may think.\n\n61\n00:03:25,000 --> 00:03:28,000\nIt becomes pretty--\n\n62\n00:03:28,000 --> 00:03:33,000\nYou really should just choose the right language for whatever you're trying to do.\n\n63\n00:03:33,000 --> 00:03:36,000\nDifferent languages have advantages and disadvantages.\n\n64\n00:03:36,000 --> 00:03:40,000\nIf you want your code to run everywhere, Python runs pretty much everywhere.\n\n65\n00:03:40,000 --> 00:03:43,000\nIf you only are developing for an iPhone,\n\n66\n00:03:43,000 --> 00:03:46,000\nthen you're probably just going to need to use the language the iPhone uses,\n\n67\n00:03:46,000 --> 00:03:50,000\nObjective-C or some derivation of that.\n\n68\n00:03:50,000 --> 00:03:52,000\nBut yeah, it's a tool. >>Okay.\n\n69\n00:03:52,000 --> 00:03:56,000\nAnd so I guess one of the fears is that will we through learning Python\n\n70\n00:03:56,000 --> 00:03:58,000\nhave the tools to learn about these new tools?\n\n71\n00:03:58,000 --> 00:04:01,000\nWill we be able to learn new programming languages? >>Yeah.\n\n72\n00:04:01,000 --> 00:04:05,000\nA lot of it transfers, because programmers need to learn new languages,\n\n73\n00:04:05,000 --> 00:04:07,000\nso a lot of the stuff between the languages is very similar.\n\n74\n00:04:07,000 --> 00:04:10,000\nAnd that's by design.\n\n75\n00:04:10,000 --> 00:04:13,000\nAnd pretty much all the skills you learn in this class\n\n76\n00:04:13,000 --> 00:04:16,000\nwill apply to almost any programming language. >>Okay.\n\n77\n00:04:16,000 --> 00:04:20,000\nMalquan had a question about using Python code outside of the interpreter.\n\n78\n00:04:20,000 --> 00:04:23,000\nAll of our programs have been run by clicking a Run button,\n\n79\n00:04:23,000 --> 00:04:27,000\nbut normally when I run a program that's not how I do it. What can you say?\n\n80\n00:04:27,000 --> 00:04:30,000\nYeah. You go down to the task bar and you click the little picture. >>Exactly.\n\n81\n00:04:30,000 --> 00:04:35,000\nAll you do is to get that picture you run it through another program\n\n82\n00:04:35,000 --> 00:04:37,000\nthat kind of packages it together and you give it the picture\n\n83\n00:04:37,000 --> 00:04:40,000\nand then it'll create an installer which you can then distribute to your users\n\n84\n00:04:40,000 --> 00:04:42,000\nthat will install it on their machines.\n\n85\n00:04:42,000 --> 00:04:46,000\nBut once you click that button, it's just going to your program.\n\n86\n00:04:46,000 --> 00:04:50,000\nOkay. So clicking the button is like calling a function that runs my program? >>Mm-hmm.\n\n87\n00:04:50,000 --> 00:04:53,000\nOkay, great. Thank you.\n\n88\n00:04:53,000 --> 00:04:56,000\nLast question for the day, and this is probably a challenging one for you,\n\n89\n00:04:56,000 --> 00:04:58,000\nbut I think you're up to the task.\n\n90\n00:04:58,000 --> 00:05:03,000\nI want to know, and I think some of our students want to know, what is a database?\n\n91\n00:05:03,000 --> 00:05:05,000\nWe've been talking a lot about data structures.\n\n92\n00:05:05,000 --> 00:05:07,000\nSo 2 minutes or less. What's a database? >>2 minutes or less.\n\n93\n00:05:07,000 --> 00:05:10,000\nThat's your target. >>Okay.\n\n94\n00:05:10,000 --> 00:05:12,000\nThis is a challenge.\n\n95\n00:05:12,000 --> 00:05:16,000\nThe way we've been storing our index is kind of just a big Python list,\n\n96\n00:05:16,000 --> 00:05:19,000\nbut that can get unwieldy after a while.\n\n97\n00:05:19,000 --> 00:05:21,000\nEvery time we want to update the way we're storing the list\n\n98\n00:05:21,000 --> 00:05:24,000\nwe've got to kind of go through and write a program that changes the structure of our list\n\n99\n00:05:24,000 --> 00:05:29,000\nand then change all our functions to address this new list format.\n\n100\n00:05:29,000 --> 00:05:32,000\nAnd eventually, people got sick of doing that,\n\n101\n00:05:32,000 --> 00:05:37,000\nso you have dedicated programs that are built for storing and querying data,\n\n102\n00:05:37,000 --> 00:05:41,000\nand that's called a database. >>Okay, thank you.\n\n103\n00:05:41,000 --> 00:05:44,000\nAll right. Well, that's all the questions for this time.\n\n104\n00:05:44,000 --> 00:05:49,000\nAnd we--well, I suppose Peter and Dave--will see you next week. >>Bye. >>Bye.\n\n", "id": 416001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJmqGQwLEgZOdWdnZXQY6bkZDA", "path": "Course/cs101/CourseRev/feb2012/Unit/415001/Nugget/417001", "type": "Nugget", "id": 417001}]}, {"name": "Unit 5", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYqYcVDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY-pYVDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYyqYVDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYmbYVDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY6cUVDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY0s0VDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYot0VDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY2fQVDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYwfwVDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYkYwWDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY4ZsWDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYyaMWDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYsasWDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYgbsWDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYkowWDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYsqsWDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYgr4VDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY2_QVDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYodoWDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY_ZYVDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYgrsWDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY3PQVDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY2fEWDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYwfkWDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYy6YVDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYk48VDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY8ukWDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYqoEXDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY_pYVDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYutIWDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY8-kWDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYm7MWDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYsagXDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYs6sWDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY9OkWDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYgbgXDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY1M0VDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYw_8UDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYq4QWDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYg7sWDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYtKsWDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYlY8VDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYs64VDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYotoWDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYo9oWDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYpN0VDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY3vcUDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY1c0VDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYyqMWDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYw_kWDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY9uwVDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYzKYVDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYkokXDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY7cIWDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYpt0VDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY9-wVDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYtqsWDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY4PQVDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY-pMWDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYzaAXDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYxPkWDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY678XDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY4vQVDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY8eYXDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYwfYXDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYkYYYDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYyZ0YDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYma0YDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY4o8aDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY448aDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYmq0YDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY8eMYDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY6rwYDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYqvsYDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYkYMZDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY4ZIZDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY08QYDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY67wYDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "path": "Course/cs101/CourseRev/feb2012/Unit/343001", "open": false, "id": 343001, "nuggets": [{"nuggetType": "quiz", "name": "Implementing Hash Tables", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY3vcUDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/343006", "type": "Nugget", "id": 343006}, {"nuggetType": "lecture", "name": "Bad Hash Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "a5301d75-f729-4afa-9baf-f62138afc319", "name": "cs101_unit5_17_s_bad-hash", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPqQFww", "youtube_id": "LeUR3-5nLT4", "youtube_state": "done", "path": "Course/cs101/Media/379002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Evans] The answer is all choices are true except for the first one.\n\n2\n00:00:04,000 --> 00:00:07,000\nThe reason the first one is not true is this really doesn't take long to compute.\n\n3\n00:00:07,000 --> 00:00:11,000\nWe only need to look at 1 letter and do a simple modulo computation.\n\n4\n00:00:11,000 --> 00:00:13,000\nThat's very efficient.\n\n5\n00:00:13,000 --> 00:00:16,000\nBut the other 3 reasons are true, and we'll go through each of these,\n\n6\n00:00:16,000 --> 00:00:21,000\nshowing what happens, looking at how things evaluate in the Python interpreter.\n\n7\n00:00:21,000 --> 00:00:27,000\nThe first correct reason is that it produces an error for 1 input keyword.\n\n8\n00:00:27,000 --> 00:00:31,000\nWhen we write code we should think about whether it works for all possible inputs.\n\n9\n00:00:31,000 --> 00:00:35,000\nThe one that's usually the trickiest to think about is the boundary case.\n\n10\n00:00:35,000 --> 00:00:38,000\nFor a string, that's often the empty string.\n\n11\n00:00:38,000 --> 00:00:41,000\nSo if we pass in a string with no characters in it,\n\n12\n00:00:41,000 --> 00:00:44,000\nwhich is a perfectly valid string, \n\n13\n00:00:44,000 --> 00:00:47,000\nthen when we try to index element 0, that would be an error.\n\n14\n00:00:47,000 --> 00:00:51,000\nLet's see what happens when we try that in the Python shell.\n\n15\n00:00:51,000 --> 00:00:57,000\nWe'll try to evaluate bad_hash_string, passing in the keyword the empty string,\n\n16\n00:00:57,000 --> 00:01:00,000\nwhich is a perfectly valid string, and let's say there are 100 buckets.\n\n17\n00:01:00,000 --> 00:01:02,000\nWe do get an error.\n\n18\n00:01:02,000 --> 00:01:04,000\nWe get the error that the string index is out of range \n\n19\n00:01:04,000 --> 00:01:07,000\nbecause we tried to access the character at position 0\n\n20\n00:01:07,000 --> 00:01:10,000\nbut there is no character at position 0 in the empty string.\n\n21\n00:01:10,000 --> 00:01:15,000\nSo to understand the other 2 reasons, I've defined a procedure called test_hash_function.\n\n22\n00:01:15,000 --> 00:01:17,000\nIt takes 3 inputs.\n\n23\n00:01:17,000 --> 00:01:20,000\nThe first input is a function. We can pass functions around just like any other value.\n\n24\n00:01:20,000 --> 00:01:24,000\nSo what we're going to pass in for this is the bad_hash_string function that we've defined,\n\n25\n00:01:24,000 --> 00:01:28,000\nbut we can also use it to test other hash functions which we'll see later.\n\n26\n00:01:28,000 --> 00:01:32,000\nWe're going to pass in a list of keys. Those are the keywords for the hash table.\n\n27\n00:01:32,000 --> 00:01:35,000\nAnd we're going to pass in the size. This is the number of buckets.\n\n28\n00:01:35,000 --> 00:01:39,000\nWhat we do in test_hash_function is we're going to keep results as a list\n\n29\n00:01:39,000 --> 00:01:41,000\nof the number of times each bucket is used.\n\n30\n00:01:41,000 --> 00:01:44,000\nSo initially, they are all zeroes,\n\n31\n00:01:44,000 --> 00:01:48,000\nand we initialize it with (0) * size.\n\n32\n00:01:48,000 --> 00:01:52,000\nWe're going to use keys_used as a list of the keys that have already been used.\n\n33\n00:01:52,000 --> 00:01:54,000\nWe don't want to count a duplicate key more than once.\n\n34\n00:01:54,000 --> 00:01:56,000\nNow we're going to loop through the keys.\n\n35\n00:01:56,000 --> 00:01:59,000\nWe're going to check if a key was used already.\n\n36\n00:01:59,000 --> 00:02:03,000\nIf the key was not used, then we're going to figure out by calling the hash function\n\n37\n00:02:03,000 --> 00:02:05,000\nwhere that key would hash to.\n\n38\n00:02:05,000 --> 00:02:09,000\nSo if we passed in bad_hash_string, that would be the function here,\n\n39\n00:02:09,000 --> 00:02:13,000\nand we're calling that passing in the keyword and the number of buckets.\n\n40\n00:02:13,000 --> 00:02:18,000\nWe're storing the result in the variable hv, and then we're increasing the value\n\n41\n00:02:18,000 --> 00:02:22,000\nof the element at results(hv) by 1, \n\n42\n00:02:22,000 --> 00:02:24,000\nand this is a shorthand syntax. \n\n43\n00:02:24,000 --> 00:02:28,000\nIt means the same thing as doing a new assignment\n\n44\n00:02:28,000 --> 00:02:34,000\nwhere we're assigning to results(hv) the value currently in results(hv) + 1\n\n45\n00:02:34,000 --> 00:02:39,000\nand then we're adding the word that we just used to the list of keys used\n\n46\n00:02:39,000 --> 00:02:41,000\nso we don't use it again.\n\n47\n00:02:41,000 --> 00:02:43,000\nThis is similar to what we did in the web crawler \n\n48\n00:02:43,000 --> 00:02:45,000\nto avoid crawling the same page more than once.\n\n49\n00:02:45,000 --> 00:02:47,000\nAnd at the end we'll return the results.\n\n50\n00:02:47,000 --> 00:02:51,000\nSo what we'll have as the result of test_hash_function\n\n51\n00:02:51,000 --> 00:02:54,000\nis a list where the values in that list are numbers\n\n52\n00:02:54,000 --> 00:03:00,000\ngiving the number of times a key hashes to that bucket.\n\n53\n00:03:00,000 --> 00:03:03,000\nLet's try this with an example using the bad_hash_string function.\n\n54\n00:03:03,000 --> 00:03:06,000\nTo test our hash function, we need some content.\n\n55\n00:03:06,000 --> 00:03:09,000\nWe need content that represents the kind of words\n\n56\n00:03:09,000 --> 00:03:12,000\nthat we think we're going to be using the hash table on.\n\n57\n00:03:12,000 --> 00:03:16,000\nI've picked this one, which perhaps is represented, perhaps not.\n\n58\n00:03:16,000 --> 00:03:22,000\nWhat's there at that link is Gutenberg's text of The Adventures of Sherlock Holmes.\n\n59\n00:03:22,000 --> 00:03:27,000\nYou can see from the scroll bar it's quite long.\n\n60\n00:03:27,000 --> 00:03:32,000\nThis is all the text there is and so on.\n\n61\n00:03:32,000 --> 00:03:36,000\nWe're going to get all the words on this page using get_page,\n\n62\n00:03:36,000 --> 00:03:39,000\nwe're going to split them into words like we were doing in the crawler,\n\n63\n00:03:39,000 --> 00:03:43,000\nand we'll store that in the variable words.\n\n64\n00:03:43,000 --> 00:03:47,000\nThe length of that is over 100,000 words.\n\n65\n00:03:47,000 --> 00:03:52,000\nThey're not all unique, so the number of entries in our hash table will be smaller than that.\n\n66\n00:03:52,000 --> 00:03:55,000\nBut let's see how the distribution is for those words.\n\n67\n00:03:55,000 --> 00:04:01,000\nWe'll use the test_hash_function that we defined, passing in bad_hash_string,\n\n68\n00:04:01,000 --> 00:04:03,000\nthe words that we got from Sherlock Holmes,\n\n69\n00:04:03,000 --> 00:04:06,000\nand we'll pick, for now, size 12.\n\n70\n00:04:06,000 --> 00:04:09,000\nDefinitely too small, but that will give us a good sense of how the distribution goes\n\n71\n00:04:09,000 --> 00:04:12,000\nfor a small number of buckets.\n\n72\n00:04:12,000 --> 00:04:16,000\nNow we have the result. Let's look at what the counts are.\n\n73\n00:04:16,000 --> 00:04:21,000\nYou can see we've got 12 entries, which corresponds to the number of buckets,\n\n74\n00:04:21,000 --> 00:04:23,000\nand they vary quite a bit.\n\n75\n00:04:23,000 --> 00:04:29,000\nThe smallest one has only 754 elements. The largest one has over 2,000.\n\n76\n00:04:29,000 --> 00:04:34,000\nSo the gap between the smallest and largest is nearly a factor of 3.\n\n77\n00:04:34,000 --> 00:04:37,000\nIf our hash function was good, we would want these to be about the same size.\n\n78\n00:04:37,000 --> 00:04:39,000\nHere's what that looks like graphically.\n\n79\n00:04:39,000 --> 00:04:41,000\nWe have our 12 buckets.\n\n80\n00:04:41,000 --> 00:04:44,000\nThe ones that are red are too full.\n\n81\n00:04:44,000 --> 00:04:46,000\nThe ones that are blue are not full enough.\n\n82\n00:04:46,000 --> 00:04:48,000\nWe would like this to be a fairly flat graph \n\n83\n00:04:48,000 --> 00:04:51,000\ndistributing all the words evenly between the buckets.\n\n", "id": 379002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYw_8UDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/344003", "type": "Nugget", "id": 344003}, {"nuggetType": "lecture", "name": "Introduction", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "b97c6d7b-5805-4b9d-a85a-69d3ab64b63e", "name": "cs101_unit5_00_l_introduction", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMH_FAw", "youtube_id": "XJfrUOoQSOI", "youtube_state": "done", "path": "Course/cs101/Media/344001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nAt the end of Unit 4, we built a search index that could respond to queries\n\n2\n00:00:04,000 --> 00:00:07,000\nand would do this by going through each entry one at a time,\n\n3\n00:00:07,000 --> 00:00:10,000\nchecking if the keyword matched the word we were looking for,\n\n4\n00:00:10,000 --> 00:00:13,000\nand then responding with a result for that.\n\n5\n00:00:13,000 --> 00:00:17,000\nI wanted to ask Gabriel Wienberg, the creater of DuckDuckGo, how well that approach will work\n\n6\n00:00:17,000 --> 00:00:20,000\nif we have a large index with lots of queries.\n\n7\n00:00:20,000 --> 00:00:24,000\nYou'll find that with a large index with lots of queries, it will be too slow.\n\n8\n00:00:24,000 --> 00:00:28,000\nA typical search engine should respond in under a second and often times much faster.\n\n9\n00:00:28,000 --> 00:00:33,000\nBut with that algorithm, having to go through each link like that one after the other,\n\n10\n00:00:33,000 --> 00:00:36,000\nyou could be on the order of seconds or even longer.\n\n11\n00:00:36,000 --> 00:00:41,000\nSo what we're going to learn this unit is how to make this much faster.\n\n", "id": 344001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYqYcVDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/345001", "type": "Nugget", "id": 345001}, {"nuggetType": "quiz", "name": "Hash Table", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYk48VDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/346003", "type": "Nugget", "id": 346003}, {"nuggetType": "lecture", "name": "Testing Hash Functions", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "8e0a9534-3667-4e03-8e5d-a3491b478f62", "name": "cs101_unit5_19_l_testing-hash-functions", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLWrFgw", "youtube_id": "FSw1z_a2AH0", "youtube_state": "done", "path": "Course/cs101/Media/366005", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Evans] Let's test our new hash function, see if it does better than the bad string hash function\n\n2\n00:00:04,000 --> 00:00:06,000\nwe defined earlier. \n\n3\n00:00:06,000 --> 00:00:08,000\nWe're going to use the same test_hash_function we defined before\n\n4\n00:00:08,000 --> 00:00:14,000\nthat takes the function as input so we can pass in either the original bad string hash function\n\n5\n00:00:14,000 --> 00:00:18,000\nor the new hash_string function that we hope will work better,\n\n6\n00:00:18,000 --> 00:00:22,000\na list of keys, and the size, computing the hash value for each key\n\n7\n00:00:22,000 --> 00:00:24,000\nand records how many end up in each position.\n\n8\n00:00:24,000 --> 00:00:26,000\nSo let's try that again.\n\n9\n00:00:26,000 --> 00:00:30,000\nWe'll use the same example we had before, using the words from Sherlock Holmes.\n\n10\n00:00:30,000 --> 00:00:34,000\nWe'll initialize words as all the words in the page \n\n11\n00:00:34,000 --> 00:00:38,000\nthat is The Adventures of Sherlock Holmes that we load from the Web.\n\n12\n00:00:38,000 --> 00:00:43,000\nFirst we'll try this again with the old hash function, the bad string hash,\n\n13\n00:00:43,000 --> 00:00:45,000\nand obtain the counts. \n\n14\n00:00:45,000 --> 00:00:49,000\nLet's print those out. Remember what those look like.\n\n15\n00:00:49,000 --> 00:00:51,000\nIt's a pretty bad distribution, as we saw before, \n\n16\n00:00:51,000 --> 00:00:57,000\nranging from 725 all the way up to over 2000 in 1 bucket.\n\n17\n00:00:57,000 --> 00:01:01,000\nNow let's try it with the new hash function. \n\n18\n00:01:01,000 --> 00:01:06,000\nInstead of bad_hash_string, we'll pass in plain hash_string. \n\n19\n00:01:06,000 --> 00:01:09,000\nWe're using the same words, the same number of buckets,\n\n20\n00:01:09,000 --> 00:01:11,000\nand we'll see the distribution now.\n\n21\n00:01:11,000 --> 00:01:13,000\nIt looks a lot better.\n\n22\n00:01:13,000 --> 00:01:15,000\nThere's no values under 1000 now.\n\n23\n00:01:15,000 --> 00:01:22,000\nThere's no values over-- The highest one would be 1363 in the first bucket.\n\n24\n00:01:22,000 --> 00:01:24,000\nSo let's look at that graphically.\n\n25\n00:01:24,000 --> 00:01:27,000\nHere's what we had before with the bad_hash_string function.\n\n26\n00:01:27,000 --> 00:01:29,000\nWe can see the size of the buckets varies a great deal\n\n27\n00:01:29,000 --> 00:01:33,000\nand we have the red and blue bars showing some that are too popular,\n\n28\n00:01:33,000 --> 00:01:35,000\nsome that are not popular enough.\n\n29\n00:01:35,000 --> 00:01:38,000\nWith the new hash function we have much less variance.\n\n30\n00:01:38,000 --> 00:01:43,000\nStill not perfect. We'd like to have all the bars really be as close to the same as possible.\n\n31\n00:01:43,000 --> 00:01:46,000\nBut it's really close. So this is working pretty well.\n\n32\n00:01:46,000 --> 00:01:49,000\nThe other thing we can try is having more buckets. Let's try this.\n\n33\n00:01:49,000 --> 00:01:54,000\nNow we're doing the same thing but this time with 100 buckets instead of 12 buckets.\n\n34\n00:01:54,000 --> 00:01:56,000\nWe can print that out.\n\n35\n00:01:56,000 --> 00:01:59,000\nAnd so we see the results when we have 100 buckets are pretty good\n\n36\n00:01:59,000 --> 00:02:01,000\nbut certainly not perfect.\n\n37\n00:02:01,000 --> 00:02:04,000\nWe have buckets as small as this one that has 104\n\n38\n00:02:04,000 --> 00:02:09,000\nand as large as this one that has 197, so almost twice the size of the smallest bucket.\n\n39\n00:02:09,000 --> 00:02:12,000\nIt's certainly a hard problem to build a better hash function.\n\n40\n00:02:12,000 --> 00:02:15,000\nPeople put a lot of effort into building good hash functions.\n\n41\n00:02:15,000 --> 00:02:21,000\nAs your tables get larger, it's very important to have the hash function be efficient.\n\n42\n00:02:21,000 --> 00:02:24,000\nOur hash_string function is not that great because it does take a long time to execute.\n\n43\n00:02:24,000 --> 00:02:29,000\nIf the string gets longer, we have to go through that loop once for each character.\n\n44\n00:02:29,000 --> 00:02:31,000\nSo there are better hash functions available.\n\n45\n00:02:31,000 --> 00:02:33,000\nWe're not going to look at those in more detail now,\n\n46\n00:02:33,000 --> 00:02:35,000\nbut there will be some links on the website to documents \n\n47\n00:02:35,000 --> 00:02:38,000\nabout more interesting hash functions.\n\n48\n00:02:38,000 --> 00:02:40,000\nThis is going to work well enough for us, though.\n\n49\n00:02:40,000 --> 00:02:43,000\nSo before we go on to actually implementing in the hash table\n\n50\n00:02:43,000 --> 00:02:46,000\nI'm going to have 1 quiz to make sure that you understand \n\n51\n00:02:46,000 --> 00:02:49,000\nwhy this is so much better than the original index.\n\n", "id": 366005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYlY8VDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/346005", "type": "Nugget", "id": 346005}, {"nuggetType": "lecture", "name": "Making Things Fast", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "708d4305-7e0f-46f1-9ab2-39b4754445fa", "name": "cs101_unit5_01_l_making-things-fast", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPmWFQw", "youtube_id": "2XLwpaiuc0g", "youtube_state": "done", "path": "Course/cs101/Media/347001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\n[Unit 5 - How Programs Run, Making Things Fast]\n\n2\n00:00:02,000 --> 00:00:07,000\nWelcome to Unit 5. The main topic for this unit is trying to understand the cost of running program.\n\n3\n00:00:07,000 --> 00:00:10,000\nSo far we haven't really worried about this. We've been very happy to write code.\n\n4\n00:00:10,000 --> 00:00:14,000\nIf we get the correct result, that's a great thing.\n\n5\n00:00:14,000 --> 00:00:18,000\nBut once we start making programs bigger, worrying about programs that do more things,\n\n6\n00:00:18,000 --> 00:00:22,000\nrunning on larger inputs, we have to start thinking about the cost of running our programs.\n\n7\n00:00:22,000 --> 00:00:26,000\nThis question of what it costs to evaluate an execution \n\n8\n00:00:26,000 --> 00:00:29,000\nis a very important problem in computer science.\n\n9\n00:00:29,000 --> 00:00:31,000\n Sometimes it's one of the most fundamental problems.\n\n10\n00:00:31,000 --> 00:00:34,000\nMany people spend their whole careers working on this.\n\n11\n00:00:34,000 --> 00:00:37,000\nIt's a problem called algorithm analysis.\n\n12\n00:00:37,000 --> 00:00:41,000\nI haven't yet explained what an algorithm is, but you've actually written many of them already.\n\n13\n00:00:41,000 --> 00:00:44,000\nAn algorithm is the procedure that always finishes.\n\n14\n00:00:44,000 --> 00:00:49,000\nA procedure is just a well-defined sequence of steps.\n\n15\n00:00:49,000 --> 00:00:52,000\nIt has to be defined precisely enough that it could be executed mechanically.\n\n16\n00:00:52,000 --> 00:00:57,000\nTo be a procedure, it has to be something that can be executed without any thought.\n\n17\n00:00:57,000 --> 00:01:01,000\nWe're mostly interested in procedures that can be executed by computers,\n\n18\n00:01:01,000 --> 00:01:05,000\nbut the important part of what makes it a procedure is that the steps are very precisely defined\n\n19\n00:01:05,000 --> 00:01:08,000\nand don't require any thought to execute.\n\n20\n00:01:08,000 --> 00:01:11,000\nTo be an algorithm, it has to always finish.\n\n21\n00:01:11,000 --> 00:01:14,000\nWe've pointed out already that this is a very tough problem--\n\n22\n00:01:14,000 --> 00:01:17,000\nto figure out whether a program will finish.\n\n23\n00:01:17,000 --> 00:01:20,000\nIn general, it's not possible to answer that question,\n\n24\n00:01:20,000 --> 00:01:23,000\nbut for many specific programs it is.\n\n25\n00:01:23,000 --> 00:01:26,000\nIn order for  a program to be an algorithm, we have to know that it always finishes,\n\n26\n00:01:26,000 --> 00:01:28,000\nand it always produces the correct result.\n\n27\n00:01:28,000 --> 00:01:32,000\nOnce we have an algorithm, we know we have a well-defined sequence of steps, \n\n28\n00:01:32,000 --> 00:01:36,000\nso we can reason about what will happen on any input.\n\n29\n00:01:36,000 --> 00:01:39,000\nAnd we know that it will always finish and always produce the correct result.\n\n30\n00:01:39,000 --> 00:01:45,000\nThen we can think about what the cost is of executing that algorithm on some input.\n\n31\n00:01:45,000 --> 00:01:47,000\nHow should we think about cost?\n\n32\n00:01:47,000 --> 00:01:50,000\nThe way computer scientists think about cost is quite different\n\n33\n00:01:50,000 --> 00:01:54,000\nfrom how most people think about cost.\n\n34\n00:01:54,000 --> 00:01:57,000\nIf you're normally thinking about cost, you've got a specific object.\n\n35\n00:01:57,000 --> 00:02:03,000\nLet's say you've got a cool car. This is supposed to be a cool car.\n\n36\n00:02:03,000 --> 00:02:08,000\nIt doesn't quite look like a cool car. It's got a cost associated with it.\n\n37\n00:02:08,000 --> 00:02:13,000\nLet's say that's a $25,000 car, and you have some other car.\n\n38\n00:02:13,000 --> 00:02:17,000\nYou have one car that's got a particular cost. That's what it costs you to get that car.\n\n39\n00:02:17,000 --> 00:02:20,000\nYou could have another car that would be smaller and green.\n\n40\n00:02:20,000 --> 00:02:24,000\nLet's say that car costs $10,000.\n\n41\n00:02:24,000 --> 00:02:27,000\nWhen we think about the cost of things normally, we have very specific things.\n\n42\n00:02:27,000 --> 00:02:31,000\nThey have specific costs, and we know that the red car costs $25,000, \n\n43\n00:02:31,000 --> 00:02:35,000\nthe green car costs $10,000. The red car costs more than the green car.\n\n44\n00:02:35,000 --> 00:02:38,000\nWe just need to compare those costs.\n\n45\n00:02:38,000 --> 00:02:41,000\nWhen we think about the cost of algorithms,\n\n46\n00:02:41,000 --> 00:02:45,000\nwe don't have a specific execution in mind usually.\n\n47\n00:02:45,000 --> 00:02:49,000\nWhat we want to understand is how the cost depends on the input.\n\n48\n00:02:49,000 --> 00:02:53,000\nWe might have two different algorithms, let's say this is algorithm 1,\n\n49\n00:02:53,000 --> 00:02:58,000\nand we have a second algorithm that solves the same problem.\n\n50\n00:02:58,000 --> 00:03:05,000\nBoth of these are algorithms that take inputs and produce output.\n\n51\n00:03:05,000 --> 00:03:09,000\nIf we wanted to decide which algorithm is better, \n\n52\n00:03:09,000 --> 00:03:13,000\nwe don't have a specific cost for the algorithm the way we do for the cars.\n\n53\n00:03:13,000 --> 00:03:15,000\nWe can say the red car costs more than the green car.\n\n54\n00:03:15,000 --> 00:03:19,000\nThe cost depends on the actual input that we run the algorithm on.\n\n55\n00:03:19,000 --> 00:03:22,000\nIt might be the case for some inputs algorithm 1 is faster,\n\n56\n00:03:22,000 --> 00:03:29,000\nand for other inputs, algorithm 2 is faster. I should label this algorithm 2.\n\n57\n00:03:29,000 --> 00:03:35,000\nWhat we need to understand is how the cost of executing the algorithm depends on the input.\n\n58\n00:03:35,000 --> 00:03:38,000\nWe don't want to do that for every specific input.\n\n59\n00:03:38,000 --> 00:03:43,000\nIf we had to do that for every input, we might as well just run it on the input and see what it costs.\n\n60\n00:03:43,000 --> 00:03:48,000\nWhat we want to do is be able to predict this without actually having to run it on every input.\n\n61\n00:03:48,000 --> 00:03:52,000\nNormally, there isn't that much that matters about the specific input.\n\n62\n00:03:52,000 --> 00:03:56,000\nThe main thing that's going to matter about the input is the size of the input.\n\n63\n00:03:56,000 --> 00:04:00,000\nThat's not always going to be the case, and we'll see examples where other properties of the input matter.\n\n64\n00:04:00,000 --> 00:04:05,000\nThe primary way we talk about cost in computer science is based on the size of the input.\n\n65\n00:04:05,000 --> 00:04:11,000\nAs the size of input increases, how does the cost to evaluate the procedure increase?\n\n66\n00:04:11,000 --> 00:04:14,000\nCost ultimately always comes down to money.\n\n67\n00:04:14,000 --> 00:04:19,000\nWhen it comes down to money what are the things that cost money when we execute algorithms?\n\n68\n00:04:19,000 --> 00:04:23,000\nThe main things that cost money are the time it takes to finish.\n\n69\n00:04:23,000 --> 00:04:27,000\nIf we get an answer more quickly, we've spent less time on it.\n\n70\n00:04:27,000 --> 00:04:30,000\nWe can also rent computers by the time to execute.\n\n71\n00:04:30,000 --> 00:04:35,000\nThere are lots of cloud computing services now that will give you a processor of a certain power \n\n72\n00:04:35,000 --> 00:04:39,000\nfor a certain amount of time for a certain number of cents per hours.\n\n73\n00:04:39,000 --> 00:04:43,000\nTime really is money, and so we don't need to turn our cost estimates into money,\n\n74\n00:04:43,000 --> 00:04:46,000\nbecause we don't necessarily know how much our computing cost will be.\n\n75\n00:04:46,000 --> 00:04:49,000\nBut if we can understand the time it takes to execute,\n\n76\n00:04:49,000 --> 00:04:51,000\nthat'll give us a good sense of the cost.\n\n77\n00:04:51,000 --> 00:04:55,000\nThe other main cost is often memory.\n\n78\n00:04:55,000 --> 00:04:59,000\nIf we know that we need a certain amount of memory to be able to execute our algorithm,\n\n79\n00:04:59,000 --> 00:05:01,000\nthat tells us something about the size of computer we need \n\n80\n00:05:01,000 --> 00:05:03,000\nand how expensive that's going to be.\n\n81\n00:05:03,000 --> 00:05:07,000\nWe don't usually talk about cost in terms of dollars when we analyze algorithms.\n\n82\n00:05:07,000 --> 00:05:10,000\nWe're talking about cost in terms of time and memory,\n\n83\n00:05:10,000 --> 00:05:15,000\nbut those things in real implementations end up being cost in terms of dollars.\n\n84\n00:05:15,000 --> 00:05:18,000\nWe're mostly going to focus on measuring time, \n\n85\n00:05:18,000 --> 00:05:22,000\nand time is usually the most important cost of running an algorithm.\n\n86\n00:05:22,000 --> 00:05:25,000\nMemory is often another consideration.\n\n", "id": 347001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY-pYVDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/347002", "type": "Nugget", "id": 347002}, {"nuggetType": "lecture", "name": "Worst Case Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "d71f9dee-64af-4bbd-b441-0b2a06fba588", "name": "cs101_unit5_09_s_worst-case", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIniFgw", "youtube_id": "jn_yEdf6meg", "youtube_state": "done", "path": "Course/cs101/Media/373001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nTheir answer is both of the last two.\n\n2\n00:00:03,000 --> 00:00:06,000\nBoth of these will need to go through the loop here--\n\n3\n00:00:06,000 --> 00:00:08,000\nthe number of elements and index times.\n\n4\n00:00:08,000 --> 00:00:11,000\nIn the case where it's a word that's not in an index,\n\n5\n00:00:11,000 --> 00:00:15,000\nthe test will always be false, and we'll get to the end of the loop and return \"None.\"\n\n6\n00:00:15,000 --> 00:00:20,000\nIn the case where the last word is added, we'll still go through the loop the number of elements times,\n\n7\n00:00:20,000 --> 00:00:24,000\nbut the very last time we'll find a match and return that element.\n\n8\n00:00:24,000 --> 00:00:29,000\nOne of the assumptions in all of this analysis is that the time it takes to go through the loop\n\n9\n00:00:29,000 --> 00:00:32,000\ndoesn't depend on the actual keyword that's passed in.\n\n10\n00:00:32,000 --> 00:00:36,000\nThat's assuming that this equal comparison takes the same amount of time,\n\n11\n00:00:36,000 --> 00:00:39,000\ndepending on what the entry and the keyword is.\n\n12\n00:00:39,000 --> 00:00:44,000\nIt doesn't matter what the keyword is. The time to do this comparison is the same.\n\n13\n00:00:44,000 --> 00:00:47,000\nIt turns out that for strings in Python, that's the case.\n\n14\n00:00:47,000 --> 00:00:52,000\nWe can do these string comparisons very quickly, because strings are immutable.\n\n15\n00:00:52,000 --> 00:00:56,000\nThat means that we don't need to look at all the characters in the string to compare two strings.\n\n16\n00:00:56,000 --> 00:01:01,000\nDouble equal for strings can be done in such a way that it doesn't need to look at the whole string.\n\n17\n00:01:01,000 --> 00:01:04,000\nIt knows that the strings were created as different strings.\n\n18\n00:01:04,000 --> 00:01:06,000\nThat means they're different strings, or if they were created \n\n19\n00:01:06,000 --> 00:01:09,000\nas the same string, they're the same string.\n\n20\n00:01:09,000 --> 00:01:13,000\nThat's the reason why we say that all of other operations in the loop have constant time.\n\n21\n00:01:13,000 --> 00:01:16,000\nThey don't depend on the size of the inputs at all.\n\n22\n00:01:16,000 --> 00:01:19,000\nThese are all very fast operations.\n\n", "id": 373001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY_ZYVDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/347005", "type": "Nugget", "id": 347005}, {"nuggetType": "lecture", "name": "Modulus Operator", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "dea72930-d1af-4a81-9e0b-e1daf4df41a4", "name": "cs101_unit5_14_l_modulus-operator", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJGJFww", "youtube_id": "MrTtsX2Wg9Q", "youtube_state": "done", "path": "Course/cs101/Media/378001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\n[Evans] To get our outputs in the correct range,\n\n2\n00:00:03,000 --> 00:00:06,000\nwe're going to use the modulus operator.\n\n3\n00:00:06,000 --> 00:00:08,000\nThis is written with a percent sign.\n\n4\n00:00:08,000 --> 00:00:11,000\nIt's usually the Shift 5 on most keyboards.\n\n5\n00:00:11,000 --> 00:00:16,000\nWhat modulus does is takes a number and maps it to the range\n\n6\n00:00:16,000 --> 00:00:19,000\nbased on the remainder when you divide that number.\n\n7\n00:00:19,000 --> 00:00:23,000\nThe way modulo arithmetic works is like a clock,\n\n8\n00:00:23,000 --> 00:00:26,000\nso if we think of having a clock with 12 hours\n\n9\n00:00:26,000 --> 00:00:30,000\nand then arithmetic on the clock is modulo 12.\n\n10\n00:00:30,000 --> 00:00:39,000\nIf we were to evaluate 14 % 12, what that would mean is if you start from 0\n\n11\n00:00:39,000 --> 00:00:48,000\nand we make 14 steps--we're going to go 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14--\n\n12\n00:00:48,000 --> 00:00:50,000\nwhere we end up is 2.\n\n13\n00:00:50,000 --> 00:00:55,000\nThat's the same as the remainder we would get by dividing 14 by 12,\n\n14\n00:00:55,000 --> 00:00:59,000\nand that's the result of 14 % 12 is 2.\n\n15\n00:00:59,000 --> 00:01:01,000\nSo now we're going to have a few quizzes \n\n16\n00:01:01,000 --> 00:01:03,000\nto make sure that you understand the modulus operator \n\n17\n00:01:03,000 --> 00:01:07,000\nas well as the ord and chr operators we introduced.\n\n", "id": 378001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY_pYVDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/347006", "type": "Nugget", "id": 347006}, {"nuggetType": "lecture", "name": "Measuring Speed", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "a328a3e4-f836-436e-9767-b1bb8c1b76ed", "name": "cs101_unit5_02_q_measuring-speed", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMmmFQw", "youtube_id": "8LmVs9Ssy2o", "youtube_state": "done", "path": "Course/cs101/Media/349001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nFor this quiz, I want you to think about why we're so focused on how time scales\n\n2\n00:00:05,000 --> 00:00:11,000\nwith the size of the input rather than the absolute time it takes for a particular execution to run.\n\n3\n00:00:11,000 --> 00:00:14,000\nCheck all the answers that are correct.\n\n4\n00:00:14,000 --> 00:00:17,000\nThe first choice is we want to predict how long it will take for a program \n\n5\n00:00:17,000 --> 00:00:20,000\nto execute before we actually run the program.\n\n6\n00:00:20,000 --> 00:00:25,000\nThe second choice is we want to know how the time will change as computers get faster.\n\n7\n00:00:25,000 --> 00:00:30,000\nThrough the entire history of computing, it's been the case that the computer that you can buy\n\n8\n00:00:30,000 --> 00:00:33,000\nfor the same amount of money, a year from now is faster\n\n9\n00:00:33,000 --> 00:00:36,000\nthan the computer that you can get for that price today.\n\n10\n00:00:36,000 --> 00:00:39,000\nThe third choice is we want to understand fundamental properties of our algorithms,\n\n11\n00:00:39,000 --> 00:00:45,000\nnot things that are specific to a particular input or machine.\n\n12\n00:00:45,000 --> 00:00:49,000\nThe fourth choice is we want abstract answers to make sure they can never be wrong.\n\n", "id": 349001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYyqYVDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/349002", "type": "Nugget", "id": 349002}, {"nuggetType": "lecture", "name": "Hash Table", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "a3b3a729-3374-4fc0-a445-41b25a245ce6", "name": "cs101_unit5_12_q_hash-table", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKmBFww", "youtube_id": "BAJhdq89n-4", "youtube_state": "done", "path": "Course/cs101/Media/377001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Evans] Now we're ready for a quiz to see if you understand the goal of the hash table.\n\n2\n00:00:04,000 --> 00:00:07,000\nThe question is, if we have b buckets in our hash table\n\n3\n00:00:07,000 --> 00:00:12,000\nand we have k keywords--and we should assume that k is much greater than b,\n\n4\n00:00:12,000 --> 00:00:14,000\nthat there are more keywords than we have buckets--\n\n5\n00:00:14,000 --> 00:00:16,000\nthe question is, which of the properties should the hash function have?\n\n6\n00:00:16,000 --> 00:00:18,000\nAnd remember what the hash function is.\n\n7\n00:00:18,000 --> 00:00:21,000\nIt's a function that takes in a keyword,\n\n8\n00:00:21,000 --> 00:00:26,000\nproduces a number, and what that number does is gives us the position in the hash table\n\n9\n00:00:26,000 --> 00:00:30,000\nwhich is the bucket where that keyword would appear.\n\n10\n00:00:30,000 --> 00:00:34,000\nThe first choice is output a unique number between 0 and k - 1,\n\n11\n00:00:34,000 --> 00:00:37,000\nso each keyword maps to its own output number.\n\n12\n00:00:37,000 --> 00:00:43,000\nThe second choice is output a number between 0 and b - 1\n\n13\n00:00:43,000 --> 00:00:45,000\nthe number of buckets that we have.\n\n14\n00:00:45,000 --> 00:00:51,000\nThe third choice is it should map approximately k/b of the keywords to bucket 0.\n\n15\n00:00:51,000 --> 00:00:54,000\nThat means for that number of keywords\n\n16\n00:00:54,000 --> 00:00:59,000\nthe output of the hash should be 0 and it should map to the first bucket.\n\n17\n00:00:59,000 --> 00:01:04,000\nThe fourth choice is map approximately k/b of the keywords to bucket b - 1.\n\n18\n00:01:04,000 --> 00:01:06,000\nThat's the last bucket.\n\n19\n00:01:06,000 --> 00:01:11,000\nAnd the final choice is it should map more of the keywords to bucket 0\n\n20\n00:01:11,000 --> 00:01:13,000\nthan it maps to bucket 1.\n\n21\n00:01:13,000 --> 00:01:17,000\nCheck all of the properties that we would like the hash function to have.\n\n", "id": 377001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYy6YVDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/349003", "type": "Nugget", "id": 349003}, {"nuggetType": "lecture", "name": "The Hard Way", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "a50ed572-fd4c-4ee8-bfb7-d978d28c4cc2", "name": "cs101_unit5_23_q_the-hard-way", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOzCFgw", "youtube_id": "W4vEInw5sl0", "youtube_state": "done", "path": "Course/cs101/Media/369004", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\n[Narrator] The question is why does this not work--\n\n2\n00:00:02,000 --> 00:00:07,000\n--why does multiplying empty list times nbuckets not produce what we need for the empty hash table?\n\n3\n00:00:07,000 --> 00:00:12,000\nAnd the possible answers are because it's too easy and we like doing things the hard way\n\n4\n00:00:12,000 --> 00:00:15,000\nbecause each element in the output refers to the same empty list\n\n5\n00:00:15,000 --> 00:00:19,000\nor because the store operator means something different for lists than it does for strings.\n\n", "id": 369004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYzKYVDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/349004", "type": "Nugget", "id": 349004}, {"nuggetType": "lecture", "name": "Keywords And Buckets", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "4358943f-bfb0-4d92-8d26-7dfbb3ef7ca7", "name": "cs101_unit5_20_q_keywords-and-buckets", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJaPFQw", "youtube_id": "L8g7O-rOnPc", "youtube_state": "done", "path": "Course/cs101/Media/346006", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\n[Evans] Let's assume for now that we have a perfect hash function,\n\n2\n00:00:03,000 --> 00:00:07,000\nthat it distributes keys evenly across all the buckets.\n\n3\n00:00:07,000 --> 00:00:11,000\nThen the question is, which of the following will leave the expected lookup time\n\n4\n00:00:11,000 --> 00:00:13,000\nfor a given keyword essentially unchanged?\n\n5\n00:00:13,000 --> 00:00:16,000\nThe first choice is we can double the number of keywords \n\n6\n00:00:16,000 --> 00:00:18,000\nwithout changing the number of buckets.\n\n7\n00:00:18,000 --> 00:00:21,000\nThe second choice is we can keep the number of keywords the same\n\n8\n00:00:21,000 --> 00:00:23,000\nbut double the number of buckets.\n\n9\n00:00:23,000 --> 00:00:25,000\nThe third choice is we can double the number of keywords\n\n10\n00:00:25,000 --> 00:00:27,000\nand double the number of buckets.\n\n11\n00:00:27,000 --> 00:00:29,000\nThe fourth choice is we can halve the number of keywords,\n\n12\n00:00:29,000 --> 00:00:32,000\nkeeping the number of buckets the same.\n\n13\n00:00:32,000 --> 00:00:34,000\nAnd the final choice is we can have half as many keywords\n\n14\n00:00:34,000 --> 00:00:36,000\nand half as many buckets.\n\n15\n00:00:36,000 --> 00:00:40,000\nAnd the question is, which of these 5--and there could be more than 1 that's correct--\n\n16\n00:00:40,000 --> 00:00:44,000\nwill essentially leave the time it takes to look up a keyword unchanged?\n\n", "id": 346006}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYs64VDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/350003", "type": "Nugget", "id": 350003}, {"nuggetType": "quiz", "name": "Measuring Speed", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYmbYVDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/351001", "type": "Nugget", "id": 351001}, {"nuggetType": "lecture", "name": "Lookup Time Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "e3a60a13-3218-45ae-964d-30f48bdc7bc4", "name": "cs101_unit5_08_s_lookup-time", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLnSFgw", "youtube_id": "kTzRWLfI0ps", "youtube_state": "done", "path": "Course/cs101/Media/371001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nThe answer is actually 0 seconds. This will take very little time.\n\n2\n00:00:04,000 --> 00:00:08,000\nIt won't be exactly no time, but very close to zero seconds.\n\n3\n00:00:08,000 --> 00:00:11,000\nThe reason for this is because of both the way make_big_index works, \n\n4\n00:00:11,000 --> 00:00:18,000\nwhich creates and index where the words start with 4 a's and we keep increasing the letters as we go.\n\n5\n00:00:18,000 --> 00:00:23,000\nThat means the index created by make_big_index, passing in any number.\n\n6\n00:00:23,000 --> 00:00:27,000\nThe first entry in that index will always be 'aaaaaaaa.'\n\n7\n00:00:27,000 --> 00:00:31,000\nWhen we do the lookup, the way lookup works, it goes through the entries in order,\n\n8\n00:00:31,000 --> 00:00:33,000\nand it's going to find the first entry right away.\n\n9\n00:00:33,000 --> 00:00:39,000\nThe point I want to make with this quiz is that the execution time depends on both\n\n10\n00:00:39,000 --> 00:00:42,000\nthe size of the input, and sometimes it depends on the actual input.\n\n11\n00:00:42,000 --> 00:00:45,000\nHere the size of the index is very big,\n\n12\n00:00:45,000 --> 00:00:48,000\nbut because we looked up a word that's at the very beginning of hte index, the lookup is very fast.\n\n", "id": 371001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYgr4VDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/352002", "type": "Nugget", "id": 352002}, {"nuggetType": "lecture", "name": "Measuring Speed Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "b1e70c04-e127-4fc3-aefe-183807b25469", "name": "cs101_unit5_02_s_measuring-speed", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIG-FQw", "youtube_id": "o8ZVlE2XDiM", "youtube_state": "done", "path": "Course/cs101/Media/352001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nThe answer is the first three are all good reasons to focus on\n\n2\n00:00:04,000 --> 00:00:08,000\n how time scales with input size rather than absolute time.\n\n3\n00:00:08,000 --> 00:00:14,000\nThe first reason is if we have an understanding of how the time depends on input size,\n\n4\n00:00:14,000 --> 00:00:18,000\nthen we can project how long it will take before we actually execute a program.\n\n5\n00:00:18,000 --> 00:00:21,000\nIf we have to run the program to figure out how long it takes,\n\n6\n00:00:21,000 --> 00:00:25,000\nthat's not going to be very useful, because we've actually finished it. We've got the result we want.\n\n7\n00:00:25,000 --> 00:00:28,000\nIf we only learn how long it takes on that particular input,\n\n8\n00:00:28,000 --> 00:00:33,000\nwe haven't learned anything useful to figure out what it will cost to run it on some other input.\n\n9\n00:00:33,000 --> 00:00:36,000\nWe want to be able to make predictions by understanding how the running time \n\n10\n00:00:36,000 --> 00:00:39,000\ndepends on the actual size of the input.\n\n11\n00:00:39,000 --> 00:00:41,000\nThe second reason is also true.\n\n12\n00:00:41,000 --> 00:00:46,000\nBy understanding how time scales with input size, we get a better idea of how the cost will change over time.\n\n13\n00:00:46,000 --> 00:00:48,000\nComputers keep getting cheaper and faster.\n\n14\n00:00:48,000 --> 00:00:52,000\nThis was observed by Gordon Moore in 1965\n\n15\n00:00:52,000 --> 00:00:56,000\nand turned into the notion that we sometimes call \"Moore's Law\" today.\n\n16\n00:00:56,000 --> 00:00:58,000\nIt's not a law in the sense of a physical law, \n\n17\n00:00:58,000 --> 00:01:02,000\nbut it's a law in the sense that a history of computing has followed this trend \n\n18\n00:01:02,000 --> 00:01:05,000\nwhere the amount of computing power you get for the same cost\n\n19\n00:01:05,000 --> 00:01:07,000\napproximately doubles every 18 months.\n\n20\n00:01:07,000 --> 00:01:14,000\nWhat you can get for $1000 today is half what you'll be able to get for $1000 a year and a half from now.\n\n21\n00:01:14,000 --> 00:01:18,000\nThat's a pretty nice property to have, but it means that understanding the cost \n\n22\n00:01:18,000 --> 00:01:20,000\nof something today doesn't tell us very much.\n\n23\n00:01:20,000 --> 00:01:24,000\nWhat we really want to understand is the cost in a more fundamental way.\n\n24\n00:01:24,000 --> 00:01:29,000\nThe third reason is also true that by understanding how time scales with input size,\n\n25\n00:01:29,000 --> 00:01:33,000\nwe get a much better fundamental understanding of our algorithms \n\n26\n00:01:33,000 --> 00:01:36,000\nthan if we just had some absolute time measurements for a few different inputs.\n\n27\n00:01:36,000 --> 00:01:38,000\nThe fourth answer is not correct.\n\n28\n00:01:38,000 --> 00:01:41,000\nAbstract answers can be just as wrong as concrete answer,\n\n29\n00:01:41,000 --> 00:01:45,000\nbut having good abstract answers will allow us to understand things much more deeply \n\n30\n00:01:45,000 --> 00:01:48,000\nthan a few specific concrete answers will.\n\n", "id": 352001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY6cUVDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/353001", "type": "Nugget", "id": 353001}, {"nuggetType": "lecture", "name": "Stopwatch", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "ca274922-7cb7-4d0a-b66d-0390a6970b48", "name": "cs101_unit5_03_l_stopwatch", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNHNFQw", "youtube_id": "fvelpctuW1w", "youtube_state": "done", "path": "Course/cs101/Media/354001", "transcript": "\ufeff", "id": 354001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY0s0VDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/354002", "type": "Nugget", "id": 354002}, {"nuggetType": "quiz", "name": "Bad Hash", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY1M0VDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/354004", "type": "Nugget", "id": 354004}, {"nuggetType": "lecture", "name": "Implementing Hash Table Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "b8ff86a8-547a-41b2-9d12-7a7648ae0ec5", "name": "cs101_unit5_21_s_implementing-hash-table", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKTaFgw", "youtube_id": "oIPgu1-J_Hs", "youtube_state": "done", "path": "Course/cs101/Media/372004", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\n[Evans] The answer is the third choice.\n\n2\n00:00:03,000 --> 00:00:07,000\nThese data structures are getting complicated enough that they're fairly hard to read.\n\n3\n00:00:07,000 --> 00:00:12,000\nWe need to think about what components we need to represent the hash table.\n\n4\n00:00:12,000 --> 00:00:15,000\nThe main component we need is a way of representing a bucket.\n\n5\n00:00:15,000 --> 00:00:18,000\nSo here's our picture of our hash table.\n\n6\n00:00:18,000 --> 00:00:20,000\nWhat we want is a list.\n\n7\n00:00:20,000 --> 00:00:23,000\nThis is going to be the list where each element in the list is a bucket.\n\n8\n00:00:23,000 --> 00:00:29,000\nAnd what a bucket is is a list itself where each element in that list is a key and a value.\n\n9\n00:00:29,000 --> 00:00:33,000\nIn our case, the key is the word, the value is the list of URLs.\n\n10\n00:00:33,000 --> 00:00:37,000\nSo the structure that corresponds to that most closely is this one\n\n11\n00:00:37,000 --> 00:00:40,000\nwhere we have a list, each inner list here.\n\n12\n00:00:40,000 --> 00:00:43,000\nSo this corresponds to a bucket,\n\n13\n00:00:43,000 --> 00:00:48,000\nand then within the bucket a word and a list of URLs is 1 entry.\n\n14\n00:00:48,000 --> 00:00:52,000\nThis corresponds to what the entries were in our previous index,\n\n15\n00:00:52,000 --> 00:00:55,000\nbut now because we want to make it a hash table, we're going to collect them in buckets.\n\n16\n00:00:55,000 --> 00:01:01,000\nSo a list of those entries and each element in the outer list corresponds to 1 bucket.\n\n", "id": 372004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY1c0VDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/354005", "type": "Nugget", "id": 354005}, {"nuggetType": "lecture", "name": "Spin Loop", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "3f37bea2-016a-459a-8ec5-285c47be3764", "name": "cs101_unit5_04_l_spin-loop", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKHdFQw", "youtube_id": "hSt1yd5vaBA", "youtube_state": "done", "path": "Course/cs101/Media/356001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nTo get a better sense of how timing works, I've defined a procedure \"spin_loop.\"\n\n2\n00:00:05,000 --> 00:00:09,000\nSpin_loop starts by initializing the variable i to zero, and then it goes through a loop n times.\n\n3\n00:00:09,000 --> 00:00:12,000\nEach time through a loop it just adds 1 to i.\n\n4\n00:00:12,000 --> 00:00:15,000\nThat will run for longer.\n\n5\n00:00:15,000 --> 00:00:19,000\nBy picking the value of n, we can make it go through the loop any number of times.\n\n6\n00:00:19,000 --> 00:00:22,000\nLet's try that.\n\n7\n00:00:22,000 --> 00:00:25,000\nWe'll try running the loop a thousand times.\n\n8\n00:00:25,000 --> 00:00:35,000\nNow, we get no result and the time it took is 0.0001 seconds--about a 10th of a millisecond.\n\n9\n00:00:35,000 --> 00:00:39,000\nLet's try it with a larger number of executions.\n\n10\n00:00:39,000 --> 00:00:42,000\nNow, I'm going to increase the number of iterations by 10.\n\n11\n00:00:42,000 --> 00:00:45,000\nThe value of n is multiplied by 10.\n\n12\n00:00:45,000 --> 00:00:53,000\nIf we see that now the time is higher. The time is increased to about 6/10 of a millisecond.\n\n13\n00:00:53,000 --> 00:00:55,000\nWe can keep increasing the time.\n\n14\n00:00:55,000 --> 00:00:59,000\nLet's try looping 100,000 times, and we see the time increases.\n\n15\n00:00:59,000 --> 00:01:05,000\nThe time increased by about a factor of 10 between looping 10,000 times and looping 100,000 times.\n\n16\n00:01:05,000 --> 00:01:08,000\nWe'll try one more time. Let's go for 1 million.\n\n17\n00:01:08,000 --> 00:01:13,000\nIf we go for 1 million times, now we're up to 0.05--\n\n18\n00:01:13,000 --> 00:01:19,000\n5/100 of a second or 55 milliseconds to loop 1 million times. Still pretty fast.\n\n19\n00:01:19,000 --> 00:01:23,000\nWe're going through that loop 1 million times. It's still much less than a second.\n\n20\n00:01:23,000 --> 00:01:26,000\nWhat's important is we can see that the time changes depending on the input.\n\n21\n00:01:26,000 --> 00:01:32,000\nAs we increase the input to spin_loop, the time increases accordingly.\n\n", "id": 356001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYot0VDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/356002", "type": "Nugget", "id": 356002}, {"nuggetType": "lecture", "name": "Implementing Hash Tables", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "3190f598-5b10-4567-a82e-ac7676abc9bb", "name": "cs101_unit5_21_q_implementing-hash-tables", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPXsFQw", "youtube_id": "E6Fa4x7CqNA", "youtube_state": "done", "path": "Course/cs101/Media/358005", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Evans] I hope everyone understands the main idea behind the hash table now.\n\n2\n00:00:04,000 --> 00:00:07,000\nOur goal is to map a keyword and the number of buckets\n\n3\n00:00:07,000 --> 00:00:11,000\nusing a hash_string function to a particular bucket,\n\n4\n00:00:11,000 --> 00:00:16,000\nand that bucket will contain all of the keywords that map to that location.\n\n5\n00:00:16,000 --> 00:00:19,000\nSo now what we're going to do is try to actually write the code to do this.\n\n6\n00:00:19,000 --> 00:00:23,000\nWe're going to start from our index that we wrote for the previous unit\n\n7\n00:00:23,000 --> 00:00:27,000\nbut try to figure out how to implement that with a hash table instead.\n\n8\n00:00:27,000 --> 00:00:30,000\nThe first question is, how is this going to change our data structure?\n\n9\n00:00:30,000 --> 00:00:32,000\nThis was what we had before.\n\n10\n00:00:32,000 --> 00:00:35,000\nIf you remember, we had our index was a list of keywords.\n\n11\n00:00:35,000 --> 00:00:42,000\nWe had a list of entries, and each entry was a pair, which was a keyword,\n\n12\n00:00:42,000 --> 00:00:49,000\nand the second element of the pair was a list of the URLs where that word appears.\n\n13\n00:00:49,000 --> 00:00:56,000\nAnd we would have each word in the index as its own entry with its own list of URLs.\n\n14\n00:00:56,000 --> 00:00:59,000\nSo this was the data structure that we used last class.\n\n15\n00:00:59,000 --> 00:01:03,000\nNow we want to change things to implement a hash table.\n\n16\n00:01:03,000 --> 00:01:07,000\nI want you to think about what data structure I'll use, and we'll make that a quiz\n\n17\n00:01:07,000 --> 00:01:11,000\nto decide a good data structure to use to implement the hash table.\n\n18\n00:01:11,000 --> 00:01:14,000\nThe question is, which of these data structures would make most sense\n\n19\n00:01:14,000 --> 00:01:16,000\nto implement the hash table index?\n\n20\n00:01:16,000 --> 00:01:19,000\nThe first choice is a list where the elements in the list \n\n21\n00:01:19,000 --> 00:01:23,000\nare a list where the first element is a word and the second element is a list of URLs\n\n22\n00:01:23,000 --> 00:01:25,000\nwhere that word appears.\n\n23\n00:01:25,000 --> 00:01:30,000\nThe second choice is a list where each element in the list is a list itself\n\n24\n00:01:30,000 --> 00:01:33,000\nwhere the first element is a word and the second element is a list of lists\n\n25\n00:01:33,000 --> 00:01:37,000\nwhere each element in that list is a list of URLs.\n\n26\n00:01:37,000 --> 00:01:41,000\nThe third choice is a list where each element is a list\n\n27\n00:01:41,000 --> 00:01:45,000\nwhere the element lists themselves contain lists\n\n28\n00:01:45,000 --> 00:01:52,000\nwhere the element lists of the element lists are a list of a word followed by a list of all the URLs\n\n29\n00:01:52,000 --> 00:01:54,000\nwhere that word appears.\n\n30\n00:01:54,000 --> 00:01:58,000\nSo we have 3 nested lists for choice 3.\n\n31\n00:01:58,000 --> 00:02:02,000\nFor choice 4 we have a list where each element of the list is a list\n\n32\n00:02:02,000 --> 00:02:05,000\nwhere within the element list there's another list\n\n33\n00:02:05,000 --> 00:02:09,000\nwhich is a list of words followed by a list of URLs.\n\n34\n00:02:09,000 --> 00:02:13,000\nAnd for the final choice we also have 3 nested lists\n\n35\n00:02:13,000 --> 00:02:16,000\nwhere each element list is a list where the elements of that list are lists\n\n36\n00:02:16,000 --> 00:02:22,000\nthat are a word followed by a list where each element in that list is a list of URLs.\n\n37\n00:02:22,000 --> 00:02:26,000\nSo which one of these would be the best structure to use to implement a hash table?\n\n", "id": 358005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYpN0VDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/356004", "type": "Nugget", "id": 356004}, {"nuggetType": "lecture", "name": "Finding Buckets", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "67fad045-dff3-458b-a685-98b6890fa8c7", "name": "cs101_unit5_24_p_finding-buckets", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLzVFQw", "youtube_id": "ETR_xHGXs6A", "youtube_state": "done", "path": "Course/cs101/Media/355004", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\n[Narrator] Now that we've created our empty hash table,\n\n2\n00:00:03,000 --> 00:00:06,000\nthe next steps are to figure out how to do look-ups as well as adds.\n\n3\n00:00:06,000 --> 00:00:09,000\nBoth look-ups and adds depend on the same first step.\n\n4\n00:00:09,000 --> 00:00:12,000\nWe need to find the right bucket, so that's what we'll do next.\n\n5\n00:00:12,000 --> 00:00:14,000\nRemember the idea for a hash table.\n\n6\n00:00:14,000 --> 00:00:17,000\nWe have a list of buckets.\n\n7\n00:00:17,000 --> 00:00:23,000\nEach bucket is a list of entries and each entry is a key and a list of values.\n\n8\n00:00:23,000 --> 00:00:30,000\nSo, regardless of whether we want to do look-ups and find the value associated with a word\n\n9\n00:00:30,000 --> 00:00:33,000\nor  we want to do add and add a new value associated with a word,\n\n10\n00:00:33,000 --> 00:00:36,000\nthe first thing we always have to do is find the right bucket.\n\n11\n00:00:36,000 --> 00:00:39,000\nIf you find the right bucket if we're doing a look-up the next thing we're going to do is \n\n12\n00:00:39,000 --> 00:00:43,000\nneed to look through all the entries in that bucket to find if there's one\n\n13\n00:00:43,000 --> 00:00:45,000\nthat matches the key word.\n\n14\n00:00:45,000 --> 00:00:48,000\nIf we're doing add we also need to start by finding the right bucket.\n\n15\n00:00:48,000 --> 00:00:51,000\nThen we're going to look through and see if that word already exists.\n\n16\n00:00:51,000 --> 00:00:57,000\nIf it doesn't exist we can add a new word, and we'll have a new entry with that word and that value.\n\n17\n00:00:57,000 --> 00:01:00,000\nBoth of those depend on first being able to find the right bucket.\n\n18\n00:01:00,000 --> 00:01:05,000\nWe'll do that once and be able to reuse that code in both look-up and add.\n\n19\n00:01:05,000 --> 00:01:11,000\nOur goal is to define a procedure, and we'll call it hash table get bucket, and it'll take 2 inputs.\n\n20\n00:01:11,000 --> 00:01:18,000\nIt'll take a hash table and a keyword, and it will output the bucket where that keyword could occur.\n\n21\n00:01:18,000 --> 00:01:20,000\nWe don't know yet whether that's keyword is actually on the table.\n\n22\n00:01:20,000 --> 00:01:23,000\nIt might be somewhere in that bucket, it might not,\n\n23\n00:01:23,000 --> 00:01:27,000\nbut the important thing that hash table get bucket should do is find the bucket.\n\n24\n00:01:27,000 --> 00:01:32,000\nOne function that will be useful for doing that is the hash string procedure that you defined earlier,\n\n25\n00:01:32,000 --> 00:01:38,000\nand hash string takes 2 inputs; it takes a string, which is the keyword,\n\n26\n00:01:38,000 --> 00:01:46,000\nand it took a size the number of buckets and it outputs the number which is the index of that bucket.\n\n27\n00:01:46,000 --> 00:01:51,000\nThere's a bit of a mismatch here that you'll have to think about to define hash table get bucket;\n\n28\n00:01:51,000 --> 00:01:56,000\nthat hash string the input is the size, the number of buckets; it's a number.\n\n29\n00:01:56,000 --> 00:02:01,000\nThe 2 inputs to hash table get bucket are just the hash table and a keyword.\n\n30\n00:02:01,000 --> 00:02:06,000\nYou need to also figure out how to get the size of the hash table to pass into hash string,\n\n31\n00:02:06,000 --> 00:02:09,000\nand if you remember the structure of the hash table\n\n32\n00:02:09,000 --> 00:02:12,000\nyou should be able to figure out how to do that.\n\n33\n00:02:12,000 --> 00:02:21,000\nRemember our hash table is a list of buckets so the value that we want to pass in to hash string is the size of that hash table;\n\n34\n00:02:21,000 --> 00:02:24,000\nthe number of elements in the list of buckets that is the hash table.\n\n35\n00:02:24,000 --> 00:02:28,000\nSee if you can define hash table get bucket,\n\n36\n00:02:28,000 --> 00:02:32,000\nand as a hint you can do the whole definition with a very small amount of code.\n\n37\n00:02:32,000 --> 00:02:34,000\nIt should only take 1 line to do this.\n\n", "id": 355004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYpt0VDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/356006", "type": "Nugget", "id": 356006}, {"nuggetType": "lecture", "name": "Empty Hash Table Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "7b939755-4f5b-4c0a-8b7c-2ce2ea087be7", "name": "cs101_unit5_22_s_empty-hash-table", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMqgFww", "youtube_id": "tV47uQ8erlA", "youtube_state": "done", "path": "Course/cs101/Media/381002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\n[Evans] Here's 1 way to define make_hashtable.\n\n2\n00:00:02,000 --> 00:00:05,000\nWe're going to start by initializing a variable i = 0.\n\n3\n00:00:05,000 --> 00:00:07,000\nWe need to keep a count of the number of buckets,\n\n4\n00:00:07,000 --> 00:00:11,000\nso we're going to start by creating an empty table.\n\n5\n00:00:11,000 --> 00:00:14,000\nAnd what we want to do is add nbuckets, number of buckets, to the table,\n\n6\n00:00:14,000 --> 00:00:19,000\nso we're going to use a while loop and we're going to loop while i < nbuckets.\n\n7\n00:00:19,000 --> 00:00:21,000\nSo each time we go through the loop what we want to do\n\n8\n00:00:21,000 --> 00:00:23,000\nis add 1 empty bucket to our hash table.\n\n9\n00:00:23,000 --> 00:00:27,000\nWe can do that using append. That adds a new empty bucket.\n\n10\n00:00:27,000 --> 00:00:32,000\nAnd we need to remember to increase i to make sure we don't keep looping forever.\n\n11\n00:00:32,000 --> 00:00:36,000\nAnd so we're going to go through this loop nbuckets number of times,\n\n12\n00:00:36,000 --> 00:00:39,000\neach time adding an empty bucket to the table,\n\n13\n00:00:39,000 --> 00:00:43,000\nand then we need to return the table at the end.\n\n14\n00:00:43,000 --> 00:00:48,000\nLet's try that in the Python interpreter. Here's the code just like we wrote out.\n\n15\n00:00:48,000 --> 00:00:51,000\nWe'll print out the result of making a hash table.\n\n16\n00:00:51,000 --> 00:00:53,000\nWe'll keep the number of buckets small for printing.\n\n17\n00:00:53,000 --> 00:00:57,000\nFor real use we're going to want to have many more than 3 buckets. Let's run that.\n\n18\n00:00:57,000 --> 00:01:04,000\nWe see what we got is a list with 3 empty lists as its elements. This works okay.\n\n19\n00:01:04,000 --> 00:01:07,000\nIt seems like a lot more code than we need, and it is more code than we need.\n\n20\n00:01:07,000 --> 00:01:10,000\nThere's a better way to write this, which is to use a for loop.\n\n21\n00:01:10,000 --> 00:01:12,000\nThe general structure we've seen for for loops, \n\n22\n00:01:12,000 --> 00:01:16,000\nwe've seen a loop that has a structure like this\n\n23\n00:01:16,000 --> 00:01:20,000\nwhere the collection could be a list or could be a string.\n\n24\n00:01:20,000 --> 00:01:24,000\nTo have a for loop we need some set of objects that we're looping through.\n\n25\n00:01:24,000 --> 00:01:30,000\nIn this case what we want to do is loop through the numbers from 0 to nbuckets - 1,\n\n26\n00:01:30,000 --> 00:01:33,000\nso we want to create a list that contains those values.\n\n27\n00:01:33,000 --> 00:01:37,000\nWhat we would like in order to be able to define a procedure like make_hashtable\n\n28\n00:01:37,000 --> 00:01:43,000\nis to have a list which is the numbers from 0 to nbuckets - 1.\n\n29\n00:01:43,000 --> 00:01:46,000\nPython provides an easy way to do that. It's called range.\n\n30\n00:01:46,000 --> 00:01:50,000\nRange takes 2 numbers as inputs, the start and the stop number,\n\n31\n00:01:50,000 --> 00:01:56,000\nand what it outputs is a list of all the numbers from start up to stop - 1.\n\n32\n00:01:56,000 --> 00:02:00,000\nSo this is what range outputs: a list of numbers starting from start,\n\n33\n00:02:00,000 --> 00:02:03,000\nincreasing by 1 until we get to stop - 1.\n\n34\n00:02:03,000 --> 00:02:08,000\nYou'll note that it doesn't include the value passed in as the second parameter in the list.\n\n35\n00:02:08,000 --> 00:02:12,000\nThis turns out to be useful, because oftentimes when we loop through elements\n\n36\n00:02:12,000 --> 00:02:14,000\nwe don't want to include the last element.\n\n37\n00:02:14,000 --> 00:02:20,000\nSo that means if we evaluated something like range(0,10)\n\n38\n00:02:20,000 --> 00:02:26,000\nthe result would be the list [0,1,2,...,9].\n\n39\n00:02:26,000 --> 00:02:29,000\nNow that we know about range, we could change our loop here.\n\n40\n00:02:29,000 --> 00:02:33,000\nInstead of having this while loop, we could use the for loop.\n\n41\n00:02:33,000 --> 00:02:36,000\nWe prefer this for 2 reasons. The first is it's going to make our code shorter.\n\n42\n00:02:36,000 --> 00:02:39,000\nAny time we can make code shorter, that's usually a good thing.\n\n43\n00:02:39,000 --> 00:02:43,000\nThe second is it saves us from the danger of forgetting to increment the variable.\n\n44\n00:02:43,000 --> 00:02:46,000\nThis is a common mistake, and when we forget to increment the variable\n\n45\n00:02:46,000 --> 00:02:48,000\nthe loop is just going to run forever.\n\n46\n00:02:48,000 --> 00:02:51,000\nSo if you can write our while loops as for loops, that's usually a good idea.\n\n47\n00:02:51,000 --> 00:02:55,000\nA better way to define make_hashtable is to use the for loop.\n\n48\n00:02:55,000 --> 00:02:58,000\nWe're no longer going to need the variable i.\n\n49\n00:02:58,000 --> 00:03:02,000\nWe still need table, and now instead of using a while loop we're going to use a for loop.\n\n50\n00:03:02,000 --> 00:03:04,000\nWe're going to leave the variable name blank for a second.\n\n51\n00:03:04,000 --> 00:03:06,000\nWe'll figure out what to put there later.\n\n52\n00:03:06,000 --> 00:03:12,000\nWhat we're looping through is from the range from 0 up to nbuckets.\n\n53\n00:03:12,000 --> 00:03:17,000\nSo we're going to loop through the elements of the list range to nbuckets.\n\n54\n00:03:17,000 --> 00:03:20,000\nThat's going to be the list of numbers from 0 to nbuckets - 1.\n\n55\n00:03:20,000 --> 00:03:25,000\nAnd for each one of those we want to append 1 new bucket to the table \n\n56\n00:03:25,000 --> 00:03:27,000\njust like we did before.\n\n57\n00:03:27,000 --> 00:03:30,000\nWe don't need to increment i. There's no i variable now.\n\n58\n00:03:30,000 --> 00:03:33,000\nAt the end of the loop we return the table just as before.\n\n59\n00:03:33,000 --> 00:03:35,000\nFor this loop we didn't actually need a variable here.\n\n60\n00:03:35,000 --> 00:03:37,000\nWe never use the variable inside.\n\n61\n00:03:37,000 --> 00:03:40,000\nFor the syntax of the for loop we still need something here,\n\n62\n00:03:40,000 --> 00:03:47,000\nso I'm just going to call the variable unused to make it clear that we have a name there.\n\n63\n00:03:47,000 --> 00:03:49,000\nWe don't actually use it in the body of the for loop.\n\n64\n00:03:49,000 --> 00:03:51,000\nSo this makes the code a lot smaller.\n\n65\n00:03:51,000 --> 00:03:53,000\nIt will work the same way as what we had before.\n\n66\n00:03:53,000 --> 00:03:56,000\nHere's the new code,\n\n67\n00:03:56,000 --> 00:03:58,000\nseveral lines shorter than what we had before.\n\n68\n00:03:58,000 --> 00:04:00,000\nIt does exactly the same thing.\n\n69\n00:04:00,000 --> 00:04:03,000\nIf you were really clever, you might have thought of an even shorter way\n\n70\n00:04:03,000 --> 00:04:08,000\nto define make_hashtable that unfortunately doesn't quite work.\n\n71\n00:04:08,000 --> 00:04:13,000\nThe shorter way would be to guess that the times operator works on lists\n\n72\n00:04:13,000 --> 00:04:15,000\nthe same way it worked on strings.\n\n73\n00:04:15,000 --> 00:04:22,000\nSo we could do this by creating empty list * nbuckets. This seems great. \n\n74\n00:04:22,000 --> 00:04:26,000\nIt's only 1 line, really clear and easy to understand, and it looks like it almost works.\n\n75\n00:04:26,000 --> 00:04:29,000\nLet's try that in the Python interpreter. \n\n76\n00:04:29,000 --> 00:04:34,000\nIt looks like it worked. We got a hash table, a list with 3 empty buckets.\n\n77\n00:04:34,000 --> 00:04:39,000\nThere's 1 big problem with this approach, and I'll show you a hint why it is\n\n78\n00:04:39,000 --> 00:04:41,000\nand then we'll have a quiz to see if you can figure out why.\n\n79\n00:04:41,000 --> 00:04:43,000\nSo now instead of just printing out the result \n\n80\n00:04:43,000 --> 00:04:46,000\nwe're going to assign it to a variable called table\n\n81\n00:04:46,000 --> 00:04:48,000\nand now we're going to mimic what would happen \n\n82\n00:04:48,000 --> 00:04:50,000\nwhen we add something to the hash table.\n\n83\n00:04:50,000 --> 00:04:52,000\nThat means we're going to add something to one of the buckets .\n\n84\n00:04:52,000 --> 00:05:03,000\nLet's pick bucket 1 and let's assume we're going to add the entry for 'udacity' with 1 URL.\n\n85\n00:05:03,000 --> 00:05:06,000\nNow we can print out what's in that bucket.\n\n86\n00:05:06,000 --> 00:05:09,000\nIt looks like everything is okay. What about what's in bucket 0?\n\n87\n00:05:09,000 --> 00:05:12,000\nNow we get the same result.\n\n88\n00:05:12,000 --> 00:05:14,000\nSo think about what went wrong.\n\n89\n00:05:14,000 --> 00:05:19,000\nI'm going to ask a quiz to see if you can understand why this simpler definition\n\n90\n00:05:19,000 --> 00:05:22,000\nof make_hashtable doesn't actually work correctly.\n\n", "id": 381002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY9uwVDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/358006", "type": "Nugget", "id": 358006}, {"nuggetType": "program", "name": "Finding Buckets", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY9-wVDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/358007", "suppliedCode": "#Define a procedure, hashtable_get_bucket,\n#that takes two inputs - a hashtable, and\n#a keyword, and outputs the bucket where the\n#keyword could occur.\n\n#hash_string(keyword,nbuckets) => index of bucket\n\ndef hashtable_get_bucket(htable,keyword):\n    \n\n\ndef hash_string(keyword,buckets):\n    out = 0\n    for s in keyword:\n        out = (out + ord(s)) % buckets\n    return out\n\ndef make_hashtable(nbuckets):\n    table = []\n    for unused in range(0,nbuckets):\n        table.append([])\n    return table\n", "type": "Nugget", "id": 358007}, {"nuggetType": "lecture", "name": "Predicting Run Time", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "e8bb2bc4-e4e7-41ed-9512-9e90d001c3e6", "name": "cs101_unit5_05_q_predicting-run-time", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPHsFQw", "youtube_id": "8RsrZQ8z-5U", "youtube_state": "done", "path": "Course/cs101/Media/358001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nThis quiz will see if you understand execution time well enough to make some predictions.\n\n2\n00:00:05,000 --> 00:00:08,000\nHere's the code we had before that times the execution \n\n3\n00:00:08,000 --> 00:00:13,000\nof evaluating a Python expression that we pass in as code.\n\n4\n00:00:13,000 --> 00:00:19,000\nWe've defined spin loop as a while loop that goes through a loop \n\n5\n00:00:19,000 --> 00:00:23,000\nthat just adds the number of times of the variable passed in.\n\n6\n00:00:23,000 --> 00:00:25,000\nLet's try that in the Python interpreter.\n\n7\n00:00:25,000 --> 00:00:31,000\nWe're going to time an execution where what we're evaluating \n\n8\n00:00:31,000 --> 00:00:37,000\nis calling spin_loop, passing in some number. We'll try 1000 first.\n\n9\n00:00:37,000 --> 00:00:42,000\nWhat time execution does is return 2 values--the result and the run time.\n\n10\n00:00:42,000 --> 00:00:45,000\nWe only want the second one, \n\n11\n00:00:45,000 --> 00:00:51,000\nso we'll index to get the second value out of the return result and see that result.\n\n12\n00:00:51,000 --> 00:00:56,000\nSo that's what we get. It took 0.0001 seconds to do spin loop 1000.\n\n13\n00:00:56,000 --> 00:01:03,000\nIf I increase this to 10,000, I see that it takes 0.0006.\n\n14\n00:01:03,000 --> 00:01:10,000\nLet's try 100,000, adding 1 more zero, and I see now it takes 0.005.\n\n15\n00:01:10,000 --> 00:01:14,000\nI'm going to write this a little differently so we can see it more easily.\n\n16\n00:01:14,000 --> 00:01:21,000\nNow, instead of writing out 100,000, I'll do         10-star-star-5 [10**5], \n\n17\n00:01:21,000 --> 00:01:26,000\nwhich is the same value as writing out a 1 followed by 5 zeros.\n\n18\n00:01:26,000 --> 00:01:32,000\nFor good measure, we'll do 10-star-star-6 [10**6], which is 1 million times through the loop,\n\n19\n00:01:32,000 --> 00:01:35,000\nand we see that that takes 0.05 seconds.\n\n20\n00:01:35,000 --> 00:01:38,000\nHere's the examples of timing loops.\n\n21\n00:01:38,000 --> 00:01:45,000\nFor your quiz, your goal is to estimate the expected execution time for evaluating spin loop,\n\n22\n00:01:45,000 --> 00:01:49,000\nwhere the input of the loop is (10**9). That's 1 billion.\n\n23\n00:01:49,000 --> 00:01:52,000\nAnd you should give your answer in the number of seconds.\n\n24\n00:01:52,000 --> 00:01:55,000\nOf course, it's not possible to get the exact answer, but you should be able to get a guess\n\n25\n00:01:55,000 --> 00:01:59,000\nwithin about 20% of our answer to be correct.\n\n", "id": 358001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY2fQVDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/359001", "type": "Nugget", "id": 359001}, {"nuggetType": "lecture", "name": "Worst Case", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "e856aa06-4f87-4870-9d1c-46a1e4e7e043", "name": "cs101_unit5_09_q_worst-case", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLrVFQw", "youtube_id": "VtekK8uS3BI", "youtube_state": "done", "path": "Course/cs101/Media/355002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nWhat we usually care about when we analyze programs \n\n2\n00:00:03,000 --> 00:00:06,000\nis what's called the \"worsticase execution time.\"\n\n3\n00:00:06,000 --> 00:00:13,000\nThat's the case where the input for a given size takes the longest possible time to run.\n\n4\n00:00:13,000 --> 00:00:18,000\nFor our lookup the worst case will be either the very last entry in the table \n\n5\n00:00:18,000 --> 00:00:22,000\nor a keywrod that doesn't exist in the table at all.\n\n6\n00:00:22,000 --> 00:00:27,000\nLet's look at the code for lookup to understand more why the time scales the way it does\n\n7\n00:00:27,000 --> 00:00:31,000\nand think about what the worst-case execution time and what the average case will be.\n\n8\n00:00:31,000 --> 00:00:34,000\nTo get a better understanding of the results we've seen, \n\n9\n00:00:34,000 --> 00:00:37,000\nlet's look at the code that we wrote for the index.\n\n10\n00:00:37,000 --> 00:00:39,000\nThis is the code that we finished in the last unit.\n\n11\n00:00:39,000 --> 00:00:44,000\nWe have the code for lookup. So what lookup is doing is going through a loop.\n\n12\n00:00:44,000 --> 00:00:48,000\nEach of the entries in the index, and remember that the index is a list.\n\n13\n00:00:48,000 --> 00:00:52,000\nIt's going through that list. For each element it's checking does it match the keyword.\n\n14\n00:00:52,000 --> 00:00:56,000\nThis is our index structure. It's a list of elements. \n\n15\n00:00:56,000 --> 00:01:01,000\nIf we had 10 million of them, it's a very long list with lots of elements.\n\n16\n00:01:01,000 --> 00:01:07,000\nBut each element is a list itself where we have a keyword followed by the list of URLs where it appears.\n\n17\n00:01:07,000 --> 00:01:10,000\nWhat lookup is doing is going through those entries.\n\n18\n00:01:10,000 --> 00:01:14,000\nThe number of times we go through this loop depends on the size of the index.\n\n19\n00:01:14,000 --> 00:01:17,000\nThe size of the index is the maximum number of times through that loop.\n\n20\n00:01:17,000 --> 00:01:22,000\nIt also depends on if we find the keyword early. Then we're done.\n\n21\n00:01:22,000 --> 00:01:29,000\nThe other code that you see here that's relevant to this is the code for add_to_index.\n\n22\n00:01:29,000 --> 00:01:32,000\nThe reason that's relevant is we want to know what the structure of the index is\n\n23\n00:01:32,000 --> 00:01:34,000\nafter we made our big index.\n\n24\n00:01:34,000 --> 00:01:37,000\nWhat add to index does is also loop through all the entries \n\n25\n00:01:37,000 --> 00:01:40,000\nto find if one already exists--then it adds that URL.\n\n26\n00:01:40,000 --> 00:01:43,000\nIf one doesn't exist, it adds the new entry at the end.\n\n27\n00:01:43,000 --> 00:01:46,000\nThis means that the first entry we add will always be at the beginning.\n\n28\n00:01:46,000 --> 00:01:50,000\nThat's why the 'aaaa' with 8 a's as first.\n\n29\n00:01:50,000 --> 00:01:53,000\nThe last one that we add will be at the end.\n\n30\n00:01:53,000 --> 00:01:58,000\nNow, we'll have a quiz to see if you understand what it means to be the worst-case input\n\n31\n00:01:58,000 --> 00:02:00,000\nand how the code for lookup works.\n\n32\n00:02:00,000 --> 00:02:05,000\nThe question is which of these inputs will have the worst-case running time.\n\n33\n00:02:05,000 --> 00:02:10,000\nThe choices are doing lookup, passing in the index, and the first word that was added to the index.\n\n34\n00:02:10,000 --> 00:02:18,000\nThe second choice is doing lookup passing in the index and a word that is not in the index.\n\n35\n00:02:18,000 --> 00:02:21,000\nThe third choice is calling lookup, \n\n36\n00:02:21,000 --> 00:02:25,000\npassing in the index and is the second input \n\n37\n00:02:25,000 --> 00:02:29,000\npassing in the last word that was added to the index.\n\n38\n00:02:29,000 --> 00:02:35,000\nFor the quiz, you should check all the answers that have the worst-case running time.\n\n", "id": 355002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY2_QVDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/359003", "type": "Nugget", "id": 359003}, {"nuggetType": "quiz", "name": "Fast Enough", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY3PQVDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/359004", "type": "Nugget", "id": 359004}, {"nuggetType": "lecture", "name": "Adding Keywords", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "7e778cec-1424-4ee3-bb1c-64cd2f9ba5a4", "name": "cs101_unit5_25_p_adding-keywords", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMugFww", "youtube_id": "hPjgKAZmTl4", "youtube_state": "done", "path": "Course/cs101/Media/381003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,210\nSo now we know how to find the right bucket.  Let us look at how to define the add procedure.\n\n2\n00:00:05,210 --> 00:00:10,010\nSo we are going first to find add.  We will make hashtable add that takes a hashtable, a word,\n\n3\n00:00:10,010 --> 00:00:15,930\nand a value. And, first of all to find a simple version of that that says we are going to add the new entry\n\n4\n00:00:15,930 --> 00:00:21,420\nto the bucket even if it already exist. So, we will find the right bucket and we will add the new entry\n\n5\n00:00:21,420 --> 00:00:26,770\nat that time. So you will go to the final procedure.  We will call it hashtable add, takes three amphlets,\n\n6\n00:00:26,770 --> 00:00:32,530\na hashtable, a key which is the word, and a value, and it adds that key to the hashtable, \n\n7\n00:00:32,530 --> 00:00:37,870\nmaking sure to put in the correct bucket with the associated value that was passed in as the third.\n\n", "id": 381003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY4PQVDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/359008", "type": "Nugget", "id": 359008}, {"nuggetType": "lecture", "name": "Lookup Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "3fec3151-f430-41c7-af09-8611e4992f8c", "name": "cs101_unit5_26_s_lookup", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOH0FQw", "youtube_id": "GHpxnE2Yj7k", "youtube_state": "done", "path": "Course/cs101/Media/359009", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,910\nSo here is one way to define hashtable_lookup.  So we are going to take a table and a key\n\n2\n00:00:04,910 --> 00:00:09,580\nand the first step is to find the bucket so we will use the hashtable_get_bucket that we defined\n\n3\n00:00:09,580 --> 00:00:14,380\nearlier for that and store it in the very low called bucket, so we will use hashtable_get_bucket \n\n4\n00:00:14,380 --> 00:00:19,120\nto look up in the hashtable where that key would occur and we will store that in the bucket.\n\n5\n00:00:19,120 --> 00:00:22,460\nWe are now to do the lookup.  We need to go through all the entries in that bucket\n\n6\n00:00:22,460 --> 00:00:27,930\nfind one that matches the key.  To do the lookup, we need to go through all the entries in the bucket\n\n7\n00:00:27,930 --> 00:00:32,530\nso we will use a FOR loop for that going through the entries.  For each entry, we need to check\n\n8\n00:00:32,530 --> 00:00:38,100\nwhether the key part of that entry matches the key and remember the bucket was a list of entries\n\n9\n00:00:38,100 --> 00:00:44,710\nand each entry in the bucket was a keyword and the value.  In the case for our WebCrawler \n\n10\n00:00:44,710 --> 00:00:50,250\nthe value was a list of words.  So if the entry matches the key - so the first part of the entry\n\n11\n00:00:50,250 --> 00:00:54,050\nis the keyword, if that matches the key we are looking for then what we want to do\n\n12\n00:00:54,050 --> 00:00:59,690\nis return the value so that the result of entry is position 1.  If it does not match\n\n13\n00:00:59,690 --> 00:01:03,560\nwell then we are going to keep going, keep trying the next word, and keep going through this FOR loop\n\n14\n00:01:03,560 --> 00:01:07,870\nchecking all the entries in the bucket.  When we get to the end, we did not find it\n\n15\n00:01:07,870 --> 00:01:12,610\nand what we said in the question was that if it is not in the table what we should do is output NONE\n\n16\n00:01:12,610 --> 00:01:19,650\nso now we will return the value NONE.  So let us try that in the Phyton interpreter.\n\n17\n00:01:19,650 --> 00:01:23,450\nSo here is the code.  We are defining hashtable lookup.  We find the bucket.\n\n18\n00:01:23,450 --> 00:01:27,720\nWe loop through all the entries in the bucket.  If we find one where the key matches \n\n19\n00:01:27,720 --> 00:01:31,560\nwe return the value associated with that key.  Otherwise we return NONE.\n\n20\n00:01:31,560 --> 00:01:35,360\nWhen we got to the end of the bucket without finding the entry, we know it could not exist\n\n21\n00:01:35,360 --> 00:01:40,000\nanywhere else in the hashtable because the only place that keyword could appear is in this bucket.\n\n22\n00:01:40,000 --> 00:01:44,140\nWe still have all the same codes from before that makes the hashtable that gets the bucket\n\n23\n00:01:44,140 --> 00:01:48,340\nand then adds to the table, and we will test it using some of the code we wrote before.\n\n24\n00:01:48,340 --> 00:01:53,510\nWe are going to add several words to our hashtable and let us try looking up a keyword.\n\n25\n00:01:53,510 --> 00:01:58,690\nWe will look up Udacity and we get the value 23, which is what we expect.\n\n26\n00:01:58,690 --> 00:02:02,590\nThat is the value that we associated with Udacity.  So this is looking pretty good.\n\n27\n00:02:02,590 --> 00:02:06,660\nWe have got our hashtable almost working.  The one problem is the one we mentioned before.\n\n28\n00:02:06,660 --> 00:02:11,500\nIf we try to change the value associated with Udacity, and we are going to need to do this for\n\n29\n00:02:11,500 --> 00:02:17,340\nour web index.  Right.  When we add all the URLs to the table, we need to keep adding URLs.\n\n30\n00:02:17,340 --> 00:02:21,780\nWe do not want to lose the one we have but we want to change the value associated with that\n\n31\n00:02:21,780 --> 00:02:28,920\nkeyword.  Now, we do the lookup again and we get the same result and the reason we got the\n\n32\n00:02:28,920 --> 00:02:32,320\nsame result, if you look at the bucket and the hashtable, this is associated with the\n\n33\n00:02:32,320 --> 00:02:37,260\nkeyword Udacity.  Well what we see is it is a list of two outlets and because of the way \n\n34\n00:02:37,260 --> 00:02:42,460\nwe implemented add, the newer one is later in that list.  Because of the way we defined lookup,\n\n35\n00:02:42,460 --> 00:02:47,630\nit is always going to find the first one that matches.  It is going through the entries in order.\n\n36\n00:02:47,630 --> 00:02:51,540\nThe first one that matches is the return strike, so that is where we get the value 23.\n\n37\n00:02:51,540 --> 00:02:54,510\nSo we are really almost done, but we have to make one other change.\n\n38\n00:02:54,510 --> 00:02:59,180\nWe want to change add to be more like an update so instead of adding a new entry\n\n39\n00:02:59,180 --> 00:03:02,180\nwe want to update the value that is associated with that entry\n\n", "id": 359009}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY4vQVDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/359010", "type": "Nugget", "id": 359010}, {"nuggetType": "quiz", "name": "Predicting Run Time", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYwfwVDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/360001", "type": "Nugget", "id": 360001}, {"nuggetType": "lecture", "name": "Better Hash Functions", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "7fbd7635-dcc2-4fe5-bf2a-ddd4bfcbb82c", "name": "cs101_unit5_18_p_better-hash-functions", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGN70FQw", "youtube_id": "N9jaYcCXQgU", "youtube_state": "done", "path": "Course/cs101/Media/359006", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Evans] We've seen the basic looking at just the first letter does not work very well.\n\n2\n00:00:04,000 --> 00:00:08,000\nIt doesn't use enough buckets, and it doesn't distribute the keys well.\n\n3\n00:00:08,000 --> 00:00:12,000\nSo now we're going to think about how to make a better hash function.\n\n4\n00:00:12,000 --> 00:00:16,000\nWe want the same property we had before in the sense that it's 1 function\n\n5\n00:00:16,000 --> 00:00:22,000\nthat takes 2 inputs, and the 2 inputs are the keyword, which is a string,\n\n6\n00:00:22,000 --> 00:00:25,000\nand the number of buckets, which is a number.\n\n7\n00:00:25,000 --> 00:00:29,000\nThose are the 2 inputs, and the output is the hash value,\n\n8\n00:00:29,000 --> 00:00:33,000\nand it's in the range from 0 to number of buckets - 1.\n\n9\n00:00:33,000 --> 00:00:38,000\nAnd our goal is for these numbers to be well distributed.\n\n10\n00:00:38,000 --> 00:00:40,000\nWe can have any number of buckets we want.\n\n11\n00:00:40,000 --> 00:00:43,000\nThe keywords will be spread evenly among the buckets,\n\n12\n00:00:43,000 --> 00:00:46,000\nand every time we hash the same keyword, we'll get the same bucket,\n\n13\n00:00:46,000 --> 00:00:48,000\nso we'll know quickly where to find it.\n\n14\n00:00:48,000 --> 00:00:51,000\nIn order to do better than we were doing before,\n\n15\n00:00:51,000 --> 00:00:53,000\nwe're going to need to look at more than just 1 letter of the keyword.\n\n16\n00:00:53,000 --> 00:00:56,000\nIf we look at just the first letter, we're not going to do better \n\n17\n00:00:56,000 --> 00:01:00,000\nthan having a limited number of buckets and a bad distribution.\n\n18\n00:01:00,000 --> 00:01:03,000\nSo what we want to do is something that's going to look at all the letters of the keyword,\n\n19\n00:01:03,000 --> 00:01:08,000\nnot just the first letter, and based on all the letters will decide the appropriate bucket.\n\n20\n00:01:08,000 --> 00:01:13,000\nWe saw that with lists if we had a list of items, we could use the for loop construct\n\n21\n00:01:13,000 --> 00:01:17,000\nto go through the elements in the list like this.\n\n22\n00:01:17,000 --> 00:01:21,000\nAnd this would go through each element in p, assigning it to the variable e\n\n23\n00:01:21,000 --> 00:01:25,000\nand executing whatever is in the block for each element of p.\n\n24\n00:01:25,000 --> 00:01:27,000\nWe can do something similar with strings.\n\n25\n00:01:27,000 --> 00:01:32,000\nIf we have a string s, we can use the same construct to go through the characters in s.\n\n26\n00:01:32,000 --> 00:01:37,000\nSo each time we go through the loop, the value assigned to variable c\n\n27\n00:01:37,000 --> 00:01:41,000\nwill be a 1-letter string corresponding to each character in the string in order.\n\n28\n00:01:41,000 --> 00:01:46,000\nSo first it will have the value a, then the value b, then the value c, then the value d.\n\n29\n00:01:46,000 --> 00:01:50,000\nThis gives us a way to go through all the elements in the string.\n\n30\n00:01:50,000 --> 00:01:56,000\nIf you remember how we turned single letter strings into numbers and modulo arithmetic,\n\n31\n00:01:56,000 --> 00:01:59,000\nthen I think you know enough to define a much better hash function.\n\n32\n00:01:59,000 --> 00:02:05,000\nSo for this quiz your goal is to define a function, hash_string, that behaves like this. \n\n33\n00:02:05,000 --> 00:02:09,000\nIt takes a keyword, a number of buckets, and it gives a number \n\n34\n00:02:09,000 --> 00:02:12,000\nidentifying the bucket where that keyword will belong,\n\n35\n00:02:12,000 --> 00:02:15,000\nbut instead of just using the first letter in the keyword, it's going to use all the letters\n\n36\n00:02:15,000 --> 00:02:17,000\nand produce as its output a single number \n\n37\n00:02:17,000 --> 00:02:21,000\nthat represents the bucket where that keyword belongs.\n\n38\n00:02:21,000 --> 00:02:24,000\nYour goal is to do this in a way that depends on all the characters in the string,\n\n39\n00:02:24,000 --> 00:02:26,000\nnot just the first character.\n\n40\n00:02:26,000 --> 00:02:28,000\nThere are lots of different ways to do this,\n\n41\n00:02:28,000 --> 00:02:30,000\nso we're going to specify exactly what you should do.\n\n42\n00:02:30,000 --> 00:02:35,000\nWhat we want to do is make the output of hash_string a function of all the characters.\n\n43\n00:02:35,000 --> 00:02:37,000\nWe can think of that with modulo arithmetic\n\n44\n00:02:37,000 --> 00:02:41,000\nthat if we have a circle which is the size of the number of buckets,\n\n45\n00:02:41,000 --> 00:02:45,000\nso this is going to go from 0 to the buckets - 1,\n\n46\n00:02:45,000 --> 00:02:48,000\nwhat we want to do for each character, we're going to start at 0,\n\n47\n00:02:48,000 --> 00:02:53,000\nand for each character in the string we're going to go around ord of that character,\n\n48\n00:02:53,000 --> 00:02:56,000\ndistance around the circle, and we're going to keep going.\n\n49\n00:02:56,000 --> 00:02:58,000\nSo each character we're going to go some distance around the circle.\n\n50\n00:02:58,000 --> 00:03:02,000\nThe circle can be any size depending on the number of buckets,\n\n51\n00:03:02,000 --> 00:03:07,000\nand we're going to keep going around the circle using modulo arithmetic for each letter.\n\n52\n00:03:07,000 --> 00:03:12,000\nAs we keep going, we can go lots and lots of times if it's a big word.\n\n53\n00:03:12,000 --> 00:03:16,000\nWherever we end up is going to be the bucket that we use.\n\n54\n00:03:16,000 --> 00:03:21,000\nLet's say that's position 27. Who knows where it is?\n\n55\n00:03:21,000 --> 00:03:23,000\nThat's the idea, and I'll give you a couple examples\n\n56\n00:03:23,000 --> 00:03:26,000\nso you know if you're implementing it the right way.\n\n57\n00:03:26,000 --> 00:03:31,000\nLet's suppose we have as our string the single letter 'a'\n\n58\n00:03:31,000 --> 00:03:33,000\nand we have 12 buckets.\n\n59\n00:03:33,000 --> 00:03:37,000\nIn that case, we're going to have 12 buckets, so we wouldn't have 27 here.\n\n60\n00:03:37,000 --> 00:03:40,000\nThis is going to be 11 is the last bucket.\n\n61\n00:03:40,000 --> 00:03:43,000\nThe ord value of 'a' is 97.\n\n62\n00:03:43,000 --> 00:03:50,000\nSo for 'a' what we would do is go around the circle 8 times\n\n63\n00:03:50,000 --> 00:03:53,000\nbecause 97 is 12 * 8.\n\n64\n00:03:57,000 --> 00:04:03,000\nAnd 1 more because 97 is 12 * 8 + 1.\n\n65\n00:04:03,000 --> 00:04:05,000\nYou don't actually have to go around the circle.\n\n66\n00:04:05,000 --> 00:04:07,000\nIf you use the modulo, that's what it will give you.\n\n67\n00:04:07,000 --> 00:04:12,000\nSo the hash value for 'a' should end up in bucket 1.\n\n68\n00:04:12,000 --> 00:04:18,000\nAs another example, if we tried hash_string where the string is the single letter 'b'\n\n69\n00:04:18,000 --> 00:04:22,000\nalso with 12 buckets, that's going to also go around the circle 8 times\n\n70\n00:04:22,000 --> 00:04:26,000\nbecause the ord of 'b' is 98, but it's going to end up in bucket 2\n\n71\n00:04:26,000 --> 00:04:31,000\nsince that's 96 + 2, which will end up in bucket 2.\n\n72\n00:04:31,000 --> 00:04:35,000\nIf we change the number of buckets, the results will be different.\n\n73\n00:04:35,000 --> 00:04:38,000\nLet's say instead of having 12 buckets we have 13\n\n74\n00:04:38,000 --> 00:04:45,000\nand we tried hash_string on the single letter string 'a' with 13 buckets.\n\n75\n00:04:45,000 --> 00:04:50,000\nThe result there should end up being 6.\n\n76\n00:04:50,000 --> 00:04:58,000\nThe reason it's 6 is because 97 is equal to 13 * 7 + 6.\n\n77\n00:04:58,000 --> 00:05:01,000\nSo the size of the hash table matters as well as the string.\n\n78\n00:05:01,000 --> 00:05:05,000\nWe don't want it to just work on single letter strings.\n\n79\n00:05:05,000 --> 00:05:08,000\nWith single letter strings we're really getting the same thing we defined before.\n\n80\n00:05:08,000 --> 00:05:12,000\nWhere it gets interesting is where we have multi-letter strings,\n\n81\n00:05:12,000 --> 00:05:14,000\nso let's look at a few examples like that.\n\n82\n00:05:14,000 --> 00:05:19,000\nWhere we can see the difference between what you're going to define as hash_string\n\n83\n00:05:19,000 --> 00:05:22,000\nand the bad hash string we had before is once we have longer strings.\n\n84\n00:05:22,000 --> 00:05:25,000\nSo suppose we tried the string 'au'. \n\n85\n00:05:25,000 --> 00:05:32,000\nThe ord of 'a' was 97 and that, when we went around the circle, ended up at location 1.\n\n86\n00:05:32,000 --> 00:05:38,000\nThe ord of 'u' I can tell you is 117.\n\n87\n00:05:38,000 --> 00:05:42,000\nWhen we add those 2, we get 214.\n\n88\n00:05:42,000 --> 00:05:48,000\nAnd modulo the number of buckets, which is 12 here, we should get 10.\n\n89\n00:05:48,000 --> 00:05:53,000\nSo that string with 2 symbols doesn't end up in position 1 where the 'a' would end up.\n\n90\n00:05:53,000 --> 00:05:55,000\nIt ends up in bucket 10.\n\n91\n00:05:55,000 --> 00:05:59,000\nAs another example--we won't work through the details on this one,\n\n92\n00:05:59,000 --> 00:06:02,000\nbut you'll be able to test if your result is correct--\n\n93\n00:06:02,000 --> 00:06:06,000\nif you try the string 'udacity', it should end up in bucket--\n\n94\n00:06:06,000 --> 00:06:11,000\nSorry. I forgot the input size. This is very important.\n\n95\n00:06:11,000 --> 00:06:16,000\nWe need 2 inputs to hash_string. Both the string and the number of buckets matter.\n\n96\n00:06:16,000 --> 00:06:19,000\nSo here we're also assuming 12 buckets.\n\n97\n00:06:19,000 --> 00:06:23,000\nHere we'll use 12 buckets again.\n\n98\n00:06:23,000 --> 00:06:25,000\nThe result should be 11.\n\n99\n00:06:25,000 --> 00:06:28,000\nSee if you can define a function, hash_string, that does this.\n\n100\n00:06:28,000 --> 00:06:30,000\nWe want it to take these 2 inputs and produce a number\n\n101\n00:06:30,000 --> 00:06:33,000\nthat tells us what bucket that keyword should be in.\n\n", "id": 359006}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYq4QWDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/361003", "type": "Nugget", "id": 361003}, {"nuggetType": "lecture", "name": "Predicting Run Time Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "c22bd37e-4689-48a0-9d05-29df2b5392eb", "name": "cs101_unit5_05_s_predicting-run-time", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKmEFgw", "youtube_id": "4ertvOyiKxo", "youtube_state": "done", "path": "Course/cs101/Media/361001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nHere's the answer. We try it and see what we get.\n\n2\n00:00:03,000 --> 00:00:07,000\nWhile it's running, let's think about what we should get.\n\n3\n00:00:07,000 --> 00:00:10,000\nWe can look at examples that we did so far, and we can try to make some predictions.\n\n4\n00:00:10,000 --> 00:00:18,000\nWe saw when the value passed in was 10^5 that the time it took to execute was 0.005.\n\n5\n00:00:18,000 --> 00:00:26,000\nWhen the time passed in was 10^6--1 million--we saw that the time to execute was 0.05.\n\n6\n00:00:26,000 --> 00:00:28,000\nNow we're trying to predict 10^9.\n\n7\n00:00:28,000 --> 00:00:34,000\nIf we look at the pattern here, every time we increased in by a factor of 10,\n\n8\n00:00:34,000 --> 00:00:37,000\nThe time also multiplies by a factor of 10.\n\n9\n00:00:37,000 --> 00:00:42,000\nThat's not surprising because the loop is going around 10 more times.\n\n10\n00:00:42,000 --> 00:00:48,000\nThe number of times we go through the loop scales as a factor of the input value n.\n\n11\n00:00:48,000 --> 00:00:53,000\nIf we increase n by a factor of 10, the time will also increase by a factor of 10.\n\n12\n00:00:53,000 --> 00:00:55,000\nWe see we have got our result now.\n\n13\n00:00:55,000 --> 00:01:01,000\nIf we increased by another factor of 10, we would expect that this would also increase,\n\n14\n00:01:01,000 --> 00:01:05,000\nthat it would take about half a second to do 10 million.\n\n15\n00:01:05,000 --> 00:01:08,000\nIf we increased by another factor of 10, \n\n16\n00:01:08,000 --> 00:01:15,000\nwe would expect the running time would also multiply by 10. It would be up to about 5 seconds.\n\n17\n00:01:15,000 --> 00:01:20,000\nIf we increased by another factor of 10, which is the billion that we tried,\n\n18\n00:01:20,000 --> 00:01:24,000\nwe would expect it to also increase by another factor of 10, \n\n19\n00:01:24,000 --> 00:01:27,000\ngetting to be something around 50 seconds.\n\n20\n00:01:27,000 --> 00:01:32,000\nIt's not exactly 1000 times what we had when we did spin_loop passing in 1 million,\n\n21\n00:01:32,000 --> 00:01:36,000\nbut it's pretty close to that. Now it's taking almost a minute.\n\n22\n00:01:36,000 --> 00:01:42,000\nOne thousand times this would be 54 seconds, so it's a little bit off from that, but very close.\n\n23\n00:01:42,000 --> 00:01:47,000\nIf we tried it a few more times, we might get a slightly different result. Let's try it one more time.\n\n24\n00:01:47,000 --> 00:01:52,000\nSo we tried it again, and this time we got 55.89 seconds,\n\n25\n00:01:52,000 --> 00:01:54,000\npretty close to what we got the previous time.\n\n26\n00:01:54,000 --> 00:01:59,000\nThe important point here is that the running time depends on the value of the input to spin_loop,\n\n27\n00:01:59,000 --> 00:02:01,000\nand it depends on it in a linear way.\n\n28\n00:02:01,000 --> 00:02:06,000\nAs we increase the magnitude of n, the higher number of times through the loop,\n\n29\n00:02:06,000 --> 00:02:10,000\nthe running times scales linearly with that value.\n\n", "id": 361001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYkYwWDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/362001", "type": "Nugget", "id": 362001}, {"nuggetType": "lecture", "name": "Lookup Time", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "f7a892ef-4dde-4801-9460-18c28f2a7d93", "name": "cs101_unit5_08_q_lookup-time", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNHKFgw", "youtube_id": "T4hxOAwc4rE", "youtube_state": "done", "path": "Course/cs101/Media/370001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nFor this question, your goal is to guess the expected time to execute the query,\n\n2\n00:00:05,000 --> 00:00:09,000\nlook up index10M where the string is 8 a's\n\n3\n00:00:09,000 --> 00:00:16,000\nwhere index10M is the index created by make_big_index passing in 10 million as the size.\n\n4\n00:00:16,000 --> 00:00:20,000\nI should warn you this is a bit of a trick question, so think carefully about what\n\n5\n00:00:20,000 --> 00:00:23,000\nmake_big_index does and what lookup does.\n\n6\n00:00:23,000 --> 00:00:26,000\nHere are the possible  answers. It could be 0.0 seconds.\n\n7\n00:00:26,000 --> 00:00:34,000\nIt could be 0.1 seconds, it could be 1.0 seconds, or it could be 10 seconds.\n\n", "id": 370001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYkowWDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/362002", "type": "Nugget", "id": 362002}, {"nuggetType": "program", "name": "Adding Keywords", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY-pMWDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/363002", "suppliedCode": "#Define a procedure,\n\n#hashtable_add(htable,key,value)\n\n#that adds the key to the hashtable\n#(in the correct bucket), with the\n#correct value.\n\ndef hashtable_add(htable,key,value):\n    \n\n\ndef hashtable_get_bucket(htable,keyword):\n    return htable[hash_string(keyword,len(htable))]\n\ndef hash_string(keyword,buckets):\n    out = 0\n    for s in keyword:\n        out = (out + ord(s)) % buckets\n    return out\n\ndef make_hashtable(nbuckets):\n    table = []\n    for unused in range(0,nbuckets):\n        table.append([])\n    return table\n", "type": "Nugget", "id": 363002}, {"nuggetType": "lecture", "name": "Make Big Index", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "29b2c44c-72f6-47c1-a318-de5aedc98ea8", "name": "cs101_unit5_06_l_make-big-index", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPmTFgw", "youtube_id": "jZRsNm9FcGo", "youtube_state": "done", "path": "Course/cs101/Media/363001", "transcript": "\ufeff", "id": 363001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY4ZsWDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/364001", "type": "Nugget", "id": 364001}, {"nuggetType": "lecture", "name": "Index Size Vs. Time", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "c788c4d7-62de-4305-9db7-cddc4547f59d", "name": "cs101_unit5_07_q_index-size-vs.-time", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKqHFQw", "youtube_id": "E0fbWqhdg_w", "youtube_state": "done", "path": "Course/cs101/Media/345002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:06,000\nThe question is what is the largest-sized index where we can do a lookup in about 1 second?\n\n2\n00:00:06,000 --> 00:00:09,000\nIf you look at the executions we have, we've seen the time it takes \n\n3\n00:00:09,000 --> 00:00:14,000\nwith an index with 10,000 is 0.0009 seconds.\n\n4\n00:00:14,000 --> 00:00:20,000\nThe time with an index of 100,000 is 0.0085 seconds.\n\n5\n00:00:20,000 --> 00:00:23,000\nYour goal is to predict what the largest index that can support \n\n6\n00:00:23,000 --> 00:00:26,000\nlookups that finish within about 1 second is.\n\n7\n00:00:26,000 --> 00:00:32,000\nYour choices are 200,000 keywords, 1 million keywords, 10 million keywords,\n\n8\n00:00:32,000 --> 00:00:35,000\n100 million keywords, or 1 billion keywords.\n\n", "id": 345002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYyaMWDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/365001", "type": "Nugget", "id": 365001}, {"nuggetType": "lecture", "name": "Empty Hash Table", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "63ddc0b6-d24c-4de7-8f36-457c8fee1c53", "name": "cs101_unit5_22_p_empty-hash-table", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGML8FQw", "youtube_id": "OdV5qGTzGIs", "youtube_state": "done", "path": "Course/cs101/Media/360002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Evans] The first thing we're going to do to implement our hash table index\n\n2\n00:00:04,000 --> 00:00:07,000\nis we have to figure out how to create an empty hash table.\n\n3\n00:00:07,000 --> 00:00:10,000\nWith the simple index, this was really easy.\n\n4\n00:00:10,000 --> 00:00:14,000\nTo make an empty index, we just had an empty list. There were no elements.\n\n5\n00:00:14,000 --> 00:00:19,000\nSo we could initialize the index by just initializing it to an empty list.\n\n6\n00:00:19,000 --> 00:00:23,000\nAnd as we added elements to the list, we would just add them to the empty list.\n\n7\n00:00:23,000 --> 00:00:25,000\nFor the hash table that's not going to work.\n\n8\n00:00:25,000 --> 00:00:28,000\nWe need to do something more complicated to start with an empty hash table.\n\n9\n00:00:28,000 --> 00:00:32,000\nThe reason for this is we need to start with all the buckets.\n\n10\n00:00:32,000 --> 00:00:35,000\nOur initial value for the plain index was just an empty list.\n\n11\n00:00:35,000 --> 00:00:40,000\nOur initial value for a hash table needs to be a set of empty buckets.\n\n12\n00:00:40,000 --> 00:00:44,000\nThe reason for that is we want to be able to do lookups right away\n\n13\n00:00:44,000 --> 00:00:47,000\nand we want to be able to add elements to our hash table.\n\n14\n00:00:47,000 --> 00:00:50,000\nIf we just started with an empty list, then the first time we look up a keyword\n\n15\n00:00:50,000 --> 00:00:54,000\nit would say that keyword belongs in bucket 27.\n\n16\n00:00:54,000 --> 00:00:57,000\nWe don't have a bucket for that. We would need to figure out how to create that bucket.\n\n17\n00:00:57,000 --> 00:01:03,000\nIt makes a lot more sense to start by making our empty hash table be a list of buckets\n\n18\n00:01:03,000 --> 00:01:05,000\nwhere initially all the buckets are empty, \n\n19\n00:01:05,000 --> 00:01:08,000\nthey're ready, waiting for keywords to be placed in them.\n\n20\n00:01:08,000 --> 00:01:11,000\nSo what we need is code to create that empty hash table.\n\n21\n00:01:11,000 --> 00:01:13,000\nI think you know enough to define make_hashtable yourself,\n\n22\n00:01:13,000 --> 00:01:15,000\nso we'll make that a quiz.\n\n23\n00:01:15,000 --> 00:01:19,000\nYour goal is to define a procedure--we'll call it make_hashtable--\n\n24\n00:01:19,000 --> 00:01:23,000\nthat takes as input a number, giving the number of buckets in the hash table,\n\n25\n00:01:23,000 --> 00:01:27,000\nand it outputs an empty hash table that has that number of empty buckets.\n\n", "id": 360002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYyqMWDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/365002", "type": "Nugget", "id": 365002}, {"nuggetType": "quiz", "name": "Index Size Vs. Time", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYsasWDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/366001", "type": "Nugget", "id": 366001}, {"nuggetType": "quiz", "name": "Lookup Time", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYsqsWDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/366002", "type": "Nugget", "id": 366002}, {"nuggetType": "quiz", "name": "Equivalent Expressions", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYs6sWDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/366003", "type": "Nugget", "id": 366003}, {"nuggetType": "lecture", "name": "Better Hash Functions Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "f2e12fa4-be4e-4116-8db7-880d8c6949a4", "name": "cs101_unit5_18_s_better-hash-functions", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJ22FQw", "youtube_id": "V-cXGF2B7gU", "youtube_state": "done", "path": "Course/cs101/Media/351005", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\n[Evans] This is a pretty tough question.\n\n2\n00:00:02,000 --> 00:00:04,000\nIf you weren't able to get it yourself, that's okay.\n\n3\n00:00:04,000 --> 00:00:07,000\nWhat I'd encourage you to do is to stop in the middle of the explanation\n\n4\n00:00:07,000 --> 00:00:09,000\nonce the part where you got stuck on makes sense\n\n5\n00:00:09,000 --> 00:00:12,000\nand see if you can finish it yourself.\n\n6\n00:00:12,000 --> 00:00:14,000\nWhat we need to do is define a function.\n\n7\n00:00:14,000 --> 00:00:16,000\nWe're going to define the function hash_string,\n\n8\n00:00:16,000 --> 00:00:20,000\nand it takes 2 inputs: the keyword and the number of buckets.\n\n9\n00:00:20,000 --> 00:00:23,000\nWe're going to keep track of where we are in the circle.\n\n10\n00:00:23,000 --> 00:00:25,000\nWe need to introduce a new variable to do that.\n\n11\n00:00:25,000 --> 00:00:27,000\nWe should start at position 0.\n\n12\n00:00:27,000 --> 00:00:29,000\nSo we'll initialize that variable.\n\n13\n00:00:29,000 --> 00:00:32,000\nWe'll use h to represent the hash, and we'll initialize that to 0.\n\n14\n00:00:32,000 --> 00:00:34,000\nNow we want to go through the characters in the keyword,\n\n15\n00:00:34,000 --> 00:00:39,000\nso we'll have a for loop that goes through each character in keyword,\n\n16\n00:00:39,000 --> 00:00:42,000\nand for each character we want to add to the hash.\n\n17\n00:00:42,000 --> 00:00:46,000\nSo we're going to add to the hash the value of that character.\n\n18\n00:00:46,000 --> 00:00:48,000\nWe could do the modulo here.\n\n19\n00:00:48,000 --> 00:00:51,000\nWe could at this point use modulo buckets.\n\n20\n00:00:51,000 --> 00:00:53,000\nWe have to be careful to have the parentheses here.\n\n21\n00:00:53,000 --> 00:00:57,000\nIf we just had the modulo buckets here, we wouldn't get the right result\n\n22\n00:00:57,000 --> 00:00:59,000\nbecause it would do ord(c) % buckets,\n\n23\n00:00:59,000 --> 00:01:04,000\nbut what we really need to do is modulo buckets the sum that we get from h and ord(c).\n\n24\n00:01:04,000 --> 00:01:07,000\nAnd then at the end we're going to return the hash value.\n\n25\n00:01:07,000 --> 00:01:12,000\nInstead of doing the modulo each time here, we could do the modulo just once at the end--\n\n26\n00:01:12,000 --> 00:01:16,000\n--that would be computing a big number if we have a really big string--\n\n27\n00:01:16,000 --> 00:01:19,000\nand then at the end compute it modulo buckets.\n\n28\n00:01:19,000 --> 00:01:21,000\nEither way should work.\n\n29\n00:01:21,000 --> 00:01:24,000\nThis way is a little better in the sense that if our string is very long,\n\n30\n00:01:24,000 --> 00:01:26,000\nwe would have to compute a really, really big number,\n\n31\n00:01:26,000 --> 00:01:31,000\nwhich gets to be more expensive, and we might even run out if it's a super long keyword.\n\n32\n00:01:31,000 --> 00:01:33,000\nSo it's better to do the modulo here.\n\n33\n00:01:33,000 --> 00:01:36,000\nWe'd get the same result either way, though.\n\n34\n00:01:36,000 --> 00:01:38,000\nLet's try this in the Python interpreter.\n\n35\n00:01:38,000 --> 00:01:42,000\nHere's the code that we wrote out on the sketch pad.\n\n36\n00:01:42,000 --> 00:01:45,000\nWe have our variable h, which is going to keep track of the hash value.\n\n37\n00:01:45,000 --> 00:01:48,000\nWe're going to go through all the characters in the keyword,\n\n38\n00:01:48,000 --> 00:01:51,000\nadding each one into the hash value modulo the number of buckets.\n\n39\n00:01:51,000 --> 00:01:55,000\nLet's try the examples.\n\n40\n00:01:57,000 --> 00:02:01,000\nSo a with 12 buckets hashes to bucket 1 as we expect.\n\n41\n00:02:01,000 --> 00:02:07,000\nIf we look at b, it hashes to bucket 2, also as we expect.\n\n42\n00:02:07,000 --> 00:02:09,000\nAnother thing we should try, \n\n43\n00:02:09,000 --> 00:02:12,000\nif you remember when we had the really bad hash string function,\n\n44\n00:02:12,000 --> 00:02:15,000\none of the many problems that it has was it didn't work on all strings.\n\n45\n00:02:15,000 --> 00:02:17,000\nIn particular, it did not work on the empty string.\n\n46\n00:02:17,000 --> 00:02:21,000\nDo you think our hash string function here will work on the empty string?\n\n47\n00:02:21,000 --> 00:02:26,000\nTry to guess what the results should be before I run it, and then I will run it.\n\n48\n00:02:26,000 --> 00:02:28,000\nYou see the result is 0, so no error.\n\n49\n00:02:28,000 --> 00:02:30,000\nAnd it makes sense that the result is 0.\n\n50\n00:02:30,000 --> 00:02:32,000\nWe start with h is 0.\n\n51\n00:02:32,000 --> 00:02:34,000\nWhen there are no characters in the string, we don't go through this loop at all,\n\n52\n00:02:34,000 --> 00:02:36,000\nso h is still 0 when we return.\n\n53\n00:02:36,000 --> 00:02:40,000\nAnd let's also try the longer example.\n\n54\n00:02:40,000 --> 00:02:45,000\nWhen we hash the string udacity with 12 buckets, we get bucket 11.\n\n55\n00:02:45,000 --> 00:02:47,000\nWe should be able to increase the number of buckets,\n\n56\n00:02:47,000 --> 00:02:49,000\nso let's increase the number of buckets.\n\n57\n00:02:49,000 --> 00:02:55,000\nLet's suppose we have 1,000 buckets. And we get bucket 755.\n\n58\n00:02:55,000 --> 00:02:58,000\nThis isn't enough to convince us that our hash string function\n\n59\n00:02:58,000 --> 00:03:01,000\nis distributing all strings well between all buckets,\n\n60\n00:03:01,000 --> 00:03:04,000\nbut at least we're getting a fairly large number\n\n61\n00:03:04,000 --> 00:03:06,000\nthat says we might be using all the buckets.\n\n", "id": 351005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYtKsWDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/366004", "type": "Nugget", "id": 366004}, {"nuggetType": "lecture", "name": "Finding Buckets Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "f6edb6dd-a533-41da-a056-4489c16c641e", "name": "cs101_unit5_24_s_finding-buckets", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKHXFww", "youtube_id": "VZ5b9a7P-6s", "youtube_state": "done", "path": "Course/cs101/Media/388001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:06,000\n[Narrator] Here's the answer: we can define hash table get bucket and it takes 2 inputs. \n\n2\n00:00:06,000 --> 00:00:12,000\nThe hash table we'll call that H table and the key which is the word we're looking for,\n\n3\n00:00:12,000 --> 00:00:16,000\nand to find the bucket well we're going to use hash string.\n\n4\n00:00:16,000 --> 00:00:21,000\nWe're going to pass in the same word, the key word that's the input key.\n\n5\n00:00:21,000 --> 00:00:24,000\nThe number of buckets is the length of this table.\n\n6\n00:00:24,000 --> 00:00:28,000\nWe're going to call hast string passing in the key \n\n7\n00:00:28,000 --> 00:00:34,000\nand as the second input we need the length of the table that's the number of buckets.\n\n8\n00:00:34,000 --> 00:00:38,000\nThat will get us a number which is the index of the bucket we want.\n\n9\n00:00:38,000 --> 00:00:43,000\nTo get that bucket we need to use that as the index to select that element from H table,\n\n10\n00:00:43,000 --> 00:00:45,000\nand then we want to return the result.\n\n11\n00:00:45,000 --> 00:00:47,000\nThat's all we need to find the bucket.\n\n12\n00:00:47,000 --> 00:00:49,000\nLet's look at that in the Python interpreter. \n\n13\n00:00:49,000 --> 00:00:52,000\nHere's the code we have so far.\n\n14\n00:00:52,000 --> 00:00:55,000\nWe have the hash string procedure we defined that maps a keyword\n\n15\n00:00:55,000 --> 00:00:59,000\nand a number of buckets to the position where that should occur in the hash table.\n\n16\n00:00:59,000 --> 00:01:05,000\nWe have the make hash table procedure that creates an empty table with that number of buckets,\n\n17\n00:01:05,000 --> 00:01:09,000\nand now we have the hash table get bucket procedure that takes a hash table and a key\n\n18\n00:01:09,000 --> 00:01:15,000\nand gives us the element of the hash table which is where that key would belong using the hash string function to find the right position.\n\n", "id": 388001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYtqsWDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/366006", "type": "Nugget", "id": 366006}, {"nuggetType": "lecture", "name": "Modulus Quiz Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "f382d0f3-a063-4400-9198-1f9fe6344190", "name": "cs101_unit5_15_s_modulus-quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMmgFww", "youtube_id": "15oFS42oF1Q", "youtube_state": "done", "path": "Course/cs101/Media/381001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\n[Evans] Here are the answers.\n\n2\n00:00:02,000 --> 00:00:05,000\nFor the first question we had 12 % 3.\n\n3\n00:00:05,000 --> 00:00:14,000\n12 is equal to 3 * 4, so that means if we divide 12 by 3 we get 4 with no remainder,\n\n4\n00:00:14,000 --> 00:00:18,000\nso that means the result of 12 % 3 is 0.\n\n5\n00:00:18,000 --> 00:00:22,000\nFor the second question, we could solve this by figuring out what ord('a') is,\n\n6\n00:00:22,000 --> 00:00:24,000\nbut we don't actually need to.\n\n7\n00:00:24,000 --> 00:00:29,000\nWe know that the value of ord for a is always going to be the same every time we do it.\n\n8\n00:00:29,000 --> 00:00:32,000\nSo this is saying the same value modulo the same value.\n\n9\n00:00:32,000 --> 00:00:38,000\nThe result is always going to be 0 because anything is divisible by itself with no remainder.\n\n10\n00:00:38,000 --> 00:00:40,000\nSo that answer is also 0.\n\n11\n00:00:40,000 --> 00:00:43,000\nFor part c, now we've added 3.\n\n12\n00:00:43,000 --> 00:00:45,000\nIn order to know what the result is here, \n\n13\n00:00:45,000 --> 00:00:50,000\nwe've got to know whether ord('z') is greater than or less than 3.\n\n14\n00:00:50,000 --> 00:00:57,000\nAs long as ord('z') is greater than 3, that would mean (ord('z') + 3) % ord('z') must be 3\n\n15\n00:00:57,000 --> 00:01:00,000\nbecause the remainder will be what we added to ord('z')\n\n16\n00:01:00,000 --> 00:01:04,000\nsince ord('z') by itself is always divisible by ord('z').\n\n17\n00:01:04,000 --> 00:01:06,000\nAnd we do know that ord('z') is greater than 3,\n\n18\n00:01:06,000 --> 00:01:09,000\nso that means the result will be 3.\n\n19\n00:01:09,000 --> 00:01:11,000\nLet's try that last one in the Python interpreter.\n\n20\n00:01:11,000 --> 00:01:18,000\nWe're going to print the value of (ord('z') + 3) % ord('z'),\n\n21\n00:01:18,000 --> 00:01:22,000\nand when we run that we see the result is 3.\n\n22\n00:01:22,000 --> 00:01:25,000\nAnd I want to point out that the parentheses here are actually important.\n\n23\n00:01:25,000 --> 00:01:32,000\nIf we didn't have them, if we tried the ord('z') + 3 % ord('z'),\n\n24\n00:01:32,000 --> 00:01:35,000\nthen we get the result 125.\n\n25\n00:01:35,000 --> 00:01:40,000\nAnd the reason for that is the grouping here is going to group 3 % ord('z')\n\n26\n00:01:40,000 --> 00:01:42,000\nand add that to ord('z').\n\n27\n00:01:42,000 --> 00:01:50,000\nSo it's a different value, and the reason we get 125 is the value of ord('z') by itself is 122.\n\n28\n00:01:50,000 --> 00:01:58,000\nSo it's 122, which is ord('z') + 3 % ord('z'), which is 3 % 122, which is 3,\n\n29\n00:01:58,000 --> 00:02:03,000\nwhich is why we got 125 when we evaluated this without the parentheses.\n\n", "id": 381001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYm7MWDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/367003", "type": "Nugget", "id": 367003}, {"nuggetType": "lecture", "name": "Index Size Vs. Time Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "a35ef5fb-44e2-4f47-a948-984c7522c5e4", "name": "cs101_unit5_07_s_index-size-vs.-time", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJmzFgw", "youtube_id": "dGM8M9aeRus", "youtube_state": "done", "path": "Course/cs101/Media/367001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nThis required some guesswork since we hadn't actually run any examples this large,\n\n2\n00:00:05,000 --> 00:00:08,000\nbut if you understood the examples we saw with the smaller inputs,\n\n3\n00:00:08,000 --> 00:00:11,000\nyou should've been able to guess that it would take about a second \n\n4\n00:00:11,000 --> 00:00:14,000\nto do a lookup for a table with 10 million keywords.\n\n5\n00:00:14,000 --> 00:00:17,000\nThe reason for this is if we look at the previous executions, \n\n6\n00:00:17,000 --> 00:00:24,000\nwe saw, based on the keywords in the index, the time increased linearly.\n\n7\n00:00:24,000 --> 00:00:30,000\nWhen we had 10,000 keywords, we measured the time as 0.0009 seconds.\n\n8\n00:00:30,000 --> 00:00:37,000\nWhen we had a 100,000 we measured the time as 0.009 seconds. \n\n9\n00:00:37,000 --> 00:00:39,000\nWe didn't measure any times beyond that.\n\n10\n00:00:39,000 --> 00:00:43,000\nThe suggestion from looking at this is when we increased the number of keywords by 10, \n\n11\n00:00:43,000 --> 00:00:46,000\nthe time also increased by a factor of 10.\n\n12\n00:00:46,000 --> 00:00:50,000\nMaybe we could guess that if we had 1 million keywords,\n\n13\n00:00:50,000 --> 00:00:55,000\nit would probably take about 0.09 seconds to do a lookup.\n\n14\n00:00:55,000 --> 00:01:03,000\nIf we had 10 million, the time would take 0.9 seconds, which is closed to 1 second.\n\n15\n00:01:03,000 --> 00:01:08,000\nIf we had 100 million, then the time would take about 9 seconds.\n\n", "id": 367001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYgbsWDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/368001", "type": "Nugget", "id": 368001}, {"nuggetType": "lecture", "name": "Fast Enough", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "7fed84a3-3478-4d83-83c3-e2f3d9dcb321", "name": "cs101_unit5_10_q_fast-enough", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJqzFgw", "youtube_id": "ixnOI4Rr-tA", "youtube_state": "done", "path": "Course/cs101/Media/367002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:06,000\nNow I hope you understand the running time of lookup well enough to be able to answer this question.\n\n2\n00:00:06,000 --> 00:00:11,000\nThis is definitely a fairly subjective question, and the question is is our lookup fast enough?\n\n3\n00:00:11,000 --> 00:00:14,000\nThe possible answers are, yes, that it is fast enough.\n\n4\n00:00:14,000 --> 00:00:17,000\nIt depends on how many key words there are in the index.\n\n5\n00:00:17,000 --> 00:00:21,000\nIt depends on how many URLs there are, meaning the number of different pages\n\n6\n00:00:21,000 --> 00:00:23,000\nthat we crawled in our web crawl.\n\n7\n00:00:23,000 --> 00:00:27,000\nIt depends on how many lookups we expect to need to do.\n\n8\n00:00:27,000 --> 00:00:30,000\nOr no, it's not fast enough.\n\n", "id": 367002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYgrsWDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/368002", "type": "Nugget", "id": 368002}, {"nuggetType": "program", "name": "Better Hash Functions", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYg7sWDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/368003", "suppliedCode": "#Define a function, hash_string,\n#that takes as inputs a keyword\n#(string) and a number of buckets,\n#and outputs a number representing\n#the bucket for that keyword.\n\n#print hash_string('a',12) => 1\n#print hash_string('b',12) => 2\n#print hash_string('a',13) => 6\n\n#print hash_string('au',12) => 10\n#print hash_string('udacity',12) => 11\n\ndef hash_string(keyword,buckets):\n", "type": "Nugget", "id": 368003}, {"nuggetType": "lecture", "name": "The Hard Way Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "7f0db9d3-3d5a-4d91-a23b-2c4170a93604", "name": "cs101_unit5_23_s_the-hard-way", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJOJFww", "youtube_id": "0MI6jpoAFKA", "youtube_state": "done", "path": "Course/cs101/Media/378003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Narrator] The correct answer is the second one, so hopefully no one picked the first answer.\n\n2\n00:00:04,000 --> 00:00:06,000\nWe usually do try to do things the easy way.\n\n3\n00:00:06,000 --> 00:00:09,000\nThere is sort of an exception to that in this whole unit \n\n4\n00:00:09,000 --> 00:00:12,000\nthat we're learning ourselves how to define a hash table\n\n5\n00:00:12,000 --> 00:00:16,000\neven though Python provides a dictionary type, which I'll talk about at the very end of the unit,\n\n6\n00:00:16,000 --> 00:00:19,000\nthat makes things much easier than what we're doing ourselves,\n\n7\n00:00:19,000 --> 00:00:23,000\nbut we really want to understand a lot of computer science by building our own hash table,\n\n8\n00:00:23,000 --> 00:00:27,000\nand then we won't actually need to use it because there's a built-in type that works much better.\n\n9\n00:00:27,000 --> 00:00:31,000\nBut the answer is the second answer and here's the reason why:\n\n10\n00:00:31,000 --> 00:00:36,000\nwhat happens when we evaluate this list multiplication--well, we have this empty list.\n\n11\n00:00:36,000 --> 00:00:43,000\nLet's draw it like this, and we create a new list which is 3 copies of that list,\n\n12\n00:00:43,000 --> 00:00:45,000\nbut it's not copies it's 3 references to it.\n\n13\n00:00:45,000 --> 00:00:51,000\nHere's the new list has 3 elements, each one of those elements refers to the same empty list.\n\n14\n00:00:51,000 --> 00:00:56,000\nThen when we did table index 1 append, well, what happened is \n\n15\n00:00:56,000 --> 00:01:00,000\nwe followed this reference to whatever table index 1 is.\n\n16\n00:01:00,000 --> 00:01:03,000\nIt's this object we appended to it, added a new element,\n\n17\n00:01:03,000 --> 00:01:08,000\nbut because the reference is that position 0, 1, and 2 all refer to the same object\n\n18\n00:01:08,000 --> 00:01:11,000\nthat changed all of those values, not just the value of table index 1,\n\n19\n00:01:11,000 --> 00:01:14,000\nand we can see that if we print out the whole table\n\n20\n00:01:14,000 --> 00:01:19,000\nthat the table contains 3 elements, but they're all the same and they all refer to the same object,\n\n21\n00:01:19,000 --> 00:01:21,000\nso any change we make to 1 changes all of them.\n\n", "id": 378003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY7cIWDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/369005", "type": "Nugget", "id": 369005}, {"nuggetType": "lecture", "name": "Modulus Quiz", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "c1831af3-7f33-42b9-a885-4dfb9671a9cd", "name": "cs101_unit5_15_q_modulus-quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJOMFgw", "youtube_id": "vNtLUOR5_7Q", "youtube_state": "done", "path": "Course/cs101/Media/362003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Evans] For this quiz your goal is to predict the value of each expression.\n\n2\n00:00:04,000 --> 00:00:06,000\nTry to figure out the answer yourself.\n\n3\n00:00:06,000 --> 00:00:11,000\nYou can definitely try evaluating it in the Python interpreter to check that it's correct.\n\n4\n00:00:11,000 --> 00:00:15,000\nThe first expression is 12 % 3.\n\n5\n00:00:15,000 --> 00:00:22,000\nThe second expression is ord('a') % ord ('a').\n\n6\n00:00:22,000 --> 00:00:27,000\nSee if you can solve this without actually figuring out what the value of ord('a') is.\n\n7\n00:00:27,000 --> 00:00:32,000\nAnd the third question is (ord('z') + 3) % ord('z').\n\n", "id": 362003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYutIWDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/371002", "type": "Nugget", "id": 371002}, {"nuggetType": "quiz", "name": "Worst Case", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYodoWDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/372001", "type": "Nugget", "id": 372001}, {"nuggetType": "quiz", "name": "Keywords And Buckets", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYotoWDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/372002", "type": "Nugget", "id": 372002}, {"nuggetType": "lecture", "name": "Keywords And Buckets Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "9dc8cb7e-37b7-478e-afc5-9aa6b34713fd", "name": "cs101_unit5_20_s_keywords-and-buckets", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNz3FAw", "youtube_id": "6WQhOuxEXdc", "youtube_state": "done", "path": "Course/cs101/Media/343004", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:07,000\n[Evans] There are 2 correct answers: the third one and the fifth one.\n\n2\n00:00:07,000 --> 00:00:13,000\nThis is why a hash table is such a great advance over the linear index\n\n3\n00:00:13,000 --> 00:00:16,000\nis that we can double the number of keywords and double the number of buckets\n\n4\n00:00:16,000 --> 00:00:19,000\nand the lookup time stays the same.\n\n5\n00:00:19,000 --> 00:00:22,000\nWith the linear index, if we double the number of keywords for each lookup,\n\n6\n00:00:22,000 --> 00:00:25,000\nwe need to go through that loop once for each keyword.\n\n7\n00:00:25,000 --> 00:00:29,000\nIf the keyword was near the end or one that wasn't in the table,\n\n8\n00:00:29,000 --> 00:00:32,000\nthe time to look up the keyword would double as we double the number of keywords.\n\n9\n00:00:32,000 --> 00:00:35,000\nWith a hash table, if we also double the number of buckets \n\n10\n00:00:35,000 --> 00:00:37,000\nwhen we double the number of keywords,\n\n11\n00:00:37,000 --> 00:00:41,000\nthen the number of keywords in each bucket stays the same.\n\n12\n00:00:41,000 --> 00:00:44,000\nWe're dividing the keywords evenly between buckets.\n\n13\n00:00:44,000 --> 00:00:47,000\nSo the number of keywords per bucket \n\n14\n00:00:47,000 --> 00:00:50,000\nis the number of keywords divided by the number of buckets.\n\n15\n00:00:50,000 --> 00:00:54,000\nIf we double both, that number stays approximately the same.\n\n16\n00:00:54,000 --> 00:00:59,000\nThe time to look up only depends on the number of keywords per bucket.\n\n17\n00:00:59,000 --> 00:01:01,000\nThe time to find the bucket is very fast.\n\n18\n00:01:01,000 --> 00:01:04,000\nWe just need to run the hash function, find that element of the list.\n\n19\n00:01:04,000 --> 00:01:09,000\nBoth of those don't depend on the size of the list, how long it takes to do that.\n\n20\n00:01:09,000 --> 00:01:13,000\nAnd then we have to look through that bucket, the size of the bucket.\n\n21\n00:01:13,000 --> 00:01:16,000\nWe have to look through each element in the bucket one at a time.\n\n22\n00:01:16,000 --> 00:01:19,000\nSo if we keep the number of keywords per bucket the same,\n\n23\n00:01:19,000 --> 00:01:21,000\nthe lookup time stays essentially the same.\n\n24\n00:01:21,000 --> 00:01:23,000\nSo that's the great property that hash tables have.\n\n25\n00:01:23,000 --> 00:01:27,000\nIf we double the number of buckets as we double the number of keywords,\n\n26\n00:01:27,000 --> 00:01:30,000\nthe expected lookup time doesn't change.\n\n27\n00:01:30,000 --> 00:01:33,000\nFor the other possibilities, if we double the number of keywords\n\n28\n00:01:33,000 --> 00:01:37,000\nand keep the same number of buckets, that's going to get slower\n\n29\n00:01:37,000 --> 00:01:40,000\nbecause the number of keywords per bucket will approximately double,\n\n30\n00:01:40,000 --> 00:01:43,000\nso it's going to take about twice as long for each lookup.\n\n31\n00:01:43,000 --> 00:01:46,000\nIf we keep the same number of keywords but double the number of buckets,\n\n32\n00:01:46,000 --> 00:01:49,000\nthen it's going to actually get faster.\n\n33\n00:01:49,000 --> 00:01:51,000\nWe'll have the same number of keywords, double the number of buckets,\n\n34\n00:01:51,000 --> 00:01:54,000\nso this value will be approximately half what it was before.\n\n35\n00:01:54,000 --> 00:01:57,000\nThe expected lookup time will be about half what it was \n\n36\n00:01:57,000 --> 00:01:59,000\nbefore we doubled the number of buckets.\n\n37\n00:01:59,000 --> 00:02:02,000\nIf we halve the number of keywords, keeping the same number of buckets,\n\n38\n00:02:02,000 --> 00:02:05,000\nthat has essentially the same effect.\n\n39\n00:02:05,000 --> 00:02:08,000\nThe average number of keywords per bucket will be half what it was before,\n\n40\n00:02:08,000 --> 00:02:12,000\nso the expected lookup time will be about half what it was.\n\n41\n00:02:12,000 --> 00:02:16,000\nAnd finally, if we halve both, that's going to keep the ratio the same,\n\n42\n00:02:16,000 --> 00:02:18,000\nso the expected lookup time will be about the same.\n\n43\n00:02:18,000 --> 00:02:21,000\nSo that's why these 2 are the correct answers\n\n44\n00:02:21,000 --> 00:02:25,000\nthat those are expected to leave the lookup time essentially unchanged.\n\n", "id": 343004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYo9oWDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/372003", "type": "Nugget", "id": 372003}, {"nuggetType": "lecture", "name": "Hash Table Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "562b7876-166c-45f3-8a38-6a689c36171e", "name": "cs101_unit5_12_s_hash-table", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGN30FQw", "youtube_id": "WvZPqADYXtE", "youtube_state": "done", "path": "Course/cs101/Media/359005", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\n[Evans] The answer is many of the properties are desirable.\n\n2\n00:00:05,000 --> 00:00:07,000\nThe second property is desirable.\n\n3\n00:00:07,000 --> 00:00:09,000\nThe first property is not desirable.\n\n4\n00:00:09,000 --> 00:00:12,000\nIf the hash function outputs a unique number for every keyword,\n\n5\n00:00:12,000 --> 00:00:16,000\nthen the range for the hash function would be very large.\n\n6\n00:00:16,000 --> 00:00:20,000\nWe'd need a huge amount of memory to store the hash table,\n\n7\n00:00:20,000 --> 00:00:24,000\nand the number of buckets would be the same as the number of keywords.\n\n8\n00:00:24,000 --> 00:00:26,000\nThat's not going to work very well.\n\n9\n00:00:26,000 --> 00:00:29,000\nWhat we want is the number of buckets to be b.\n\n10\n00:00:29,000 --> 00:00:31,000\nSo that means that the output of the hash function\n\n11\n00:00:31,000 --> 00:00:33,000\nshould be in the range between 0 and b - 1.\n\n12\n00:00:33,000 --> 00:00:37,000\nThat will find the element of the list that corresponds to that bucket.\n\n13\n00:00:37,000 --> 00:00:39,000\nSo we do want the second property.\n\n14\n00:00:39,000 --> 00:00:43,000\nThe third and the fourth properties say that we want the number of keywords in each bucket\n\n15\n00:00:43,000 --> 00:00:45,000\nto be approximately the same.\n\n16\n00:00:45,000 --> 00:00:48,000\nSo if they are k keywords and we're fitting them into b buckets,\n\n17\n00:00:48,000 --> 00:00:52,000\nif we want the buckets to be approximately the same size,\n\n18\n00:00:52,000 --> 00:00:55,000\nthen each bucket should have approximately k divided by b keywords.\n\n19\n00:00:55,000 --> 00:00:59,000\nSo both the third and the fourth property are true.\n\n20\n00:00:59,000 --> 00:01:05,000\nThe final property says that we should have more keywords in bucket 0 than in bucket 1.\n\n21\n00:01:05,000 --> 00:01:07,000\nThere's no reason that we would prefer that.\n\n22\n00:01:07,000 --> 00:01:12,000\nYou might think it would be better to have more keywords at the beginning than later on.\n\n23\n00:01:12,000 --> 00:01:14,000\nThat's not the case with a hash table.\n\n24\n00:01:14,000 --> 00:01:17,000\nRemember, what our hash function does is tells us right away which bucket to go through.\n\n25\n00:01:17,000 --> 00:01:19,000\nWe don't have to look through the earlier buckets.\n\n26\n00:01:19,000 --> 00:01:22,000\nThis is different from the list index that we started with\n\n27\n00:01:22,000 --> 00:01:25,000\nwhere the first one is the fastest one to find\n\n28\n00:01:25,000 --> 00:01:27,000\nand the last one requires going through all the elements.\n\n29\n00:01:27,000 --> 00:01:29,000\nFor the hash table that's not the case.\n\n30\n00:01:29,000 --> 00:01:33,000\nThere's no reason to prefer having more entries in bucket 0 to bucket 1.\n\n31\n00:01:33,000 --> 00:01:35,000\nWhat we really want is to try to have all the buckets \n\n32\n00:01:35,000 --> 00:01:38,000\nhave approximately the same number of keywords.\n\n", "id": 359005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY8ukWDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/374002", "type": "Nugget", "id": 374002}, {"nuggetType": "quiz", "name": "Modulus Quiz", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY8-kWDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/374003", "type": "Nugget", "id": 374003}, {"nuggetType": "lecture", "name": "Equivalent Expressions Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "4facd45b-3ff0-41e9-ab6f-bc9fbf570703", "name": "cs101_unit5_16_s_equivalent-expressions", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOvCFgw", "youtube_id": "nxAN_9x4_Nw", "youtube_state": "done", "path": "Course/cs101/Media/369003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Evans] The answer is only the second and the third are equivalent.\n\n2\n00:00:04,000 --> 00:00:07,000\nThis is a little surprising. This was kind of a tricky question.\n\n3\n00:00:07,000 --> 00:00:15,000\nThe reason the first one is not, if x is 7 or greater, then 7 % 7 has the value 0.\n\n4\n00:00:15,000 --> 00:00:19,000\nThat's not the same as the x that we started with.\n\n5\n00:00:19,000 --> 00:00:21,000\nThat's the case also if we have 8.\n\n6\n00:00:21,000 --> 00:00:26,000\n8 % 7 has the value 1, which is different from what we started with.\n\n7\n00:00:26,000 --> 00:00:29,000\nWhen the modulo is greater than the possible value of x--\n\n8\n00:00:29,000 --> 00:00:32,000\nand we said x could be only between 0 and 10--\n\n9\n00:00:32,000 --> 00:00:35,000\nthen the result is always the same as x.\n\n10\n00:00:35,000 --> 00:00:40,000\nThe third question, when we map x to its character value\n\n11\n00:00:40,000 --> 00:00:43,000\nand then we take the order of that, chr and ord are inverses,\n\n12\n00:00:43,000 --> 00:00:45,000\nso that's equivalent.\n\n13\n00:00:45,000 --> 00:00:47,000\nYou would think that would work in the other direction.\n\n14\n00:00:47,000 --> 00:00:52,000\nThe reason it doesn't is because the input to ord must be a 1-letter string.\n\n15\n00:00:52,000 --> 00:00:56,000\nIf the input is not a single character, then ord produces an error.\n\n16\n00:00:56,000 --> 00:00:58,000\nSo let's see that in the Python interpreter.\n\n17\n00:00:58,000 --> 00:01:03,000\nIf we print the result of ord where the input is a number\n\n18\n00:01:03,000 --> 00:01:07,000\nand we said x was a number between 0 and 3, that gives us an error.\n\n19\n00:01:07,000 --> 00:01:12,000\nIt gives us an error because ord expects a string of length 1 but the input was an integer.\n\n20\n00:01:12,000 --> 00:01:15,000\nThere is a function that allows us to turn numbers into strings,\n\n21\n00:01:15,000 --> 00:01:17,000\nand that's the str function.\n\n22\n00:01:17,000 --> 00:01:22,000\nThat takes a number and gives us a string corresponding to that number.\n\n23\n00:01:22,000 --> 00:01:25,000\nLet's see what str(3) gives us.\n\n24\n00:01:25,000 --> 00:01:27,000\nThat will give us the string 3. \n\n25\n00:01:27,000 --> 00:01:31,000\nWe can't see in the output here that it's actually a string but it is a string.\n\n26\n00:01:31,000 --> 00:01:34,000\nWe can actually use ord on the result there.\n\n27\n00:01:34,000 --> 00:01:40,000\nWhen we run this, what we get is 51, not the 3 that we passed in,\n\n28\n00:01:40,000 --> 00:01:47,000\nand that's because the ord of the character 3 is 51.\n\n", "id": 369003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY9OkWDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/374004", "type": "Nugget", "id": 374004}, {"nuggetType": "lecture", "name": "Fast Enough Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "74f09a76-85d3-44db-aab8-44cf8170d8b2", "name": "cs101_unit5_10_s_fast-enough", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPHpFgw", "youtube_id": "dXbS6ZPpvQk", "youtube_state": "done", "path": "Course/cs101/Media/374001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\n[Evans] The best answers for this question are that \n\n2\n00:00:03,000 --> 00:00:06,000\nit does depend on the number of keywords.\n\n3\n00:00:06,000 --> 00:00:09,000\nIf we have very few keywords, then our lookup is fast enough.\n\n4\n00:00:09,000 --> 00:00:11,000\nWe're probably going to have more keywords than that,\n\n5\n00:00:11,000 --> 00:00:13,000\nso we want our lookup to be faster.\n\n6\n00:00:13,000 --> 00:00:15,000\nThe third possibility is not actually true.\n\n7\n00:00:15,000 --> 00:00:18,000\nIt doesn't depend on how many URLs there are.\n\n8\n00:00:18,000 --> 00:00:21,000\nAnd the reason for that is we're doing a lookup based on the keywords.\n\n9\n00:00:21,000 --> 00:00:24,000\nThe number of times we go through the loop in lookup\n\n10\n00:00:24,000 --> 00:00:28,000\ndepends only on the number of elements in the index, which is the number of keywords.\n\n11\n00:00:28,000 --> 00:00:32,000\nAnd then the size of the URL list for each keyword\n\n12\n00:00:32,000 --> 00:00:34,000\ndoesn't impact the time it takes to do a lookup.\n\n13\n00:00:34,000 --> 00:00:37,000\nSo it doesn't depend on the number of URLs.\n\n14\n00:00:37,000 --> 00:00:40,000\nCertainly if we have more pages, we're likely to have more keywords,\n\n15\n00:00:40,000 --> 00:00:42,000\nso that would increase the size of the index,\n\n16\n00:00:42,000 --> 00:00:46,000\nbut just the number of pages by itself doesn't impact the time for lookup.\n\n17\n00:00:46,000 --> 00:00:49,000\nIt does depend on how many lookups we want to do.\n\n18\n00:00:49,000 --> 00:00:54,000\nSo if we only want to do 1 lookup and that lookup takes a few seconds, that's okay.\n\n19\n00:00:54,000 --> 00:00:57,000\nIt's probably not worth spending a lot of time to make that 1 lookup faster,\n\n20\n00:00:57,000 --> 00:00:59,000\nbut chances are we're going to want to do lots of lookups.\n\n21\n00:00:59,000 --> 00:01:02,000\nCertainly if we wanted to have a real search engine,\n\n22\n00:01:02,000 --> 00:01:05,000\nwe'd want to be able to serve millions of lookups every day\n\n23\n00:01:05,000 --> 00:01:09,000\nor, in the case of Google, many billions of lookups every hour.\n\n24\n00:01:09,000 --> 00:01:13,000\nSo if we want to do lots of lookups, we want lookup to be faster.\n\n25\n00:01:13,000 --> 00:01:16,000\nI think we have good reasons to want to make our lookup faster,\n\n26\n00:01:16,000 --> 00:01:18,000\nand we're also going to learn some interesting computer science concepts\n\n27\n00:01:18,000 --> 00:01:20,000\nby trying to do that.\n\n", "id": 374001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY2fEWDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/375001", "type": "Nugget", "id": 375001}, {"nuggetType": "lecture", "name": "Making Lookup Faster", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "006897c6-2ef1-456d-b3e8-1842e5e4d714", "name": "cs101_unit5_11_l_making-lookup-faster", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPLsFQw", "youtube_id": "2UHVYMJaIEY", "youtube_state": "done", "path": "Course/cs101/Media/358002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\n[Evans] What do we need to do to make lookup faster?\n\n2\n00:00:03,000 --> 00:00:05,000\nLet's think about why it was so slow.\n\n3\n00:00:05,000 --> 00:00:09,000\nThe reason it was so slow is that we were doing this for loop.\n\n4\n00:00:09,000 --> 00:00:11,000\nWe were going through all the elements in order\n\n5\n00:00:11,000 --> 00:00:13,000\nand we were checking if they match the keyword.\n\n6\n00:00:13,000 --> 00:00:16,000\nAnd we had to do this going through the entire index.\n\n7\n00:00:16,000 --> 00:00:20,000\nFor a keyword that's not in the index, to determine that it's not there\n\n8\n00:00:20,000 --> 00:00:23,000\nwe had to go through the whole index.\n\n9\n00:00:23,000 --> 00:00:27,000\nThis is not the way we use indexes in real life.\n\n10\n00:00:27,000 --> 00:00:30,000\nIf you're looking for a word in the index of a book,\n\n11\n00:00:30,000 --> 00:00:33,000\nyou don't have to look through every single entry to see if that word exists.\n\n12\n00:00:33,000 --> 00:00:35,000\nYou can jump around.\n\n13\n00:00:35,000 --> 00:00:38,000\nAnd the reason you can jump around is because the entries in the index are sorted.\n\n14\n00:00:38,000 --> 00:00:42,000\nThey're sorted in alphabetical order, so you know where that entry would belong.\n\n15\n00:00:42,000 --> 00:00:45,000\nYou just need to find the right place and see if it's there.\n\n16\n00:00:45,000 --> 00:00:47,000\nSo we could do that with our index.\n\n17\n00:00:47,000 --> 00:00:50,000\nInstead of having our index kept in arbitrary order,\n\n18\n00:00:50,000 --> 00:00:55,000\nif we kept our index in a sorted order, then we could find the place where that entry belongs\n\n19\n00:00:55,000 --> 00:00:57,000\nand look for it.\n\n20\n00:00:57,000 --> 00:00:59,000\nSorting is a very interesting problem.\n\n21\n00:00:59,000 --> 00:01:02,000\nIt's something we're not actually going to talk about more in this class.\n\n22\n00:01:02,000 --> 00:01:04,000\nWe're going to do a different way of doing that.\n\n23\n00:01:04,000 --> 00:01:08,000\nWhat we're going to do is find a way to find where the entry should be\n\n24\n00:01:08,000 --> 00:01:10,000\nthat doesn't require actually keeping all the entries sorted.\n\n25\n00:01:10,000 --> 00:01:14,000\nWhat we want is something that will allow us, given a keyword,\n\n26\n00:01:14,000 --> 00:01:18,000\nwe're going to have some function that tells us where it belongs.\n\n27\n00:01:18,000 --> 00:01:21,000\nWe're going to call that a hash function.\n\n28\n00:01:21,000 --> 00:01:24,000\nThat tells us where in the entry to look.\n\n29\n00:01:24,000 --> 00:01:27,000\nAnd so instead of having to look through the whole index,\n\n30\n00:01:27,000 --> 00:01:31,000\nthe hash function will tell us where that entry belongs.\n\n31\n00:01:31,000 --> 00:01:34,000\nSo what we need for this is some function that's going to take a keyword,\n\n32\n00:01:34,000 --> 00:01:40,000\nmap it to a number, and that number is the position in the index where that entry belongs.\n\n33\n00:01:40,000 --> 00:01:43,000\nWe could do this lots of different ways.\n\n34\n00:01:43,000 --> 00:01:45,000\nOne simple thing would be to think we know the alphabet;\n\n35\n00:01:45,000 --> 00:01:50,000\nthis is more like the way an index for a book would work,\n\n36\n00:01:50,000 --> 00:01:54,000\nand for each entry in the index we'll have--\n\n37\n00:01:54,000 --> 00:02:00,000\nbased on the first letter we'll put all the entries that start with that first letter in the same place.\n\n38\n00:02:00,000 --> 00:02:04,000\nSo if we're looking for a keyword that starts with U,\n\n39\n00:02:04,000 --> 00:02:06,000\nthat word for our hash would tell us to look in the place \n\n40\n00:02:06,000 --> 00:02:08,000\nwhere all the words that start with U are,\n\n41\n00:02:08,000 --> 00:02:10,000\nand then we'd only have to look through the words that start with U.\n\n42\n00:02:10,000 --> 00:02:12,000\nSo this would allow us to do a lookup\n\n43\n00:02:12,000 --> 00:02:15,000\nmuch more quickly than looking through the whole index.\n\n44\n00:02:15,000 --> 00:02:17,000\nThis isn't quite the best way to do things.\n\n45\n00:02:17,000 --> 00:02:21,000\nIf we made our places based on the letter, then we have a problem\n\n46\n00:02:21,000 --> 00:02:23,000\nif we have 2 words with the same first letter.\n\n47\n00:02:23,000 --> 00:02:27,000\nCertainly we expect to have more than 1 word that starts with the same letter.\n\n48\n00:02:27,000 --> 00:02:31,000\nSo instead of having just an element here for each position,\n\n49\n00:02:31,000 --> 00:02:37,000\nwe're going to have a list of elements that would be all the words that start with U.\n\n50\n00:02:37,000 --> 00:02:42,000\nSo when we look up the word Udacity, we would look in the entry for U,\n\n51\n00:02:42,000 --> 00:02:46,000\nand if the word that's there doesn't match, then we know Udacity isn't in the index.\n\n52\n00:02:46,000 --> 00:02:48,000\nThere are lots of problems with this.\n\n53\n00:02:48,000 --> 00:02:51,000\nThe first problem is there might be more than 1 word that starts with U,\n\n54\n00:02:51,000 --> 00:02:53,000\nso we can't just have 1 entry here.\n\n55\n00:02:53,000 --> 00:02:56,000\nWhat we need to have is a list of entries.\n\n56\n00:02:56,000 --> 00:02:58,000\nWe often call this a bucket.\n\n57\n00:02:58,000 --> 00:03:03,000\nWe need a bucket of all the entries that start with U that would be in this position.\n\n58\n00:03:03,000 --> 00:03:06,000\nSo instead of having just 1 entry like the old structure of our index,\n\n59\n00:03:06,000 --> 00:03:10,000\nnow we're going to have a list of entries, and each element of the index will now be a bucket,\n\n60\n00:03:10,000 --> 00:03:14,000\nwhich is a list of entries that are in the right position.\n\n61\n00:03:14,000 --> 00:03:19,000\nThis is going to be our bucket of all the entries that start with U,\n\n62\n00:03:19,000 --> 00:03:25,000\nand that would have all the different entries that start with the letter U in that bucket.\n\n63\n00:03:25,000 --> 00:03:27,000\nThis is getting better.\n\n64\n00:03:27,000 --> 00:03:30,000\nNow for each lookup, instead of having to look through all of the words in the index,\n\n65\n00:03:30,000 --> 00:03:34,000\nwe just need to find the position that starts with the right letter\n\n66\n00:03:34,000 --> 00:03:36,000\nthat's got a bucket of all the words that start with that letter,\n\n67\n00:03:36,000 --> 00:03:38,000\nand then we just need to look through that bucket.\n\n68\n00:03:38,000 --> 00:03:41,000\nThis works okay, but this doesn't really scale very well.\n\n69\n00:03:41,000 --> 00:03:45,000\nAt best, if we have 10 million words,\n\n70\n00:03:45,000 --> 00:03:48,000\nnow instead of having 10 million entries to go through,\n\n71\n00:03:48,000 --> 00:03:54,000\nwe need to go through 10 million divided by, say, 26 if we have 26 letters.\n\n72\n00:03:54,000 --> 00:03:56,000\nIt's not making things much faster.\n\n73\n00:03:56,000 --> 00:03:59,000\nIt's making things maybe at best 26 times letter.\n\n74\n00:03:59,000 --> 00:04:02,000\nThat assumes that all of the buckets are the same size.\n\n75\n00:04:02,000 --> 00:04:04,000\nCertainly if we make the buckets based on the first letter,\n\n76\n00:04:04,000 --> 00:04:06,000\nthat's not going to be the same size.\n\n77\n00:04:06,000 --> 00:04:08,000\nIf the words are typical English words, \n\n78\n00:04:08,000 --> 00:04:12,000\nwe're going to have many more words that start with S and T than start with U.\n\n79\n00:04:12,000 --> 00:04:15,000\nSo we want to fix those 2 problems.\n\n80\n00:04:15,000 --> 00:04:17,000\nWe want to be able to have more buckets,\n\n81\n00:04:17,000 --> 00:04:19,000\nso we're not going to just use the first letter,\n\n82\n00:04:19,000 --> 00:04:23,000\nwe're going to use some function on the whole word that tells us where it belongs,\n\n83\n00:04:23,000 --> 00:04:27,000\nand we're going to try to make that function distribute the words fairly well.\n\n84\n00:04:27,000 --> 00:04:30,000\nThe structure that I've described is what's called a hash table.\n\n85\n00:04:30,000 --> 00:04:32,000\nThis is a very useful data structure.\n\n86\n00:04:32,000 --> 00:04:34,000\nIt's so useful that it's built in to Python.\n\n87\n00:04:34,000 --> 00:04:38,000\nThere's a Python type called a dictionary which provides this functionality.\n\n88\n00:04:38,000 --> 00:04:42,000\nAt the end of today's unit I'll explain how the Python dictionary works and how to use it,\n\n89\n00:04:42,000 --> 00:04:45,000\nand we'll modify the search engine code to use dictionary \n\n90\n00:04:45,000 --> 00:04:47,000\ninstead of the lookup table that we built.\n\n91\n00:04:47,000 --> 00:04:51,000\nBut before we do that, we're going to implement it ourselves.\n\n92\n00:04:51,000 --> 00:04:53,000\nWe're going to make sure that we understand how the hash table works\n\n93\n00:04:53,000 --> 00:04:55,000\nby writing all the code to do it ourselves,\n\n94\n00:04:55,000 --> 00:04:58,000\nand then we'll switch to using the built-in Python type.\n\n", "id": 358002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYwfkWDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/376001", "type": "Nugget", "id": 376001}, {"nuggetType": "program", "name": "Empty Hash Table", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYw_kWDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/376003", "suppliedCode": "#Creating an Empty Hash Table\n#Define a procedure, make_hashtable,\n#that takes as input a number, nbuckets,\n#and outputs an empty hash table with\n#nbuckets empty buckets.\n\ndef make_hashtable(nbuckets):\n    \n", "type": "Nugget", "id": 376003}, {"nuggetType": "lecture", "name": "Lookup", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "6badc5c8-d05d-46e8-842e-96c2e4c5611b", "name": "cs101_unit5_26_p_lookup", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGL3VFQw", "youtube_id": "MOdHBrMPK9M", "youtube_state": "done", "path": "Course/cs101/Media/355005", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:01,600\nSo let us think about what we want lookup to do.\n\n2\n00:00:01,600 --> 00:00:03,800\nIt is going to take a hashtable and a word.\n\n3\n00:00:03,800 --> 00:00:07,840\nIts output is going to be the value associated with that keyword.\n\n4\n00:00:07,840 --> 00:00:13,180\nWhat we want lookup to do is, like add, the first thing it has to do is find the right bucket\n\n5\n00:00:13,180 --> 00:00:16,850\nand we have defined this procedure as hashtable_get_bucket to make it easy to do that.\n\n6\n00:00:16,850 --> 00:00:20,620\nOnce we found the bucket, what we want to do for lookup is go through all the entries in that bucket\n\n7\n00:00:20,620 --> 00:00:26,130\nand see if there is one where the key of that entry matches the word that we are passing it.\n\n8\n00:00:26,130 --> 00:00:29,930\nSo your goal is to define a procedure.  We'll call it hashtable_lookup.\n\n9\n00:00:29,930 --> 00:00:35,800\nIt takes two inputs--a hashtable and a key, which is a string--\n\n10\n00:00:35,800 --> 00:00:38,710\nand it outputs the value associated with that key.\n\n11\n00:00:38,710 --> 00:00:40,640\nWhenever you are asked to define a procedure,\n\n12\n00:00:40,640 --> 00:00:44,440\nyou should think carefully whether the description is clear enough.\n\n13\n00:00:44,440 --> 00:00:48,950\nIn this case, it is not. There is a situation that this description does not cover.\n\n14\n00:00:48,950 --> 00:00:52,620\nWe need to think about the case where the key is not actually in the table.\n\n15\n00:00:52,620 --> 00:00:55,990\nWhat should we do then?  There is a lot of different things we could do.\n\n16\n00:00:55,990 --> 00:00:59,830\nWe could produce an error.  The problem with producing an error is then we have got to deal\n\n17\n00:00:59,830 --> 00:01:04,500\nwith it when we call it.  We would like to instead produce a value that we can use to represent\n\n18\n00:01:04,500 --> 00:01:10,370\nthe case where there is no entry associated with that key and we will use the NONE value for that.\n\n19\n00:01:10,370 --> 00:01:14,810\nSo if the key is not in the table, the result of lookup should be NONE\n\n20\n00:01:14,810 --> 00:01:17,910\nwhich means there is no value associated with that key.\n\n", "id": 355005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYxPkWDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/376004", "type": "Nugget", "id": 376004}, {"nuggetType": "lecture", "name": "Hash Function", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "c1ce5573-9feb-4e3c-9a13-d5c0e1905c7f", "name": "cs101_unit5_13_l_hash-function", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOrCFgw", "youtube_id": "PeYFCycFkzo", "youtube_state": "done", "path": "Course/cs101/Media/369002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Evans] Let's try to define a hash function that has these properties.\n\n2\n00:00:04,000 --> 00:00:08,000\nWhat we want the hash function to do is to take a string as its input--\n\n3\n00:00:08,000 --> 00:00:12,000\nwe'll call the hash function hash_string--\n\n4\n00:00:12,000 --> 00:00:18,000\nand it will produce as its output a number between 0 and b.\n\n5\n00:00:18,000 --> 00:00:21,000\nWe also need another input to our hash string\n\n6\n00:00:21,000 --> 00:00:24,000\nwhich is going to be the size of the hash table.\n\n7\n00:00:24,000 --> 00:00:30,000\nSo that will be the second input is the size of the hash table, the number of buckets.\n\n8\n00:00:30,000 --> 00:00:33,000\nWhat we haven't seen yet that we're going to need for this function\n\n9\n00:00:33,000 --> 00:00:36,000\nis a way to turn a string into a number.\n\n10\n00:00:36,000 --> 00:00:42,000\nPython provides an operation to do that. It's called ord for ordinal.\n\n11\n00:00:42,000 --> 00:00:44,000\nAnd what ord takes as its input is a 1-letter string\n\n12\n00:00:44,000 --> 00:00:48,000\nand produces as its output a number.\n\n13\n00:00:48,000 --> 00:00:51,000\nThe actual mapping between strings and numbers is not so important.\n\n14\n00:00:51,000 --> 00:00:55,000\nWe just want something that's going to map different strings to different numbers.\n\n15\n00:00:55,000 --> 00:00:58,000\nThere's another operator that goes in the opposite direction\n\n16\n00:00:58,000 --> 00:01:06,000\nthat takes in a number and outputs the 1-letter string that corresponds to that number.\n\n17\n00:01:06,000 --> 00:01:09,000\nThe property these functions have is they're inverses,\n\n18\n00:01:09,000 --> 00:01:14,000\nthat if we take the character corresponding to the ordinal\n\n19\n00:01:14,000 --> 00:01:18,000\ncorresponding to any 1-letter string--we'll call that alpha--\n\n20\n00:01:18,000 --> 00:01:23,000\nwhat we get as a result is the same alpha that we passed in.\n\n21\n00:01:23,000 --> 00:01:28,000\nLet's try a few examples in the Python interpreter to see how ord and chr work.\n\n22\n00:01:28,000 --> 00:01:34,000\nWe'll print ord('a'), and when we run that we see we get the number 97.\n\n23\n00:01:34,000 --> 00:01:42,000\nIf we try print ord('A'), that's different. We get 65.\n\n24\n00:01:42,000 --> 00:01:48,000\nAnd if we print ord('B'), we get 66.\n\n25\n00:01:48,000 --> 00:01:51,000\nSo the numbers are sort of sensible.\n\n26\n00:01:51,000 --> 00:01:57,000\nB is higher than A. The lower case letters have different ordinals than the upper case.\n\n27\n00:01:57,000 --> 00:02:03,000\nIf we try lower case b, we should expect to get 98, and that is indeed what we get.\n\n28\n00:02:03,000 --> 00:02:06,000\nThese are the numbers based on the ASCII character encoding.\n\n29\n00:02:06,000 --> 00:02:09,000\nWhat the actual numbers are are not very important for us\n\n30\n00:02:09,000 --> 00:02:12,000\nother than that we get different numbers for different letters.\n\n31\n00:02:12,000 --> 00:02:17,000\nSo we'll be able to use the results of ord to make different strings hash to different values\n\n32\n00:02:17,000 --> 00:02:22,000\nand just to show that they are inverses.\n\n33\n00:02:22,000 --> 00:02:25,000\nIf we do ord('u') and then chr of that, \n\n34\n00:02:25,000 --> 00:02:32,000\nwhat we get back is the single letter string u that we started with.\n\n35\n00:02:32,000 --> 00:02:35,000\nThe limit of ord is it only works on 1-letter strings.\n\n36\n00:02:35,000 --> 00:02:41,000\nIf it provided a mapping from any string to a number that would be useful for a hash table,\n\n37\n00:02:41,000 --> 00:02:43,000\nthen we'd be done, but it doesn't do that.\n\n38\n00:02:43,000 --> 00:02:46,000\nIf we try running it on a multi-letter string, we get an error.\n\n39\n00:02:46,000 --> 00:02:50,000\nIt says that ord expects a single character but it got a string of length 7.\n\n40\n00:02:50,000 --> 00:02:55,000\nSo we're going to need to use ord only on single letter strings.\n\n41\n00:02:55,000 --> 00:02:58,000\nSo with ord we have a way of converting strings to numbers,\n\n42\n00:02:58,000 --> 00:03:00,000\nconverting single character strings to numbers.\n\n43\n00:03:00,000 --> 00:03:03,000\nThe other property we need our hash function to have\n\n44\n00:03:03,000 --> 00:03:07,000\nis that the output number is always between 0 and b -1.\n\n45\n00:03:07,000 --> 00:03:11,000\nWe need it to be in that range because we're going to use that to index the list\n\n46\n00:03:11,000 --> 00:03:13,000\nto find the bucket where that string belongs.\n\n", "id": 369002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYqoEXDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/377002", "type": "Nugget", "id": 377002}, {"nuggetType": "quiz", "name": "The Hard Way", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYkokXDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/378002", "type": "Nugget", "id": 378002}, {"nuggetType": "lecture", "name": "Adding Keywords Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "7dc545a3-ddfa-499c-bbac-856f937f81b9", "name": "cs101_unit5_25_s_adding-keywords", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMygFww", "youtube_id": "iZxRf0r_dek", "youtube_state": "done", "path": "Course/cs101/Media/381004", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,870\nSo here is one way we could define hashtable_add.\n\n2\n00:00:02,870 --> 00:00:04,540\nWe are going to define the procedure hashtable_add.\n\n3\n00:00:04,540 --> 00:00:07,370\nSo the first thing we want to do is find the right bucket.\n\n4\n00:00:07,370 --> 00:00:12,510\nWe'll use hashtable_get_bucket that we just defined to do that passing in the table and the key.\n\n5\n00:00:12,510 --> 00:00:17,120\nWe will store that in the variable bucket.  The next thing that we will need to do is add the new\n\n6\n00:00:17,120 --> 00:00:22,060\nkey-value pair, and we can do that using that append.  Append will add a new element to the list\n\n7\n00:00:22,060 --> 00:00:27,860\nand what we want the list to be is a new list with two elements - the key and the value.\n\n8\n00:00:27,860 --> 00:00:33,130\nSo let's try this in the Python interpreter and I have done essentially the same thing that we did before\n\n9\n00:00:33,130 --> 00:00:36,540\nexcept for we do not really need the variable bucket.  We can do the append right away. \n\n10\n00:00:36,540 --> 00:00:40,810\nSo I am getting the bucket and then I am appending new entry to it.  So we will start.\n\n11\n00:00:40,810 --> 00:00:45,550\nWe will make a hashtable and we will keep the size of the hashtable very low.  We will never\n\n12\n00:00:45,550 --> 00:00:50,280\nreally want a hashtable with only three buckets but to make it easy to look at the results, we will keep\n\n13\n00:00:50,280 --> 00:00:57,890\nthe hashtable very small and let's add to our table the key and value and for our actual web index\n\n14\n00:00:57,890 --> 00:01:03,730\nthe values will be a list of URLs.  For our test, they could be anything so let us just use a number\n\n15\n00:01:03,730 --> 00:01:11,040\nand now we can look at the table and let us run that, and we see we have the table.\n\n16\n00:01:11,040 --> 00:01:18,010\nWe have three buckets and one of the buckets contains an element.  If we look at the bucket \n\n17\n00:01:18,010 --> 00:01:22,750\nthat we get from hashtable_get_bucket for the key Udacity, we should get the bucket that contains\n\n18\n00:01:22,750 --> 00:01:31,120\nthe key word Udacity.  Let us try that.  That works and we can add some more words to our hashtable -\n\n19\n00:01:31,120 --> 00:01:36,230\nmore key-value pairs to our hashtable so now we have got three entries on our hashtable.  They all\n\n20\n00:01:36,230 --> 00:01:43,240\nhappened to end up in different buckets, that is just lucky in this case.  Let us add one more so we have\n\n21\n00:01:43,240 --> 00:01:52,710\na bucket that contains more than one entry and we should print our table after adding one more\n\n22\n00:01:52,710 --> 00:02:01,020\nand now we have one bucket with one word, one bucket with two entries, and one bucket with\n\n23\n00:02:01,020 --> 00:02:08,500\njust one.  Now there is one big problem with the way we did hashtable_add.  Suppose we add\n\n24\n00:02:08,500 --> 00:02:15,470\nthe same word again and let us say now the value of Udacity is 27 so now we are making a hashtable\n\n25\n00:02:15,470 --> 00:02:20,670\nthat has three buckets. We are adding a bunch of entries into it.  We have added the entry\n\n26\n00:02:20,670 --> 00:02:26,710\nUdacity twice.  Now when we get the bucket for Udacity, what we see is we have a bucket\n\n27\n00:02:26,710 --> 00:02:31,350\nthat has the same keyword twice.  If we want our hashtable to be a mapping between keys and\n\n28\n00:02:31,350 --> 00:02:36,190\nvalues, this is going to be a problem.  If we have the same keyword twice when we look up\n\n29\n00:02:36,190 --> 00:02:41,500\nUdacity well we do not know which answer we should get.  Is the value 23 or is the value 27?\n\n30\n00:02:41,500 --> 00:02:47,100\nSo what we want is something a little different from add.  What we want is to make sure that\n\n31\n00:02:47,100 --> 00:02:52,210\nevery time we add a new keyword to the hashtable if it already exists instead of having two entries with \n\n32\n00:02:52,210 --> 00:02:57,140\nthe same keyword, what we will do is change the value that is associated with that keyword.  So we\n\n33\n00:02:57,140 --> 00:03:01,580\nhave a problem if we have two entries with the same keyword.  We are going to fix that later.\n\n34\n00:03:01,580 --> 00:03:06,090\nBefore we fix that, let us define lookup and it will turn out that lookup will actually be helpful\n\n35\n00:03:06,090 --> 00:03:08,160\nin defining a better version of that.\n\n", "id": 381004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYzaAXDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/381005", "type": "Nugget", "id": 381005}, {"nuggetType": "lecture", "name": "Equivalent Expressions", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "ce9fa6a0-9b6e-46c7-bf70-b8e50cb419af", "name": "cs101_unit5_16_q_equivalent-expressions", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKqEFgw", "youtube_id": "vDIxE7p_6zI", "youtube_state": "done", "path": "Course/cs101/Media/361002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Evans] We're going to find lots of good ways to use both modulus\n\n2\n00:00:04,000 --> 00:00:06,000\nand the ord and chr operators.\n\n3\n00:00:06,000 --> 00:00:09,000\nLet's do 1 more quiz that's going to be a little trickier.\n\n4\n00:00:09,000 --> 00:00:13,000\nWhat I want you to answer is which of the expressions below are always equivalent to x,\n\n5\n00:00:13,000 --> 00:00:16,000\nso have exactly the same value of x, \n\n6\n00:00:16,000 --> 00:00:19,000\nwhere x can be any integer between 0 and 10?\n\n", "id": 361002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYsagXDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/382001", "type": "Nugget", "id": 382001}, {"nuggetType": "lecture", "name": "Bad Hash", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "94c6e103-f5b8-42fe-8a4c-51f3b5009d8f", "name": "cs101_unit5_17_q_bad-hash", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPPsFQw", "youtube_id": "kkreBTQdAQM", "youtube_state": "done", "path": "Course/cs101/Media/358003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\n[Evans] Now that we know about ord and we know about modulo,\n\n2\n00:00:03,000 --> 00:00:05,000\nwe're ready to define a hash function.\n\n3\n00:00:05,000 --> 00:00:07,000\nLet's remember what our hash function should do.\n\n4\n00:00:07,000 --> 00:00:09,000\nThe hash function takes 2 inputs.\n\n5\n00:00:09,000 --> 00:00:12,000\nIt takes the keyword and it takes the number of buckets,\n\n6\n00:00:12,000 --> 00:00:17,000\nand it's outputting a number between 0 and buckets - 1\n\n7\n00:00:17,000 --> 00:00:20,000\nthat gives us the position where that string belongs.\n\n8\n00:00:20,000 --> 00:00:27,000\nWe've seen the function ord that takes a 1-letter string and maps that to a number,\n\n9\n00:00:27,000 --> 00:00:30,000\nand we've seen the modulus operator that takes a number and a modulus\n\n10\n00:00:30,000 --> 00:00:33,000\nand produces as a result the remainder that we'd get \n\n11\n00:00:33,000 --> 00:00:35,000\nwhen we divide that number by the modulus.\n\n12\n00:00:35,000 --> 00:00:39,000\nSo now we can use those to define a hash function.\n\n13\n00:00:39,000 --> 00:00:42,000\nI'm going to start by giving you a really bad hash function.\n\n14\n00:00:42,000 --> 00:00:45,000\nLet's define a procedure, and we'll call it bad_hash_string\n\n15\n00:00:45,000 --> 00:00:48,000\nto make sure we remember that it's really bad.\n\n16\n00:00:48,000 --> 00:00:52,000\nAnd it takes as inputs the keyword and the number of buckets,\n\n17\n00:00:52,000 --> 00:00:57,000\nand we're going to output the bucket based on the first letter in the keyword.\n\n18\n00:00:57,000 --> 00:01:03,000\nSo we'll use ord on the first letter, and we'll use modulo the number of buckets,\n\n19\n00:01:03,000 --> 00:01:05,000\nand that's our simple hash function.\n\n20\n00:01:05,000 --> 00:01:09,000\nFor the quiz I want you to answer all the reasons why that's bad.\n\n21\n00:01:09,000 --> 00:01:13,000\nAnd remember what bad hash string does is take the first letter in the keyword,\n\n22\n00:01:13,000 --> 00:01:19,000\nturn it into a number using ord, and then find that value modulo the number of buckets.\n\n23\n00:01:19,000 --> 00:01:21,000\nHere are the possible reasons. \n\n24\n00:01:21,000 --> 00:01:24,000\nCheck all of the reasons that apply.\n\n25\n00:01:24,000 --> 00:01:26,000\nThe first is it takes too long to compute.\n\n26\n00:01:26,000 --> 00:01:31,000\nThe second is there's at least 1 input keyword for which bad_hash_string will produce an error.\n\n27\n00:01:31,000 --> 00:01:35,000\nThe third is if the keywords are distributed like words in English,\n\n28\n00:01:35,000 --> 00:01:38,000\nthen some of the buckets will get too many words, others will get too few.\n\n29\n00:01:38,000 --> 00:01:41,000\nAnd the fourth choice, if the number of buckets is large, \n\n30\n00:01:41,000 --> 00:01:44,000\nthen there's some buckets that will never get any keywords.\n\n", "id": 358003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYgbgXDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/384001", "type": "Nugget", "id": 384001}, {"nuggetType": "lecture", "name": "Bad Hash Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": null, "name": "cs101_unit5_17_s_bad-hash", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOKeFQw", "youtube_id": "z99eWvWa-nU", "youtube_state": "done", "path": "Course/cs101/Media/348002", "transcript": null, "id": 348002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY6b8XDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/385001", "type": "Nugget", "id": 385001}, {"nuggetType": "program", "name": "Lookup", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY678XDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/385003", "suppliedCode": "#Define a procedure,\n\n#hashtable_lookup(htable,key)\n\n#that takes two inputs, a hashtable\n#and a key (string),\n#and outputs the value associated\n#with that key.\n\ndef hashtable_lookup(htable,key):\n    \n\ndef hashtable_add(htable,key,value):\n    bucket = hashtable_get_bucket(htable,key)\n    bucket.append([key,value])    \n\n\ndef hashtable_get_bucket(htable,keyword):\n    return htable[hash_string(keyword,len(htable))]\n\ndef hash_string(keyword,buckets):\n    out = 0\n    for s in keyword:\n        out = (out + ord(s)) % buckets\n    return out\n\ndef make_hashtable(nbuckets):\n    table = []\n    for unused in range(0,nbuckets):\n        table.append([])\n    return table\n", "type": "Nugget", "id": 385003}, {"nuggetType": "lecture", "name": "Update", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "c2b7e5d2-0f63-43a6-8e56-bdaab91e1b86", "name": "cs101_unit5_27_p_update", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGInfFww", "youtube_id": "-3c9C4z9drs", "youtube_state": "done", "path": "Course/cs101/Media/389001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,370\nSo for the last step in implementing our hashtable, your goal is to define a procedure.\n\n2\n00:00:04,370 --> 00:00:09,410\nWe will call it hashtable update.  It takes three inputs - the hashtable, the key, and the value\n\n3\n00:00:09,410 --> 00:00:14,250\nand what it should do is update the value associated with that key.  So if the key is already\n\n4\n00:00:14,250 --> 00:00:19,150\nin the table then instead of creating a new entry like we were doing before with add, what we want \n\n5\n00:00:19,150 --> 00:00:23,890\nto do is change the value associated with that key to be the new value that is passed in.\n\n6\n00:00:23,890 --> 00:00:29,260\nIf it is not already in the table, then what we want to do is add a new entry that has that key associated\n\n7\n00:00:29,260 --> 00:00:33,230\nwith this value.  This is going to be a pretty complicated procedure.  I think it is the most\n\n8\n00:00:33,230 --> 00:00:37,340\ncomplex procedure you have been asked to define so far but if you think about it carefully\n\n9\n00:00:37,340 --> 00:00:41,040\nand put together all the things we have seen so far and understand how the hashtable works\n\n10\n00:00:41,040 --> 00:00:44,040\nI think you will be able to define it yourself.\n\n", "id": 389001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY8eYXDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/390001", "type": "Nugget", "id": 390001}, {"nuggetType": "program", "name": "Update", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYwfYXDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/392001", "suppliedCode": "#Define a procedure,\n\n#hashtable_update(htable,key,value)\n\n#that updates the value associated\n#with key. If key is already in the\n#table, change the value to the new\n#value. Otherwise, add a new entry\n#for the key and value.\n\n#Hint: Use hashtable_lookup as a\n#starting point.\n\ndef hashtable_update(htable,key,value):\n    \n\ndef hashtable_lookup(htable,key):\n    bucket = hashtable_get_bucket(htable,key)\n    for entry in bucket:\n        if entry[0] == key:\n            return entry[1]\n    return None\n\ndef hashtable_add(htable,key,value):\n    bucket = hashtable_get_bucket(htable,key)\n    bucket.append([key,value])    \n\n\ndef hashtable_get_bucket(htable,keyword):\n    return htable[hash_string(keyword,len(htable))]\n\ndef hash_string(keyword,buckets):\n    out = 0\n    for s in keyword:\n        out = (out + ord(s)) % buckets\n    return out\n\ndef make_hashtable(nbuckets):\n    table = []\n    for unused in range(0,nbuckets):\n        table.append([])\n    return table\n", "type": "Nugget", "id": 392001}, {"nuggetType": "lecture", "name": "Update Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "9fb73039-8005-4d7f-a186-fe6b8c504e4b", "name": "cs101_unit5_27_s_update", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKn-Fww", "youtube_id": "tw9YDqAuSUI", "youtube_state": "done", "path": "Course/cs101/Media/393001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,670\nSo update is going to be a pretty similar to lookup.  So let us start by copying that code\n\n2\n00:00:04,670 --> 00:00:09,480\nand see how we need to change it.  So we had lookup, we are going to change it to be update.\n\n3\n00:00:11,550 --> 00:00:16,180\nNow instead of just taking a key as a template, it is going to take a key and a value\n\n4\n00:00:16,180 --> 00:00:21,960\nbut it is not going to return anything so we are going to get rid of the return strike.  Remember\n\n5\n00:00:21,960 --> 00:00:29,200\nall update is doing is modifying the value of entry.  So now we still have what we had for lookup.\n\n6\n00:00:29,200 --> 00:00:33,600\nWe are still getting the bucket, and we want to do that.  We want to make sure that we update\n\n7\n00:00:33,600 --> 00:00:37,100\nthe value in the right bucket.  We still need to look through the entries in the bucket to find\n\n8\n00:00:37,100 --> 00:00:42,980\nif one matches.  If we find one that matches, well what we did in lookup was just return it.\n\n9\n00:00:42,980 --> 00:00:47,680\nIn update, what we want to do is change the value associated with that key so we are going to have\n\n10\n00:00:47,680 --> 00:00:52,950\nan assignment that replaces whatever value was there before with the new value and now instead\n\n11\n00:00:52,950 --> 00:00:58,590\nof returning the value, we want to stop going through the loop and we actually are done with\n\n12\n00:00:58,590 --> 00:01:03,460\nthe update so we can return here.  We found the entry.  We updated the value.  We also\n\n13\n00:01:03,460 --> 00:01:07,470\nneed to deal with the case where we did not find the entry so now we have gone through the loop\n\n14\n00:01:07,470 --> 00:01:12,070\nenough times.  When it was a lookup, we just returned NONE.  When it is an update\n\n15\n00:01:12,070 --> 00:01:17,010\nwhat we want to do when the key is not already on the table is add it.  So now we're going to use\n\n16\n00:01:17,010 --> 00:01:25,650\na pin to add a new entry to bucket that has the key and the value.  So that is how we define update.\n\n17\n00:01:25,650 --> 00:01:29,820\nThere are certainly lots of other ways to do it and one thing you should be thinking about is \n\n18\n00:01:29,820 --> 00:01:34,490\nwell this is actually very similar to lookup.  We duplicated a lot of code.  Maybe there is a way\n\n19\n00:01:34,490 --> 00:01:39,230\nto define update and lookup so we do not have to have two copies of a code that scans through the\n\n20\n00:01:39,230 --> 00:01:44,400\nbucket to find the right entry.  We will leave that as a homework question for this unit.\n\n21\n00:01:44,400 --> 00:01:47,880\nFor now, we are going to be happy that we have got correct implementations of both lookup\n\n22\n00:01:47,880 --> 00:01:53,610\nand update and let us test them so what we did before we are going to replace the adds\n\n23\n00:01:53,610 --> 00:02:01,150\nwith updates and now the second time what happened with the add was we added an entry\n\n24\n00:02:01,150 --> 00:02:06,130\nbut we could never reach that entry because it had the same keyword.  Now we have used update\n\n25\n00:02:06,130 --> 00:02:13,430\nthe second time we should be updating that value and we will see that the lookup now produces \n\n26\n00:02:13,430 --> 00:02:19,240\nthe value 27 for the second lookup.  That is good.  The first time the value was 23. We did the update.\n\n27\n00:02:19,240 --> 00:02:23,380\nWe got 27 and we can see that the bucket only contains one entry.  So this is great.\n\n28\n00:02:23,380 --> 00:02:29,080\nWe finished our implementation of the hashtable.  We can do updates that will either add new values\n\n29\n00:02:29,080 --> 00:02:34,190\nto the hashtable if they do not already exist or change the value of ones that exists\n\n30\n00:02:34,190 --> 00:02:39,090\nand we can do lookups, and the lookup will know where to look - which bucket to look in to find\n\n31\n00:02:39,090 --> 00:02:44,770\nthat key if it exists.  So this has the great property that adds the number of keys increase\n\n32\n00:02:44,770 --> 00:02:48,670\nas long as we increase the number of buckets accordingly, the time to do both an update\n\n33\n00:02:48,670 --> 00:02:52,910\nand a lookup is constant.  This means the time does not increase even as the number of keywords\n\n34\n00:02:52,910 --> 00:02:58,380\nincreases as long as we increase the number of buckets so the size of each bucket stays\n\n35\n00:02:58,380 --> 00:03:03,050\nthe same size as the extensive cost of this is going through the elements in the bucket looking \n\n36\n00:03:03,050 --> 00:03:03,850\npretty keen and nice.\n\n", "id": 393001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYkYYYDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/394001", "type": "Nugget", "id": 394001}, {"nuggetType": "lecture", "name": "Dictionaries", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "3146f43d-fbbd-438c-8e18-93c14ce2aad5", "name": "cs101_unit5_28_l_dictionaries", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOGVGAw", "youtube_id": "NFFx9V_OFMI", "youtube_state": "done", "path": "Course/cs101/Media/396001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nSo now that we built it ourselves, I am going to show you the easy way to do it, which is to use\n\n2\n00:00:04,000 --> 00:00:09,040\nthe built-in Python type called the dictionary and what a dictionary is is really an implementation\n\n3\n00:00:09,040 --> 00:00:15,450\nof a hashtable.  It is built-in to Python so it is much easier to use than defining our own hashtable.\n\n4\n00:00:15,450 --> 00:00:23,020\nSo far we have seen two complex types in Python.  We have seen the string type and we have seen the\n\n5\n00:00:23,020 --> 00:00:27,630\nlist type.  Now we are going to introduce the dictionary type.  So there are many things that are\n\n6\n00:00:27,630 --> 00:00:33,200\ncommon between these three.  There are other things that are different so to create a string\n\n7\n00:00:33,200 --> 00:00:38,310\nwe could have a sequence of characters inside quotes.  To create a list, we use the square bracket\n\n8\n00:00:38,310 --> 00:00:44,080\nand we could have a sequence of elements inside the square bracket and the elements\n\n9\n00:00:44,080 --> 00:00:48,850\ncould be any type unlike a string where they had to be characters.  So our string was a sequence of\n\n10\n00:00:48,850 --> 00:00:56,460\ncharacters.  Our list was a list of any kind of value so a list of elements of any value.  The dictionary\n\n11\n00:00:56,460 --> 00:01:03,730\ntype we are going to create using the curly bracket and entries inside the dictionary are key-value\n\n12\n00:01:03,730 --> 00:01:09,240\npairs so here I have created dictionary with two elements and each element the key is a string.\n\n13\n00:01:09,240 --> 00:01:15,540\nHere is the string hydrogen and the value associated with that element is a number.  The keys\n\n14\n00:01:15,540 --> 00:01:19,510\nin the dictionary can be any immutable value so they do not need to be strings.  They could be\n\n15\n00:01:19,510 --> 00:01:24,450\nnumbers.  They could be other things.  The values can be any value so what a dictionary is\n\n16\n00:01:24,450 --> 00:01:30,890\nis a set of key-value pairs and the property that a dictionary will give us is like the hashtable \n\n17\n00:01:30,890 --> 00:01:36,030\nthat we can look up a key and get the value associated with that key so one important\n\n18\n00:01:36,030 --> 00:01:41,270\nproperty of all types is whether they are immutable or mutable.  We saw that the string was immutable.\n\n19\n00:01:41,270 --> 00:01:48,040\nThat means once we create a string we cannot modify that string.  It has the same value.\n\n20\n00:01:48,040 --> 00:01:55,320\nIt always has.  A list was mutable.  We could change the values of elements in the list after we\n\n21\n00:01:55,320 --> 00:01:59,690\ncreate the list.  We could append to the list adding new elements to it. The dictionary is also mutable.\n\n22\n00:01:59,690 --> 00:02:05,430\nSo after we create a dictionary we could add new key-value pairs to it.  We could change the value\n\n23\n00:02:05,430 --> 00:02:12,430\nof values associated with keys.  We saw with strings - if s is a string then we could do s[i]\n\n24\n00:02:12,430 --> 00:02:20,370\nthat will give us the i letter in string.  With list, we can do something very similar.  If p is a list,\n\n25\n00:02:20,370 --> 00:02:26,750\nwe can do p[i] to get the i element of the list.  With dictionaries, it is a little bit different.\n\n26\n00:02:26,750 --> 00:02:34,250\nThe syntax is the same.  We can do d[k].  With both strings and lists, these were numbers.\n\n27\n00:02:34,250 --> 00:02:41,330\nHere, the k is whatever the key value is so this is the key in the dictionary.  What d[k] will give us\n\n28\n00:02:41,330 --> 00:02:47,300\nthe value associated with that key in the dictionary.  We will see some examples soon.  We can also use\n\n29\n00:02:47,300 --> 00:02:52,910\nour indexing in assignments we saw with the list we could do this that would replace the value\n\n30\n00:02:52,910 --> 00:03:00,480\nof the i element of p with whatever we have here.  With the string, we cannot do that.  That produces\n\n31\n00:03:00,480 --> 00:03:04,950\nan error, and the reason we cannot do it is because strings are immutable so there is no way to\n\n32\n00:03:04,950 --> 00:03:11,260\nmodify characters in the string.  With the dictionary, we can and what the meaning of this is very\n\n33\n00:03:11,260 --> 00:03:16,300\nsimilar to the meaning of update in our hashtable so that is equivalent to update the value\n\n34\n00:03:16,300 --> 00:03:19,030\nthe value associated with k to be v.\n\n", "id": 396001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYyZ0YDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/397001", "type": "Nugget", "id": 397001}, {"nuggetType": "lecture", "name": "Using Dictionaries", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "4585b46b-3824-4865-a7bf-7abdae94774d", "name": "cs101_unit5_29_l_using-dictionaries", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLGlGAw", "youtube_id": "L6ENGbXcu4A", "youtube_state": "done", "path": "Course/cs101/Media/398001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nSo let's try a few examples. So we'll create a dictionary. \n\n2\n00:00:04,000 --> 00:00:08,000\nWe're using the squiggly brackets. On some keyboards \n\n3\n00:00:08,000 --> 00:00:12,000\nthat's the shift on the square bracket key. It may be somewhere else on your keyboard. \n\n4\n00:00:12,000 --> 00:00:16,000\nAnd we're going to use the squiggly bracket to list our elements in the dictionary.\n\n5\n00:00:16,000 --> 00:00:20,000\nSo each element in the dictionary is a key value pair, and the entries in the dictionary\n\n6\n00:00:20,000 --> 00:00:25,000\nwill be the elements and their atomic numbers. So we have this string hydrogen\n\n7\n00:00:25,000 --> 00:00:29,000\nwith its atomic number of 1, and we have carbon with number 6. \n\n8\n00:00:29,000 --> 00:00:34,000\nSo we've created the dictionary, and what we see when we print it out\n\n9\n00:00:34,000 --> 00:00:37,000\nis the elements in the dictionary. Now one thing you might notice is \n\n10\n00:00:37,000 --> 00:00:41,000\nthey're not in the same order that we put them there. If you think about what we did\n\n11\n00:00:41,000 --> 00:00:46,000\nwith hash tables, this isn't so surprising. When we put elements in hash tables,\n\n12\n00:00:46,000 --> 00:00:50,000\nwell where they end up in the hash table depends on the key and the hash function.\n\n13\n00:00:50,000 --> 00:00:53,000\nIt's not necessarily in the order that we put them in. And with the dictionary,  \n\n14\n00:00:53,000 --> 00:00:56,000\nbecause it's implemented like a hash table, we see the same thing. \n\n15\n00:00:56,000 --> 00:01:00,000\nUnlike a list where the elements are ordered, with a dictionary there is no order \n\n16\n00:01:00,000 --> 00:01:03,000\nto the elements. So when we print it out, they might appear in a different order \n\n17\n00:01:03,000 --> 00:01:07,000\nfrom the order that we put them in. We can use the indexing to look up \n\n18\n00:01:07,000 --> 00:01:11,000\none of the elements. So now when we look up the value associated with hydrogen,\n\n19\n00:01:11,000 --> 00:01:17,000\nwe get 1, and if we look up the value associated with carbon, we get 6. \n\n20\n00:01:17,000 --> 00:01:20,000\nWhat do you think is going to happen if we look up a value that's not in the dictionary?\n\n21\n00:01:20,000 --> 00:01:24,000\nSo now we're looking up the value associated with lithium, \n\n22\n00:01:24,000 --> 00:01:28,000\nand what we get is an error. It's called a key error--key error. It says that element\n\n23\n00:01:28,000 --> 00:01:32,000\nis not in the dictionary. This is different from how we defined lookup for our hash table. \n\n24\n00:01:32,000 --> 00:01:36,000\nRight, we defined our lookup to return none when the element was not there.\n\n25\n00:01:36,000 --> 00:01:40,000\nThe way the built-in dictionary type works is it gives us an error when it's not there.\n\n26\n00:01:40,000 --> 00:01:45,000\nIf we don't want to get errors like that, we can use the in to see if an element is \n\n27\n00:01:45,000 --> 00:01:50,000\nin the dictionary. So the in behaves similarly to in did for lists. \n\n28\n00:01:50,000 --> 00:01:57,000\nWe can say lithium in elements. That will evaluate to true if the key is in the dictionary,\n\n29\n00:01:57,000 --> 00:02:01,000\nfalse otherwise. So now hit evaluate, it's still false. \n\n30\n00:02:01,000 --> 00:02:05,000\nSo I said that dictionaries were mutable. So we can add new elements.\n\n31\n00:02:05,000 --> 00:02:10,000\nAnd the way to add an element is just to use an assignment. So we'll add lithium\n\n32\n00:02:10,000 --> 00:02:16,000\ngiving it a value of 3. Note that it was an error when we used an element like this \n\n33\n00:02:16,000 --> 00:02:20,000\nas a lookup when it's on the left side of an assignment. Well that's an update, so that\n\n34\n00:02:20,000 --> 00:02:25,000\ncorresponds to the hash table update where lithium is the key, and 3 is the value. \n\n35\n00:02:25,000 --> 00:02:30,000\nWe can add another element. Let's add another element. We'll add nitrogen.\n\n36\n00:02:30,000 --> 00:02:36,000\nAnd now when we look up nitrogen, we get the value that we assigned to nitrogen,\n\n37\n00:02:36,000 --> 00:02:40,000\nwhich is 8. It turns out that 8 is not actually the correct value. The atomic number\n\n38\n00:02:40,000 --> 00:02:47,000\nfor nitrogen should be 7. So we can modify that value using another assignment.\n\n39\n00:02:47,000 --> 00:02:51,000\nThat's again the same as our hash table update. It won't create a new key value\n\n40\n00:02:51,000 --> 00:02:55,000\nbecause the key nitrogen is already there, but it will update the value,\n\n41\n00:02:55,000 --> 00:03:01,000\nso now the value associated with nitrogen will be 7.\n\n42\n00:03:01,000 --> 00:03:05,000\nSo we can see the first print, the value is 8, the second print, the value is now 7.\n\n", "id": 398001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYma0YDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/399001", "type": "Nugget", "id": 399001}, {"nuggetType": "lecture", "name": "Population Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "02f03852-018e-4944-9d41-1dbc21d22426", "name": "cs101_unit5_30_s_population", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKHUGAw", "youtube_id": "0967ebC68uo", "youtube_state": "done", "path": "Course/cs101/Media/404001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\n[Narrator] Here's one way to solve the quiz.\n\n2\n00:00:03,000 --> 00:00:08,000\nWe're going to create a dictionary called population, and then we'll add some cities to it.\n\n3\n00:00:08,000 --> 00:00:12,000\nWe'll add Shanghai has a population 17.8 million.\n\n4\n00:00:12,000 --> 00:00:17,000\nIstanbul has a population 13.3 million.\n\n5\n00:00:17,000 --> 00:00:20,000\nKarochi has a population 13 million,\n\n6\n00:00:20,000 --> 00:00:23,000\nand Mumbai has a population 12.5.\n\n7\n00:00:23,000 --> 00:00:28,000\nI'm also going to add my hometown which is Charlottesville,\n\n8\n00:00:28,000 --> 00:00:33,000\nand the population of Charlottesville is pretty small compared to Shanghai.\n\n9\n00:00:33,000 --> 00:00:39,000\nIt is 0.043 million people, only 43,000.\n\n10\n00:00:39,000 --> 00:00:42,000\nNow we've created our dictionary.\n\n11\n00:00:42,000 --> 00:00:44,000\nWe've populated it with some entries.\n\n12\n00:00:44,000 --> 00:00:46,000\nWe can print those out.\n\n13\n00:00:46,000 --> 00:00:52,000\nIf we look at the value of population of Shanghai,\n\n14\n00:00:52,000 --> 00:00:56,000\nthat will get that entry in the dictionary, and we can see that we get the result 17.8.\n\n15\n00:00:56,000 --> 00:01:01,000\nWe can also print out the population of Charlottesville,\n\n16\n00:01:01,000 --> 00:01:03,000\nand we get the result 0.043.\n\n", "id": 404001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYmq0YDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/399002", "type": "Nugget", "id": 399002}, {"nuggetType": "lecture", "name": "Modifying The Search Engine", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "9cfcbe4c-e710-47e5-bac5-5bee6e4c35de", "name": "cs101_unit5_32_q_modifying-the-search-engine", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMHzGAw", "youtube_id": "CZ1Wkjzb2eM", "youtube_state": "done", "path": "Course/cs101/Media/408001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,570\nI hope you understand how to use dictionaries. \n\n2\n00:00:02,570 --> 00:00:06,670\nThe next step, we're going to go back to the search engine code from the previous unit, \n\n3\n00:00:06,670 --> 00:00:10,240\nand modify it to use dictionaries instead of the nexus. \n\n4\n00:00:10,240 --> 00:00:14,350\nThis will have the big advantage, that now we can do our look-ups in constant time, \n\n5\n00:00:14,350 --> 00:00:18,120\nas long as we increase the number of buckets, with the number of keywords.\n\n6\n00:00:18,120 --> 00:00:19,750\nTo start thinking about this,\n\n7\n00:00:19,750 --> 00:00:20,620\nthe question is:\n\n8\n00:00:20,620 --> 00:00:23,160\nWhich of the procedures that we've defined for our search engine \n\n9\n00:00:23,160 --> 00:00:26,790\ndo we need to change to replace to make use of the dictionary \n\n10\n00:00:26,790 --> 00:00:28,360\ninstead of using the list?\n\n11\n00:00:28,360 --> 00:00:36,770\nHere's the choices: get all links which would scan a web page,\n\n12\n00:00:36,770 --> 00:00:39,210\nreturn a list of all the links in that web page.\n\n13\n00:00:39,210 --> 00:00:44,750\nWe had the procedure crawl web, which started with see page \n\n14\n00:00:44,750 --> 00:00:48,850\nand then followed all the links that could be found in that page, collecting pages, \n\n15\n00:00:48,850 --> 00:00:51,420\nand for each page collecting the keywords on that page \n\n16\n00:00:51,420 --> 00:00:54,420\nand adding them to the search index.\n\n17\n00:00:54,420 --> 00:00:57,830\nWe had add page to index that would take a page, it was called by crawl web\n\n18\n00:00:57,830 --> 00:01:02,160\nwhen a new page was found, and it would add that page to index \n\n19\n00:01:02,160 --> 00:01:05,360\nby finding all the words on that page adding them to index.\n\n20\n00:01:05,360 --> 00:01:09,600\nWe had add to index, which would take the index, and keyword,\n\n21\n00:01:09,600 --> 00:01:13,640\n and the URL where it was found, and add that location to the index.\n\n22\n00:01:13,640 --> 00:01:18,810\nWe had lookup, which would take a keyword, and give us a list of all the URLs \n\n23\n00:01:18,810 --> 00:01:20,250\nwhere that keyword would appear.\n\n24\n00:01:20,250 --> 00:01:24,050\nTo answer this, you may need to look at the code, you'll find it on the website.\n\n25\n00:01:24,050 --> 00:01:27,220\nThink about which ones of these procedures will need to change \n\n26\n00:01:27,220 --> 00:01:31,000\nto replace the list index with the dictionary index.\n\n", "id": 408001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY6rwYDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/401002", "type": "Nugget", "id": 401002}, {"nuggetType": "lecture", "name": "Changing Lookup Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "bb78204f-3c9f-41a5-b437-4d5988645656", "name": "cs101_unit5_33_s_changing-lookup", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMmaGQw", "youtube_id": "avNhSME0qxQ", "youtube_state": "done", "path": "Course/cs101/Media/413001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,540\nHere's one way to define look up.\n\n2\n00:00:02,540 --> 00:00:03,870\nInstead of needing the loop, \n\n3\n00:00:03,870 --> 00:00:06,240\nwe're just going to need to check to if the keyword is in the index, \n\n4\n00:00:06,240 --> 00:00:10,910\nif it is, we can return the value associated with that keyword\n\n5\n00:00:10,910 --> 00:00:13,150\nusing the dictionary look up like this.\n\n6\n00:00:13,150 --> 00:00:14,820\nIf it isn't, we return the value none.\n\n7\n00:00:14,820 --> 00:00:20,090\nCongratulations! You've completed Unit 5, and now you have a search engine \n\n8\n00:00:20,090 --> 00:00:23,820\nthat can respond to queries quickly, no matter how large the index gets.\n\n9\n00:00:23,820 --> 00:00:28,430\nWe've done that by replacing the list data structure with a hash table\n\n10\n00:00:28,430 --> 00:00:31,500\n where we can respond to a query in a time that doesn't increase \n\n11\n00:00:31,500 --> 00:00:33,830\neven as the size of the index increases.\n\n12\n00:00:33,830 --> 00:00:38,940\nThis problem of measuring cost, analyzing algorithms, and designing algorithms \n\n13\n00:00:38,940 --> 00:00:40,810\nthat work well as the input size scales, \n\n14\n00:00:40,810 --> 00:00:44,340\nis one of the most important and interesting problems in all of computer science.\n\n15\n00:00:44,340 --> 00:00:48,150\nWe'll have courses that go much more in depth in that later.\n\n16\n00:00:48,150 --> 00:00:50,380\nWe've just scratched the surface in this unit.\n\n17\n00:00:50,380 --> 00:00:53,250\nThe main thing that we have left to do for our search engine, \n\n18\n00:00:53,250 --> 00:00:56,090\nis to figure out how to find the best page for a given query, \n\n19\n00:00:56,090 --> 00:00:58,960\ninstead of just finding all the pages that have that keyword.\n\n20\n00:00:58,960 --> 00:01:03,000\nThat's what we'll do in Unit 6. Hope to see you there.\n\n", "id": 413001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY67wYDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/401003", "type": "Nugget", "id": 401003}, {"nuggetType": "lecture", "name": "Population", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": null, "name": "cs101_unit5_30_q_population", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOm8GAw", "youtube_id": "F2-Htz-MAZ0", "youtube_state": "done", "path": "Course/cs101/Media/401001", "transcript": null, "id": 401001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY0cQYDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/402001", "type": "Nugget", "id": 402001}, {"nuggetType": "quiz", "name": "Population", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY0sQYDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/402002", "type": "Nugget", "id": 402002}, {"nuggetType": "program", "name": "Changing Lookup", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY08QYDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/402003", "suppliedCode": "#Change the lookup procedure\n#to now work with dictionaries.\n\ndef lookup(index, keyword):\n    for entry in index:\n        if entry[0] == keyword:\n            return entry[1]\n    return None\n", "type": "Nugget", "id": 402003}, {"nuggetType": "lecture", "name": "A Noble Gase", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "4f45cc77-2ad4-427e-a9e4-d197444d4a77", "name": "cs101_unit5_31_l_a-noble-gase", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIncGAw", "youtube_id": "zP0FNWebIhY", "youtube_state": "done", "path": "Course/cs101/Media/405001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nSo here I've been using just numbers as the values, but the values can actually\n\n2\n00:00:05,000 --> 00:00:08,000\nbe anything we want. They could even be other dictionaries.\n\n3\n00:00:08,000 --> 00:00:12,000\nSo if we wanted to make a more interesting version of elements--so we'll start\n\n4\n00:00:12,000 --> 00:00:18,000\nwith an empty dictionary, and we can add a new element. This time we'll use \n\n5\n00:00:18,000 --> 00:00:24,000\nthe atomic symbol as the key, and we'll make the value of the element \n\n6\n00:00:24,000 --> 00:00:28,000\na dictionary that provides some information about it. So we've added an element \n\n7\n00:00:28,000 --> 00:00:35,000\nto our dictionary. The key is the single letter H, and it has as its value a dictionary \n\n8\n00:00:35,000 --> 00:00:41,000\nthat has 3 entries with the key name, number, and weight, and values associated \n\n9\n00:00:41,000 --> 00:00:44,000\nwith each of those that could be different types--name as the string \n\n10\n00:00:44,000 --> 00:00:50,000\nwhich gives the full name of the element. We'll add another element to our dictionary.\n\n11\n00:00:50,000 --> 00:00:54,000\nAnd so for helium, we have the same name, number, and weight to use, \n\n12\n00:00:54,000 --> 00:00:58,000\nand so for helium we have an extra entry that says it's a noble gas, and the value \n\n13\n00:00:58,000 --> 00:01:05,000\nof noble gas is true. So now we can look up the element H. We will see its entry. \n\n14\n00:01:05,000 --> 00:01:09,000\nAgain note that it's a dictionary, so the order is not the same as the order \n\n15\n00:01:09,000 --> 00:01:15,000\nthat we used here. But we can do another lookup. So now we're looking up element H\n\n16\n00:01:15,000 --> 00:01:20,000\nthat gets us the dictionary here, and then we're looking up in that dictionary \n\n17\n00:01:20,000 --> 00:01:25,000\nthe value name, and that will give us the name of the element whose symbol is H. \n\n18\n00:01:25,000 --> 00:01:30,000\nWe could change this to look up some other property. Let's look up the weights.\n\n19\n00:01:30,000 --> 00:01:36,000\nAnd we can change the element to look up the value for helium instead of for hydrogen.\n\n20\n00:01:36,000 --> 00:01:42,000\nAnd now we get the 4.002, which was the weight of helium. \n\n21\n00:01:42,000 --> 00:01:48,000\nIf we look up the noble gas property, we get true for helium.\n\n22\n00:01:48,000 --> 00:01:53,000\nWhat's going to happen if we look it up for hydrogen?\n\n23\n00:01:53,000 --> 00:01:57,000\nSo here we get an error, and we get the same error that we got before when we tried \n\n24\n00:01:57,000 --> 00:02:01,000\nto look lithium up in the elements that didn't include lithium as a key. \n\n25\n00:02:01,000 --> 00:02:04,000\nWe're looking for the key noble gas, but it doesn't exist. \n\n", "id": 405001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY8eMYDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/406001", "type": "Nugget", "id": 406001}, {"nuggetType": "quiz", "name": "Modifying The Search Engine", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYqvsYDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/409002", "type": "Nugget", "id": 409002}, {"nuggetType": "lecture", "name": "Modifying The Search Engine Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "d5b90d6d-cbd8-463e-9cbb-7cc0522f35e8", "name": "cs101_unit5_32_s_modifying-the-search-engine", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMqdGAw", "youtube_id": "5kUla0AN7DI", "youtube_state": "done", "path": "Course/cs101/Media/397002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,100\nThe answer is, we need to change 3 of these procedures. \n\n2\n00:00:03,100 --> 00:00:07,170\nWe need to change crawl web, we need to change add to index, \n\n3\n00:00:07,170 --> 00:00:08,810\nand we need to change look up.\n\n4\n00:00:08,810 --> 00:00:10,810\nWe don't need to change get all links at all.\n\n5\n00:00:10,810 --> 00:00:14,280\nThat we can keep exactly the same as it was and just return the list of links. \n\n6\n00:00:14,280 --> 00:00:16,050\nIt doesn't depend on the index.\n\n7\n00:00:16,050 --> 00:00:19,790\nWe don't need to change add page to index. This was a little more surprising.\n\n8\n00:00:19,790 --> 00:00:24,730\nSince it depends on index, because of the way we wrote add page to index, \n\n9\n00:00:24,730 --> 00:00:26,390\nit calls add to index.\n\n10\n00:00:26,390 --> 00:00:28,530\nIt doesn't depend on how we actually \n\n11\n00:00:28,530 --> 00:00:32,000\nrepresent the index, it's going to go through all the words, add them to index,\n\n12\n00:00:32,000 --> 00:00:35,600\nby calling add to index. So, we don't actually need to change that code.\n\n13\n00:00:35,600 --> 00:00:37,740\nWe do need to change the other two.\n\n14\n00:00:37,740 --> 00:00:42,410\nLet's start with crawl web and figure out what we need to do to change this \n\n15\n00:00:42,410 --> 00:00:45,180\nto use the dictionary. The change is actually going to be really small. \n\n16\n00:00:45,180 --> 00:00:52,550\nThe index is here. In the old version, we initialize index to a list, to an empty list.\n\n17\n00:00:52,550 --> 00:00:59,130\nAll we do with index is pass it in to add page to index. To change that use the dictionary, \n\n18\n00:00:59,130 --> 00:01:02,930\nall we need to do is change the square brackets to be curly brackets.\n\n19\n00:01:02,930 --> 00:01:06,570\nNow, instead of starting with an empty list, we're going to start with an empty dictionary.\n\n20\n00:01:06,570 --> 00:01:10,240\nThat's the only change we need to make to crawl web.\n\n21\n00:01:10,240 --> 00:01:12,710\nThe change to add index is going to be a little more complicated.\n\n22\n00:01:12,710 --> 00:01:16,010\nWe can see from the code to crawl web what happens with each page, \n\n23\n00:01:16,010 --> 00:01:20,550\nwas that we call add to index, passing in the index, which is now a dictionary.\n\n24\n00:01:20,550 --> 00:01:21,950\nLet's look at add page to index.\n\n25\n00:01:21,950 --> 00:01:25,890\nI claim that we didn't need to change that. Here's the code for add page to index.\n\n26\n00:01:25,890 --> 00:01:31,490\nIt takes the index, it goes through the words, it adds each word to the index.\n\n27\n00:01:31,490 --> 00:01:35,660\nWe can do this just the same whether index was a list or a dictionary. \n\n28\n00:01:35,660 --> 00:01:37,600\nWe don't need to change add page to index. \n\n29\n00:01:37,600 --> 00:01:40,070\nWe are going to need to change add to index.\n\n30\n00:01:40,070 --> 00:01:42,840\nWe are going to need to change the code to add to index.\n\n31\n00:01:42,840 --> 00:01:44,370\nLet's try to figure out how.\n\n32\n00:01:44,370 --> 00:01:48,440\nBefore we had add to index that takes the index, a keyword and an URL.\n\n33\n00:01:48,440 --> 00:01:52,110\nWe'll still take the same parameters, but what we had to do when it was a list, \n\n34\n00:01:52,110 --> 00:01:55,750\nwas go through all the entries index, check for each one, \n\n35\n00:01:55,750 --> 00:02:00,620\nif it matches the keyword we're looking for, if we find that it does, then we add the URL.\n\n36\n00:02:00,620 --> 00:02:04,060\nIf we get to the end without finding it, then we append a new entry,\n\n37\n00:02:04,060 --> 00:02:08,199\n which is the keyword, with a list of URLs containing just the first few URLs.\n\n38\n00:02:08,199 --> 00:02:11,570\nLet's figure out how to change this to work with the hash table index.\n\n39\n00:02:11,570 --> 00:02:15,440\nThe great thing about the hash table is that we don't need to loop through anything now.\n\n40\n00:02:15,440 --> 00:02:18,170\nWe know exactly where it is from the hash table.\n\n41\n00:02:18,170 --> 00:02:23,310\nWith the dictionary, the built-in operation gives us that. Instead of looping, \n\n42\n00:02:23,310 --> 00:02:26,180\nnow we can check right away if the keyword is in the index.\n\n43\n00:02:26,180 --> 00:02:26,210\nWhat's going to happen if we found the keyword in the index, \n\n44\n00:02:26,210 --> 00:02:34,790\nthat means that we can look it up. This will look up in the dictionary \n\n45\n00:02:34,790 --> 00:02:39,190\nthe entry that corresponds to index, that's going to be list of URLs that we have.\n\n46\n00:02:39,190 --> 00:02:44,900\nSo, all we need to do now is append to that entry, the new URL.\n\n47\n00:02:44,900 --> 00:02:49,240\nIf it's not in the index already, we need to do something different.\n\n48\n00:02:49,240 --> 00:02:55,680\nWhat we did before was we added a new element to the index list using append.\n\n49\n00:02:55,680 --> 00:02:59,210\nWe don't want to do that now, we want to add a new key value paired in the dictionary.\n\n50\n00:02:59,210 --> 00:03:02,350\nWe're going to do that by using the assignment. \n\n51\n00:03:02,350 --> 00:03:06,420\nThe entry that we're adding is the list containing just this URL.\n\n52\n00:03:06,420 --> 00:03:12,330\nWe can delete everything else here, add the new entry to the keyword.\n\n53\n00:03:12,330 --> 00:03:14,530\nThis is a lot simpler. We have less code.\n\n54\n00:03:14,530 --> 00:03:18,370\nIt's going to run a lot faster. We don't have to loop through anything.\n\n55\n00:03:18,370 --> 00:03:19,970\nBecause of the hash table, \n\n56\n00:03:19,970 --> 00:03:22,800\nwe can right away look up with whether the keyword is in the index.\n\n57\n00:03:22,800 --> 00:03:26,340\nWe can find if it is, what the value is by using the dictionary look up.\n\n58\n00:03:26,340 --> 00:03:31,350\nWe can append the new URL to the list of URLs associated with that keyword.\n\n59\n00:03:31,350 --> 00:03:33,980\nIf it's not found, we can create a new entry \n\n60\n00:03:33,980 --> 00:03:39,620\nusing the dictionary syntax like this that contains just that URL.\n\n61\n00:03:39,620 --> 00:03:42,160\nNow we've got a much simpler way to add to index.\n\n62\n00:03:42,160 --> 00:03:44,730\nI hope you understand this.\n\n63\n00:03:44,730 --> 00:03:49,000\nIf you do, you should be able to define look up yourself.\n\n", "id": 397002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQYkYMZDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/410001", "type": "Nugget", "id": 410001}, {"nuggetType": "lecture", "name": "Changing Lookup", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "8bd6a4fa-651b-447a-8760-e859ee9a1db8", "name": "cs101_unit5_33_p_changing-lookup", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPLjGAw", "youtube_id": "OdToP6LQRoc", "youtube_state": "done", "path": "Course/cs101/Media/406002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,870\nFor the final quiz for this unit, your goal is to change the look up procedure\n\n2\n00:00:03,870 --> 00:00:05,370\n to now work with dictionaries. \n\n3\n00:00:05,370 --> 00:00:08,780\nBefore we had look up working where index was a list of entries,\n\n4\n00:00:08,780 --> 00:00:13,080\n and we did the look up by looping through the index, that required a lot of work \n\n5\n00:00:13,080 --> 00:00:16,050\nwe had to go through each entry, check if the keyword matched, \n\n6\n00:00:16,050 --> 00:00:19,050\nand then return the one that matched, if we got to the end without finding it, \n\n7\n00:00:19,050 --> 00:00:20,690\nwe returned none.\n\n8\n00:00:20,690 --> 00:00:23,890\nYour goal for the quiz, is to modify this code \n\n9\n00:00:23,890 --> 00:00:26,860\nto now work where the index is going to be the dictionary, \n\n10\n00:00:26,860 --> 00:00:29,230\nand we should be able to find the entry much more quickly.\n\n11\n00:00:29,230 --> 00:00:31,430\nWe don't need to loop through anything.\n\n12\n00:00:31,430 --> 00:00:35,200\nwe can use the property of the dictionary to look up the entry right away.\n\n13\n00:00:35,200 --> 00:00:39,870\nIf you understand the add to index code that we just did,\n\n14\n00:00:39,870 --> 00:00:42,180\n I think you can define look up on your own.\n\n15\n00:00:42,180 --> 00:00:43,980\nThe one thing to be careful about, \n\n16\n00:00:43,980 --> 00:00:47,950\nis that you need make sure that when the index does not contain the keyword, \n\n17\n00:00:47,950 --> 00:00:49,520\nwhen it's not in the dictionary,\n\n18\n00:00:49,520 --> 00:00:54,000\ninstead of producing an error, that it returns the value none.\n\n", "id": 406002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY4ZIZDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/412001", "type": "Nugget", "id": 412001}, {"nuggetType": "lecture", "name": "Population", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "media": {"dotsub_id": "0bceb9b0-e57c-44af-a976-3e896cb11542", "name": "cs101_unit5_30_p_population", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNzoGQw", "youtube_id": "F2-Htz-MAZ0", "youtube_state": "failed", "path": "Course/cs101/Media/423004", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Narrator] For this quiz the goal is to see that you understand how  to define a dictionary.\n\n2\n00:00:04,000 --> 00:00:07,000\nYou should define a dictionary and assign it to the variable population,\n\n3\n00:00:07,000 --> 00:00:10,000\nand it should provide information on the world's largest cities.\n\n4\n00:00:10,000 --> 00:00:13,000\nThe key values in your dictionary should be names,\n\n5\n00:00:13,000 --> 00:00:18,000\nthe name of each city, and the associated value is the city's population in millions, so that's a number.\n\n6\n00:00:18,000 --> 00:00:22,000\nTo get you started here are the 4 cities that your dictionary should include.\n\n7\n00:00:22,000 --> 00:00:25,000\nShanghai's population of 17.8 million,\n\n8\n00:00:25,000 --> 00:00:31,000\nIstanbul with 13.3 million, Karachi 13.0, and Mumbai with 12.5.\n\n9\n00:00:31,000 --> 00:00:34,000\nIf you don't happen to live in 1 of those 4 cities \n\n10\n00:00:34,000 --> 00:00:38,000\nyou might want to also include your hometown and any other cities that you're interested in.\n\n11\n00:00:38,000 --> 00:00:42,000\nIf you define your dictionary correctly you should be able to use it like this.\n\n12\n00:00:42,000 --> 00:00:47,000\nPrint the population, indexing, looking up the value associated with the key Mumbai,\n\n13\n00:00:47,000 --> 00:00:50,000\nand you should get as output 12.5.\n\n", "id": 423004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY4o8aDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/428002", "type": "Nugget", "id": 428002}, {"nuggetType": "program", "name": "Population", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNn3FAwLEgZOdWdnZXQY448aDA", "path": "Course/cs101/CourseRev/feb2012/Unit/343001/Nugget/428003", "suppliedCode": "#Define a Dictionary, population,\n#that provides information\n#on the world's largest cities.\n#The key is the name of a city\n#(a string), and the associated\n#value is its population in\n#millions.\n\n#   Key     |   Value\n# Shanghai  |   17.8\n# Istanbul  |   13.3\n# Karachi   |   13.0\n# Mumbai    |   12.5\n\n", "type": "Nugget", "id": 428003}]}, {"name": "Homework 5", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": true, "closedAt": "03/27/2012 23:59", "nuggetLayout": [[null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQwLEgZOdWdnZXQYmacaDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQwLEgZOdWdnZXQYubcfDA"}], [null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQwLEgZOdWdnZXQY6bYaDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQwLEgZOdWdnZXQYiccfDA"}], [null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQwLEgZOdWdnZXQY-5MWDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQwLEgZOdWdnZXQY6qcfDA"}], [null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQwLEgZOdWdnZXQYucYaDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQwLEgZOdWdnZXQY66oeDA"}], [null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQwLEgZOdWdnZXQYoc4aDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQwLEgZOdWdnZXQYwd4fDA"}], [null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQwLEgZOdWdnZXQYitYaDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQwLEgZOdWdnZXQY-fUfDA"}], [null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQwLEgZOdWdnZXQY2eUaDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQwLEgZOdWdnZXQYsY0gDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQw", "path": "Course/cs101/CourseRev/feb2012/Unit/421002", "open": false, "id": 421002, "nuggets": [{"nuggetType": "program", "name": "Is Offered", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQwLEgZOdWdnZXQY-5MWDA", "path": "Course/cs101/CourseRev/feb2012/Unit/421002/Nugget/363003", "suppliedCode": "#Dictionaries of Dictionaries (of Dictionaries)\n\n#The next several questions concern the data structure below for keeping \n#track of Udacity's courses (where all of the values are strings):\n  \n#    { <hexamester>, { <class>: { <property>: <value>, ... },\n#                                     ... },\n#      ... }\n\n#For example,\n\ncourses = {\n    'feb2012': { 'cs101': {'name': 'Building a Search Engine',\n                           'teacher': 'Dave',\n                           'assistant': 'Peter C.'},\n                 'cs373': {'name': 'Programming a Robotic Car',\n                           'teacher': 'Sebastian',\n                           'assistant': 'Andy'}},\n    'apr2012': { 'cs101': {'name': 'Building a Search Engine',\n                           'teacher': 'Dave',\n                           'assistant': 'Sarah'},\n                 'cs212': {'name': 'The Design of Computer Programs',\n                           'teacher': 'Peter N.',\n                           'assistant': 'Andy',\n                           'prereq': 'cs101'},\n                 'cs253': {'name': 'Web Application Engineering - Building a Blog',\n                           'teacher': 'Steve',\n                           'prereq': 'cs101'},\n                 'cs262': {'name': 'Programming Languages - Building a Web Browser',\n                           'teacher': 'Wes',\n                           'assistant': 'Peter C.',\n                           'prereq': 'cs101'},\n                 'cs373': {'name': 'Programming a Robotic Car',\n                           'teacher': 'Sebastian'},\n                 'cs387': {'name': 'Applied Cryptography',\n                           'teacher': 'Dave'}},\n    'jan2044': { 'cs001': {'name': 'Building a Quantum Holodeck',\n                           'teacher': 'Dorina'},\n                        'cs003': {'name': 'Programming a Robotic Robotics Teacher',\n                           'teacher': 'Jasper'},\n                     }\n    }\n\n\n#For the following questions, you will find the\n#        for <key> in <dictionary>:\n#                   <block>\n#construct useful.  This loops through the key values in the Dictionary.  For\n#example, this procedure returns a list of all the courses offered in the given\n#hexamester:\n\ndef courses_offered(courses, hexamester):\n    res = []\n    for c in courses[hexamester]:\n        res.append(c)\n    return res\n\n#Define a procedure, is_offered(courses, course, hexamester), that returns True\n#if the input course is offered in the input hexamester, and returns False\n#otherwise.  For example,\n\n#print is_offered(courses, 'cs101', 'apr2012') => True\n#print is_offered(courses, 'cs003', 'apr2012') => False\n\n#(Note: it is okay if your procedure produces an error if the input hexamester is not included in courses.  \n#For example, is_offered(courses, 'cs101', 'dec2011') can produce an error.)\n\ndef is_offered(courses, course, hexamester):\n    ", "type": "Nugget", "id": 363003}, {"nuggetType": "quiz", "name": "Growth", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQwLEgZOdWdnZXQYmacaDA", "path": "Course/cs101/CourseRev/feb2012/Unit/421002/Nugget/431001", "type": "Nugget", "id": 431001}, {"nuggetType": "quiz", "name": "Hash String", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQwLEgZOdWdnZXQY6bYaDA", "path": "Course/cs101/CourseRev/feb2012/Unit/421002/Nugget/433001", "type": "Nugget", "id": 433001}, {"nuggetType": "program", "name": "When Offered", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQwLEgZOdWdnZXQYucYaDA", "path": "Course/cs101/CourseRev/feb2012/Unit/421002/Nugget/435001", "suppliedCode": "#Dictionaries of Dictionaries (of Dictionaries)\n\n#The next several questions concern the data structure below for keeping \n#track of Udacity's courses (where all of the values are strings):\n  \n#    { <hexamester>, { <class>: { <property>: <value>, ... },\n#                                     ... },\n#      ... }\n\n#For example,\n\ncourses = {\n    'feb2012': { 'cs101': {'name': 'Building a Search Engine',\n                           'teacher': 'Dave',\n                           'assistant': 'Peter C.'},\n                 'cs373': {'name': 'Programming a Robotic Car',\n                           'teacher': 'Sebastian',\n                           'assistant': 'Andy'}},\n    'apr2012': { 'cs101': {'name': 'Building a Search Engine',\n                           'teacher': 'Dave',\n                           'assistant': 'Sarah'},\n                 'cs212': {'name': 'The Design of Computer Programs',\n                           'teacher': 'Peter N.',\n                           'assistant': 'Andy',\n                           'prereq': 'cs101'},\n                 'cs253': {'name': 'Web Application Engineering - Building a Blog',\n                           'teacher': 'Steve',\n                           'prereq': 'cs101'},\n                 'cs262': {'name': 'Programming Languages - Building a Web Browser',\n                           'teacher': 'Wes',\n                           'assistant': 'Peter C.',\n                           'prereq': 'cs101'},\n                 'cs373': {'name': 'Programming a Robotic Car',\n                           'teacher': 'Sebastian'},\n                 'cs387': {'name': 'Applied Cryptography',\n                           'teacher': 'Dave'}},\n    'jan2044': { 'cs001': {'name': 'Building a Quantum Holodeck',\n                           'teacher': 'Dorina'},\n                        'cs003': {'name': 'Programming a Robotic Robotics Teacher',\n                           'teacher': 'Jasper'},\n                     }\n    }\n\n\n#For the following questions, you will find the\n#        for <key> in <dictionary>:\n#                   <block>\n#construct useful.  This loops through the key values in the Dictionary.  For\n#example, this procedure returns a list of all the courses offered in the given\n#hexamester:\n\ndef courses_offered(courses, hexamester):\n    res = []\n    for c in courses[hexamester]:\n        res.append(c)\n    return res\n\n#Define a procedure, when_offered(courses, course), that takes as a courses data\n#structure and a string representing a class, and returns a list of strings\n#representing the hexamesters when the input course is offered.  For example,\n\n#print when_offered (courses, 'cs101') => ['apr2012', 'feb2012']\n#print when_offered(courses, 'bio893') => []\n\ndef when_offered(courses,course):\n\n\n\n\n\n\n", "type": "Nugget", "id": 435001}, {"nuggetType": "program", "name": "Involved", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQwLEgZOdWdnZXQYoc4aDA", "path": "Course/cs101/CourseRev/feb2012/Unit/421002/Nugget/436001", "suppliedCode": "#Dictionaries of Dictionaries (of Dictionaries)\n\n#The next several questions concern the data structure below for keeping \n#track of Udacity's courses (where all of the values are strings):\n  \n#    { <hexamester>, { <class>: { <property>: <value>, ... },\n#                                     ... },\n#      ... }\n\n#For example,\n\ncourses = {\n    'feb2012': { 'cs101': {'name': 'Building a Search Engine',\n                           'teacher': 'Dave',\n                           'assistant': 'Peter C.'},\n                 'cs373': {'name': 'Programming a Robotic Car',\n                           'teacher': 'Sebastian',\n                           'assistant': 'Andy'}},\n    'apr2012': { 'cs101': {'name': 'Building a Search Engine',\n                           'teacher': 'Dave',\n                           'assistant': 'Sarah'},\n                 'cs212': {'name': 'The Design of Computer Programs',\n                           'teacher': 'Peter N.',\n                           'assistant': 'Andy',\n                           'prereq': 'cs101'},\n                 'cs253': {'name': 'Web Application Engineering - Building a Blog',\n                           'teacher': 'Steve',\n                           'prereq': 'cs101'},\n                 'cs262': {'name': 'Programming Languages - Building a Web Browser',\n                           'teacher': 'Wes',\n                           'assistant': 'Peter C.',\n                           'prereq': 'cs101'},\n                 'cs373': {'name': 'Programming a Robotic Car',\n                           'teacher': 'Sebastian'},\n                 'cs387': {'name': 'Applied Cryptography',\n                           'teacher': 'Dave'}},\n    'jan2044': { 'cs001': {'name': 'Building a Quantum Holodeck',\n                           'teacher': 'Dorina'},\n                        'cs003': {'name': 'Programming a Robotic Robotics Teacher',\n                           'teacher': 'Jasper'},\n                     }\n    }\n\n\n#For the following questions, you will find the\n#        for <key> in <dictionary>:\n#                   <block>\n#construct useful.  This loops through the key values in the Dictionary.  For\n#example, this procedure returns a list of all the courses offered in the given\n#hexamester:\n\ndef courses_offered(courses, hexamester):\n    res = []\n    for c in courses[hexamester]:\n        res.append(c)\n    return res\n\n#[Double Gold Star] Define a procedure, involved(courses, person), that takes as\n#input a courses structure and a person and returns a Dictionary that describes\n#all the courses the person is involved in.  A person is involved in a course if\n#they are a value for any property for the course.  The output Dictionary should\n#have hexamesters as its keys, and each value should be a list of courses that\n#are offered that hexamester (the courses in the list can be in any order).\n\n#For example,\n\n# print involved(courses, 'Dave') => {'apr2012': ['cs101', 'cs387'], 'feb2012': ['cs101']}\n# print involved(courses, 'Peter C.') => {'apr2012': ['cs262'], 'feb2012': ['cs101']}\n# print involved(courses, 'Dorina') => {'jan2044': ['cs001']}\n\ndef involved(courses, person):\n\n\n\n", "type": "Nugget", "id": 436001}, {"nuggetType": "program", "name": "Refactoring", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQwLEgZOdWdnZXQYitYaDA", "path": "Course/cs101/CourseRev/feb2012/Unit/421002/Nugget/437002", "suppliedCode": "#6. In video 28. Update, it was suggested that some of the duplicate code in\n#lookup and update could be avoided by a better design.  We can do this by\n#defining a procedure that finds the entry corresponding to a given key, and\n#using that in both lookup and update.\n\n#Here are the original procedures:\n\ndef hashtable_update(htable, key, value):\n    bucket = hashtable_get_bucket(htable, key)\n    for entry in bucket:\n        if entry[0] == key:\n            entry[1] = value\n            return\n    bucket.append([key, value])\n\ndef hashtable_lookup(htable, key):\n    bucket = hashtable_get_bucket(htable, key)\n    for entry in bucket:\n        if entry[0] == key:\n            return entry[1]\n    return None\n\n\ndef make_hashtable(size):\n    table = []\n    for unused in range(0, size):\n        table.append([])\n    return table\n\ndef hash_string(s, size):\n    h = 0\n    for c in s:\n         h = h + ord(c)\n    return h % size\n\ndef hashtable_get_bucket(htable, key):\n    return htable[hash_string(key, len(htable))]\n\n#Whenever we have duplicate code like the loop that finds the entry in\n#hashtable_update and hashtable_lookup, we should think if there is a better way\n#to write this that would avoid the duplication.  We should be able to rewrite\n#these procedures to be shorter by defining a new procedure and rewriting both\n#hashtable_update and hashtable_lookup to use that procedure.\n\n#Modify the code for both hashtable_update and hashtable_lookup to have the same\n#behavior they have now, but using fewer lines of code in each procedure.  You\n#should define a new procedure to help with this.  Your new version should have\n#approximately the same running time as the original version, but neither\n#hashtable_update or hashtable_lookup should include any for or while loop, and\n#the block of each procedure should be no more than 6 lines long.\n\n#Your procedures should have the same behavior as the originals.  For example,\n\ntable = make_hashtable(10)\nhashtable_update(table, 'Python', 'Monty')\nhashtable_update(table, 'CLU', 'Barbara Liskov')\nhashtable_update(table, 'JavaScript', 'Brendan Eich')\nhashtable_update(table, 'Python', 'Guido van Rossum')\nprint hashtable_lookup(table, 'Python') # => Guido van Rossum\n\n\n", "type": "Nugget", "id": 437002}, {"nuggetType": "program", "name": "Memoization", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQwLEgZOdWdnZXQY2eUaDA", "path": "Course/cs101/CourseRev/feb2012/Unit/421002/Nugget/439001", "suppliedCode": "#[Double Gold Star] Memoization is a way to make code run faster by saving\n#previously computed results.  Instead of needing to recompute the value of an\n#expression, a memoized computation first looks for the value in a cache of pre-\n#computed values.\n\n#Define a procedure, cached_execution(cache, code), that takes in two inputs: a\n#cache, which is a Dictionary that maps strings representing Python expressions\n#to their previously computed values, and code, a string that is a Python\n#expression.  Your procedure should return the value of code, but should only\n#evaluate code if it has not been previously evaluated.\n\ndef cached_execution(cache,code):\n\n\n\n#Here is an example showing the desired behavior of cached_execution:\n\ndef factorial(n):\n    print \"Running factorial\"\n    result = 1\n    for i in range(2, n + 1):\n        result = result * i\n    return result\n\ncache = {} # start cache as an empty dictionary\n### first execution (should print out Running factorial and the result)\nprint cached_execution(cache, 'factorial(50)')                           \n\nprint \"Second time:\"\n### second execution (should only print out the result)\nprint cached_execution(cache, 'factorial(50)')\n\n#Here is a more interesting example using cached_execution \n#(do not worry if you do not understand this, though, \n#it will be more clear after Unit 6):\n\ndef cached_fibo(cache, n):\n    if n == 1 or n == 0:\n        return n\n    else:\n        return cached_execution(cache, 'cached_fibo(cache, ' + str(n - 1) + ')') \\\n               + cached_execution(cache, 'cached_fibo(cache, ' + str(n - 2) + ')')\n\ncache = {}\n# do not try this at home...at least without a cache!\n#print cached_execution(cache, 'cached_fibo(cache, 100)')\n\n#Hint: you will need to use the built-in eval function similarly to how we used\n#it in time_execution.  The eval function takes a string as input, and returns\n#the result of evaluating that string as a Python expression.\n\n\n    \n    \n    \n    \n    \n    ", "type": "Nugget", "id": 439001}, {"nuggetType": "lecture", "name": "When Offered Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQw", "media": {"dotsub_id": "ef55d469-3937-456e-81e6-1a728658863e", "name": "cs101_hw5_03_s_when-offered", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOqqHgw", "youtube_id": "hftOGwEW4qY", "youtube_state": "done", "path": "Course/cs101/Media/497002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nIn this next question, we want to find all the hexamesters a given course is offered.\n\n2\n00:00:04,000 --> 00:00:07,000\nSo if we go back to our data structure, what we're going to do\n\n3\n00:00:07,000 --> 00:00:12,000\nis go through each hexamester, each key in the highest level dictionary,\n\n4\n00:00:12,000 --> 00:00:14,000\nsearch through all the keys of that dictionary.\n\n5\n00:00:14,000 --> 00:00:18,000\nIf they equal the course we're looking for, we're going to append it to a list of our results.\n\n6\n00:00:18,000 --> 00:00:21,000\nThe first thing I do is create the result list,\n\n7\n00:00:21,000 --> 00:00:25,000\nand we're going to go through every key in courses to get each hexamester.\n\n8\n00:00:25,000 --> 00:00:28,000\nIf that course is in the dictionary for that hexamester,\n\n9\n00:00:28,000 --> 00:00:31,000\nthen we're going to append it to our offered list.\n\n10\n00:00:31,000 --> 00:00:34,000\nAnd once we're finished, we're just going to return the list.\n\n", "id": 497002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQwLEgZOdWdnZXQY66oeDA", "path": "Course/cs101/CourseRev/feb2012/Unit/421002/Nugget/497003", "type": "Nugget", "id": 497003}, {"nuggetType": "lecture", "name": "Is Offered Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQw", "media": {"dotsub_id": "c9522d3b-b845-4cf8-bf0b-e80664cdbb05", "name": "cs101_hw5_02_s_is-offered", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKK_Hww", "youtube_id": "Qq8Hd290n5c", "youtube_state": "done", "path": "Course/cs101/Media/516002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nFor the next few questions we're given this data structure of courses.\n\n2\n00:00:03,000 --> 00:00:08,000\nLet's take a couple seconds to go through what it looks like.\n\n3\n00:00:08,000 --> 00:00:13,500\nIt's a dictionary where each key in the dictionary is a hexamester of courses that Udacity offers.\n\n4\n00:00:13,500 --> 00:00:16,000\nIn each hexamester we have another dictionary \n\n5\n00:00:16,000 --> 00:00:19,000\nthat's where the keys are the name of the course,\n\n6\n00:00:19,000 --> 00:00:24,000\nand within that there's another dictionary with name value pairs.\n\n7\n00:00:24,000 --> 00:00:27,000\nThis is a common way to store data in an unstructured form\n\n8\n00:00:27,000 --> 00:00:32,000\nwhere we just have an attribute like name, teacher, assistant, whatever--\n\n9\n00:00:32,000 --> 00:00:35,000\nprereq down here--and then a value for that attribute:\n\n10\n00:00:35,000 --> 00:00:39,000\nBuilding a Search Engine, the name of the TA, etc, etc.\n\n11\n00:00:39,000 --> 00:00:42,000\nThis question asks us to write a function\n\n12\n00:00:42,000 --> 00:00:47,000\nthat determines whether a course is offered during a given hexamester,\n\n13\n00:00:47,000 --> 00:00:49,000\nand we're going to do that pretty simply.\n\n14\n00:00:49,000 --> 00:00:51,000\nBefore we get started, let's look at the data structure.\n\n15\n00:00:51,000 --> 00:00:54,000\nWhat we want to do is, given a hexamester and the name of a course,\n\n16\n00:00:54,000 --> 00:00:59,000\nwe want to determine if that course is a key in the dictionary\n\n17\n00:00:59,000 --> 00:01:02,000\nto which that hexamester is associated with.\n\n18\n00:01:02,000 --> 00:01:04,000\nAnd this is just 1 line of code, actually.\n\n19\n00:01:04,000 --> 00:01:08,000\nWhat this line of code does is determine whether or not the course is a key\n\n20\n00:01:08,000 --> 00:01:13,000\nin the dictionary that we get with the keyword hexamester in our course's data structure.\n\n", "id": 516002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQwLEgZOdWdnZXQY6qcfDA", "path": "Course/cs101/CourseRev/feb2012/Unit/421002/Nugget/513002", "type": "Nugget", "id": 513002}, {"nuggetType": "lecture", "name": "Growth Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQw", "media": {"dotsub_id": "ef686ff6-778f-4980-903f-d3a5e303f2f1", "name": "cs101_hw5_00_s_growth", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNGvHww", "youtube_id": "tlFdhxXJzaw", "youtube_state": "uploading", "path": "Course/cs101/Media/514001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nIn the first homework question, we have to determine which of the given functions\n\n2\n00:00:03,000 --> 00:00:06,000\nscale linearly with the input list p.\n\n3\n00:00:06,000 --> 00:00:08,000\nLet's go through the functions 1 by 1.\n\n4\n00:00:08,000 --> 00:00:10,000\nThis should look familiar.\n\n5\n00:00:10,000 --> 00:00:15,000\nAll sum_list does is take an input list p and calculate the sum of the numbers in p.\n\n6\n00:00:15,000 --> 00:00:18,000\nIn this case the worst and the best case are really the same,\n\n7\n00:00:18,000 --> 00:00:22,000\nbecause no matter what, you traverse this for loop for the length of p.\n\n8\n00:00:22,000 --> 00:00:25,000\nAnd accordingly, if you double the number of items in p,\n\n9\n00:00:25,000 --> 00:00:29,000\nyou also double the run time because you have to go through twice as many items\n\n10\n00:00:29,000 --> 00:00:31,000\nin this for loop.\n\n11\n00:00:31,000 --> 00:00:37,000\nAnd so the run time of sum_list scales linearly with the number of items in the list p.\n\n12\n00:00:37,000 --> 00:00:41,000\nThis procedure determines whether or not a given list p has duplicate elements.\n\n13\n00:00:41,000 --> 00:00:43,000\nLet's go through a quick example.\n\n14\n00:00:43,000 --> 00:00:46,000\nHere's a small list with the elements 0, 1, and 1.\n\n15\n00:00:46,000 --> 00:00:50,000\nGoing through the code here, we have i and we have j.\n\n16\n00:00:50,000 --> 00:00:53,000\nIn the first iteration of the loops, i and j are both going to be 0.\n\n17\n00:00:53,000 --> 00:00:56,000\nThat means we're looking at whether the first element is equivalent to the first element.\n\n18\n00:00:56,000 --> 00:01:02,000\nWe have this case right here that says not to compare the same element with itself.\n\n19\n00:01:02,000 --> 00:01:06,000\nSo j increments and now we're comparing the first element with the second element\n\n20\n00:01:06,000 --> 00:01:08,000\nand they're not the same.\n\n21\n00:01:08,000 --> 00:01:11,000\nWe do that again, the first element with the third element. They're not the same.\n\n22\n00:01:11,000 --> 00:01:14,000\nWe then increment i and reset j.\n\n23\n00:01:14,000 --> 00:01:16,000\n0 and 1 are not the same,\n\n24\n00:01:18,000 --> 00:01:20,000\n1 and 1 are not the same,\n\n25\n00:01:20,000 --> 00:01:27,000\nand lastly, we have 1 and then 2, and in this case the second element\n\n26\n00:01:27,000 --> 00:01:29,000\nand the third element are the same, so we're going to return True.\n\n27\n00:01:29,000 --> 00:01:31,000\nThat's how this works.\n\n28\n00:01:31,000 --> 00:01:35,000\nNow, in order to examine the run time, the key part here are these 2 for loops.\n\n29\n00:01:35,000 --> 00:01:38,000\nFor this for loop we're going to go roughly the length of p,\n\n30\n00:01:38,000 --> 00:01:43,000\nand for every element in p we're also going to go roughly the length of p.\n\n31\n00:01:43,000 --> 00:01:47,000\nThis creates a quadratic run time in relation to the number of elements in p,\n\n32\n00:01:47,000 --> 00:01:50,000\nnamely if we double the number of elements in p,\n\n33\n00:01:50,000 --> 00:01:55,000\nwe're going to increase the run time of the entire procedure by a factor of 4.\n\n34\n00:01:55,000 --> 00:01:57,000\nHere we have our mystery function.\n\n35\n00:01:57,000 --> 00:02:00,000\nYou've never seen this before, but the general structure should be familiar.\n\n36\n00:02:00,000 --> 00:02:02,000\nHere we have a while loop,\n\n37\n00:02:02,000 --> 00:02:05,000\nand we set i to 0 and we're going to continue this while loop \n\n38\n00:02:05,000 --> 00:02:07,000\nuntil i is greater than or equal to the length of p.\n\n39\n00:02:07,000 --> 00:02:10,000\nAnd looking down here, we're basically going to be iterating through p,\n\n40\n00:02:10,000 --> 00:02:13,000\nbut we're going to do it a little different than normal.\n\n41\n00:02:13,000 --> 00:02:17,000\nIf the element in p at index i is even,\n\n42\n00:02:17,000 --> 00:02:19,000\nwe're going to increment i by 2.\n\n43\n00:02:19,000 --> 00:02:22,000\nOtherwise we're going to increment it by 1.\n\n44\n00:02:22,000 --> 00:02:26,000\nSo the worst case for this function in terms of run time\n\n45\n00:02:26,000 --> 00:02:30,000\nis if every element in p is odd,\n\n46\n00:02:30,000 --> 00:02:35,000\nmeaning we only increment i by 1 for each iteration.\n\n47\n00:02:35,000 --> 00:02:38,000\nSo we're going to go at half the speed that we would\n\n48\n00:02:38,000 --> 00:02:40,000\nif every element in p was even.\n\n49\n00:02:40,000 --> 00:02:47,000\nSimplifying the worst case, all we have is a while loop through every element in the list p,\n\n50\n00:02:47,000 --> 00:02:49,000\nso this is clearly linear in the worst case.\n\n51\n00:02:49,000 --> 00:02:55,000\nI'll also note that in the best case the run time of the mystery function is also linear.\n\n52\n00:02:55,000 --> 00:02:58,000\nThat may be a little confusing at first because it goes twice as fast,\n\n53\n00:02:58,000 --> 00:03:02,000\nbut we're really concentrating on the growth of the run time\n\n54\n00:03:02,000 --> 00:03:07,000\nso that even if it is going twice as fast as the worst case,\n\n55\n00:03:07,000 --> 00:03:10,000\nif we double the number of elements in the list p,\n\n56\n00:03:10,000 --> 00:03:12,000\nthe run time is also going to double.\n\n", "id": 514001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQwLEgZOdWdnZXQYubcfDA", "path": "Course/cs101/CourseRev/feb2012/Unit/421002/Nugget/515001", "type": "Nugget", "id": 515001}, {"nuggetType": "lecture", "name": "Hash String Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQw", "media": {"dotsub_id": "8c84d2ba-d2be-456e-8e77-3aa2ffa937de", "name": "cs101_hw5_01_s_hash-string", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNOyHgw", "youtube_id": "za4s6ahuCT8", "youtube_state": "done", "path": "Course/cs101/Media/498003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:01,500\nIn the question hash string, \n\n2\n00:00:01,500 --> 00:00:04,000\nwe have to determine which of the following statements are true.\n\n3\n00:00:04,000 --> 00:00:06,000\nLet's go through the statements 1 by 1.\n\n4\n00:00:06,000 --> 00:00:11,000\nThe first statement says the number of string comparisons done to look up a keyword\n\n5\n00:00:11,000 --> 00:00:15,000\nthat is not a key in the hash table may be less than the number needed to look up a keyword\n\n6\n00:00:15,000 --> 00:00:17,000\nthat is a key in the hash table.\n\n7\n00:00:17,000 --> 00:00:19,000\nAs this turns out, this is actually a true statement.\n\n8\n00:00:19,000 --> 00:00:21,000\nIn order to show it, we need an example, \n\n9\n00:00:21,000 --> 00:00:26,000\nso let me give you an example dictionary with 3 buckets and 3 keywords in here.\n\n10\n00:00:26,000 --> 00:00:29,000\nI'm not showing the values because they don't really matter for this example.\n\n11\n00:00:29,000 --> 00:00:31,000\nIt could be the case that if we search for \"Batman\"\n\n12\n00:00:31,000 --> 00:00:33,000\nour hash function takes us to bucket 0\n\n13\n00:00:33,000 --> 00:00:37,000\nand then we have to compare between \"Andy,\" \"is,\" and finally \"Batman.\"\n\n14\n00:00:37,000 --> 00:00:39,000\nSo that would be 3 string comparisons.\n\n15\n00:00:39,000 --> 00:00:44,000\nLet's say we search for \"Irvin\" and that brings us to bucket 2.\n\n16\n00:00:44,000 --> 00:00:47,000\nThere's nothing in bucket 2, so there's no comparisons to be made.\n\n17\n00:00:47,000 --> 00:00:50,000\nThis is an example where it actually takes more comparisons \n\n18\n00:00:50,000 --> 00:00:55,000\nto look up something in the hash table than it does to look up something not in the hash table.\n\n19\n00:00:55,000 --> 00:00:59,000\nStatement 2 says we should expect the time to look up most keywords in the hash table\n\n20\n00:00:59,000 --> 00:01:02,000\nwill decrease as we increase the number of buckets.\n\n21\n00:01:02,000 --> 00:01:04,000\nAnd with a good hash function this is true.\n\n22\n00:01:04,000 --> 00:01:07,000\nLet's say we have a hash table with only 2 buckets.\n\n23\n00:01:07,000 --> 00:01:12,000\nIf we have a good hash function, the number of keywords in each bucket is the same.\n\n24\n00:01:12,000 --> 00:01:15,000\nAnd so the average number of comparisons is going to be half the size of a bucket\n\n25\n00:01:15,000 --> 00:01:18,000\nin order to look up a keyword in the hash table.\n\n26\n00:01:18,000 --> 00:01:23,000\nIf we double the number of buckets, the average lookup time is decreasing significantly.\n\n27\n00:01:23,000 --> 00:01:26,000\nAnd with a good hash function the time is going to decrease even more.\n\n28\n00:01:26,000 --> 00:01:29,000\nStatement 3 says it is always better to have more buckets in a hash table.\n\n29\n00:01:29,000 --> 00:01:31,000\nThis is a pretty strong statement,\n\n30\n00:01:31,000 --> 00:01:34,000\nas indicated by the use of the word always,\n\n31\n00:01:34,000 --> 00:01:36,500\nand it's really because of that word that the statement is false.\n\n32\n00:01:36,500 --> 00:01:38,000\nThere's really 2 good reasons.\n\n33\n00:01:38,000 --> 00:01:41,000\nThe first reason is because changing the number of buckets,\n\n34\n00:01:41,000 --> 00:01:45,000\nbe it more or less, changes where keywords hash to.\n\n35\n00:01:45,000 --> 00:01:48,000\nIt could be the case that with 2 buckets I have a good distribution.\n\n36\n00:01:48,000 --> 00:01:51,000\nBut if I add a third bucket, the hash function is such\n\n37\n00:01:51,000 --> 00:01:53,000\nthat everything lands in that new bucket.\n\n38\n00:01:53,000 --> 00:01:57,000\nWe choose hash functions carefully so that this is less likely,\n\n39\n00:01:57,000 --> 00:02:00,000\nbut depending on the keywords you're using, this is still possible.\n\n40\n00:02:00,000 --> 00:02:02,000\nAnd the second reason is memory.\n\n41\n00:02:02,000 --> 00:02:04,000\nI could have an arbitrarily long hash table,\n\n42\n00:02:04,000 --> 00:02:08,000\nbut they can use a lot of space, especially if there are a few keywords that go into it.\n\n43\n00:02:08,000 --> 00:02:13,000\nReal-world implementations of hash tables try to shoot for a ratio\n\n44\n00:02:13,000 --> 00:02:16,000\nbetween the number of buckets they have and the number of keywords,\n\n45\n00:02:16,000 --> 00:02:19,000\nincreasing the number of buckets accordingly\n\n46\n00:02:19,000 --> 00:02:22,000\nas the number of keywords in the hash table decrease and increase.\n\n47\n00:02:22,000 --> 00:02:25,000\nStatement 4 says the time to look up a keyword in the hash table\n\n48\n00:02:25,000 --> 00:02:30,000\nis always less than the time it would take in a linear time list (as used in Unit 4).\n\n49\n00:02:30,000 --> 00:02:33,000\nSo the question is, is the lookup time always less \n\n50\n00:02:33,000 --> 00:02:37,000\nthan the lists that we've been using previously?\n\n51\n00:02:37,000 --> 00:02:40,000\nAnd as you might suspect, this statement is false.\n\n52\n00:02:40,000 --> 00:02:43,000\nWe're going to show that by giving an example hash table.\n\n53\n00:02:43,000 --> 00:02:47,000\nIf I have a hash table where 3 keywords all go in bucket 1,\n\n54\n00:02:47,000 --> 00:02:52,000\nif I want to look up the keyword \"Batman,\" I'm going to go to bucket 1\n\n55\n00:02:52,000 --> 00:02:56,000\nand iterate through each item in this bucket until I find \"Batman.\"\n\n56\n00:02:56,000 --> 00:03:01,000\nThat's essentially the same as a normal list where we just start from the beginning\n\n57\n00:03:01,000 --> 00:03:03,000\nwithout doing any kind of hash function \n\n58\n00:03:03,000 --> 00:03:06,000\nand just go through each item 1 by 1 searching for \"Batman.\"\n\n", "id": 498003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQwLEgZOdWdnZXQYiccfDA", "path": "Course/cs101/CourseRev/feb2012/Unit/421002/Nugget/517001", "type": "Nugget", "id": 517001}, {"nuggetType": "lecture", "name": "Involved Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQw", "media": {"dotsub_id": "d90fcfda-39fa-4a64-9a84-f6bf1404557e", "name": "cs101_hw5_04_s_involved", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOunHww", "youtube_id": "ej9rXa13kr4", "youtube_state": "done", "path": "Course/cs101/Media/513003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nIn the last question involving this data structure,\n\n2\n00:00:02,000 --> 00:00:08,000\nwe want to create a dictionary that contains the hexamesters as the keys\n\n3\n00:00:08,000 --> 00:00:12,000\nand the values as a list of each course a given person is involved with.\n\n4\n00:00:12,000 --> 00:00:14,000\nSo let's look at Dave.\n\n5\n00:00:14,000 --> 00:00:17,000\nFor April 2012 he's involved in 2 courses:\n\n6\n00:00:17,000 --> 00:00:22,000\ncs101, his intro course, and cs387, the Applied Cryptography course.\n\n7\n00:00:22,000 --> 00:00:25,000\nAnd the dictionary continues on, but the structure stays the same,\n\n8\n00:00:25,000 --> 00:00:30,000\nwhere the key is the hexamester and the value is a list of courses\n\n9\n00:00:30,000 --> 00:00:31,500\nfor which that person is involved.\n\n10\n00:00:31,500 --> 00:00:34,000\nSo 1 question you may be asking yourself, what does it mean to be involved?\n\n11\n00:00:34,000 --> 00:00:36,000\nAnd if we go back to our data structure, what we're going to do \n\n12\n00:00:36,000 --> 00:00:40,000\nis look at the name value pairs associated with the course.\n\n13\n00:00:40,000 --> 00:00:45,000\nSo if we're looking for Steve, Steve is associated with his class, cs253,\n\n14\n00:00:45,000 --> 00:00:47,000\nthe Web Engineering - Building a Blog.\n\n15\n00:00:47,000 --> 00:00:48,500\nAnd so that's what we're going to do.\n\n16\n00:00:48,500 --> 00:00:52,000\nWe're going to go through each course, looking at the value in the name value pairs,\n\n17\n00:00:52,000 --> 00:00:55,000\nand if the value is what we're looking for, \n\n18\n00:00:55,000 --> 00:00:58,000\nthen we're going to add that course to our dictionary \n\n19\n00:00:58,000 --> 00:01:01,000\nassociated with the key of that hexamester.\n\n20\n00:01:01,000 --> 00:01:03,000\nIt sounds a little convoluted, and the answer is a little long,\n\n21\n00:01:03,000 --> 00:01:05,000\nbut it's really a simple idea.\n\n22\n00:01:05,000 --> 00:01:07,000\nThe first thing I'm doing is creating the output dictionary.\n\n23\n00:01:07,000 --> 00:01:09,000\nWe're going to go through each hexamester.\n\n24\n00:01:09,000 --> 00:01:12,000\nWe're going to go through each course in each hexamester.\n\n25\n00:01:12,000 --> 00:01:16,000\nWe're going to go through each key in the name value pairs.\n\n26\n00:01:16,000 --> 00:01:20,000\nIf the value associated with all this is the person we're looking for,\n\n27\n00:01:20,000 --> 00:01:22,000\nthen we're going to update our output dictionary.\n\n28\n00:01:22,000 --> 00:01:25,000\nIf we've already added this hexamester as a key to the output dictionary,\n\n29\n00:01:25,000 --> 00:01:29,000\nthen we're just going to append this course at the end of the list \n\n30\n00:01:29,000 --> 00:01:31,000\nassociated with that hexamester.\n\n31\n00:01:31,000 --> 00:01:36,000\nOtherwise we're going to create a new list for which the course is the sole value,\n\n32\n00:01:36,000 --> 00:01:40,000\nand once we're done with all these for loops, we're going to return our output dictionary.\n\n", "id": 513003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQwLEgZOdWdnZXQYwd4fDA", "path": "Course/cs101/CourseRev/feb2012/Unit/421002/Nugget/520001", "type": "Nugget", "id": 520001}, {"nuggetType": "lecture", "name": "Refactoring Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQw", "media": {"dotsub_id": "86f48c3f-6fcc-4d75-8552-089995275fc2", "name": "cs101_hw5_05_s_refactoring", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJHuHww", "youtube_id": "EU9NvdGoAt4", "youtube_state": "done", "path": "Course/cs101/Media/522001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nIn lecture, Dave pointed out that these 2 functions,\n\n2\n00:00:05,000 --> 00:00:07,000\nhashtable_update and hashtable_lookup,\n\n3\n00:00:07,000 --> 00:00:09,000\nuse some similar functionality\n\n4\n00:00:09,000 --> 00:00:13,000\nthat instead we could place in a separate procedure.\n\n5\n00:00:13,000 --> 00:00:16,000\nLooking at the hashtable_update and lookup procedures here,\n\n6\n00:00:16,000 --> 00:00:21,000\nwe see code that's identical between them, namely these 2 lines.\n\n7\n00:00:21,000 --> 00:00:25,000\nIn both functions, these 2 lines of code go through a given bucket\n\n8\n00:00:25,000 --> 00:00:28,000\nsearching for an entry whose first value is the key.\n\n9\n00:00:28,000 --> 00:00:31,000\nAnd so what we're going to do is we're going to take this code\n\n10\n00:00:31,000 --> 00:00:34,000\nand move it into a separate helper function.\n\n11\n00:00:34,000 --> 00:00:36,000\nThis is known as refactoring.\n\n12\n00:00:36,000 --> 00:00:38,000\nRefactoring is a common software engineering practice\n\n13\n00:00:38,000 --> 00:00:41,000\nwhere we change the code without changing the functionality.\n\n14\n00:00:41,000 --> 00:00:43,000\nThere's a number of reasons to do so.\n\n15\n00:00:43,000 --> 00:00:47,000\nFor example, here we're doing it to minimize duplicated code.\n\n16\n00:00:47,000 --> 00:00:51,000\nThis is desirable, because if we want to change how these 2 lines of code work--\n\n17\n00:00:51,000 --> 00:00:53,000\nperhaps we change the structure of the bucket--\n\n18\n00:00:53,000 --> 00:00:56,000\nwe don't want to look through every hash table function\n\n19\n00:00:56,000 --> 00:00:58,000\nsearching for how this works and updating them.\n\n20\n00:00:58,000 --> 00:01:00,000\nRather, we just want to update it in 1 place.\n\n21\n00:01:00,000 --> 00:01:04,000\nThis minimizes bugs and saves time. So let's give it a try.\n\n22\n00:01:04,000 --> 00:01:06,000\nHere I've created a new function called bucket_find.\n\n23\n00:01:06,000 --> 00:01:11,000\nYou should see that it's very similar to the code that we have in update and lookup\n\n24\n00:01:11,000 --> 00:01:14,000\nin that we're going to go through the bucket searching for the entry\n\n25\n00:01:14,000 --> 00:01:18,000\nwhose first value is the key and then returning the entire entry\n\n26\n00:01:18,000 --> 00:01:21,000\nso that we can use it accordingly in both update and lookup.\n\n27\n00:01:21,000 --> 00:01:25,000\nSo now that we have the helper function, let's change our hash table functions to use it.\n\n28\n00:01:25,000 --> 00:01:29,000\nThe resulting code is going to be both simpler and shorter.\n\n29\n00:01:29,000 --> 00:01:31,000\nI've changed hashtable_update.\n\n30\n00:01:31,000 --> 00:01:33,000\nWe find the bucket in the first line,\n\n31\n00:01:33,000 --> 00:01:37,000\nthen within the bucket we're searching for the key,\n\n32\n00:01:37,000 --> 00:01:40,000\nand if we find that entry we're going to update the value.\n\n33\n00:01:40,000 --> 00:01:44,000\nOtherwise we're going to append the key and the value to the end of the bucket.\n\n34\n00:01:44,000 --> 00:01:46,000\nIt looks quite a bit simpler than the original function.\n\n35\n00:01:46,000 --> 00:01:48,000\nLet's do the same thing to lookup.\n\n36\n00:01:48,000 --> 00:01:50,000\nIn the new hashtable_lookup, we first find the bucket\n\n37\n00:01:50,000 --> 00:01:52,000\nand then within the bucket we search for the entry.\n\n38\n00:01:52,000 --> 00:01:55,000\nIf the entry is not None, we return the second value.\n\n39\n00:01:55,000 --> 00:01:57,000\nOtherwise we return None.\n\n", "id": 522001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQwLEgZOdWdnZXQY-fUfDA", "path": "Course/cs101/CourseRev/feb2012/Unit/421002/Nugget/523001", "type": "Nugget", "id": 523001}, {"nuggetType": "lecture", "name": "Memoization Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQw", "media": {"dotsub_id": "16aec1d2-d8b6-4624-bbd2-1c1acabc2cb9", "name": "cs101_hw5_06_s_memoization", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMmFIAw", "youtube_id": "qHplbJ1V_2M", "youtube_state": "done", "path": "Course/cs101/Media/525001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nThe last problem in this homework assignment was a bit of a challenge.\n\n2\n00:00:03,000 --> 00:00:06,000\nWe introduced a new concept called memoization.\n\n3\n00:00:06,000 --> 00:00:10,000\nMemoization is a way of just storing results after we execute them.\n\n4\n00:00:10,000 --> 00:00:14,000\nThat way, if we want the same results and we execute the same code,\n\n5\n00:00:14,000 --> 00:00:17,000\nwe don't have to run through the procedures and whatnot,\n\n6\n00:00:17,000 --> 00:00:19,000\nwe just return the value that we saved.\n\n7\n00:00:19,000 --> 00:00:21,000\nSo we're given 2 parameters.\n\n8\n00:00:21,000 --> 00:00:25,000\nOne is your cache, which is just a dictionary that maps a string of code\n\n9\n00:00:25,000 --> 00:00:27,000\nto the value that it returned,\n\n10\n00:00:27,000 --> 00:00:30,000\nand code is a string of what we want to execute.\n\n11\n00:00:30,000 --> 00:00:36,000\nSo our first line is going to see whether or not the code is in the cache,\n\n12\n00:00:36,000 --> 00:00:38,000\nnamely have we executed this before.\n\n13\n00:00:38,000 --> 00:00:41,000\nIf we haven't executed it before, we're going to update our cache with this code.\n\n14\n00:00:41,000 --> 00:00:48,000\nAs the description said, the way you execute a string in Python is just use eval.\n\n15\n00:00:48,000 --> 00:00:52,000\nEval in a string will call the Python interpreter to execute this code\n\n16\n00:00:52,000 --> 00:00:55,000\nas if it were typed code that you did yourself.\n\n17\n00:00:55,000 --> 00:00:57,000\nSo there's 2 situations at this point.\n\n18\n00:00:57,000 --> 00:01:02,000\nFirst, either the code was already in the cache and then we just want to return what was there\n\n19\n00:01:02,000 --> 00:01:08,000\nor it wasn't in the cache, we did eval, and we updated the cache.\n\n20\n00:01:08,000 --> 00:01:12,000\nEither way, cache[code] contains the result of executing code.\n\n21\n00:01:12,000 --> 00:01:17,000\nAnd so we're just going to return the value in the dictionary with the key code.\n\n", "id": 525001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIrZGQwLEgZOdWdnZXQYsY0gDA", "path": "Course/cs101/CourseRev/feb2012/Unit/421002/Nugget/526001", "type": "Nugget", "id": 526001}]}, {"name": "Office Hours 5", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmqHgwLEgZOdWdnZXQYuboeDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmqHgwLEgZOdWdnZXQY0rIeDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmqHgwLEgZOdWdnZXQYweEeDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmqHgwLEgZOdWdnZXQYkvEeDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmqHgwLEgZOdWdnZXQY4YAfDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmqHgw", "path": "Course/cs101/CourseRev/feb2012/Unit/497001", "open": false, "id": 497001, "nuggets": [{"nuggetType": "lecture", "name": "Hash Tables", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmqHgw", "media": {"dotsub_id": null, "name": "cs101_oo5_01_l_hash-tables", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGInKHgw", "youtube_id": "eiktSrhdrxs", "youtube_state": "done", "path": "Course/cs101/Media/501001", "transcript": null, "id": 501001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmqHgwLEgZOdWdnZXQY0rIeDA", "path": "Course/cs101/CourseRev/feb2012/Unit/497001/Nugget/498002", "type": "Nugget", "id": 498002}, {"nuggetType": "lecture", "name": "Homework Solutions", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmqHgw", "media": {"dotsub_id": null, "name": "cs101_oo5_00_l_homework-solutions", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNGyHgw", "youtube_id": "MdvDvcXUgkM", "youtube_state": "done", "path": "Course/cs101/Media/498001", "transcript": null, "id": 498001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmqHgwLEgZOdWdnZXQYuboeDA", "path": "Course/cs101/CourseRev/feb2012/Unit/497001/Nugget/499001", "type": "Nugget", "id": 499001}, {"nuggetType": "lecture", "name": "Rehashing", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmqHgw", "media": {"dotsub_id": null, "name": "cs101_oo5_02_l_rehashing", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNnZHgw", "youtube_id": "UMsVMW2S53w", "youtube_state": "done", "path": "Course/cs101/Media/503001", "transcript": null, "id": 503001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmqHgwLEgZOdWdnZXQYweEeDA", "path": "Course/cs101/CourseRev/feb2012/Unit/497001/Nugget/504001", "type": "Nugget", "id": 504001}, {"nuggetType": "lecture", "name": "Libraries", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmqHgw", "media": {"dotsub_id": null, "name": "cs101_oo5_03_l_libraries", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJHxHgw", "youtube_id": "G3ovp33txfc", "youtube_state": "done", "path": "Course/cs101/Media/506001", "transcript": null, "id": 506001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmqHgwLEgZOdWdnZXQYkvEeDA", "path": "Course/cs101/CourseRev/feb2012/Unit/497001/Nugget/506002", "type": "Nugget", "id": 506002}, {"nuggetType": "lecture", "name": "Programming Literacy", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmqHgw", "media": {"dotsub_id": null, "name": "cs101_oo5_04_l_programming-literacy", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPn4Hgw", "youtube_id": "0oXF2nOTX6I", "youtube_state": "done", "path": "Course/cs101/Media/507001", "transcript": null, "id": 507001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmqHgwLEgZOdWdnZXQY4YAfDA", "path": "Course/cs101/CourseRev/feb2012/Unit/497001/Nugget/508001", "type": "Nugget", "id": 508001}]}, {"name": "Unit 6", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYmZgfDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYsZwbDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYgawbDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY6rMbDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYocsbDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY8tobDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYitMbDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYkv0aDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYqvUaDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYkfobDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY4YkcDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYsZkcDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY4okcDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYgakcDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY-oEcDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY0bgcDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY67AcDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY07gcDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY2d8cDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYkfccDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYq_IbDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY4owbDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY-f4cDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYw-ccDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY4oYdDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYjNMbDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYs5kcDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYtJkcDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY2t8cDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYossbDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYypEcDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYnKQbDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY-4EcDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYy44dDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYxOccDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYmZ4dDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYosgcDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYlfccDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYgaYdDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY1LsbDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY1bsbDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY0bUdDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYocUdDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY44wbDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYx-ccDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY8dQdDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYweQdDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYkfQdDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY5IkcDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYm_ccDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY9dccDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYy5QbDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYl_ccDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYyeccDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY7bMbDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY8tQdDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYm54dDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYmfccDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY5owbDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "path": "Course/cs101/CourseRev/feb2012/Unit/441001", "open": false, "id": 441001, "nuggets": [{"nuggetType": "lecture", "name": "Expanding Our Grammar", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "c0f0ce04-0092-4bef-a4f5-5f5a32017bc1", "name": "cs101_unit6_04_q_expanding-our-grammar", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMHqGww", "youtube_id": "CwnQKplzMZc", "youtube_state": "processing", "path": "Course/cs101/Media/456001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\n[Evans] Let's try adding 1 more rule.\n\n2\n00:00:02,000 --> 00:00:07,000\nNow we'll ask the quiz again, but this time our grammar has 2 rules.\n\n3\n00:00:07,000 --> 00:00:09,000\nNow we have 2 rules.\n\n4\n00:00:09,000 --> 00:00:14,000\nWe have the rule we had before, which allows us to replace word with counter-word,\n\n5\n00:00:14,000 --> 00:00:17,000\nand we're going to add 1 more rule that says we already know 1 word.\n\n6\n00:00:17,000 --> 00:00:22,000\nWe know the word hippopotomonstrosesquippedaliophobia.\n\n7\n00:00:22,000 --> 00:00:25,000\nSo now the question is, how many words can we make?\n\n8\n00:00:26,000 --> 00:00:34,000\nThe possibilities are none; 1; 2; or infinitely many.\n\n", "id": 456001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYqvUaDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/441002", "type": "Nugget", "id": 441002}, {"nuggetType": "lecture", "name": "Counter Quiz Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "e4047cbc-dbf9-436a-a85f-539c66aa06ae", "name": "cs101_unit6_03_s_counter-quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIKsGww", "youtube_id": "k9DT6gUpnUE", "youtube_state": "processing", "path": "Course/cs101/Media/448002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\n[Evans] The answer is none,\n\n2\n00:00:02,000 --> 00:00:06,000\nthat we can't actually make any words with just this rule.\n\n3\n00:00:06,000 --> 00:00:08,000\nThe reason for that is this is a circular definition.\n\n4\n00:00:08,000 --> 00:00:11,000\nIt's a circular definition because we can never stop.\n\n5\n00:00:11,000 --> 00:00:17,000\nIf you remember the rules for BNF grammars that we can start from a starting nonterminal\n\n6\n00:00:17,000 --> 00:00:22,000\nand we keep doing replacements, we can only stop once we have all terminals.\n\n7\n00:00:22,000 --> 00:00:24,000\nWe're never going to get there if this is our only rule.\n\n8\n00:00:24,000 --> 00:00:29,000\nWe can keep adding more counters, but we can never replace the nonterminal word\n\n9\n00:00:29,000 --> 00:00:33,000\nbecause every time we replace it we end up with the nonterminal word again\n\n10\n00:00:33,000 --> 00:00:35,000\non the right side.\n\n11\n00:00:35,000 --> 00:00:38,000\nSo with just this rule, we can't actually make any words.\n\n12\n00:00:38,000 --> 00:00:40,000\nAll we can do is start from word.\n\n13\n00:00:40,000 --> 00:00:44,000\nNow our only choice is to replace word with counter-word.\n\n14\n00:00:44,000 --> 00:00:50,000\nWe only have 1 rule, so our only choice is to replace the word here with counter-word.\n\n15\n00:00:50,000 --> 00:00:53,000\nNow we end up with counter-counter-word.\n\n16\n00:00:53,000 --> 00:00:56,000\nBut since word is a nonterminal, we're never done.\n\n17\n00:00:56,000 --> 00:00:59,000\nSo we can never make any word this way.\n\n", "id": 448002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYkv0aDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/442002", "type": "Nugget", "id": 442002}, {"nuggetType": "lecture", "name": "Infinite Power", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": null, "name": "cs101_unit6_00_l_infinite-power", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJH9Ggw", "youtube_id": "Zj0mahX3Woo", "youtube_state": "done", "path": "Course/cs101/Media/442001", "transcript": null, "id": 442001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY-YQbDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/443001", "type": "Nugget", "id": 443001}, {"nuggetType": "lecture", "name": "Palindromes Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "e763ac87-dedd-4202-b012-31eb10ad013c", "name": "cs101_unit6_09_s_palindromes", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMLnHAw", "youtube_id": "8-9-J5tBBbc", "youtube_state": "done", "path": "Course/cs101/Media/472002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\n[Evans] Here's a way to define is_palindrome.\n\n2\n00:00:03,000 --> 00:00:07,000\nWe're taking a single string as an input--I'll call it s--\n\n3\n00:00:07,000 --> 00:00:10,000\nand we're first going to test the base case.\n\n4\n00:00:10,000 --> 00:00:15,000\nThe base case was to see if the string is empty, we should return True right away.\n\n5\n00:00:15,000 --> 00:00:17,000\nSo we can do that with an if.\n\n6\n00:00:17,000 --> 00:00:22,000\nWe're going to check if s is equal to the empty string. And if it is, we return True.\n\n7\n00:00:22,000 --> 00:00:24,000\nThat's our base case.\n\n8\n00:00:24,000 --> 00:00:26,000\nFor the else we have the recursive case.\n\n9\n00:00:26,000 --> 00:00:30,000\nSo now we need to do the test of the first and the last characters\n\n10\n00:00:30,000 --> 00:00:35,000\nto see if they match, and we can do that using the string indexing operators.\n\n11\n00:00:35,000 --> 00:00:42,000\ns[0] gets us the first character, s[-1] gets us the last character.\n\n12\n00:00:42,000 --> 00:00:46,000\nIf they match, then we need to check the rest of the string.\n\n13\n00:00:46,000 --> 00:00:50,000\nIf they didn't match--and let's finish the didn't match case first--\n\n14\n00:00:50,000 --> 00:00:53,000\nthen we know it's not a palindrome \n\n15\n00:00:53,000 --> 00:00:57,000\nbecause we found a place where the first and the last character did not match,\n\n16\n00:00:57,000 --> 00:01:00,000\nso we should return False right away.\n\n17\n00:01:00,000 --> 00:01:02,000\nIf they did match, then we have the harder problem.\n\n18\n00:01:02,000 --> 00:01:07,000\nWe need to do the recursive call to check if all the other letters in the string\n\n19\n00:01:07,000 --> 00:01:09,000\nstill form a palindrome.\n\n20\n00:01:09,000 --> 00:01:13,000\nSo this was our starting string. It had all these characters in it.\n\n21\n00:01:13,000 --> 00:01:18,000\nWe checked that this one matches this one.\n\n22\n00:01:18,000 --> 00:01:21,000\nSo now what we need to do is take the rest of the string\n\n23\n00:01:21,000 --> 00:01:24,000\nand check if this is a palindrome.\n\n24\n00:01:24,000 --> 00:01:28,000\nThat will be our recursive call, so we're going to return the result\n\n25\n00:01:28,000 --> 00:01:32,000\nof calling is_palindrome, but instead of passing an s\n\n26\n00:01:32,000 --> 00:01:37,000\nwhat we want to do is pass in the string starting from position 1 of s,\n\n27\n00:01:37,000 --> 00:01:44,000\nso removing the first character, and ending at position -1, removing the last character.\n\n28\n00:01:44,000 --> 00:01:48,000\nAnd remember with our indexing, the last value here is not included.\n\n29\n00:01:48,000 --> 00:01:52,000\nSo by having the last index as -1, that removes the final letter of the string.\n\n30\n00:01:52,000 --> 00:01:56,000\nThe first thing to test is the base case.\n\n31\n00:01:56,000 --> 00:01:59,000\nWe'll pass in the empty string.\n\n32\n00:01:59,000 --> 00:02:04,000\nThe empty string is a palindrome, so it should give us the result True, which it does.\n\n33\n00:02:04,000 --> 00:02:06,000\nLet's try the single letter string a.\n\n34\n00:02:06,000 --> 00:02:10,000\nThat's also a palindrome--it reads the same backwards and forwards--\n\n35\n00:02:10,000 --> 00:02:12,000\nand so we also get the value True.\n\n36\n00:02:12,000 --> 00:02:18,000\nIf we try, say, the string ab, which is not a palindrome, we get False.\n\n37\n00:02:18,000 --> 00:02:25,000\nAnd as a longer test, if we try level we should get True, which we do.\n\n38\n00:02:25,000 --> 00:02:35,000\nLet's try one of the most famous palindromes, amanaplanacanalpanama,\n\n39\n00:02:35,000 --> 00:02:38,000\nand we should get True, which we do.\n\n", "id": 472002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY4owbDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/444002", "type": "Nugget", "id": 444002}, {"nuggetType": "lecture", "name": "Relaxation Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "bcdbd269-2629-4424-8422-2d074caeefdc", "name": "cs101_unit6_19_s_relaxation", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOyzGww", "youtube_id": "lxcKGLyU9LM", "youtube_state": "processing", "path": "Course/cs101/Media/449004", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nSo the answer is yes. We have a good recursive definition.\n\n2\n00:00:04,000 --> 00:00:08,000\nNo matter what we pass in for t and p, we'll eventually get to a result. \n\n3\n00:00:08,000 --> 00:00:13,000\nAnd the reason for that is because every time we do a recursive call,\n\n4\n00:00:13,000 --> 00:00:17,000\nthe value that's passed in for t is one less than the previous value,\n\n5\n00:00:17,000 --> 00:00:22,000\nand eventually if we start with an integer and we keep reducing it, eventually we're \n\n6\n00:00:22,000 --> 00:00:26,000\ngoing to get to the case where t is equal to zero, and then we have a base case. \n\n7\n00:00:26,000 --> 00:00:31,000\nWe can return to the value 1 without using the popularity function again. \n\n8\n00:00:31,000 --> 00:00:35,000\nSo this is a good recursive definition. It will always produce a result. \n\n9\n00:00:35,000 --> 00:00:39,000\nIt might not produce a meaningful measure of popularity, but if this is how\n\n10\n00:00:39,000 --> 00:00:42,000\nwe define popularity, this code will always produce a result. \n\n", "id": 449004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY44wbDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/444003", "type": "Nugget", "id": 444003}, {"nuggetType": "lecture", "name": "Search Engine", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "e294f73b-967d-4b5e-9ac5-e015e3ef83e1", "name": "cs101_unit6_28_l_search-engine", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGO6zGww", "youtube_id": "7IlDnp39b0U", "youtube_state": "done", "path": "Course/cs101/Media/449006", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nSo congratulations--you've now built a search engine. \n\n2\n00:00:03,000 --> 00:00:06,000\nYou've got all of the components that you need for a search engine. \n\n3\n00:00:06,000 --> 00:00:08,000\nYou've got a way to collect a corpus, \n\n4\n00:00:08,000 --> 00:00:11,000\nusing a Web crawler that you built in the first 3 Units.\n\n5\n00:00:11,000 --> 00:00:13,000\nIn Units 4 and 5,  you figured out--\n\n6\n00:00:13,000 --> 00:00:15,000\nand hopefully understood--how to build the index\n\n7\n00:00:15,000 --> 00:00:18,000\nand then how to make it faster in Unit 5. \n\n8\n00:00:18,000 --> 00:00:20,000\nAnd in Unit 6--what we've just finished--\n\n9\n00:00:20,000 --> 00:00:22,000\nyou figured out how to rank the results. \n\n10\n00:00:22,000 --> 00:00:24,000\nThere's one little bit left:\n\n11\n00:00:24,000 --> 00:00:26,000\nwe haven't used those ranks, \n\n12\n00:00:26,000 --> 00:00:28,000\nso one of the questions on your homework \n\n13\n00:00:28,000 --> 00:00:31,000\nwill be using the ranks to get the best result.\n\n14\n00:00:31,000 --> 00:00:33,000\nIf we want to get the best result,  just having the dictionary ranks\n\n15\n00:00:33,000 --> 00:00:36,000\nis not enough--we need to use that to find \n\n16\n00:00:36,000 --> 00:00:38,000\nthe result that matches the query that has the best rank. \n\n17\n00:00:38,000 --> 00:00:42,000\nAnd that's one of the questions that you'll do on the homework for this Unit. \n\n18\n00:00:42,000 --> 00:00:44,000\nThere are a lot of other hard problems. \n\n19\n00:00:44,000 --> 00:00:46,000\nSo you have a few problems left to solve\n\n20\n00:00:46,000 --> 00:00:49,000\nbefore you can build a search engine that will compete with Google. \n\n21\n00:00:49,000 --> 00:00:51,000\nProbably the hardest one: you've got to come up with a name. \n\n22\n00:00:51,000 --> 00:00:53,000\nThis is really hard. \n\n23\n00:00:53,000 --> 00:00:56,000\nYou could try \"Yoogle\", \n\n24\n00:00:56,000 --> 00:00:59,000\nYou could try \"DuckDuck Find\".\n\n25\n00:00:59,000 --> 00:01:02,000\nNone of those really work--you'll have to come up with a better name,\n\n26\n00:01:02,000 --> 00:01:04,000\nand this is a pretty tough problem. \n\n27\n00:01:04,000 --> 00:01:06,000\nMake sure to also talk to your Trademark lawyers. \n\n28\n00:01:06,000 --> 00:01:08,000\nAnother thing you'd like to be able to do \n\n29\n00:01:08,000 --> 00:01:10,000\nis actually get your search engine on the Web\n\n30\n00:01:10,000 --> 00:01:12,000\nso other people can send queries to it. \n\n31\n00:01:12,000 --> 00:01:15,000\nThat's not something we're going to cover in this class,\n\n32\n00:01:15,000 --> 00:01:17,000\nbut if you take the Web Applications course \n\n33\n00:01:17,000 --> 00:01:19,000\nthat will start shortly after this class finishes, \n\n34\n00:01:19,000 --> 00:01:21,000\nyou'll learn a lot about how to build \n\n35\n00:01:21,000 --> 00:01:23,000\nWeb applications and be able to do that. \n\n36\n00:01:23,000 --> 00:01:26,000\nSo congratulations--you've reached the end of Unit 6. \n\n37\n00:01:26,000 --> 00:01:28,000\nAnd this is actually the last technical content \n\n38\n00:01:28,000 --> 00:01:30,000\nthat will be in this course. \n\n39\n00:01:30,000 --> 00:01:33,000\nUnit 7 will get you ready for the final exam and will give you \n\n40\n00:01:33,000 --> 00:01:37,000\nsome interesting examples of using Computing in Context. \n\n41\n00:01:37,000 --> 00:01:39,000\nSo congratulations. You've now finished building a search engine\n\n42\n00:01:39,000 --> 00:01:41,000\nand it actually does Page Ranking\n\n43\n00:01:41,000 --> 00:01:44,000\nbetter than any search engine that existed before 1998. \n\n44\n00:01:44,000 --> 00:01:46,000\nThat's quite amazing.\n\n45\n00:01:46,000 --> 00:01:49,000\nI first want to also congratulate David for getting you to this point.\n\n46\n00:01:49,000 --> 00:01:51,000\nI think that's quite amazing and, honestly, he's put a lot of \n\n47\n00:01:51,000 --> 00:01:53,000\nsleepless nights into thisl. \n\n48\n00:01:53,000 --> 00:01:55,000\nBut also, i want to tell you: you guys are my heroes. \n\n49\n00:01:55,000 --> 00:01:57,000\nYou got to a point where you reached something, I think, \n\n50\n00:01:57,000 --> 00:01:59,000\nreally significant in this class--you actually learned how to--\n\n51\n00:01:59,000 --> 00:02:01,000\nAnd you programmed your own search engine. \n\n52\n00:02:02,000 --> 00:02:04,000\nNow, I have to say--I'm a little bit jealous.\n\n53\n00:02:04,000 --> 00:02:06,000\nWhen I was a student at college, \n\n54\n00:02:06,000 --> 00:02:08,000\nthere was no search engines, and there wasn't even \n\n55\n00:02:08,000 --> 00:02:10,000\nand ability for me to learn all this stuff. \n\n56\n00:02:10,000 --> 00:02:13,000\nAs for you, you've been afforded the ability to learn all this stuff. \n\n57\n00:02:13,000 --> 00:02:16,000\nBut then you really got an amazing speed here.\n\n58\n00:02:16,000 --> 00:02:18,000\nThat's something really, really significant.\n\n59\n00:02:18,000 --> 00:02:20,000\nI hope--I mean, if you keep up that speed\n\n60\n00:02:20,000 --> 00:02:23,000\nand keep improving yourself with that same speed and learn new things--\n\n61\n00:02:23,000 --> 00:02:25,000\nmaybe in 3 or 4 years you are the next Google. \n\n62\n00:02:25,000 --> 00:02:27,000\nThat would be really amazing. \n\n63\n00:02:27,000 --> 00:02:29,000\nWell, I think you're definitely on track to doing that,\n\n64\n00:02:29,000 --> 00:02:32,000\nand I hope you'll take some of the courses that we'll start offering,\n\n65\n00:02:32,000 --> 00:02:35,000\nas 200 available courses and more advanced courses later.\n\n66\n00:02:35,000 --> 00:02:37,000\nThis is the end of Unit 6--we're not going to have \n\n67\n00:02:37,000 --> 00:02:39,000\nany more technical content to the course.\n\n68\n00:02:39,000 --> 00:02:41,000\nUnit 7 is going to be all field trips and interviews, \n\n69\n00:02:41,000 --> 00:02:43,000\ngiving you some idea of how the things that you've learned in class \n\n70\n00:02:43,000 --> 00:02:45,000\nfit into Context--and that should be a lot of fun. \n\n71\n00:02:45,000 --> 00:02:47,000\nThe other thing that you'll have, as part of Unit 7, \n\n72\n00:02:47,000 --> 00:02:49,000\nis the final exam. \n\n73\n00:02:49,000 --> 00:02:51,000\nAnd I hope everyone enjoys Homework 6\n\n74\n00:02:51,000 --> 00:02:56,000\nand will be ready for the final next week. >>And I hope you enjoy the final exam. \n\n", "id": 449006}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY5owbDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/444006", "type": "Nugget", "id": 444006}, {"nuggetType": "lecture", "name": "Implementing Urank Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "5de8fd3d-fc0f-41de-b763-fa51e7c0d555", "name": "cs101_unit6_23_s_implementing-urank", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLOcGww", "youtube_id": "z1p3FwzjVLI", "youtube_state": "processing", "path": "Course/cs101/Media/446003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nSo the answer is: we only need to add 1 line--\n\n2\n00:00:02,000 --> 00:00:04,000\nwe need to add the line, at line 13. \n\n3\n00:00:04,000 --> 00:00:08,000\nAnd the line that we need is to update the graph.\n\n4\n00:00:08,000 --> 00:00:10,000\nSo we're going to have a new entry in the graph\n\n5\n00:00:10,000 --> 00:00:13,000\nthat is the page that we're crawling.\n\n6\n00:00:13,000 --> 00:00:15,000\nSo that's going to be the key for the entry \n\n7\n00:00:15,000 --> 00:00:17,000\nthat we want to associate with that page--\n\n8\n00:00:17,000 --> 00:00:20,000\na list of the lengths \n\n9\n00:00:20,000 --> 00:00:21,000\nthat you can reach from that page--\n\n10\n00:00:21,000 --> 00:00:23,000\nall the outgoing lengths. \n\n11\n00:00:23,000 --> 00:00:26,000\nWell, that's exactly what we've stored in the variable, outlinks. \n\n12\n00:00:26,000 --> 00:00:29,000\nSo that's the only line of code that we need to add to produce the graph. \n\n13\n00:00:29,000 --> 00:00:32,000\nWe needed to initialize the graph as an empty dictionary,\n\n14\n00:00:32,000 --> 00:00:34,000\nand we needed to change to return it.\n\n15\n00:00:34,000 --> 00:00:36,000\nBut the only substantive change was adding this line. \n\n16\n00:00:36,000 --> 00:00:39,000\nAnd we'll run that--we'll call crawl_web,\n\n17\n00:00:39,000 --> 00:00:41,000\npassing in the test URL.\n\n18\n00:00:41,000 --> 00:00:44,000\nAnd this time we have 2 variables on the left side.\n\n19\n00:00:44,000 --> 00:00:46,000\nSo we're going to assign the index to index,\n\n20\n00:00:46,000 --> 00:00:48,000\nand we'll assign the graph to graph--\n\n21\n00:00:48,000 --> 00:00:51,000\nand let's check that the graph has what it should. \n\n22\n00:00:51,000 --> 00:00:54,000\nSo we'll print out to get graph entry for the index page,\n\n23\n00:00:54,000 --> 00:00:56,000\nand what we get--\n\n24\n00:00:56,000 --> 00:00:59,000\nwe see a list of 5 URLs:\n\n25\n00:00:59,000 --> 00:01:04,000\nhummus, arsenic, kathleen, nickel, and zinc--\n\n26\n00:01:04,000 --> 00:01:06,000\nand this corresponds to the picture here. \n\n27\n00:01:06,000 --> 00:01:09,000\nWe had 5 outgoing links from the index page\n\n28\n00:01:09,000 --> 00:01:12,000\nto those 5 other pages. \n\n29\n00:01:12,000 --> 00:01:14,000\nLet's look at another one. \n\n30\n00:01:14,000 --> 00:01:18,000\nWe can print the graph for the kathleen page,\n\n31\n00:01:18,000 --> 00:01:21,000\nand that had no outgoing links so what we see here is the empty list.\n\n32\n00:01:21,000 --> 00:01:23,000\nAnd we can see the whole graph.\n\n33\n00:01:23,000 --> 00:01:25,000\nWe have each URL,\n\n34\n00:01:25,000 --> 00:01:29,000\nwith a list of all the pages that that page links to . \n\n35\n00:01:29,000 --> 00:01:32,000\nSo both the hummus and the kathleen page don't link to anything.\n\n36\n00:01:32,000 --> 00:01:34,000\nThe zinc page links to the nickel page\n\n37\n00:01:34,000 --> 00:01:36,000\nand the arsenic page, and so on. \n\n38\n00:01:36,000 --> 00:01:38,000\nSo now we have our graph. \n\n39\n00:01:38,000 --> 00:01:40,000\nThe next step is to figure out how to use that graph \n\n40\n00:01:40,000 --> 00:01:42,000\nto do the page ranks. \n\n", "id": 446003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYy5QbDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/445003", "type": "Nugget", "id": 445003}, {"nuggetType": "lecture", "name": "Long Words", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "f9db3ed2-e000-48ef-afd0-60585bc66aab", "name": "cs101_unit6_01_q_long-words", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMmUGww", "youtube_id": "ZvQSlrnNp_c", "youtube_state": "done", "path": "Course/cs101/Media/445001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\n[Evans] We'll start with a quiz. It's kind of a trick quiz.\n\n2\n00:00:02,000 --> 00:00:06,000\nThe question is, what's the longest word in the English language?\n\n3\n00:00:06,000 --> 00:00:08,000\nIf you're not a native English speaker, don't worry.\n\n4\n00:00:08,000 --> 00:00:12,000\nThis quiz is just as hard for the native English speakers as it is for you.\n\n5\n00:00:12,000 --> 00:00:14,000\nHere are the choices:\n\n6\n00:00:14,000 --> 00:00:18,000\nhonorificabilitudinitatibus;\n\n7\n00:00:18,000 --> 00:00:22,000\nantidisestablishmentarianism;\n\n8\n00:00:22,000 --> 00:00:27,000\nhippopotomonstrosesquippedaliophobia;\n\n9\n00:00:27,000 --> 00:00:32,000\npneumonoultramicroscopicsilicovolcanoconiosis;\n\n10\n00:00:32,000 --> 00:00:34,000\nor none of the above.\n\n", "id": 445001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYsZwbDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/446001", "type": "Nugget", "id": 446001}, {"nuggetType": "program", "name": "Faster Fibonacci", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYnKQbDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/447004", "suppliedCode": "#Define a faster fibonacci procedure that will enable us to computer\r\n#fibonacci(36).\r\n\r\ndef fibonacci(n):\r\n\r\n\r\n#print fibonacci(36)\r\n#>>> 14930352", "type": "Nugget", "id": 447004}, {"nuggetType": "quiz", "name": "Long Words", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYgawbDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/448001", "type": "Nugget", "id": 448001}, {"nuggetType": "lecture", "name": "Long Words Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "b1cdb46b-fae0-4978-b92f-6655af060a29", "name": "cs101_unit6_01_s_long-words", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOmzGww", "youtube_id": "a_ofgL3-4mo", "youtube_state": "done", "path": "Course/cs101/Media/449001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Evans] The answer is none of the above, and we'll see why in a minute.\n\n2\n00:00:04,000 --> 00:00:07,000\nFirst I want to mention that all of these are sort of real words.\n\n3\n00:00:07,000 --> 00:00:10,000\nIt's not that well defined what it means for something to be a word.\n\n4\n00:00:10,000 --> 00:00:13,000\nThe first one is the longest word used by Shakespeare.\n\n5\n00:00:13,000 --> 00:00:19,000\nThis is 27 letters long and it means, roughly, \"with honor.\"\n\n6\n00:00:19,000 --> 00:00:21,000\nThe second one is 1 letter longer.\n\n7\n00:00:21,000 --> 00:00:25,000\nIt means \"a movement against the division of church and state.\"\n\n8\n00:00:25,000 --> 00:00:30,000\nThe third one, which is 35 letters long, means \"fear of long words.\"\n\n9\n00:00:30,000 --> 00:00:33,000\nYou can see it's made up of phobia, which is fear,\n\n10\n00:00:33,000 --> 00:00:39,000\nand a really big sort of made-up root about things being big and words.\n\n11\n00:00:39,000 --> 00:00:41,000\nSo it's fear of long words.\n\n12\n00:00:41,000 --> 00:00:44,000\nThe fourth one is the longest word in most large dictionaries.\n\n13\n00:00:44,000 --> 00:00:52,000\nIt's a kind of lung disease that you get from having contact with volcanic particles.\n\n14\n00:00:54,000 --> 00:00:56,000\nSo the reason the answer is none of the above\n\n15\n00:00:56,000 --> 00:01:00,000\nis that I'm very confident whatever you claim is the longest word,\n\n16\n00:01:00,000 --> 00:01:02,000\nI can always make a bigger one.\n\n17\n00:01:02,000 --> 00:01:05,000\nThere's no such thing as the longest word in the English language.\n\n", "id": 449001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY6rMbDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/449002", "type": "Nugget", "id": 449002}, {"nuggetType": "lecture", "name": "Computer Ranks", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "9ce9a21a-b841-42f5-abf2-bccb45535a15", "name": "cs101_unit6_26_l_computer-ranks", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOWMGww", "youtube_id": "2Ke7S3WH7AU", "youtube_state": "done", "path": "Course/cs101/Media/444005", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nSo we're going to provide a start on this code \n\n2\n00:00:02,000 --> 00:00:05,000\nand then we'll leave the crucial part of it \n\n3\n00:00:05,000 --> 00:00:07,000\nfor you to do, as a quiz. \n\n4\n00:00:07,000 --> 00:00:09,000\nYou should feel free, at any point, \n\n5\n00:00:09,000 --> 00:00:11,000\nto stop and try to figure out more of the code on your own. \n\n6\n00:00:11,000 --> 00:00:13,000\nThere are lots of different ways to do this\n\n7\n00:00:13,000 --> 00:00:15,000\nand we'll show you one--\n\n8\n00:00:15,000 --> 00:00:17,000\nand you'll finish that as a quiz. \n\n9\n00:00:17,000 --> 00:00:20,000\nSo the first thing we're going to do is define 2 constants. \n\n10\n00:00:20,000 --> 00:00:23,000\nSo we're going to use \"d\" as the damping factor. \n\n11\n00:00:23,000 --> 00:00:27,000\nAnd I'll use 0.8 as my damping factor. \n\n12\n00:00:27,000 --> 00:00:31,000\nThat's the probability, thinking about our random Web surfer--\n\n13\n00:00:31,000 --> 00:00:33,000\nthat she selects the link on the current page,\n\n14\n00:00:33,000 --> 00:00:36,000\nrather than starting over with a new random page. \n\n15\n00:00:36,000 --> 00:00:38,000\nThe other constant I'm going to define here, \n\n16\n00:00:38,000 --> 00:00:40,000\nwe'll call \"numloops\".\n\n17\n00:00:40,000 --> 00:00:44,000\nThat's the number of times we're going to go through the relaxation.\n\n18\n00:00:44,000 --> 00:00:46,000\nWhat we're computing is the value of rank \n\n19\n00:00:46,000 --> 00:00:48,000\nat some time step. \n\n20\n00:00:48,000 --> 00:00:51,000\nThe number of times we go through that\n\n21\n00:00:51,000 --> 00:00:53,000\nis going to determine the accuracy of our ranks.\n\n22\n00:00:53,000 --> 00:00:55,000\nWe'll use 10 as the number of loops. \n\n23\n00:00:55,000 --> 00:00:57,000\nYou can experiment with changing that \n\n24\n00:00:57,000 --> 00:00:59,000\nand one of the questions in the homework assignment \n\n25\n00:00:59,000 --> 00:01:02,000\nwill ask you to think about what happens when you change that. \n\n26\n00:01:02,000 --> 00:01:04,000\nSo now we need to start--we said, initially, \n\n27\n00:01:04,000 --> 00:01:08,000\nthe rank of each URL is 1 divided by the number of pages. \n\n28\n00:01:08,000 --> 00:01:10,000\nand so the dictionary ranks,\n\n29\n00:01:10,000 --> 00:01:12,000\nwe want to initialize with those values. \n\n30\n00:01:12,000 --> 00:01:16,000\nSo we're going to create and empty dictionary--we'll call it ranks.\n\n31\n00:01:16,000 --> 00:01:20,000\nThe number of pages--the number of pages, we can get from the graph.\n\n32\n00:01:20,000 --> 00:01:22,000\nThe graph has a dictionary of nodes \n\n33\n00:01:22,000 --> 00:01:25,000\nand len(graph) will tell us the number of entries in that dictionary. \n\n34\n00:01:25,000 --> 00:01:28,000\nSo that's the number of nodes in the graph,\n\n35\n00:01:28,000 --> 00:01:30,000\nwhich is the number of pages that we crawled. \n\n36\n00:01:30,000 --> 00:01:32,000\nAnd now we want to go through the pages, \n\n37\n00:01:32,000 --> 00:01:37,000\ninitializing each page to the value, 1.0 / npages.\n\n38\n00:01:37,000 --> 00:01:39,000\nAnd I'm remembering to use 1.0 here,\n\n39\n00:01:39,000 --> 00:01:42,000\nto make sure the division is done as floating point division\n\n40\n00:01:42,000 --> 00:01:44,000\nand we get an accurate number, \n\n41\n00:01:44,000 --> 00:01:46,000\nrather than integer division. \n\n42\n00:01:46,000 --> 00:01:48,000\nSo now we've initialized the ranks.\n\n43\n00:01:48,000 --> 00:01:51,000\nWe have a dictionary that maps each page to its current rank, \n\n44\n00:01:51,000 --> 00:01:53,000\nwhich is the 1.0 / npages. \n\n45\n00:01:53,000 --> 00:01:55,000\nSo now we get to the interesting part.\n\n46\n00:01:55,000 --> 00:01:57,000\nWe need a loop \n\n47\n00:01:57,000 --> 00:01:59,000\nthat's going to go through \n\n48\n00:01:59,000 --> 00:02:02,000\nthe number of times of numloops.\n\n49\n00:02:02,000 --> 00:02:04,000\nEach time through this loop what we want to do \n\n50\n00:02:04,000 --> 00:02:06,000\nis update the newranks, \n\n51\n00:02:06,000 --> 00:02:09,000\nbased on this formula--using the oldranks.\n\n52\n00:02:09,000 --> 00:02:11,000\nAnd then, at the end of the loop, we're going to make \n\n53\n00:02:11,000 --> 00:02:14,000\nthe variable ranks hold what was previously newranks--\n\n54\n00:02:14,000 --> 00:02:16,000\nand that way we can keep going. \n\n55\n00:02:16,000 --> 00:02:18,000\nEach time, we're going to get a new value for newranks.\n\n56\n00:02:18,000 --> 00:02:20,000\nAt the end of doing all the updates\n\n57\n00:02:20,000 --> 00:02:24,000\nwe're going to update ranks to refer to whatever newranks did. \n\n58\n00:02:24,000 --> 00:02:26,000\nSo that means, each time through this loop, \n\n59\n00:02:26,000 --> 00:02:29,000\nwe're going to create a new dictionary, called newranks,\n\n60\n00:02:29,000 --> 00:02:31,000\nthat starts as empty \n\n61\n00:02:31,000 --> 00:02:34,000\nand we're going to add all the pages to newranks \n\n62\n00:02:34,000 --> 00:02:36,000\nas we update their rank.\n\n63\n00:02:36,000 --> 00:02:39,000\nSo to do that, we need to go through the pages in the graph,\n\n64\n00:02:39,000 --> 00:02:42,000\nand for each page, what we want to do is compute \n\n65\n00:02:42,000 --> 00:02:44,000\nthe newrank for that page. \n\n66\n00:02:44,000 --> 00:02:46,000\nAnd the first thing we'll do is this part--\n\n67\n00:02:46,000 --> 00:02:52,000\nThe newrank is: (1 - d) / npages plus this summation. \n\n68\n00:02:52,000 --> 00:02:55,000\nSo the first thing we'll do is introduce a new variable.\n\n69\n00:02:55,000 --> 00:02:58,000\nWe'll call it newrank, and we'll assign it to this value.\n\n70\n00:02:58,000 --> 00:03:00,000\nThen we're going to update it, as we go through \n\n71\n00:03:00,000 --> 00:03:04,000\nthe pages that link into this page. \n\n72\n00:03:04,000 --> 00:03:09,000\nSo we'll start by initializing newrank as (1 -d) / npages.\n\n73\n00:03:09,000 --> 00:03:12,000\nSo then what we need to do is update for the summation. \n\n74\n00:03:12,000 --> 00:03:15,000\nAnd I'm going to leave this blank, and I'm going to skip that for now.\n\n75\n00:03:15,000 --> 00:03:17,000\nThis is going to be left, as a quiz.\n\n76\n00:03:17,000 --> 00:03:19,000\nWe'll finish the rest of the code, \n\n77\n00:03:19,000 --> 00:03:21,000\nand then your quiz will be to finish this part of the code, \n\n78\n00:03:21,000 --> 00:03:26,000\nwhich is really the most interesting part of computing the Page Ranks. \n\n79\n00:03:26,000 --> 00:03:28,000\nOnce we've done that--so we use newrank as our variable\n\n80\n00:03:28,000 --> 00:03:30,000\nto keep track of the rank for this page.\n\n81\n00:03:30,000 --> 00:03:32,000\nBut we want to update our dictionary \n\n82\n00:03:32,000 --> 00:03:36,000\nso we're going to add an entry, newranks. \n\n83\n00:03:36,000 --> 00:03:38,000\nWe're still within the foreloop--you're going to \n\n84\n00:03:38,000 --> 00:03:41,000\nput your code that sums up all the links here.\n\n85\n00:03:41,000 --> 00:03:43,000\nOnce we've done that, \n\n86\n00:03:43,000 --> 00:03:46,000\nwe've got the value of newrank that reflects both \n\n87\n00:03:46,000 --> 00:03:49,000\nthe probability of starting from that page\n\n88\n00:03:49,000 --> 00:03:52,000\nand the popularity, from all the inlinks. \n\n89\n00:03:52,000 --> 00:03:54,000\nAnd so we'll update this to be newrank.\n\n90\n00:03:54,000 --> 00:03:56,000\nWe've added that to our dictionary.\n\n91\n00:03:56,000 --> 00:03:59,000\nSo once we've finished looping through all the pages in the graph--\n\n92\n00:03:59,000 --> 00:04:02,000\nwell now we're ready for the next step. \n\n93\n00:04:02,000 --> 00:04:05,000\nSo that means we want to make the variable, ranks,\n\n94\n00:04:05,000 --> 00:04:07,000\nrefer to the newranks--\n\n95\n00:04:07,000 --> 00:04:10,000\nso we've changed the time step to the next time step. \n\n96\n00:04:10,000 --> 00:04:12,000\nAnd now we're going to go back through this loop.\n\n97\n00:04:12,000 --> 00:04:15,000\nAnd we go through this loop the number of loops times.\n\n98\n00:04:15,000 --> 00:04:18,000\nEach time, we're updating the ranks and when we're done, \n\n99\n00:04:18,000 --> 00:04:22,000\nwhat we want to return is ranks--that's the dictionary that maps each page to its rank. \n\n", "id": 444005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY7bMbDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/449005", "type": "Nugget", "id": 449005}, {"nuggetType": "quiz", "name": "Circular Definitions", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY1LsbDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/450004", "type": "Nugget", "id": 450004}, {"nuggetType": "lecture", "name": "Circular Definitions Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "4510b406-b038-4120-833f-db62c88b2433", "name": "cs101_unit6_18_s_circular-definitions", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGK3yGww", "youtube_id": "Rtfs9vaf1JQ", "youtube_state": "processing", "path": "Course/cs101/Media/457005", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nSo the answer is no\n\n2\n00:00:03,000 --> 00:00:07,000\nthat even with any of these restrictions, \n\n3\n00:00:07,000 --> 00:00:09,000\nwe still don't have a good definition.\n\n4\n00:00:09,000 --> 00:00:11,000\nSo let's consider all the restrictions.\n\n5\n00:00:11,000 --> 00:00:14,000\nSo the first one was if everyone is friends with Alice.\n\n6\n00:00:14,000 --> 00:00:16,000\nSo that would only work if there are no other--\n\n7\n00:00:16,000 --> 00:00:18,000\nif they don't have any other friends.\n\n8\n00:00:18,000 --> 00:00:20,000\nLet's say this is Alice,\n\n9\n00:00:20,000 --> 00:00:22,000\nwe've got Bob and Charlie.\n\n10\n00:00:22,000 --> 00:00:24,000\nThey're both friends with Alice, \n\n11\n00:00:24,000 --> 00:00:26,000\nbut Bob is also friends with Charlie,\n\n12\n00:00:26,000 --> 00:00:29,000\nand Charlie is friends with Bob.\n\n13\n00:00:29,000 --> 00:00:32,000\nThat means that to figure out the popularity of Bob,\n\n14\n00:00:32,000 --> 00:00:34,000\nwe need to know the popularity of Charlie.\n\n15\n00:00:34,000 --> 00:00:37,000\nTo figure out the popularity of Charlie, we need to know the popularity of Alice\n\n16\n00:00:37,000 --> 00:00:39,000\nas well as the popularity of Bob.\n\n17\n00:00:39,000 --> 00:00:41,000\nSo we're never going to get to a solution,\n\n18\n00:00:41,000 --> 00:00:43,000\nwe're going to keep bouncing back and forth \n\n19\n00:00:43,000 --> 00:00:46,000\nbetween Bob and Charlie by doing this.\n\n20\n00:00:46,000 --> 00:00:49,000\nThe second choice, only if no one is friends with Alice.\n\n21\n00:00:49,000 --> 00:00:51,000\nWell, if no one is friends with Alice,\n\n22\n00:00:51,000 --> 00:00:54,000\nthat would remove these links and doesn't solve our problem.\n\n23\n00:00:54,000 --> 00:00:56,000\nWe're still not going to be able to give a \n\n24\n00:00:56,000 --> 00:00:58,000\npopularity score for Bob and Charlie.\n\n25\n00:00:58,000 --> 00:01:01,000\nThe third choice, only if there is a friendship path\n\n26\n00:01:01,000 --> 00:01:03,000\n from everyone in the graph that eventually reaches Alice.\n\n27\n00:01:03,000 --> 00:01:06,000\nSo adding this link would provide that property, \n\n28\n00:01:06,000 --> 00:01:08,000\nbut it still doesn't solve our problem.\n\n29\n00:01:08,000 --> 00:01:11,000\nIt doesn't give us a way to figure out the popularity of Charlie, \n\n30\n00:01:11,000 --> 00:01:13,000\nbecause to know that, we need to know the popularity of Bob,\n\n31\n00:01:13,000 --> 00:01:15,000\nwhich we need to know the popularity of Charlie for.\n\n32\n00:01:15,000 --> 00:01:18,000\nWe still end up in this cycle.\n\n33\n00:01:18,000 --> 00:01:20,000\nThe final choice seems possibly more promising.\n\n34\n00:01:20,000 --> 00:01:22,000\nIt says there are no cycles in the graph.\n\n35\n00:01:22,000 --> 00:01:25,000\nSo if we want to remove this cycle, \n\n36\n00:01:25,000 --> 00:01:28,000\nwe could do this.\n\n37\n00:01:28,000 --> 00:01:30,000\nIn this case, we'd be okay.\n\n38\n00:01:30,000 --> 00:01:32,000\nWe could figure out the popularity of Bob \n\n39\n00:01:32,000 --> 00:01:34,000\nby figuring out the popularity of Charlie,\n\n40\n00:01:34,000 --> 00:01:37,000\nwhich depends on the popularity of Alice.\n\n41\n00:01:37,000 --> 00:01:39,000\nWhere we're not okay,\n\n42\n00:01:39,000 --> 00:01:41,000\nis if Bob has another friend.\n\n43\n00:01:41,000 --> 00:01:43,000\nLet's say Bob is friends with Diana. \n\n44\n00:01:43,000 --> 00:01:45,000\nWell then to figure out the popularity of Diana, \n\n45\n00:01:45,000 --> 00:01:48,000\nwe need to know the popularity of Bob.\n\n46\n00:01:48,000 --> 00:01:52,000\nWhere it breaks down is, suppose we also have Diana and Edgar, \n\n47\n00:01:52,000 --> 00:01:54,000\nand Diana is friends with Edgar.\n\n48\n00:01:54,000 --> 00:01:57,000\nTo figure out the popularity score of Diana, \n\n49\n00:01:57,000 --> 00:01:59,000\nwe need to know the popularity score of Edgar.\n\n50\n00:01:59,000 --> 00:02:01,000\nWe don't have a cycle, but we don't have an answer either.\n\n51\n00:02:01,000 --> 00:02:03,000\nTo figure out the popularity of Edgar,\n\n52\n00:02:03,000 --> 00:02:05,000\nwe're going to go through Edgar's friends.\n\n53\n00:02:05,000 --> 00:02:07,000\nIn the way the Python code is written, \n\n54\n00:02:07,000 --> 00:02:09,000\nthis could actually work because if we \n\n55\n00:02:09,000 --> 00:02:12,000\ndefined popularity when you have no friends, \n\n56\n00:02:12,000 --> 00:02:14,000\nwell if the friends of P is empty, \n\n57\n00:02:14,000 --> 00:02:17,000\nwhen we go through those loope, the score is going to be zero.\n\n58\n00:02:17,000 --> 00:02:19,000\nSo if you answered there are no cycles,\n\n59\n00:02:19,000 --> 00:02:23,000\nthat's at least worth credit for this that could be correct.\n\n60\n00:02:23,000 --> 00:02:25,000\nIn terms of the mathematical definition, \n\n61\n00:02:25,000 --> 00:02:27,000\nit doesn't make very good sense. \n\n62\n00:02:27,000 --> 00:02:30,000\nWe still needed a way to know the popularity of Edgar.\n\n63\n00:02:30,000 --> 00:02:33,000\nWe stared to find things in this case to say if you have no friends,\n\n64\n00:02:33,000 --> 00:02:37,000\n your popularity score is zero, and the Python code will work for that.\n\n65\n00:02:37,000 --> 00:02:40,000\nBut it is not a good way to define popularity.\n\n66\n00:02:40,000 --> 00:02:44,000\nSo it's very arbitrary to say we're going to make Alice \n\n67\n00:02:44,000 --> 00:02:46,000\nthe one who's popularity score is predefined as one.\n\n68\n00:02:46,000 --> 00:02:49,000\nThere is nothing Alice could do to make herself more popular,\n\n69\n00:02:49,000 --> 00:02:52,000\nthat's not very fair to Alice, and it doesn't give us meaningful scores.\n\n", "id": 457005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY1bsbDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/450005", "type": "Nugget", "id": 450005}, {"nuggetType": "lecture", "name": "Counter", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "2dd738ca-d966-4661-96b2-068660a4594d", "name": "cs101_unit6_02_l_counter", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLnDGww", "youtube_id": "bByaFXmTF5M", "youtube_state": "processing", "path": "Course/cs101/Media/451001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\n[Evans] A word is just something that has meaning\n\n2\n00:00:03,000 --> 00:00:06,000\nthat speakers of the language will understand.\n\n3\n00:00:06,000 --> 00:00:08,000\nWe could define words as just what's in the dictionary,\n\n4\n00:00:08,000 --> 00:00:10,000\nand then there would be a clear answer for that.\n\n5\n00:00:10,000 --> 00:00:13,000\nBut certainly there are lots of things that are words that aren't in the dictionary.\n\n6\n00:00:13,000 --> 00:00:17,000\nAnd the important thing about words is we have rules for making new words.\n\n7\n00:00:17,000 --> 00:00:22,000\nFor example, we have a rule that says if we have a word,\n\n8\n00:00:22,000 --> 00:00:27,000\nwe can make a new word by adding counter in front of the old word.\n\n9\n00:00:28,000 --> 00:00:31,000\nI'm using the same notation that we used back in Unit 1.\n\n10\n00:00:31,000 --> 00:00:34,000\nThis is the BNF replacement grammar.\n\n11\n00:00:34,000 --> 00:00:39,000\nIf you need a refresher on this, please go back to the video that introduced that in Unit 1.\n\n12\n00:00:39,000 --> 00:00:42,000\nBut the basic property is that we can replace what's on the left side\n\n13\n00:00:42,000 --> 00:00:44,000\nwith what's on the right side.\n\n14\n00:00:44,000 --> 00:00:47,000\nSo any time we have a word, we can replace it with counter-word,\n\n15\n00:00:47,000 --> 00:00:51,000\nand the meaning of the new word is something that goes against the original word.\n\n16\n00:00:51,000 --> 00:00:55,000\nSo if we started with the word intelligence--\n\n17\n00:00:55,000 --> 00:00:59,000\nand I mean this in the sense of spycraft, not in terms of smarts--\n\n18\n00:00:59,000 --> 00:01:01,000\nthen we can use the rule.\n\n19\n00:01:01,000 --> 00:01:05,000\nWe could make the word counter-intelligence.\n\n20\n00:01:05,000 --> 00:01:09,000\nIntelligence was a word. We added counter in front of it to make counter-intelligence.\n\n21\n00:01:09,000 --> 00:01:13,000\nThat means trying to thwart intelligence from the enemy.\n\n22\n00:01:13,000 --> 00:01:15,000\nWe can use the rule again.\n\n23\n00:01:15,000 --> 00:01:21,000\nSo now this is a word, and we could replace this word with counter in front of that word.\n\n24\n00:01:21,000 --> 00:01:24,000\nWe get counter-counter-intelligence,\n\n25\n00:01:24,000 --> 00:01:28,000\nand that would be trying to thwart the enemy's counter-intelligence\n\n26\n00:01:28,000 --> 00:01:30,000\nthat's preventing you from getting intelligence.\n\n27\n00:01:30,000 --> 00:01:32,000\nAnd we could keep doing that.\n\n28\n00:01:32,000 --> 00:01:36,000\nWe could have counter-counter-counter-intelligence and so forth.\n\n29\n00:01:36,000 --> 00:01:40,000\nThese are words that once we get up to at least 3 counters\n\n30\n00:01:40,000 --> 00:01:45,000\nit's not something that's used before, but it's still something that has a sensible meaning.\n\n31\n00:01:45,000 --> 00:01:47,000\nWe could do this for other words.\n\n32\n00:01:47,000 --> 00:01:58,000\nWe saw that one of the very long words was this hippopotomonstrosesquippedaliophobia.\n\n33\n00:01:58,000 --> 00:02:02,000\nIf you knew that this word meant fear of long words,\n\n34\n00:02:02,000 --> 00:02:06,000\nand even if you've never seen the word counter in front of that before,\n\n35\n00:02:06,000 --> 00:02:23,000\nnow we can make the new word counter-hippopotomonstrosesquippedaliophobia.\n\n36\n00:02:23,000 --> 00:02:25,000\nQuite a mouthful.\n\n37\n00:02:25,000 --> 00:02:27,000\nBut even though you've never seen that word before--\n\n38\n00:02:27,000 --> 00:02:30,000\nand I expect most of you have never seen that word before--\n\n39\n00:02:30,000 --> 00:02:34,000\nyou could guess that this is something that goes against the fear of long words.\n\n40\n00:02:34,000 --> 00:02:38,000\nMaybe there's some new medication that cures people of this phobia.\n\n41\n00:02:38,000 --> 00:02:45,000\nYou could also figure out if there was a counter-counter-hippo and so forth phobia,\n\n42\n00:02:45,000 --> 00:02:50,000\nthat would be something that counteracts the counter-hippo,\n\n43\n00:02:50,000 --> 00:02:55,000\nand that might be something where this new drug doesn't work if you have too much coffee.\n\n44\n00:02:55,000 --> 00:02:59,000\nThen coffee would be a counter-counter-hippo so forth phobia.\n\n45\n00:02:59,000 --> 00:03:05,000\nSo the point is, because English has this rule that allows us to make new words\n\n46\n00:03:05,000 --> 00:03:08,000\nfrom old words, there's no such thing as the longest word.\n\n47\n00:03:08,000 --> 00:03:13,000\nWe could always make a longer word starting from any word that we have.\n\n48\n00:03:13,000 --> 00:03:16,000\nIf you remember how BNF grammars work,\n\n49\n00:03:16,000 --> 00:03:19,000\nthen you should be able to answer the next quiz.\n\n", "id": 451001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYocsbDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/452001", "type": "Nugget", "id": 452001}, {"nuggetType": "lecture", "name": "Counting Calls Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "9cde6528-b5ca-4434-877b-8f8f927eef6a", "name": "cs101_unit6_13_s_counting-calls", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIrQHAw", "youtube_id": "gC3Hbk50jIA", "youtube_state": "processing", "path": "Course/cs101/Media/469002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\n[Narrator] The answer is 13, \n\n2\n00:00:03,000 --> 00:00:06,000\nand the reason for this is quite interesting.\n\n3\n00:00:06,000 --> 00:00:09,000\nIf you look at the numbers we're getting so far, this was the number of calls.\n\n4\n00:00:09,000 --> 00:00:14,000\nIf you look at the answers we were getting so far, this is the number of calls for each number\n\n5\n00:00:14,000 --> 00:00:20,000\nso when we had Fibo 36, the number of calls was 1.\n\n6\n00:00:20,000 --> 00:00:26,000\nWhen the input was 35, the number of calls was also 1.\n\n7\n00:00:26,000 --> 00:00:31,000\nWhen the input was 34, the number of calls was 2.\n\n8\n00:00:31,000 --> 00:00:34,000\nWhen the input was 33, the number of calls was 3.\n\n9\n00:00:34,000 --> 00:00:38,000\nWhen the input was 32, the number of calls was 5.\n\n10\n00:00:38,000 --> 00:00:41,000\nWe should start to notice a pattern.\n\n11\n00:00:41,000 --> 00:00:45,000\nThis is exactly the Fibonacci series that we're computing here.\n\n12\n00:00:45,000 --> 00:00:50,000\nEvery time we decrease N by 1, so to get the number of calls for 32, \n\n13\n00:00:50,000 --> 00:00:57,000\nwe added the number of calls for 1 before and the number of calls for 2 before,\n\n14\n00:00:57,000 --> 00:01:04,000\nand if you look at the structure of this, it falls from the same rule that we had thinking about the number of rabbits reproducing \n\n15\n00:01:04,000 --> 00:01:10,000\nthat everyone that we have on the previous level leads to 2 more,\n\n16\n00:01:10,000 --> 00:01:14,000\nand that means as we do this addition, we have all the previous calls,\n\n17\n00:01:14,000 --> 00:01:18,000\nso we had 1 call at 34 at the previous level.\n\n18\n00:01:18,000 --> 00:01:21,000\nWe're going to produce 2 new calls, but the inputs are different, \n\n19\n00:01:21,000 --> 00:01:25,000\nbut if you look at the way the inputs are distributed, we have 2 + 1 here. \n\n20\n00:01:25,000 --> 00:01:29,000\nWe have 1 + 1 for 34.\n\n21\n00:01:29,000 --> 00:01:32,000\nWe have 2 + 1 for 33.\n\n22\n00:01:32,000 --> 00:01:38,000\nFor 32, we have 3--for 32, we have 2 +3; we have 5.\n\n23\n00:01:38,000 --> 00:01:41,000\nFor 31, we're going to have 8 calls,\n\n24\n00:01:41,000 --> 00:01:44,000\nand for 30, we're going to have 5 + 8, which is 13,\n\n25\n00:01:44,000 --> 00:01:46,000\nand this will keep going.\n\n26\n00:01:46,000 --> 00:01:49,000\nThese numbers will get quite big very fast,\n\n27\n00:01:49,000 --> 00:01:55,000\nand the number of calls that we need, every time we evaluate Fibo 36,\n\n28\n00:01:55,000 --> 00:01:58,000\nto evaluate the number of calls when we started with 36,\n\n29\n00:01:58,000 --> 00:02:04,000\nthat's going to be the result of Fibo 36-N-1.\n\n30\n00:02:04,000 --> 00:02:11,000\nThe number of calls we'll need to Fibo 2 in evaluating Fibo 36 will be Fibo 33 call,\n\n31\n00:02:11,000 --> 00:02:13,000\nand we don't know what that number is yet \n\n32\n00:02:13,000 --> 00:02:20,000\nbecause when we tried to evaluate Fibonacci 36 using our recursive definition our evaluator timed out.\n\n33\n00:02:20,000 --> 00:02:24,000\nSo, we're in big trouble if we want to figure out how many calls there are\n\n34\n00:02:24,000 --> 00:02:28,000\nwe need a more efficient way of computing Fibonacci numbers.\n\n35\n00:02:28,000 --> 00:02:32,000\nLet's see if we can do that, and the reason this was so inefficient\n\n36\n00:02:32,000 --> 00:02:34,000\nis because we're doing all this redundant work.\n\n37\n00:02:34,000 --> 00:02:40,000\nAll right, we saw that to compute Fibonacci 36, well, we had to compute Fibonacci 35,\n\n38\n00:02:40,000 --> 00:02:42,000\nand we had to compute Fibonacci 34.\n\n39\n00:02:42,000 --> 00:02:46,000\nAll of this work computing Fibonacci 34,\n\n40\n00:02:46,000 --> 00:02:48,000\nwe did the same exact thing over here, right?\n\n41\n00:02:48,000 --> 00:02:50,000\nThis is producing the same output.\n\n42\n00:02:50,000 --> 00:02:53,000\nThere's tons and tons of redundant computations going on.\n\n43\n00:02:53,000 --> 00:02:57,000\nIf we're going to compute this more efficiently, we don't want to duplicate all that work.\n\n44\n00:02:57,000 --> 00:03:02,000\nWe need to do it in a way where we don't need to keep recomputing the same thing.\n\n45\n00:03:02,000 --> 00:03:09,000\nThe solution to this is instead of using a recursive procedure to compute Fibonacci,\n\n46\n00:03:09,000 --> 00:03:12,000\nwe're going to compute Fibonacci using a Y loop.\n\n47\n00:03:12,000 --> 00:03:18,000\nAnything that we can define recursively, we can also define without using our recursive definition.\n\n48\n00:03:18,000 --> 00:03:22,000\nIt's often much easier and cleaner to think about things with a recursive definition,\n\n49\n00:03:22,000 --> 00:03:25,000\nbut it's often not the fastest way to calculate things,\n\n50\n00:03:25,000 --> 00:03:29,000\nand certainly in this case because of all the redundant computation,\n\n51\n00:03:29,000 --> 00:03:32,000\nit's a very, very inefficient way to calculate Fibonacci.\n\n52\n00:03:32,000 --> 00:03:37,000\nLet's try to do this with a Y loop instead, and we'll make that a quiz.\n\n", "id": 469002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYossbDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/452002", "type": "Nugget", "id": 452002}, {"nuggetType": "quiz", "name": "Counter Quiz", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYitMbDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/453002", "type": "Nugget", "id": 453002}, {"nuggetType": "lecture", "name": "Bunnies Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "395136ea-86b9-4f2b-9e6a-be8ba6d90e59", "name": "cs101_unit6_11_s_bunnies", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJqhHAw", "youtube_id": "YjaADnNRSd0", "youtube_state": "done", "path": "Course/cs101/Media/463002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\n[Narrator] Here's one way to solve this.\n\n2\n00:00:03,000 --> 00:00:06,000\nWe're going to define a procedure Fibonacci, and we'll call the input N,\n\n3\n00:00:06,000 --> 00:00:10,000\nand now we need to write the code, and if we remember our definitions,\n\n4\n00:00:10,000 --> 00:00:15,000\nwe said Fibonacci of 0 is defined as 0.\n\n5\n00:00:15,000 --> 00:00:18,000\nFibonacci of 1 is defined as 1, \n\n6\n00:00:18,000 --> 00:00:27,000\nand Fibonacci of any higher number is defined as Fibonacci of N-1 + Fibonacci of N-2. \n\n7\n00:00:27,000 --> 00:00:31,000\nIf you remember the definition we have 2 base cases we need to consider.\n\n8\n00:00:31,000 --> 00:00:36,000\nIf the input value is 0 or the input value is 1, we need to do something special.\n\n9\n00:00:36,000 --> 00:00:39,000\nWe could write those as separate if statements.\n\n10\n00:00:39,000 --> 00:00:46,000\nIf N is equal to 0, what we want to do is return 0.\n\n11\n00:00:46,000 --> 00:00:50,000\nIf N is equal to 1, what we want to do is return 1.\n\n12\n00:00:50,000 --> 00:00:56,000\nOtherwise, what we want to do is the recursive part of the definition.\n\n13\n00:00:56,000 --> 00:01:05,000\nWe want to return the results of Fibonacci N-1, and we want to add that to Fibonacci N-2.\n\n14\n00:01:05,000 --> 00:01:09,000\nWe could simplify this a little bit; let's try this in the Python interpreter.\n\n", "id": 463002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYjNMbDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/453004", "type": "Nugget", "id": 453004}, {"nuggetType": "lecture", "name": "Counter Quiz", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "36a6debf-59b6-497d-82d3-1c2c0a1a4225", "name": "cs101_unit6_03_q_counter-quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPHaGww", "youtube_id": "B5_RppgGymc", "youtube_state": "done", "path": "Course/cs101/Media/454001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\n[Evans] The question is, if the only rule that we have for making words is this one,\n\n2\n00:00:03,000 --> 00:00:06,000\nthe one I showed you before where we have the nonterminal word\n\n3\n00:00:06,000 --> 00:00:11,000\nand that can be replaced by counter followed by another word,\n\n4\n00:00:11,000 --> 00:00:15,000\nthen the question is, how many words can we make starting from the nonterminal word?\n\n5\n00:00:15,000 --> 00:00:18,000\nAnd the possible answers are none;\n\n6\n00:00:18,000 --> 00:00:22,000\n1; 2; or infinitely many.\n\n", "id": 454001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY8tobDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/454002", "type": "Nugget", "id": 454002}, {"nuggetType": "program", "name": "Palindromes", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYq_IbDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/457003", "suppliedCode": "#Define a procedure is_palindrome, that takes as input a string, and returns a\r\n#Boolean indicating if the input string is a palindrome.\r\n\r\n#Base Case: '' => True\r\n#Recursive Case: if first and last characters don't match => False\r\n#if they do match, is middle palindrome?\r\n\r\ndef is_palindrome(s):\r\n\r\n    \r\n#print is_palindrome('')\r\n#>>> True\r\n#print is_palindrome('abab')\r\n#>>> False\r\n#print is_palindrome('abba')\r\n#>>> True", "type": "Nugget", "id": 457003}, {"nuggetType": "quiz", "name": "Expanding Our Grammar", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYkfobDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/458001", "type": "Nugget", "id": 458001}, {"nuggetType": "lecture", "name": "Ancestors Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "fc7dda9d-6de8-4bc9-9f3c-3a02331a6e0f", "name": "cs101_unit6_06_s_ancestors", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNriGww", "youtube_id": "urCqHuie8JM", "youtube_state": "processing", "path": "Course/cs101/Media/455002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\n[Evans] The best answer is the second choice.\n\n2\n00:00:03,000 --> 00:00:07,000\nThe first rule by itself is not sufficient,\n\n3\n00:00:07,000 --> 00:00:11,000\nand the reason the first rule doesn't work is that there's no base case.\n\n4\n00:00:11,000 --> 00:00:16,000\nWe can keep producing parent of ancestor and parent of parent of parent of ancestor,\n\n5\n00:00:16,000 --> 00:00:19,000\nbut we can never stop because there's no rule that defines ancestor\n\n6\n00:00:19,000 --> 00:00:22,000\nin terms of something other than itself.\n\n7\n00:00:22,000 --> 00:00:26,000\nThe second rule is a recursive definition that works.\n\n8\n00:00:26,000 --> 00:00:29,000\nIt says our parent is our ancestor,\n\n9\n00:00:29,000 --> 00:00:33,000\nand the parent of an ancestor is also my ancestor.\n\n10\n00:00:33,000 --> 00:00:37,000\nAnd so this will give us exactly the set of ancestors that we showed before--\n\n11\n00:00:37,000 --> 00:00:40,000\nthat it will be the parent, the parent of the parent,\n\n12\n00:00:40,000 --> 00:00:42,000\nthe parent of the parent of the parent,\n\n13\n00:00:42,000 --> 00:00:45,000\nthe parents of the parents of the parents of the parents and so forth\n\n14\n00:00:45,000 --> 00:00:47,000\ncovering all of our ancestors.\n\n15\n00:00:47,000 --> 00:00:50,000\nThe third choice will also produce that same set,\n\n16\n00:00:50,000 --> 00:00:55,000\nbut it has an unnecessary rule. We only need these 2 rules.\n\n17\n00:00:55,000 --> 00:01:00,000\nHere we've said parent, parent of parent, parent of parent of ancestor.\n\n18\n00:01:00,000 --> 00:01:03,000\nWe can still combine these rules to produce any word \n\n19\n00:01:03,000 --> 00:01:07,000\nthat is parent of parent of parent of any number of times ending in parent,\n\n20\n00:01:07,000 --> 00:01:09,000\nbut it's less elegant than the second answer\n\n21\n00:01:09,000 --> 00:01:14,000\nwhich only needs 2 rules to produce exactly the same set of ancestors.\n\n", "id": 455002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY-oEcDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/459002", "type": "Nugget", "id": 459002}, {"nuggetType": "lecture", "name": "Faster Fibonacci Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "c1274cc6-df1c-4f1f-99f6-2243d3fb2c37", "name": "cs101_unit6_14_s_faster-fibonacci", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGI3TGww", "youtube_id": "foIxhoqpQN4", "youtube_state": "processing", "path": "Course/cs101/Media/453005", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Narrator] Here's a way to define Fibonacci iteratively. \n\n2\n00:00:04,000 --> 00:00:08,000\nWe're going to avoid all the redundant computation by keeping track as we go,\n\n3\n00:00:08,000 --> 00:00:12,000\nand we're going to have 2 variables, and I'm going to do this in a slightly strange way,\n\n4\n00:00:12,000 --> 00:00:14,000\nand the reason for this will become clear soon.\n\n5\n00:00:14,000 --> 00:00:20,000\nI want to make it so we can get the right answer when N is 0, and when N is 1, without having special cases.\n\n6\n00:00:20,000 --> 00:00:23,000\nInstead of keeping track of the previous 2,\n\n7\n00:00:23,000 --> 00:00:28,000\nI'm going to keep track of the current one and the imaginary one that's going to be after that,\n\n8\n00:00:28,000 --> 00:00:35,000\nand we know that the first 2 Fibonacci numbers are 0 and 1, so we'll use current is 0,\n\n9\n00:00:35,000 --> 00:00:40,000\nand the next one, we'll call after, is 1, so that's the one after the one that we're currently doing,\n\n10\n00:00:40,000 --> 00:00:45,000\nand now we have a loop so we're going to go from I in the range from 0 to N.\n\n11\n00:00:45,000 --> 00:00:50,000\nWe're looking for Fibonacci number N that means we want to start at 0.\n\n12\n00:00:50,000 --> 00:00:55,000\nThe current value is the value for Fibonacci 0 and after is the value for Fibonacci 1,\n\n13\n00:00:55,000 --> 00:00:59,000\nand as we go through the loop we'll keep updating those,\n\n14\n00:00:59,000 --> 00:01:02,000\nand we want to update them by following the recursive rule,\n\n15\n00:01:02,000 --> 00:01:07,000\nand that means that the new value of current is the current value of after,\n\n16\n00:01:07,000 --> 00:01:11,000\nand the new value of after is the sum of those 2 is current + after.\n\n17\n00:01:11,000 --> 00:01:16,000\nWe can do that with a multiple assignment that will save us from needing a temporary variable. \n\n18\n00:01:16,000 --> 00:01:19,000\nWe can assign current and after to their new values.\n\n19\n00:01:19,000 --> 00:01:22,000\nThe new value of current is the current value of after, \n\n20\n00:01:22,000 --> 00:01:29,000\nand the new value of after is current + after.\n\n21\n00:01:29,000 --> 00:01:31,000\nThis is the place where a multiple assignment comes in handy.\n\n22\n00:01:31,000 --> 00:01:37,000\nIf we didn't use a multiple assignment, we'd have to use a temporary value to keep track of one of these while we do the assignments,\n\n23\n00:01:37,000 --> 00:01:43,000\nbut with multiple assignment we get both of these values first and then we assign them to the 2 variables on the left side.\n\n24\n00:01:43,000 --> 00:01:49,000\nThat's all we need and then after the loop we should return the value of current,\n\n25\n00:01:49,000 --> 00:01:54,000\nwhich is the current Fibonacci number if we're looking for Fibonacci N.\n\n26\n00:01:54,000 --> 00:01:59,000\nLet's try that; we should be able to see Fibonacci 0,\n\n27\n00:01:59,000 --> 00:02:04,000\nand the result should be 0, and that's what we get because that's the value of current.\n\n28\n00:02:04,000 --> 00:02:07,000\nWhen the range is from 0 to 0 we don't go through the loop at all.\n\n29\n00:02:07,000 --> 00:02:09,000\nWe get the value 1.\n\n30\n00:02:09,000 --> 00:02:13,000\nLet's check Fibonacci 1,\n\n31\n00:02:13,000 --> 00:02:16,000\nand we run this, and we get the value 1,\n\n32\n00:02:16,000 --> 00:02:20,000\nwhich is also what we expect, and we got that because we went through the loop once\n\n33\n00:02:20,000 --> 00:02:24,000\nassigning the value of after, which started as 1, to current,\n\n34\n00:02:24,000 --> 00:02:28,000\nand that's what we return is the value of current, and we can keep going.\n\n35\n00:02:28,000 --> 00:02:35,000\nWe'll try Fibonacci 2, and that's also 1 as we expect,\n\n36\n00:02:35,000 --> 00:02:43,000\nand Fibonacci 3 should be 1+1 gets us 2 and so forth.\n\n37\n00:02:43,000 --> 00:02:46,000\nOkay, so this looks like it's working.\n\n38\n00:02:46,000 --> 00:02:50,000\nWe've tried a few simple ones; let's try Fibonacci 33.\n\n39\n00:02:50,000 --> 00:02:56,000\nWe computed--we estimated in the earlier quiz in order to compute Fibonacci 36,\n\n40\n00:02:56,000 --> 00:03:02,000\nwe would need Fibonacci 33 calls using the previous recursive definition.\n\n41\n00:03:02,000 --> 00:03:04,000\nWhy did it take so long for that code to run?\n\n42\n00:03:04,000 --> 00:03:09,000\nWhat's the value of Fibonacci 33, and that's what it is.\n\n43\n00:03:09,000 --> 00:03:12,000\nIt's 3.5 million calls,\n\n44\n00:03:12,000 --> 00:03:16,000\nand so even with a processor that's doing a billion instructions a second,\n\n45\n00:03:16,000 --> 00:03:19,000\ndoing 3.5 million recursive calls takes quite awhile.\n\n46\n00:03:19,000 --> 00:03:24,000\nEach time through the call is many more than just 1 instruction, it's many thousands of instructions\n\n47\n00:03:24,000 --> 00:03:27,000\nso this starts to take enough time that we didn't see the result,\n\n48\n00:03:27,000 --> 00:03:32,000\nand it wasn't only those Fibonacci 33 calls to Fibonacci 2.\n\n49\n00:03:32,000 --> 00:03:35,000\nWe had all the other things that we had to do to get Fibonacci 36,\n\n50\n00:03:35,000 --> 00:03:43,000\nbut let's see that now we have our faster iterative definition of Fibonacci that isn't doing all that duplicate work\n\n51\n00:03:43,000 --> 00:03:48,000\nthat we can compute Fibonacci 36, and so that gives us this value \n\n52\n00:03:48,000 --> 00:03:52,000\nindicating that there would be about 15 million rabbits after 3 years\n\n53\n00:03:52,000 --> 00:03:55,000\nusing Fibonacci's model.\n\n54\n00:03:55,000 --> 00:03:59,000\nLet's try what we'd have after 5 years.\n\n55\n00:03:59,000 --> 00:04:05,000\nPassing in 60 months, and we get this starting to be quite a huge number.\n\n56\n00:04:05,000 --> 00:04:13,000\nTo try to relate to this, let's look at how long it would take for the mass of all the rabbits that are born \n\n57\n00:04:13,000 --> 00:04:15,000\nto exceed the mass of the Earth.\n\n58\n00:04:15,000 --> 00:04:24,000\nThe mass of the Earth is 5.9722 x 10 to the 24,\n\n59\n00:04:24,000 --> 00:04:27,000\nand that's in kilograms,\n\n60\n00:04:27,000 --> 00:04:30,000\nand I'm using the times time notation.\n\n61\n00:04:30,000 --> 00:04:32,000\nThis gives us a power.\n\n62\n00:04:32,000 --> 00:04:39,000\nThis is 10 to the power 24 that's 1 way to write 5.9 times 10 to the 24 kg.\n\n63\n00:04:39,000 --> 00:04:43,000\nJust to demonstrate the power notation, this is 2 to the power 10.\n\n64\n00:04:43,000 --> 00:04:46,000\nWe'll see the result as 1024.\n\n65\n00:04:46,000 --> 00:04:49,000\nThat's what we get by multiplying 2 x 2 x 2 x 2 ten times.\n\n66\n00:04:49,000 --> 00:04:57,000\nHere we're multiplying 10 by itself 24 times and that's a good estimate for the mass of the Earth.\n\n67\n00:04:57,000 --> 00:05:03,000\nNow to find out how many months it takes before the mass of the rabbits exceeds the mass of the Earth,\n\n68\n00:05:03,000 --> 00:05:07,000\nwe're going to have a 4 loop; we're going to loop from Fibonacci numbers \n\n69\n00:05:07,000 --> 00:05:11,000\nuntil we get to a number that exceeds the mass of the Earth.\n\n70\n00:05:11,000 --> 00:05:14,000\nWe also need to decide what a mass of a rabbit is,\n\n71\n00:05:14,000 --> 00:05:19,000\nand I'm going to assume that a rabbit weighs about 2 kg,\n\n72\n00:05:19,000 --> 00:05:23,000\nand that's a pretty good guess for how heavy a rabbit is.\n\n73\n00:05:23,000 --> 00:05:26,000\nThat's assuming of course a well-fed rabbit like we have today,\n\n74\n00:05:26,000 --> 00:05:32,000\nnot if the rabbits spread as fast as Fibonacci's model would suggest that they do.\n\n75\n00:05:32,000 --> 00:05:38,000\nWe'll write a loop to see when the mass of the rabbits exceeds the mass of the Earth.\n\n76\n00:05:38,000 --> 00:05:48,000\nWe'll start with N=1, and we're going to keep going until Fibonacci N exceeds the mass of the Earth.\n\n77\n00:05:48,000 --> 00:05:54,000\nWe'll go while Fibonacci N times the mass of the rabbit,\n\n78\n00:05:54,000 --> 00:05:59,000\nso Fibonacci N gives us the number of rabbits in month N times the mass of the rabbit,\n\n79\n00:05:59,000 --> 00:06:02,000\nand as long as that is less than the mass of the Earth,\n\n80\n00:06:02,000 --> 00:06:08,000\nthe Earth is still safe for humanity or at least there's some space for humans,\n\n81\n00:06:08,000 --> 00:06:12,000\nand every time through the loop will increase N by 1,\n\n82\n00:06:12,000 --> 00:06:15,000\nand at the end of the loop, we'll print out the value of N.\n\n83\n00:06:15,000 --> 00:06:24,000\nWe'll see where we got and let's also print out the value of Fibonacci N to see how big the Fibonacci number of that N is.\n\n84\n00:06:24,000 --> 00:06:31,000\nWe'll keep going through the loop as long as the Fibonacci of N x the mass of the rabbit is less than the mass of the Earth,\n\n85\n00:06:31,000 --> 00:06:36,000\nand once we stop the loop that means we've exceeded the mass of the Earth, and we'll see what the result is.\n\n86\n00:06:36,000 --> 00:06:40,000\nLet's try running that, and we get this result.\n\n87\n00:06:40,000 --> 00:06:48,000\nThe value of N is 119, so it would only take 119 months or just less than 10 years until the mass of the rabbits exceeds the mass of the Earth,\n\n88\n00:06:48,000 --> 00:06:52,000\nand this is the number of rabbits we would have then.\n\n89\n00:06:52,000 --> 00:06:56,000\nA pretty big number; you should be very afraid of all these rabbits.\n\n90\n00:06:56,000 --> 00:06:59,000\nThe good news is that Fibonacci's model is not actually correct,\n\n91\n00:06:59,000 --> 00:07:03,000\nthat this was a mathematical abstraction for rabbit reproduction.\n\n92\n00:07:03,000 --> 00:07:07,000\nReal rabbits actually die off after some point, and if there are too many rabbits,\n\n93\n00:07:07,000 --> 00:07:13,000\nthey don't have enough food so they don't keep growing like the Fibonacci numbers and take over the entire planet.\n\n94\n00:07:13,000 --> 00:07:16,000\nWe should be very afraid if Fibonacci's model is correct.\n\n95\n00:07:16,000 --> 00:07:19,000\nIt would only take 10 years for the rabbits to take over the entire planet,\n\n96\n00:07:19,000 --> 00:07:22,000\nand weigh more than the Earth does itself.\n\n97\n00:07:22,000 --> 00:07:26,000\nThe good news is it's not a very accurate model of how rabbits reproduce,\n\n98\n00:07:26,000 --> 00:07:29,000\nthat they don't live forever, and once there are too many rabbits,\n\n99\n00:07:29,000 --> 00:07:33,000\nthey start to run out of food so they stop reproducing and stop surviving.\n\n", "id": 453005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY-4EcDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/459003", "type": "Nugget", "id": 459003}, {"nuggetType": "lecture", "name": "Expanding Our Grammar Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "f81f9c15-f337-4183-8671-349a64c7031f", "name": "cs101_unit6_04_s_expanding-our-grammar", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPmBHAw", "youtube_id": "IxaYkF5H0ak", "youtube_state": "processing", "path": "Course/cs101/Media/459001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Evans] So now the answer is infinitely many.\n\n2\n00:00:04,000 --> 00:00:07,000\nAll we needed was these 2 rules and we can make infinitely many words.\n\n3\n00:00:07,000 --> 00:00:10,000\nThis is the power that recursive definitions give us.\n\n4\n00:00:10,000 --> 00:00:12,000\nUnlike the previous definition which was circular,\n\n5\n00:00:12,000 --> 00:00:15,000\nwhat we have now is what we call a recursive definition.\n\n6\n00:00:15,000 --> 00:00:18,000\nThat means we have defined word in terms of itself.\n\n7\n00:00:18,000 --> 00:00:20,000\nBut that's not the only way we've defined word.\n\n8\n00:00:20,000 --> 00:00:24,000\nWe also have this other rule that allows us to have a starting point,\n\n9\n00:00:24,000 --> 00:00:29,000\nthat there's 1 word that we have that's defined not in terms of itself.\n\n10\n00:00:29,000 --> 00:00:32,000\nSo here's how we can make infinitely many words using these rules.\n\n11\n00:00:32,000 --> 00:00:36,000\nWe can start with a nonterminal word.\n\n12\n00:00:36,000 --> 00:00:40,000\nLet's say we choose to use the first rule.\n\n13\n00:00:40,000 --> 00:00:47,000\nWe can replace word directly with our hippo word and we're done.\n\n14\n00:00:47,000 --> 00:00:49,000\nBut we had another option.\n\n15\n00:00:49,000 --> 00:00:54,000\nWe could have replaced word using the second rule with counter-word.\n\n16\n00:00:54,000 --> 00:00:58,000\nAnd if we replace this word using the second rule,\n\n17\n00:00:58,000 --> 00:01:03,000\nwe'll end up with the word counter-hippopotomonstrosesquippedaliophobia.\n\n18\n00:01:03,000 --> 00:01:05,000\nBut that's not the only choice.\n\n19\n00:01:05,000 --> 00:01:07,000\nWe could have chosen to use the first rule again,\n\n20\n00:01:07,000 --> 00:01:11,000\nand then we would replace this word with counter-word,\n\n21\n00:01:11,000 --> 00:01:15,000\nand so now we have counter-counter-word.\n\n22\n00:01:15,000 --> 00:01:18,000\nAgain we have the choice what to do with this word.\n\n23\n00:01:18,000 --> 00:01:23,000\nWe could use the second rule, replace it with the terminal,\n\n24\n00:01:23,000 --> 00:01:26,000\nand then we'll have counter-counter-hippo.\n\n25\n00:01:26,000 --> 00:01:29,000\nOr we could replace it using the first rule,\n\n26\n00:01:29,000 --> 00:01:33,000\nand then we'll have counter-counter-counter followed by word.\n\n27\n00:01:34,000 --> 00:01:37,000\nSo this can keep going as long as we want.\n\n28\n00:01:37,000 --> 00:01:41,000\nWe can produce all of these words with any number of counter--\n\n29\n00:01:41,000 --> 00:01:45,000\neither 0 repetitions of counter, 1, 2, 3, 4, as many as we want.\n\n30\n00:01:45,000 --> 00:01:48,000\nThat means we can produce infinitely many words.\n\n31\n00:01:48,000 --> 00:01:50,000\nSome of them are going to be pretty hard to pronounce.\n\n32\n00:01:50,000 --> 00:01:52,000\nActually, they're all pretty hard to pronounce.\n\n33\n00:01:52,000 --> 00:01:56,000\nBut there's no limit to the number of words we can produce this way.\n\n34\n00:01:56,000 --> 00:01:59,000\nSo this is what's called the recursive definition.\n\n35\n00:01:59,000 --> 00:02:03,000\nThe important thing that it has is 2 parts.\n\n36\n00:02:03,000 --> 00:02:06,000\nIt has a base case which is here.\n\n37\n00:02:07,000 --> 00:02:09,000\nThat's the stopping condition.\n\n38\n00:02:09,000 --> 00:02:13,000\nThat's something that says we have at least 1 word that we can define already\n\n39\n00:02:13,000 --> 00:02:16,000\nthat we don't need to define in terms of word.\n\n40\n00:02:16,000 --> 00:02:20,000\nAnd it has the recursive case that says we can define a word\n\n41\n00:02:20,000 --> 00:02:23,000\nin terms of another word.\n\n42\n00:02:23,000 --> 00:02:27,000\nAnd if we combine those 2, now we have a definition that can make infinitely many words.\n\n", "id": 459001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY4YkcDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/460001", "type": "Nugget", "id": 460001}, {"nuggetType": "lecture", "name": "Ancestors", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "33d7cf07-3f07-4ec5-b6b9-5f006a09ed51", "name": "cs101_unit6_06_q_ancestors", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJmhHAw", "youtube_id": "8TLAHShdPHA", "youtube_state": "processing", "path": "Course/cs101/Media/463001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Evans] The question we want to think about is how you could define who your ancestors are.\n\n2\n00:00:04,000 --> 00:00:09,000\nThe way to think about ancestors--well, here's you.\n\n3\n00:00:09,000 --> 00:00:13,000\nHopefully you're smiling because you're enjoying learning about recursive definitions.\n\n4\n00:00:13,000 --> 00:00:18,000\nYou had some parents. Let's assume you had 2.\n\n5\n00:00:18,000 --> 00:00:22,000\nWe won't assume whether or not your parents are smiling,\n\n6\n00:00:22,000 --> 00:00:24,000\nbut let's hope at least 1 of them is.\n\n7\n00:00:24,000 --> 00:00:29,000\nYour parents were your ancestors, but they're not all of your ancestors.\n\n8\n00:00:29,000 --> 00:00:34,000\nYour parents had parents as well. They're your grandparents.\n\n9\n00:00:34,000 --> 00:00:38,000\nGrandparents are always happy, so they're all smiling.\n\n10\n00:00:38,000 --> 00:00:42,000\nYour grandparents also had parents. Those would be your great-grandparents.\n\n11\n00:00:42,000 --> 00:00:44,000\nAnd so forth.\n\n12\n00:00:44,000 --> 00:00:48,000\nAnd all of these except yourself are your ancestors.\n\n13\n00:00:48,000 --> 00:00:51,000\nSo our goal now is to define that precisely.\n\n14\n00:00:51,000 --> 00:00:56,000\nCan we come up with a definition that describes exactly this same relationship--\n\n15\n00:00:56,000 --> 00:00:59,000\nall the ancestors that you have.\n\n16\n00:00:59,000 --> 00:01:02,000\nSo the question is, which of these is the best definition of ancestors?\n\n17\n00:01:02,000 --> 00:01:04,000\nThere are 3 choices. \n\n18\n00:01:04,000 --> 00:01:07,000\nThe first has 1 rule: ancestor is replaced by parent of ancestor.\n\n19\n00:01:07,000 --> 00:01:11,000\nThe second has 2 rules: ancestor is replaced by parent;\n\n20\n00:01:11,000 --> 00:01:14,000\nand ancestor is replaced by parent of the ancestor.\n\n21\n00:01:14,000 --> 00:01:18,000\nThe third has 3 rules: ancestor is replaced by parent;\n\n22\n00:01:18,000 --> 00:01:21,000\nancestor is replaced by parent of parent;\n\n23\n00:01:21,000 --> 00:01:24,000\nand ancestor is replaced by parent of parent of the ancestor.\n\n", "id": 463001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY4okcDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/460002", "type": "Nugget", "id": 460002}, {"nuggetType": "lecture", "name": "Urank", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "e6a47970-0602-4a4a-be96-c24a73024a75", "name": "cs101_unit6_22_l_urank", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJuhHAw", "youtube_id": "TdLOEJHd6WI", "youtube_state": "processing", "path": "Course/cs101/Media/463003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nSo the goal for the rest of this unit is to modify our search engine code,\n\n2\n00:00:04,000 --> 00:00:07,000\nto implement the PageRank algorithm.\n\n3\n00:00:07,000 --> 00:00:09,000\nWe have one little problem.\n\n4\n00:00:09,000 --> 00:00:15,000\nPageRank is a registered trademark of Google, so we're not going to call our algorithm PageRank,\n\n5\n00:00:15,000 --> 00:00:17,000\neven though we'll do the same thing.\n\n6\n00:00:17,000 --> 00:00:20,000\nWe'll call it URank.\n\n7\n00:00:20,000 --> 00:00:23,000\nThe first thing we need to be able to do to implement this ranking algorithm\n\n8\n00:00:23,000 --> 00:00:26,000\nis keep track of the link graph.\n\n9\n00:00:26,000 --> 00:00:31,000\nSo our popularity of pages depends on the link structure.\n\n10\n00:00:31,000 --> 00:00:35,000\nSo that means we need to keep track of what pages link to what pages.\n\n11\n00:00:35,000 --> 00:00:40,000\nSo for each link, there's a connection between pages.\n\n12\n00:00:40,000 --> 00:00:42,000\nAnd we can think of that as a graph.\n\n13\n00:00:42,000 --> 00:00:45,000\nAbstractly a graph is just a set of nodes.\n\n14\n00:00:45,000 --> 00:00:50,000\nWe'll draw those as circles with edges between the nodes.\n\n15\n00:00:50,000 --> 00:00:54,000\nAnd because our edges go one way, just like links in a page,\n\n16\n00:00:54,000 --> 00:00:57,000\nwe call this a directed graph.\n\n17\n00:00:57,000 --> 00:01:02,000\nSo in order to represent our web link structure, we need to build a directed graph.\n\n18\n00:01:02,000 --> 00:01:05,000\nThe pages in the graph are the nodes.\n\n19\n00:01:05,000 --> 00:01:08,000\nFor each page, we need to keep track of the edges\n\n20\n00:01:08,000 --> 00:01:11,000\nthat connect that node to other nodes.\n\n21\n00:01:11,000 --> 00:01:16,000\nAnd so the way we're going to do this is to keep a dictionary.\n\n22\n00:01:16,000 --> 00:01:21,000\nSo, we're going to have a dictionary where the entries in the dictionary are the node, which is the URL.\n\n23\n00:01:21,000 --> 00:01:23,000\nThat's the page.\n\n24\n00:01:23,000 --> 00:01:27,000\nAnd for each URL, we'll have a list of all the pages that it links to.\n\n25\n00:01:27,000 --> 00:01:33,000\nSo if this was, say, node A and these were nodes B, C, and D,\n\n26\n00:01:33,000 --> 00:01:36,000\nour entry for node A would contain the list B, C, D,\n\n27\n00:01:36,000 --> 00:01:39,000\nand our entry for node B--\n\n28\n00:01:39,000 --> 00:01:44,000\nWell, there are no edges out of B, so it would be an empty list.\n\n29\n00:01:44,000 --> 00:01:49,000\nAnd finishing the example, C has an outlink to one node,\n\n30\n00:01:49,000 --> 00:01:52,000\nand D has not outlinks.\n\n31\n00:01:52,000 --> 00:01:59,000\nSo that's our goal. We want to build a structure like this that shows the structure of the web pages that we crawl.\n\n32\n00:01:59,000 --> 00:02:03,000\nAnd we see that structure because we're following the links in our crawler.\n\n33\n00:02:03,000 --> 00:02:10,000\nSo our goal is to modify the crawl_web procedure that we defined at the end of unit 5\n\n34\n00:02:10,000 --> 00:02:15,000\nand to modify it so instead of just producing an index, it also produces a graph.\n\n35\n00:02:15,000 --> 00:02:20,000\nSo we're going to modify crawl_web. It's still going to take a seed page as its start.\n\n36\n00:02:20,000 --> 00:02:24,000\nBut what it's going to produce now is both an index and a graph,\n\n37\n00:02:24,000 --> 00:02:30,000\nand the graph is a structure that gives the mapping from each node to the pages that it links to.\n\n38\n00:02:30,000 --> 00:02:35,000\nSo let's look at the code that we had at the end of unit 5 and see how we need to change that. \n\n39\n00:02:35,000 --> 00:02:39,000\nSo here's the code that we had at the end of unit 5 for crawling the web.\n\n40\n00:02:39,000 --> 00:02:44,000\nAnd as a reminder, we're keeping track of the pages left to crawl in the list tocrawl\n\n41\n00:02:44,000 --> 00:02:46,000\nstarting with the seed page.\n\n42\n00:02:46,000 --> 00:02:48,000\nAnd we're building up the index as a dictionary.\n\n43\n00:02:48,000 --> 00:02:50,000\nAnd as long as there are more pages left to crawl,\n\n44\n00:02:50,000 --> 00:02:56,000\nwe go through the Y loop, which finds a page to crawl, popping fill list pages to crawl.\n\n45\n00:02:56,000 --> 00:02:58,000\nAs long as it's one we haven't crawled before,\n\n46\n00:02:58,000 --> 00:03:01,000\nit gets the content from that page; it adds it to the index.\n\n47\n00:03:01,000 --> 00:03:05,000\nIt finds all the links using get_all_links, passing in the content on the page\n\n48\n00:03:05,000 --> 00:03:08,000\nand unions those with tocrawl to update the tocrawl list,\n\n49\n00:03:08,000 --> 00:03:12,000\nand then it appends this page to the list of pages that have already been crawled.\n\n50\n00:03:12,000 --> 00:03:18,000\nSo to change this to build a graph, we're going to keep most of the code the same.\n\n51\n00:03:18,000 --> 00:03:21,000\nIn addition to producing just the index, we're going to produce a graph,\n\n52\n00:03:21,000 --> 00:03:24,000\nand the graph is also going to be a dictionary.\n\n53\n00:03:24,000 --> 00:03:27,000\nAnd the reason the graph is a dictionary is that the mapping from nodes,\n\n54\n00:03:27,000 --> 00:03:31,000\nwhich are URLs, to the list of edges that go out from that node.\n\n55\n00:03:31,000 --> 00:03:34,000\nSo we'll create the graph as an empty dictionary,\n\n56\n00:03:34,000 --> 00:03:37,000\nand as we find new pages, we're going to add them to the graph.\n\n57\n00:03:37,000 --> 00:03:42,000\nAnd we're going to also change the return to return both the index and the graph.\n\n58\n00:03:42,000 --> 00:03:45,000\nI'm going to make one more change before we give you a quiz,\n\n59\n00:03:45,000 --> 00:03:49,000\nand the change I'm going to make is instead of calling get_all_links here,\n\n60\n00:03:49,000 --> 00:03:55,000\nsince both the graph building and the tocrawl list depend on knowing all the links,\n\n61\n00:03:55,000 --> 00:03:59,000\nwe're going to create a new variable, and we'll assign the result of get_all_links content\n\n62\n00:03:59,000 --> 00:04:01,000\nto that variable.\n\n63\n00:04:01,000 --> 00:04:05,000\nthat means we can use those links as the input to content,\n\n64\n00:04:05,000 --> 00:04:08,000\nbut we can also use them to build the graph.\n\n65\n00:04:08,000 --> 00:04:13,000\nAnd I'm going to leave the line that we need to build the graph for you to complete.\n\n66\n00:04:13,000 --> 00:04:16,000\nSo we'll make that a quiz, to finish this code.\n\n67\n00:04:16,000 --> 00:04:18,000\nWrite the line that we need to update the graph.\n\n", "id": 463003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY5IkcDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/460004", "type": "Nugget", "id": 460004}, {"nuggetType": "lecture", "name": "Faster Fibonacci", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "cb3d0556-3b82-41b1-9d02-960fb339db45", "name": "cs101_unit6_14_p_faster-fibonacci", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOOJHAw", "youtube_id": "OkV6r1-h6mg", "youtube_state": "uploading", "path": "Course/cs101/Media/460003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Narrator] The goal is to define a faster Fibonacci procedure,\n\n2\n00:00:04,000 --> 00:00:07,000\nfast enough to enable us to compute Fibonacci 36 that would estimate,\n\n3\n00:00:07,000 --> 00:00:12,000\nat least according to Fibonacci's model, how many rabbits there will be in 3 months,\n\n4\n00:00:12,000 --> 00:00:15,000\nand I'm going to give you a little hint for how to do this.\n\n5\n00:00:15,000 --> 00:00:19,000\nWe're going to want a Y loop, and the loop is going to go up to N,\n\n6\n00:00:19,000 --> 00:00:22,000\nbut within the loop, you're going to need to keep track of 2 things.\n\n7\n00:00:22,000 --> 00:00:26,000\nYou're going to need to keep track of the 2 previous Fibonacci numbers,\n\n8\n00:00:26,000 --> 00:00:30,000\nand instead of going backwards the way the recursive definition did,\n\n9\n00:00:30,000 --> 00:00:33,000\nwe started with our base cases, with 0 and 1,\n\n10\n00:00:33,000 --> 00:00:38,000\nand then we defined every previous case by adding the previous 2.\n\n11\n00:00:38,000 --> 00:00:44,000\nTo compute this with a Y loop, if we keep track of the previous 2 N variables,\n\n12\n00:00:44,000 --> 00:00:48,000\nthen you can compute the next one by adding those, and then what you got to figure out \n\n13\n00:00:48,000 --> 00:00:51,000\nis how to keep up to date the variables to know what the previous 2 are \n\n14\n00:00:51,000 --> 00:00:54,000\neach time you go through the loop.\n\n15\n00:00:54,000 --> 00:00:57,000\nSee if you can figure out how to define Fibonacci yourself.\n\n16\n00:00:57,000 --> 00:01:01,000\nTest it on some of the smaller numbers before trying it on Fibonacci 36,\n\n17\n00:01:01,000 --> 00:01:04,000\nbut if you define it this way, you should be able to compute Fibonacci numbers\n\n18\n00:01:04,000 --> 00:01:08,000\nfor much higher inputs then we could with our recursive definition.\n\n", "id": 460003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYypEcDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/461002", "type": "Nugget", "id": 461002}, {"nuggetType": "lecture", "name": "Recursive Definitions", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "221bc78f-76c5-4a62-b473-cff63ae12d96", "name": "cs101_unit6_05_l_recursive-definitions", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKryGww", "youtube_id": "sNJQrtGD1Nc", "youtube_state": "done", "path": "Course/cs101/Media/457002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\n[Evans] This works for things other than words.\n\n2\n00:00:03,000 --> 00:00:06,000\nThe place where you've seen it the most so far has been in language,\n\n3\n00:00:06,000 --> 00:00:09,000\nbut we're also going to see how to use it to make procedures,\n\n4\n00:00:09,000 --> 00:00:11,000\nand you'll also see how to use it in later classes\n\n5\n00:00:11,000 --> 00:00:13,000\nhow to define data structures.\n\n6\n00:00:13,000 --> 00:00:16,000\nThere are lots and lots of different things in computing that are defined recursively.\n\n7\n00:00:16,000 --> 00:00:19,000\nA recursive definition has 2 parts.\n\n8\n00:00:19,000 --> 00:00:22,000\nIt has the base case.\n\n9\n00:00:22,000 --> 00:00:25,000\nIn our example with the word, that was the second rule.\n\n10\n00:00:25,000 --> 00:00:29,000\nAnd the base case we can think of as a starting point.\n\n11\n00:00:29,000 --> 00:00:35,000\nThe important thing about the base case is it's not defined in terms of itself.\n\n12\n00:00:35,000 --> 00:00:39,000\nIt has to be something where we already know how to define it.\n\n13\n00:00:39,000 --> 00:00:43,000\nSo for programs it's usually going to be the smallest input\n\n14\n00:00:43,000 --> 00:00:46,000\nor one of the simplest inputs--something where we already know the answer,\n\n15\n00:00:46,000 --> 00:00:50,000\nwe don't have to do any computation to figure it out.\n\n16\n00:00:50,000 --> 00:00:52,000\nThe second part is the recursive case,\n\n17\n00:00:52,000 --> 00:00:55,000\nand that is defined in terms of itself.\n\n18\n00:00:57,000 --> 00:01:00,000\nBut it shouldn't be defined in terms of itself exactly,\n\n19\n00:01:00,000 --> 00:01:03,000\nit should be defined in terms of some sort of smaller version of itself.\n\n20\n00:01:03,000 --> 00:01:07,000\nWe need to make progress to eventually get to the base case.\n\n21\n00:01:07,000 --> 00:01:10,000\nWe'll see what that means in programs soon.\n\n22\n00:01:10,000 --> 00:01:13,000\nFirst we're going to try one other example not in terms of a program\n\n23\n00:01:13,000 --> 00:01:17,000\njust to get a better sense for how things can be defined recursively.\n\n", "id": 457002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYsZkcDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/462001", "type": "Nugget", "id": 462001}, {"nuggetType": "lecture", "name": "Divide And Be Conquered", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "3f448b9c-9c54-436d-b652-7b351b4dc490", "name": "cs101_unit6_12_l_divide-and-be-conquered", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMqUGww", "youtube_id": "6Hu9vH5Pru4", "youtube_state": "done", "path": "Course/cs101/Media/445002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\n[Narrator] We're going to define Fibonacci.\n\n2\n00:00:03,000 --> 00:00:07,000\nHere's our definition and let's try this out.\n\n3\n00:00:07,000 --> 00:00:11,000\nWe'll print the result of Fibonacci 0 first.\n\n4\n00:00:11,000 --> 00:00:14,000\nWe should get 0, which we do.\n\n5\n00:00:14,000 --> 00:00:17,000\nWe'll try Fibonacci 1.\n\n6\n00:00:17,000 --> 00:00:20,000\nWe get 1, so we've seen our 2 base cases.\n\n7\n00:00:20,000 --> 00:00:25,000\nNow, when we do Fibonacci 2, what we should get is the result of Fibonacci 1,\n\n8\n00:00:25,000 --> 00:00:32,000\nwhich is 1 + Fibonacci 2-2, which is Fibonacci 0, which is 0.\n\n9\n00:00:32,000 --> 00:00:40,000\nWe should get 1, again, which we do, and now let's try printing Fibonacci 3.\n\n10\n00:00:40,000 --> 00:00:49,000\nWe get 2, and if we print Fibonacci 4, we should get 1 + 2, which is 3, which we get,\n\n11\n00:00:49,000 --> 00:00:56,000\nand if we try 5, we should get 2 + 3, which is 5,\n\n12\n00:00:56,000 --> 00:01:02,000\nand let's try something a little bigger.\n\n13\n00:01:02,000 --> 00:01:05,000\nLet's try Fibonacci 10.\n\n14\n00:01:05,000 --> 00:01:08,000\nWe get 55.\n\n15\n00:01:08,000 --> 00:01:12,000\nWe'll try Fibonacci 25.\n\n16\n00:01:12,000 --> 00:01:14,000\nWe'll try Fibonacci 24.\n\n17\n00:01:14,000 --> 00:01:17,000\nIf we're counting months that would be the number of rabbits in 2 years,\n\n18\n00:01:17,000 --> 00:01:20,000\nand we get 46,000, \n\n19\n00:01:20,000 --> 00:01:26,000\nand let's try in 3 years our program times out.\n\n20\n00:01:26,000 --> 00:01:29,000\nI'm going to try this soon in the Python interpreter.\n\n21\n00:01:29,000 --> 00:01:31,000\nWe'll see if we can do slightly bigger ones,\n\n22\n00:01:31,000 --> 00:01:37,000\nbut the time it takes to solve Fibonacci this way is very long,\n\n23\n00:01:37,000 --> 00:01:42,000\nand the reason for that is because we're doing lots and lots of redundant calculation.\n\n24\n00:01:42,000 --> 00:01:45,000\nIf we look at what our code is doing,\n\n25\n00:01:45,000 --> 00:01:48,000\nevery time we call Fibonacci N\n\n26\n00:01:48,000 --> 00:01:54,000\nwhat's happening is we're calling Fibonacci N-1, and we're calling Fibonacci N-2.\n\n27\n00:01:54,000 --> 00:01:56,000\nWe're starting--we're calling Fibonacci 36.\n\n28\n00:01:56,000 --> 00:02:00,000\nThat was the example where the interpreter didn't finish,\n\n29\n00:02:00,000 --> 00:02:13,000\nand what we'll get is that's going to be broken down into calling Fibonacci 35 + the result that we get from calling Fibonacci 34.\n\n30\n00:02:13,000 --> 00:02:18,000\nEach of those is another called the Fibonacci.\n\n31\n00:02:18,000 --> 00:02:24,000\nThe call to Fibonacci 35, well, that will be broken into calling Fibonacci 34 \n\n32\n00:02:24,000 --> 00:02:29,000\nand adding that result to what we get from calling Fibonacci 33,\n\n33\n00:02:29,000 --> 00:02:34,000\nand when we do Fibonacci 34 here, well, that's going to be turned into \n\n34\n00:02:34,000 --> 00:02:40,000\ncalling Fibonacci 33 and adding the result to Fibonacci 32.\n\n35\n00:02:40,000 --> 00:02:43,000\nOkay, so I think you get the idea.\n\n36\n00:02:43,000 --> 00:02:46,000\nWe're going to do lots and lots of calculations here,\n\n37\n00:02:46,000 --> 00:02:50,000\nand we haven't got close to getting down to Fibo 1 or Fibo 0,\n\n38\n00:02:50,000 --> 00:02:53,000\nwhich is the only places that we stopped.\n\n39\n00:02:53,000 --> 00:03:01,000\nIf we look at the number of times we have to evaluate Fibo 32, let's pick that one, so Fibonacci 32.\n\n40\n00:03:01,000 --> 00:03:04,000\nWe have to evaluate it once here; we have to evaluate it once here, \n\n41\n00:03:04,000 --> 00:03:09,000\nonce here, once here, and one more time.\n\n42\n00:03:09,000 --> 00:03:13,000\nWe need to evaluate Fibonacci 32, 1, 2, 3, 4, 5 times.\n\n43\n00:03:13,000 --> 00:03:21,000\nThe number of times we had to evaluate Fibonacci 33 was 1, 2, 3 times.\n\n44\n00:03:21,000 --> 00:03:29,000\nThe number of times we had to evaluate Fibonacci 34 was 2 times,\n\n45\n00:03:29,000 --> 00:03:33,000\nand the number of times we had to evaluate Fibonacci 35 was 1 time,\n\n46\n00:03:33,000 --> 00:03:39,000\nand the number of times we had to evaluate Fibonacci 36 was 1 time.\n\n47\n00:03:39,000 --> 00:03:42,000\nMaybe you can see a pattern here.\n\n48\n00:03:42,000 --> 00:03:45,000\nHow many times do you think we're going to need to evaluate Fibonacci 31?\n\n", "id": 445002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYs5kcDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/462003", "type": "Nugget", "id": 462003}, {"nuggetType": "lecture", "name": "Counting Calls", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "bb01dcf7-c22b-4619-b22c-480db2defc22", "name": "cs101_unit6_13_q_counting-calls", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKzyGww", "youtube_id": "ZHi-mCvVtDw", "youtube_state": "done", "path": "Course/cs101/Media/457004", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\n[Narrator] Maybe you can see a pattern here.\n\n2\n00:00:03,000 --> 00:00:09,000\nFor the quiz, I'm going to see if you can figure out how many times we'll need to evaluate Fibonacci 30,\n\n3\n00:00:09,000 --> 00:00:13,000\nevaluate Fibo 30 when we're evaluating Fibo 36.\n\n4\n00:00:13,000 --> 00:00:18,000\nSee if you can figure this out without drawing out the whole thing and counting it; that's going to be a lot of work,\n\n5\n00:00:18,000 --> 00:00:21,000\nbut if you think about what we've seen so far maybe you see a pattern here,\n\n6\n00:00:21,000 --> 00:00:27,000\nand you can figure out the result for how many calls there would be to Fibo 30 without doing all that work.\n\n7\n00:00:27,000 --> 00:00:32,000\nSee if you can figure out the answer without working out every step.\n\n", "id": 457004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYtJkcDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/462004", "type": "Nugget", "id": 462004}, {"nuggetType": "quiz", "name": "Ancestors", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYgakcDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/464001", "type": "Nugget", "id": 464001}, {"nuggetType": "lecture", "name": "Recursive Factorial", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "e8b51412-8210-443c-b4bd-82d2c98eea55", "name": "cs101_unit6_08_p_recursive-factorial", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNK4HAw", "youtube_id": "XZKHwxlCghY", "youtube_state": "done", "path": "Course/cs101/Media/466002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Evans] So your goal for this quiz is to define a procedure named factorial\n\n2\n00:00:04,000 --> 00:00:07,000\nthat takes a number which is a positive whole number as its input\n\n3\n00:00:07,000 --> 00:00:12,000\nand outputs the number of ways to arrange the input number of items.\n\n4\n00:00:12,000 --> 00:00:15,000\nSo that's the mathematical definition of factorial.\n\n5\n00:00:15,000 --> 00:00:19,000\nFor your procedure, we've already seen how to do this using a while loop.\n\n6\n00:00:19,000 --> 00:00:22,000\nYour goal here is to define that procedure without using a while loop,\n\n7\n00:00:22,000 --> 00:00:25,000\nto define it as a recursive definition.\n\n", "id": 466002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY67AcDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/465003", "type": "Nugget", "id": 465003}, {"nuggetType": "lecture", "name": "Recursive Procedures", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "8dfc09ff-2c4f-4faa-9c4a-09c2ed8aaa8b", "name": "cs101_unit6_07_l_recursive-procedures", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOqwHAw", "youtube_id": "ubry_bpsDn0", "youtube_state": "uploading", "path": "Course/cs101/Media/465002", "transcript": "\ufeff", "id": 465002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY0bgcDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/466001", "type": "Nugget", "id": 466001}, {"nuggetType": "program", "name": "Recursive Factorial", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY07gcDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/466003", "suppliedCode": "#Define a procedure, factorial, that takes a natural number as its input, and\r\n#outputs the number of ways to arrange the input number of itmes.\r\n\r\ndef factorial(n):\r\n\r\n\r\n\r\n\r\n\r\n#print factorial(0)\r\n#>>> 1\r\n#print factorial(5)\r\n#>>> 120\r\n#print factorial(10)\r\n#>>> 3628800", "type": "Nugget", "id": 466003}, {"nuggetType": "quiz", "name": "Good Definitions", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYosgcDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/468002", "type": "Nugget", "id": 468002}, {"nuggetType": "program", "name": "Implementing Urank", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY9dccDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/470005", "suppliedCode": "#Modify the crawl_web procedure so that instead of just returning the index, it\n#returns an index and a graph. The graph should be a Dictionary where the\n#entries are:\n\n#url  : [ url, url, ... ]\n#page   pages that link to target\n\ndef crawl_web(seed): # returns index, graph of inlinks\n    tocrawl = [seed]\n    crawled = []\n    graph = {}  # <url>, [list of pages it links to]\n    index = {} \n    while tocrawl: \n        page = tocrawl.pop()\n        if page not in crawled:\n            content = get_page(page)\n            add_page_to_index(index, page, content)\n            outlinks = get_all_links(content)\n            \n            #Insert Code Here\n            \n            union(tocrawl, outlinks)\n            crawled.append(page)\n    return index, graph\n\n\ncache = {\n   'http://udacity.com/cs101x/urank/index.html': \"\"\"<html>\n<body>\n<h1>Dave's Cooking Algorithms</h1>\n<p>\nHere are my favorite recipies:\n<ul>\n<li> <a href=\"http://udacity.com/cs101x/urank/hummus.html\">Hummus Recipe</a>\n<li> <a href=\"http://udacity.com/cs101x/urank/arsenic.html\">World's Best Hummus</a>\n<li> <a href=\"http://udacity.com/cs101x/urank/kathleen.html\">Kathleen's Hummus Recipe</a>\n</ul>\n\nFor more expert opinions, check out the \n<a href=\"http://udacity.com/cs101x/urank/nickel.html\">Nickel Chef</a> \nand <a href=\"http://udacity.com/cs101x/urank/zinc.html\">Zinc Chef</a>.\n</body>\n</html>\n\n\n\n\n\n\n\"\"\", \n   'http://udacity.com/cs101x/urank/zinc.html': \"\"\"<html>\n<body>\n<h1>The Zinc Chef</h1>\n<p>\nI learned everything I know from \n<a href=\"http://udacity.com/cs101x/urank/nickel.html\">the Nickel Chef</a>.\n</p>\n<p>\nFor great hummus, try \n<a href=\"http://udacity.com/cs101x/urank/arsenic.html\">this recipe</a>.\n\n</body>\n</html>\n\n\n\n\n\n\n\"\"\", \n   'http://udacity.com/cs101x/urank/nickel.html': \"\"\"<html>\n<body>\n<h1>The Nickel Chef</h1>\n<p>\nThis is the\n<a href=\"http://udacity.com/cs101x/urank/kathleen.html\">\nbest Hummus recipe!\n</a>\n\n</body>\n</html>\n\n\n\n\n\n\n\"\"\", \n   'http://udacity.com/cs101x/urank/kathleen.html': \"\"\"<html>\n<body>\n<h1>\nKathleen's Hummus Recipe\n</h1>\n<p>\n\n<ol>\n<li> Open a can of garbonzo beans.\n<li> Crush them in a blender.\n<li> Add 3 tablesppons of tahini sauce.\n<li> Squeeze in one lemon.\n<li> Add salt, pepper, and buttercream frosting to taste.\n</ol>\n\n</body>\n</html>\n\n\"\"\", \n   'http://udacity.com/cs101x/urank/arsenic.html': \"\"\"<html>\n<body>\n<h1>\nThe Arsenic Chef's World Famous Hummus Recipe\n</h1>\n<p>\n\n<ol>\n<li> Kidnap the <a href=\"http://udacity.com/cs101x/urank/nickel.html\">Nickel Chef</a>.\n<li> Force her to make hummus for you.\n</ol>\n\n</body>\n</html>\n\n\"\"\", \n   'http://udacity.com/cs101x/urank/hummus.html': \"\"\"<html>\n<body>\n<h1>\nHummus Recipe\n</h1>\n<p>\n\n<ol>\n<li> Go to the store and buy a container of hummus.\n<li> Open it.\n</ol>\n\n</body>\n</html>\n\n\n\n\n\"\"\", \n}\n\ndef get_page(url):\n    if url in cache:\n        return cache[url]\n    else:\n        return None\n    \ndef get_next_target(page):\n    start_link = page.find('<a href=')\n    if start_link == -1: \n        return None, 0\n    start_quote = page.find('\"', start_link)\n    end_quote = page.find('\"', start_quote + 1)\n    url = page[start_quote + 1:end_quote]\n    return url, end_quote\n\ndef get_all_links(page):\n    links = []\n    while True:\n        url, endpos = get_next_target(page)\n        if url:\n            links.append(url)\n            page = page[endpos:]\n        else:\n            break\n    return links\n\n\ndef union(a, b):\n    for e in b:\n        if e not in a:\n            a.append(e)\n\ndef add_page_to_index(index, url, content):\n    words = content.split()\n    for word in words:\n        add_to_index(index, word, url)\n        \ndef add_to_index(index, keyword, url):\n    if keyword in index:\n        index[keyword].append(url)\n    else:\n        index[keyword] = [url]\n\ndef lookup(index, keyword):\n    if keyword in index:\n        return index[keyword]\n    else:\n        return None\n\n\n\nindex , graph = crawl_web('http://udacity.com/cs101x/urank/index.html') \n\nif 'http://udacity.com/cs101x/urank/index.html' in graph:\n    print graph['http://udacity.com/cs101x/urank/index.html']\n#>>> ['http://udacity.com/cs101x/urank/hummus.html',\n#'http://udacity.com/cs101x/urank/arsenic.html',\n#'http://udacity.com/cs101x/urank/kathleen.html',\n#'http://udacity.com/cs101x/urank/nickel.html',\n#'http://udacity.com/cs101x/urank/zinc.html']\n\n\n\n", "type": "Nugget", "id": 470005}, {"nuggetType": "lecture", "name": "Recursive Factorial Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "95d627fb-99ac-4c92-8971-c4f0b4f1085e", "name": "cs101_unit6_08_s_recursive-factorial", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPHXHAw", "youtube_id": "RCoyOtoFVVc", "youtube_state": "done", "path": "Course/cs101/Media/470001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Evans] Here's how we could define factorial.\n\n2\n00:00:04,000 --> 00:00:08,000\nWe should go back to our mathematical definition.\n\n3\n00:00:08,000 --> 00:00:10,000\nThat's what we want to turn into code.\n\n4\n00:00:10,000 --> 00:00:15,000\nWe had our base case where factorial is 0. The result should be 1.\n\n5\n00:00:15,000 --> 00:00:19,000\nAnd we had our recursive case where the input is greater than 0\n\n6\n00:00:19,000 --> 00:00:23,000\nwe want to have the result be n * factorial (n - 1).\n\n7\n00:00:23,000 --> 00:00:27,000\nSo we can turn that fairly straightforwardly into code.\n\n8\n00:00:27,000 --> 00:00:29,000\nHere is the code.\n\n9\n00:00:29,000 --> 00:00:32,000\nWe're going to define a procedure.\n\n10\n00:00:32,000 --> 00:00:38,000\nJust like the previous definition, we have 1 input. It's a number. We'll call it n.\n\n11\n00:00:38,000 --> 00:00:41,000\nNow we need to have the code, so we need to first check if we've reached the base case.\n\n12\n00:00:41,000 --> 00:00:48,000\nWe'll use an if for that, and we're going to check if if n == 0--\n\n13\n00:00:48,000 --> 00:00:50,000\nremember we need the double equals for the comparison--\n\n14\n00:00:50,000 --> 00:00:52,000\nthat means we've reached the base case \n\n15\n00:00:52,000 --> 00:00:58,000\nand we defined the value of factorial (0) is defined as 1.\n\n16\n00:00:58,000 --> 00:01:03,000\nSo that means when n == 0 what we should do is return the value 1.\n\n17\n00:01:03,000 --> 00:01:09,000\nWhen n is not equal to 0, we'll use else for the case where n is not equal to 0.\n\n18\n00:01:09,000 --> 00:01:13,000\nThen we have the recursive case, and that was given by the definition\n\n19\n00:01:13,000 --> 00:01:23,000\nthat the factorial (n) for numbers greater than 0 =  n * factorial (n - 1).\n\n20\n00:01:23,000 --> 00:01:25,000\nSo that's exactly what we want to do in the Python code.\n\n21\n00:01:25,000 --> 00:01:34,000\nWe'll return the new result, which is n * the result we get, calling factorial,\n\n22\n00:01:34,000 --> 00:01:36,000\npassing in (n - 1).\n\n23\n00:01:36,000 --> 00:01:39,000\nAnd this may seem strange that we're defining factorial using factorial.\n\n24\n00:01:39,000 --> 00:01:42,000\nIt seems like that's kind of circular.\n\n25\n00:01:42,000 --> 00:01:45,000\nBut the reason that it's not circular is because we have this base case.\n\n26\n00:01:45,000 --> 00:01:48,000\nWe have a case where we do stop.\n\n27\n00:01:48,000 --> 00:01:52,000\nWe stop once we reach the case where n is equal to 0.\n\n28\n00:01:52,000 --> 00:01:54,000\nAnd because every time we call factorial,\n\n29\n00:01:54,000 --> 00:01:57,000\ninstead of passing in the same value of n that we started with,\n\n30\n00:01:57,000 --> 00:02:00,000\nwe're passing in (n - 1), it's getting smaller.\n\n31\n00:02:00,000 --> 00:02:03,000\nEventually we're going to get to 0, assuming that we started with n \n\n32\n00:02:03,000 --> 00:02:06,000\nas some positive whole number.\n\n33\n00:02:06,000 --> 00:02:09,000\nSo we eventually stop, return 1.\n\n34\n00:02:09,000 --> 00:02:12,000\nOn the way there we're going to be multiplying in all these values.\n\n35\n00:02:12,000 --> 00:02:16,000\nSo let's step through what happens when we run this code.\n\n36\n00:02:19,000 --> 00:02:21,000\nLet's look at an example.\n\n37\n00:02:21,000 --> 00:02:26,000\nSuppose we called factorial, passing in 3.\n\n38\n00:02:26,000 --> 00:02:28,000\nThat means we're going to enter the procedure here.\n\n39\n00:02:28,000 --> 00:02:35,000\nThe value that n refers to is going to be 3 inside the body of factorial.\n\n40\n00:02:35,000 --> 00:02:38,000\nWe're going to try the comparison.\n\n41\n00:02:38,000 --> 00:02:40,000\nn is not equal to 0, so we don't return 1,\n\n42\n00:02:40,000 --> 00:02:42,000\nso we're going to go to the else, \n\n43\n00:02:42,000 --> 00:02:47,000\nand that means we're going to return the value of n * factorial (n - 1).\n\n44\n00:02:47,000 --> 00:02:54,000\nThat means we're computing the value of n * factorial (n - 1).\n\n45\n00:02:54,000 --> 00:02:58,000\nAnd (n - 1)--well, n was 3, so (n - 1) is (2).\n\n46\n00:02:58,000 --> 00:03:02,000\nThat's what happened as a result of the first call.\n\n47\n00:03:02,000 --> 00:03:05,000\nBut we're not done. We still need to evaluate this.\n\n48\n00:03:05,000 --> 00:03:08,000\nNow we're evaluating factorial (2).\n\n49\n00:03:08,000 --> 00:03:10,000\nThat means we're entering factorial again.\n\n50\n00:03:10,000 --> 00:03:14,000\nThis time the value of n will refer to 2.\n\n51\n00:03:14,000 --> 00:03:17,000\nWe do the comparison. n is not equal to 0, so we go the else clause.\n\n52\n00:03:17,000 --> 00:03:22,000\nNow we're going to return the result of n * factorial (n - 1).\n\n53\n00:03:22,000 --> 00:03:26,000\nIn this case the value of n is 2, so the value of factorial (2)\n\n54\n00:03:26,000 --> 00:03:34,000\nwill be 2 * the result we get by calling factorial, passing in the value of (n - 1),\n\n55\n00:03:34,000 --> 00:03:36,000\nso calling factorial, passing in (1).\n\n56\n00:03:36,000 --> 00:03:41,000\nAnd remember that was part of the return where we had 3 * factorial (2),\n\n57\n00:03:41,000 --> 00:03:46,000\nso we still have the 3 *, but now we're getting the result of factorial (2) is 2 * something.\n\n58\n00:03:46,000 --> 00:03:48,000\nWe're calling factorial again.\n\n59\n00:03:48,000 --> 00:03:50,000\nWe still don't know what factorial (1) is,\n\n60\n00:03:50,000 --> 00:03:53,000\nso that means we're going to reenter factorial.\n\n61\n00:03:53,000 --> 00:03:55,000\nWe finished here. We're doing the call.\n\n62\n00:03:55,000 --> 00:04:01,000\nWe're going to reenter factorial, but this time the value of n now refers to 1.\n\n63\n00:04:01,000 --> 00:04:05,000\nAnd now again this test is false, so we go to the else clause\n\n64\n00:04:05,000 --> 00:04:12,000\nand now we're going to return n, which is 1, times the result of factorial (0).\n\n65\n00:04:12,000 --> 00:04:15,000\nSo now we're calling factorial (0).\n\n66\n00:04:15,000 --> 00:04:17,000\nWe're going back into the procedure.\n\n67\n00:04:17,000 --> 00:04:22,000\nNow the value n refers to is 0,\n\n68\n00:04:22,000 --> 00:04:24,000\nand now this test is actually true.\n\n69\n00:04:24,000 --> 00:04:26,000\nn == 0.\n\n70\n00:04:26,000 --> 00:04:29,000\nSo we'll go to the return here, we return 1.\n\n71\n00:04:29,000 --> 00:04:33,000\nThat means the result of factorial (0) is 1.\n\n72\n00:04:33,000 --> 00:04:39,000\nSo to get the result of factorial (1) we had 1 * factorial (0). That's 1 * 1, which is 1.\n\n73\n00:04:39,000 --> 00:04:42,000\nAnd now to get the result back from factorial (2)\n\n74\n00:04:42,000 --> 00:04:45,000\nwe have 2 * factorial (1), which we now know is 1.\n\n75\n00:04:45,000 --> 00:04:48,000\nSo we're going to have the result here is 2.\n\n76\n00:04:48,000 --> 00:04:54,000\nAnd to get the result for factorial (3) we have 3 * factorial (2), which we know has the value 2.\n\n77\n00:04:54,000 --> 00:04:57,000\nWe'll get the result is 6.\n\n78\n00:04:57,000 --> 00:04:59,000\nAnd note the way we've defined it.\n\n79\n00:04:59,000 --> 00:05:01,000\nIf we tried instead factorial (4),\n\n80\n00:05:01,000 --> 00:05:03,000\nif we started with factorial (4), \n\n81\n00:05:03,000 --> 00:05:07,000\nwhat would have happened is the first time we go through we get 4 * factorial (3),\n\n82\n00:05:07,000 --> 00:05:10,000\nso factorial (4) would be 4 * factorial (3).\n\n83\n00:05:10,000 --> 00:05:17,000\nWe had factorial (3) as 6. 4 * 6 would give us 24, which is the result of factorial (4).\n\n", "id": 470001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY2d8cDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/471001", "type": "Nugget", "id": 471001}, {"nuggetType": "quiz", "name": "Counting Calls", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY2t8cDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/471002", "type": "Nugget", "id": 471002}, {"nuggetType": "lecture", "name": "Implementing Urank", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": null, "name": "cs101_unit6_23_q_implementing-urank", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPTXHAw", "youtube_id": "-JJRw1K_6ZU", "youtube_state": "processing", "path": "Course/cs101/Media/470004", "transcript": null, "id": 470004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY298cDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/471003", "type": "Nugget", "id": 471003}, {"nuggetType": "lecture", "name": "Bunnies", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "4e92e3a8-8a74-4eb7-af25-10adaba4c29e", "name": "cs101_unit6_11_p_bunnies", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLrAHAw", "youtube_id": "uBvwJ9tIXSA", "youtube_state": "processing", "path": "Course/cs101/Media/467002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Narrator] Before we get to the problem of ranking web-search results,\n\n2\n00:00:04,000 --> 00:00:08,000\nI'm going to talk about 1 more interesting recursive definition.\n\n3\n00:00:08,000 --> 00:00:12,000\nThe Fibonacci Series, and Fibonacci numbers are one of the most interesting things in mathematics.\n\n4\n00:00:12,000 --> 00:00:15,000\nOnce you know about them, you'll see them all over the place\n\n5\n00:00:15,000 --> 00:00:18,000\nboth in nature and in human designs.\n\n6\n00:00:18,000 --> 00:00:21,000\nThe name comes from Leonardo da Pisa who is also known as Fibonacci,\n\n7\n00:00:21,000 --> 00:00:26,000\nand back in 1202 he published a book called Liber Abaci.\n\n8\n00:00:26,000 --> 00:00:30,000\nThe root Abaci is the same as the one for Abacus, the calculating machine,\n\n9\n00:00:30,000 --> 00:00:33,000\nand this translates loosely as book of calculation.\n\n10\n00:00:33,000 --> 00:00:36,000\nThis was the book that introduced Indian mathematics to the West.\n\n11\n00:00:36,000 --> 00:00:40,000\nIn particular, it introduced what we now know as Arabic numerals.\n\n12\n00:00:40,000 --> 00:00:43,000\nThis replaced the Roman Numeral system that was then widely used,\n\n13\n00:00:43,000 --> 00:00:46,000\nand part of what Fibonacci did in the book was show \n\n14\n00:00:46,000 --> 00:00:48,000\nhow much easier it is to do calculation \n\n15\n00:00:48,000 --> 00:00:51,000\nusing numbers in the decimal system where the place \n\n16\n00:00:51,000 --> 00:00:54,000\nwhere the number is indicates its value,\n\n17\n00:00:54,000 --> 00:00:56,000\nand as part of the book, he introduced these problems \n\n18\n00:00:56,000 --> 00:00:59,000\nand showed how to solve them using calculation.\n\n19\n00:00:59,000 --> 00:01:02,000\nThe problem that became known as the Fibonacci numbers\n\n20\n00:01:02,000 --> 00:01:06,000\nwas one of the problems in the book, and he posed the problem like this.\n\n21\n00:01:06,000 --> 00:01:09,000\nAt the beginning, we have 1 pair of rabbits,\n\n22\n00:01:09,000 --> 00:01:13,000\nand it takes 1 month for a rabbit to produce offspring,\n\n23\n00:01:13,000 --> 00:01:18,000\nand every month a mature rabbit will produce a new pair of rabbits.\n\n24\n00:01:18,000 --> 00:01:22,000\nAt month 1, we had 1 pair of rabbits.\n\n25\n00:01:22,000 --> 00:01:26,000\nAt month 2--well, we have the 1 pair we started with,\n\n26\n00:01:26,000 --> 00:01:28,000\nand now we have a new pair.\n\n27\n00:01:28,000 --> 00:01:30,000\nWe have 2 pairs of rabbits, \n\n28\n00:01:30,000 --> 00:01:34,000\nand now at month 3, the baby rabbits aren't yet ready to produce offspring.\n\n29\n00:01:34,000 --> 00:01:37,000\nIt takes a month for the rabbits to reach maturity,\n\n30\n00:01:37,000 --> 00:01:40,000\nbut these 2 will produce new offspring each month.\n\n31\n00:01:40,000 --> 00:01:45,000\nWe have 1 new pair of baby rabbits, and the rabbits that were born in month 2,\n\n32\n00:01:45,000 --> 00:01:50,000\nwell, they've had a month to get bigger so now they're mature rabbits.\n\n33\n00:01:50,000 --> 00:01:52,000\nWe have 3 pairs at the end of month 3. \n\n34\n00:01:52,000 --> 00:01:55,000\nMonth 4, we still have the 3 pairs of rabbits we had.\n\n35\n00:01:55,000 --> 00:01:58,000\nRabbits never die in this model,\n\n36\n00:01:58,000 --> 00:02:03,000\nand the 2 pairs that are mature, both of those will now produce new rabbits.\n\n37\n00:02:03,000 --> 00:02:06,000\nWe have 2 new pairs of baby rabbits.\n\n38\n00:02:06,000 --> 00:02:09,000\nThe baby rabbits that were born in month 3, \n\n39\n00:02:09,000 --> 00:02:14,000\nwell, now those are mature so now we have 3 pairs of mature rabbits\n\n40\n00:02:14,000 --> 00:02:20,000\nand 2 pairs of baby rabbits, so we have 5 pairs of rabbits total, and this keeps going.\n\n41\n00:02:20,000 --> 00:02:22,000\nThe model assumed that rabbits never die.\n\n42\n00:02:22,000 --> 00:02:26,000\nThat every month each pair of mature rabbits produces a new pair of rabbit babies,\n\n43\n00:02:26,000 --> 00:02:31,000\nand it takes 1 month for a pair of rabbits that's born to become mature.\n\n44\n00:02:31,000 --> 00:02:37,000\nIn month 5, the 3 mature pairs of rabbits will all produce new offspring.\n\n45\n00:02:37,000 --> 00:02:41,000\nSo, we have new offspring, new offspring, 3 new offspring,\n\n46\n00:02:41,000 --> 00:02:46,000\nand the 2 that are a month old that were born in month 4 will now become mature.\n\n47\n00:02:46,000 --> 00:02:50,000\nThis isn't a very accurate model of how rabbits reproduce.\n\n48\n00:02:50,000 --> 00:02:57,000\nIt's good for us; if it was an accurate model it would only take a few years for rabbits to control the entire planet,\n\n49\n00:02:57,000 --> 00:03:02,000\nbut it's an interesting mathematical model, and the model that this poses,\n\n50\n00:03:02,000 --> 00:03:05,000\nwe can write in a more formal way.\n\n51\n00:03:05,000 --> 00:03:08,000\nEach month the number of rabbits is \n\n52\n00:03:08,000 --> 00:03:13,000\nthe number of rabbits we had in the previous month since those rabbits don't die.\n\n53\n00:03:13,000 --> 00:03:17,000\nIn month 5, we had the 5 pairs that we had in the previous month\n\n54\n00:03:17,000 --> 00:03:23,000\nplus all of the rabbits that were mature meaning all the rabbits that we had 2 months ago,\n\n55\n00:03:23,000 --> 00:03:26,000\nwhich was 3 if we're in month 5.\n\n56\n00:03:26,000 --> 00:03:32,000\nWell, those reproduced so we have 3 new pairs of rabbits plus the 5 that we had in the previous month,\n\n57\n00:03:32,000 --> 00:03:41,000\nand this keeps going so we could--in month 6 we're going to have the 8 rabbits that we had at the end of month 5,\n\n58\n00:03:41,000 --> 00:03:45,000\nplus the 5 mature pairs, 1, 2, 3, 4, 5, will each reproduce\n\n59\n00:03:45,000 --> 00:03:50,000\nso we'll have 5 new pairs and that will give us 13 pairs of rabbits.\n\n60\n00:03:50,000 --> 00:03:54,000\nThis was the model Fibonacci developed,\n\n61\n00:03:54,000 --> 00:03:58,000\nand the question is can you figure out at the end of month N, given any number N,\n\n62\n00:03:58,000 --> 00:04:00,000\nhow many rabbits there will be.\n\n63\n00:04:00,000 --> 00:04:06,000\nThe way we define this mathematically is a little different from the way Fibonacci posed the question,\n\n64\n00:04:06,000 --> 00:04:12,000\nand that's because in modern mathematics we usually like our series to start with a 0.\n\n65\n00:04:12,000 --> 00:04:16,000\nIf we're thinking of modeling rabbits, well that doesn't quite make sense to start with 0 rabbits, \n\n66\n00:04:16,000 --> 00:04:19,000\nbut if we're thinking of it as more general series it does.\n\n67\n00:04:19,000 --> 00:04:26,000\nThe way it's defined mathematically is that we say that the Fibonacci number 0 is defined as 0.\n\n68\n00:04:26,000 --> 00:04:32,000\nFibonacci #1 is defined as 1, and those are our 2 base cases.\n\n69\n00:04:32,000 --> 00:04:35,000\nThis is different from the other recursive definitions we've seen \n\n70\n00:04:35,000 --> 00:04:37,000\nin that they're 2 base cases.\n\n71\n00:04:37,000 --> 00:04:40,000\nPreviously all of our definitions just had 1 base case,\n\n72\n00:04:40,000 --> 00:04:46,000\nand then we can define every other Fibonacci number recursively starting from these base cases,\n\n73\n00:04:46,000 --> 00:04:54,000\nand so the Fibonacci number N where N is some whole number greater than 1\n\n74\n00:04:54,000 --> 00:04:57,000\nis--well, we have all the rabbits in the previous month\n\n75\n00:04:57,000 --> 00:05:01,000\nso that's Fibonacci of N-1 + all the new babies,\n\n76\n00:05:01,000 --> 00:05:05,000\nand the number of new babies is the number of rabbits we had 2 months ago,\n\n77\n00:05:05,000 --> 00:05:09,000\nthose are all the mature rabbits that gets added to the number of rabbits we had in the previous month.\n\n78\n00:05:09,000 --> 00:05:12,000\nThat's how we define Fibonacci numbers.\n\n79\n00:05:12,000 --> 00:05:18,000\nThis defines every Fibonacci number in terms of the 2 base cases and the 1 recursive case.\n\n80\n00:05:21,000 --> 00:05:25,000\nYour goal is to define a procedure called Fibonacci \n\n81\n00:05:25,000 --> 00:05:28,000\nthat takes a natural number as input so numbers starting from 0, \n\n82\n00:05:28,000 --> 00:05:30,000\nany whole number 0 or higher,\n\n83\n00:05:30,000 --> 00:05:36,000\nand outputs the value of that Fibonacci number defined using this recursive definition.\n\n", "id": 467002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYw-ccDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/472003", "type": "Nugget", "id": 472003}, {"nuggetType": "lecture", "name": "Popularity", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "bba123a2-eb0a-4984-abee-d5f87209515c", "name": "cs101_unit6_16_l_popularity", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOuzGww", "youtube_id": "SJy2QH0gDok", "youtube_state": "processing", "path": "Course/cs101/Media/449003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\n[Narrator] Here's a typical group of friends in middle school,\n\n2\n00:00:05,000 --> 00:00:08,000\nand some of the people are popular, some of them might not be.\n\n3\n00:00:08,000 --> 00:00:11,000\nThe first step to deciding who's popular is looking at who has a lot of friends.\n\n4\n00:00:11,000 --> 00:00:16,000\nLet's draw in some links that show who's a friend,\n\n5\n00:00:16,000 --> 00:00:20,000\nand friendship links are one directional,\n\n6\n00:00:20,000 --> 00:00:25,000\njust because Alice is friends with Bob doesn't mean that Bob is friends with Alice.\n\n7\n00:00:25,000 --> 00:00:31,000\nWe'll draw our links as arrows so this means this person, we'll call him Bob, \n\n8\n00:00:31,000 --> 00:00:38,000\nis friends with Alice, and let's say Alice has many friends,\n\n9\n00:00:38,000 --> 00:00:42,000\nand let's say Bob is also friends with this person.\n\n10\n00:00:42,000 --> 00:00:44,000\nThey're friends with each other.\n\n11\n00:00:44,000 --> 00:00:50,000\nWe have lots of friendship links, some of them are bidirectional but not all of them.\n\n12\n00:00:50,000 --> 00:00:52,000\nWe have lots of friendships.\n\n13\n00:00:52,000 --> 00:00:54,000\nIs this enough to decide who's popular?\n\n14\n00:00:54,000 --> 00:00:57,000\nIf you went to a school like I did it's not.\n\n15\n00:00:57,000 --> 00:01:00,000\nJust having a lot of friends is not enough to make you popular.\n\n16\n00:01:00,000 --> 00:01:02,000\nYou have to have the right friends.\n\n17\n00:01:02,000 --> 00:01:04,000\nYou have to be friends with the popular people.\n\n18\n00:01:04,000 --> 00:01:07,000\nIt's not enough to have lots of geeky friends say in high school.\n\n19\n00:01:07,000 --> 00:01:10,000\nYou've got to have lots of friends that are popular.\n\n20\n00:01:10,000 --> 00:01:14,000\nThat means the definition of popular isn't just about having lots of friends.\n\n21\n00:01:14,000 --> 00:01:18,000\nIt's about having lots of friends who also have lots of friends.\n\n22\n00:01:18,000 --> 00:01:20,000\nThat's what makes someone popular.\n\n23\n00:01:20,000 --> 00:01:27,000\nWe could define popularity of a person is the number of people who are friends with the P.\n\n24\n00:01:27,000 --> 00:01:34,000\nThis means the number of links from someone else to that person is their popularity score.\n\n25\n00:01:34,000 --> 00:01:36,000\nHere is Charlie.\n\n26\n00:01:36,000 --> 00:01:43,000\nThere are 1, 2, 3 links into Charlie, so Charlie's popularity score would be 3.\n\n27\n00:01:43,000 --> 00:01:47,000\nAlice also has 3 links, so her popularity score would also be 3.\n\n28\n00:01:47,000 --> 00:01:51,000\nBob only has 1 arrow going to Bob, so his popularity score would be 1.\n\n29\n00:01:51,000 --> 00:01:55,000\nThis isn't a bad way to define popularity, but it's not quite right.\n\n30\n00:01:55,000 --> 00:01:59,000\nThe definition of popularity doesn't just depend on the number of friends you have.\n\n31\n00:01:59,000 --> 00:02:04,000\nIt depends on both the number and the popularity of your friends.\n\n32\n00:02:04,000 --> 00:02:10,000\nWe can change the definition; let's instead define the popularity score of a person T.\n\n33\n00:02:10,000 --> 00:02:15,000\nNow it's going to be the sum of the popularity of all their friends.\n\n34\n00:02:15,000 --> 00:02:19,000\nWe can write that in a mathematical way, so using the sigma means to sum up.\n\n35\n00:02:19,000 --> 00:02:24,000\nWe're going to take each friend that is in the friends of P,\n\n36\n00:02:24,000 --> 00:02:27,000\nand we're going to sum up the popularity score of the friends.\n\n37\n00:02:27,000 --> 00:02:30,000\nIf the mathematical notation is unfamiliar to you,\n\n38\n00:02:30,000 --> 00:02:33,000\nwe could also write this as pseudo-Python code.\n\n39\n00:02:33,000 --> 00:02:38,000\nWe're thinking of the popularity of a person P.\n\n40\n00:02:38,000 --> 00:02:45,000\nLet's assume we have a function that gives us the friends so we're going to start with a score of 0.\n\n41\n00:02:45,000 --> 00:02:48,000\nWe're going to loop through the friends, and for each friend,\n\n42\n00:02:48,000 --> 00:02:53,000\nwe're going to add to P's score the popularity score of the friend,\n\n43\n00:02:53,000 --> 00:02:56,000\nand we'll return the score as the result.\n\n44\n00:02:56,000 --> 00:02:59,000\nNow you've seen a mathematical definition of popularity.\n\n45\n00:02:59,000 --> 00:03:01,000\nYou've seen the same thing as code.\n\n46\n00:03:01,000 --> 00:03:04,000\nI'm going to ask you a very important quiz question next.\n\n47\n00:03:04,000 --> 00:03:08,000\nIt's an easy one to get right if you try twice because there's only 2 answers,\n\n48\n00:03:08,000 --> 00:03:11,000\nbut think about it carefully, see if you can get it right the first time.\n\n", "id": 449003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYxOccDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/472004", "type": "Nugget", "id": 472004}, {"nuggetType": "lecture", "name": "Page Rank", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "52efaba8-8dcd-4f10-95c2-009317519813", "name": "cs101_unit6_20_l_page-rank", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOSMGww", "youtube_id": "d6MAjh3LwCo", "youtube_state": "processing", "path": "Course/cs101/Media/444004", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,270\nThe idea for how to rank web pages\n\n2\n00:00:02,270 --> 00:00:05,370\n is the same idea as how we measured popularity of people.\n\n3\n00:00:05,370 --> 00:00:10,080\nInstead of thinking about friendships as the way to measure popularity, \n\n4\n00:00:10,080 --> 00:00:13,310\nwhat we're measuring, is links on the web.\n\n5\n00:00:13,310 --> 00:00:16,650\nWhen one page has a link to another page, \n\n6\n00:00:16,650 --> 00:00:19,990\nthat indicates that this more likely that this other page is popular.\n\n7\n00:00:19,990 --> 00:00:22,860\nJust like when someone is a friend, \n\n8\n00:00:22,860 --> 00:00:27,030\nit indicates that the person they are friends with is more likely to be popular.\n\n9\n00:00:27,030 --> 00:00:30,400\nThe goal in ranking web pages is to get a measure \n\n10\n00:00:30,400 --> 00:00:34,800\nof how popular a page is based on the other pages that link to it. \n\n11\n00:00:34,800 --> 00:00:38,960\nWe have the same issue with popularity, that not all links are the same--\n\n12\n00:00:38,960 --> 00:00:43,880\nthat a link from a page that is really important counts for a lot more \n\n13\n00:00:43,880 --> 00:00:47,080\nthan a link from a page that is not important.\n\n14\n00:00:47,080 --> 00:00:49,120\nIf the NY Times has a link to your page, \n\n15\n00:00:49,120 --> 00:00:52,350\nthat counts for a lot more than if your mom sets up a web page \n\n16\n00:00:52,350 --> 00:00:53,820\nand puts a link to your page in it, \n\n17\n00:00:53,820 --> 00:00:57,820\nunless your mom is Lady Gaga, in which case her link probably counts for more.\n\n18\n00:00:57,820 --> 00:01:01,160\nAnother way of thinking about this-- is what we're trying to model-- \n\n19\n00:01:01,160 --> 00:01:02,930\nis a random web surfer.\n\n20\n00:01:02,930 --> 00:01:07,030\nOur random web surfer has some set of pages that they know about.\n\n21\n00:01:07,030 --> 00:01:10,500\nThose pages have links to other pages.\n\n22\n00:01:10,500 --> 00:01:11,940\nSome pages might have a lot of links.\n\n23\n00:01:11,940 --> 00:01:14,170\nSome pages might just have one link.\n\n24\n00:01:14,170 --> 00:01:17,140\nSome pages might have no links.\n\n25\n00:01:17,140 --> 00:01:23,020\nOne way to think about this-- is that we're trying to model a random web surfer.\n\n26\n00:01:23,020 --> 00:01:26,190\nThe web surfer starts knowing about some pages.\n\n27\n00:01:26,190 --> 00:01:29,560\nShe picks one page at random. Let's say she picks this page.\n\n28\n00:01:29,560 --> 00:01:33,790\nAnd then, when she's on that page, she picks a random link, and follows that link.\n\n29\n00:01:33,790 --> 00:01:36,500\nOops, this was a bad starting page, it actually has no out links.\n\n30\n00:01:36,500 --> 00:01:39,800\nSo, then she picks another random page. Let's say she picks this one.\n\n31\n00:01:39,800 --> 00:01:45,340\nShe follows the link from that page, and now she got to the page with no links again.\n\n32\n00:01:45,340 --> 00:01:49,080\nLet's say she picked a better starting point. Let's say she randomly picked this one.\n\n33\n00:01:49,080 --> 00:01:53,910\nNow she's got 2 links to follow. She randomly picks one of those. She follows it. \n\n34\n00:01:53,910 --> 00:01:57,380\nShe gets to a new page. She randomly picks a link from that page.\n\n35\n00:01:57,380 --> 00:02:01,660\nIn this case, it only had 1. In this case, it seems we have a bit of a problem, \n\n36\n00:02:01,660 --> 00:02:06,330\nbecause all of the starting pages eventually lead into this one,\n\n37\n00:02:06,330 --> 00:02:08,620\nwhich has no outgoing links.\n\n38\n00:02:08,620 --> 00:02:10,430\nWe'll think about how to solve that problem later.\n\n39\n00:02:10,430 --> 00:02:14,030\nWe can think about what our random web surfer is doing--it is picking random pages,\n\n40\n00:02:14,030 --> 00:02:18,340\nfollowing links. What we want to measure is the popularity of the page.\n\n41\n00:02:18,340 --> 00:02:21,310\nThat's the probability is that she reaches that given page \n\n42\n00:02:21,310 --> 00:02:24,110\nstarting from these random pages.\n\n43\n00:02:24,110 --> 00:02:28,280\nIf you did this over-and-over again, and you counted the number of times you reached \n\n44\n00:02:28,280 --> 00:02:32,320\nthese pages, that would give you a measure of that page's popularity.\n\n45\n00:02:32,320 --> 00:02:35,720\nThis is very similar to the popularity function.\n\n46\n00:02:35,720 --> 00:02:38,820\nWe're going to define a function that we'll call the rank of a page.\n\n47\n00:02:38,820 --> 00:02:43,700\nLike the way we defined the popularity function, it's going to have 2 inputs. \n\n48\n00:02:43,700 --> 00:02:47,570\nIt is going to have a timestep, and it's going to have the page, \n\n49\n00:02:47,570 --> 00:02:49,170\nwhich we will use the URL for.\n\n50\n00:02:49,170 --> 00:02:55,540\nThe output of rank will be some number, except we'll define for timestep 0--\n\n51\n00:02:55,540 --> 00:02:59,610\nthis is our base case--we're going to define--all the ranks have value 1--\n\n52\n00:02:59,610 --> 00:03:01,620\nwe'll actually change that shortly, \n\n53\n00:03:01,620 --> 00:03:04,690\nbut we'll start out thinking of all the ranks having value 1\n\n54\n00:03:04,690 --> 00:03:06,390\nlike we did with the popularity scores.\n\n55\n00:03:06,390 --> 00:03:13,690\nThen we'll define the value of the rank at timestep T for any given URL, \n\n56\n00:03:13,690 --> 00:03:16,630\njust like we defined the popularity score.\n\n57\n00:03:16,630 --> 00:03:21,770\nIt's going to be the sum of all the pages that are friends with this page,\n\n58\n00:03:21,770 --> 00:03:24,140\n and what it means for our web page to be friends with another web page \n\n59\n00:03:24,140 --> 00:03:26,540\nis that it has a link to it.\n\n60\n00:03:26,540 --> 00:03:31,780\nThis is going to be for all the pages that exist, that have some like to that URL,\n\n61\n00:03:31,780 --> 00:03:34,110\nor its friends.\n\n62\n00:03:34,110 --> 00:03:36,520\nWe are going to go through each of those pages--\n\n63\n00:03:36,520 --> 00:03:38,990\nwe'll call them in-links instead of friends.\n\n64\n00:03:38,990 --> 00:03:40,750\nWe're going to go through those,\n\n65\n00:03:40,750 --> 00:03:45,890\nand we're going to sum up the ranks that we got for those pages at time T minus 1.\n\n66\n00:03:45,890 --> 00:03:50,860\nThis is our first model popularity of web pages. \n\n67\n00:03:50,860 --> 00:03:54,900\nThis is exactly the same as the model we had on popularity for people.\n\n68\n00:03:54,900 --> 00:03:56,870\nIt's not going to work that well yet. \n\n69\n00:03:56,870 --> 00:04:01,940\nOne of the reasons it's not going to work that well is some pages might have lots of links--\n\n70\n00:04:01,940 --> 00:04:06,750\nand if a page has lots of links, the value of each one of its links should be diminished. \n\n71\n00:04:06,750 --> 00:04:11,990\nIt shouldn't have the same value as a page that only 1 link that links to this URL.\n\n72\n00:04:11,990 --> 00:04:14,820\nMaybe that should be the same case for friend popularity.\n\n73\n00:04:14,820 --> 00:04:19,060\nIf someone has lots of friends, each friend is less valued. \n\n74\n00:04:19,060 --> 00:04:21,600\nWhereas, if someone only has a small number of friends,\n\n75\n00:04:21,600 --> 00:04:23,000\n has lots of time for each friend.\n\n76\n00:04:23,000 --> 00:04:25,870\nThis is the way we're going to model web popularity.\n\n77\n00:04:25,870 --> 00:04:29,260\nWe don't want to just give the same score to each link.\n\n78\n00:04:29,260 --> 00:04:33,210\nWe're going to change this by dividing by the number of out links.\n\n79\n00:04:33,210 --> 00:04:35,600\nIf a page has many outgoing links, \n\n80\n00:04:35,600 --> 00:04:39,880\nthe value of the page that it links to, is less for each page. \n\n81\n00:04:39,880 --> 00:04:45,020\nA page that is just a long list of links won't have that much influence on the rankings.\n\n82\n00:04:45,020 --> 00:04:46,650\nIf a page only has a few outgoing links, \n\n83\n00:04:46,650 --> 00:04:48,720\nwell, then they are worth more.\n\n84\n00:04:48,720 --> 00:04:52,860\nWhat we're going to do is divide this by the number of out links from P.\n\n85\n00:04:52,860 --> 00:04:56,300\nEach of the P pages--these will be the value of P--\n\n86\n00:04:56,300 --> 00:04:58,700\nas they go through the in links of URL, \n\n87\n00:04:58,700 --> 00:05:02,580\nwe're going to sum up the rank that we got on the previous timestep\n\n88\n00:05:02,580 --> 00:05:06,580\n and divide that by the number of out links.\n\n", "id": 444004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYx-ccDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/472007", "type": "Nugget", "id": 472007}, {"nuggetType": "lecture", "name": "Formal Calculations", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "fa6d0dab-a6ba-46a1-91e7-e420a6a2fad6", "name": "cs101_unit6_25_l_formal-calculations", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMjnHAw", "youtube_id": "fMsXwOB5LJ4", "youtube_state": "done", "path": "Course/cs101/Media/472008", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nSo let's remember how we defined our ranking function.\n\n2\n00:00:04,000 --> 00:00:06,000\nSo we said we're going to have a time step.\n\n3\n00:00:06,000 --> 00:00:08,000\nWe're going to keep going through steps to get more accurate rankings.\n\n4\n00:00:08,000 --> 00:00:13,000\nBut initially, we're going to give every rank: 1 divided by the number of pages. \n\n5\n00:00:13,000 --> 00:00:15,000\nBefore I call that capital \"N\", \n\n6\n00:00:15,000 --> 00:00:20,000\nI'm going to use \"npages\" as a more Pythonic variable name for that. \n\n7\n00:00:20,000 --> 00:00:24,000\nAnd we updated the rank at time step \"t\" \n\n8\n00:00:24,000 --> 00:00:28,000\nby adding the probability that the \n\n9\n00:00:28,000 --> 00:00:31,000\nrandom surfer starts over and randomly picks that page. \n\n10\n00:00:31,000 --> 00:00:34,000\nSo that's: (1 - d) is the probability of starting over,\n\n11\n00:00:34,000 --> 00:00:37,000\ndivided by npages--how many pages there are. \n\n12\n00:00:37,000 --> 00:00:39,000\nAnd remember that \"d\" is our damping constant,\n\n13\n00:00:39,000 --> 00:00:43,000\nand we'll decide that \"d\" is 0.8--that's the damping constant. \n\n14\n00:00:43,000 --> 00:00:47,000\nWe add to that the sum that we get of all the ranks,\n\n15\n00:00:47,000 --> 00:00:50,000\nall the pages that link to this URL. \n\n16\n00:00:50,000 --> 00:00:55,000\nWe add up \"d\" times the previous iteration--\n\n17\n00:00:55,000 --> 00:01:00,000\nso it's going to be: d times rank, on step \"t\" minus 1 of that page,\n\n18\n00:01:00,000 --> 00:01:04,000\nbut we want to divide that by the number of outlinks from p. \n\n19\n00:01:04,000 --> 00:01:06,000\nSo it's starting to look more like Python code. \n\n20\n00:01:06,000 --> 00:01:09,000\nWe want to simplify it a little bit before we get to Python code. \n\n21\n00:01:09,000 --> 00:01:12,000\nAnd the first thing we're going to do to simplify it \n\n22\n00:01:12,000 --> 00:01:16,000\nis observe that--well, we have this \"t\" parameter, \n\n23\n00:01:16,000 --> 00:01:19,000\nbut we only ever use the very previous one. \n\n24\n00:01:19,000 --> 00:01:22,000\nSo we don't really need to keep track of the rank value \n\n25\n00:01:22,000 --> 00:01:24,000\nfor all the differerent \"t\" values. \n\n26\n00:01:24,000 --> 00:01:26,000\nWe just need to keep track of the previous one. \n\n27\n00:01:26,000 --> 00:01:28,000\nAnd when we did Fibonacci, \n\n28\n00:01:28,000 --> 00:01:31,000\nwe kept track of current and next, in variables,\n\n29\n00:01:31,000 --> 00:01:33,000\nand that allowed us to keep track of the previous\n\n30\n00:01:33,000 --> 00:01:35,000\nand the previous previous Fibonacci numbers.\n\n31\n00:01:35,000 --> 00:01:37,000\nWhat we want to do with ranks is something similar\n\n32\n00:01:37,000 --> 00:01:41,000\nso we're going to use the variable, ranks, \n\n33\n00:01:41,000 --> 00:01:43,000\nto keep track of the current ranks.\n\n34\n00:01:43,000 --> 00:01:46,000\nAnd as we compute the newranks, \n\n35\n00:01:46,000 --> 00:01:48,000\nwe're going to use the variable, newranks. \n\n36\n00:01:48,000 --> 00:01:50,000\nSo we'll use ranks;\n\n37\n00:01:50,000 --> 00:01:55,000\nthis corresponds to the ranks at time t minus 1--\n\n38\n00:01:55,000 --> 00:01:57,000\nthe ranks at the previous iteration--and we'll have \n\n39\n00:01:57,000 --> 00:02:01,000\na variable, newranks--which is the ranks at time t. \n\n40\n00:02:01,000 --> 00:02:03,000\nAnd the reason we need both of those--\n\n41\n00:02:03,000 --> 00:02:06,000\nas we update the rank from each page--\n\n42\n00:02:06,000 --> 00:02:09,000\nso we're going to go through the pages, recomputing its rank, \n\n43\n00:02:09,000 --> 00:02:11,000\nwe can't lose the previous one. \n\n44\n00:02:11,000 --> 00:02:15,000\nWe still need to get rank at the previous step for that page. \n\n45\n00:02:15,000 --> 00:02:17,000\nIf we use the one that we got this time, \n\n46\n00:02:17,000 --> 00:02:19,000\nthat would distort the results. \n\n47\n00:02:19,000 --> 00:02:23,000\nIt would mean that the order that we update the ranks for changes the results. \n\n48\n00:02:23,000 --> 00:02:25,000\nSo we don't want the results to depend on\n\n49\n00:02:25,000 --> 00:02:27,000\nthe order that we go through the pages. \n\n50\n00:02:27,000 --> 00:02:30,000\nThat's why we need to keep track of both the previous values, \n\n51\n00:02:30,000 --> 00:02:35,000\nwhich will be used for ranks t-1 and the newranks. \n\n52\n00:02:35,000 --> 00:02:38,000\nOnce we have done that, we don't need the \"t\" parameter anymore. \n\n53\n00:02:38,000 --> 00:02:41,000\nWhat we're going to do is change this rank--\n\n54\n00:02:41,000 --> 00:02:45,000\nthe rank at time t is going to be the value of newrank,\n\n55\n00:02:45,000 --> 00:02:48,000\nand the value of rank at time t-1--\n\n56\n00:02:48,000 --> 00:02:50,000\nthat's the value of ranks. \n\n57\n00:02:50,000 --> 00:02:53,000\nThe other change I slipped into this--\n\n58\n00:02:53,000 --> 00:02:55,000\nbefore we had parentheses here,\n\n59\n00:02:55,000 --> 00:02:57,000\nand I've changed them to square brackets.\n\n60\n00:02:57,000 --> 00:03:00,000\nAnd square brackets should give you the idea that\n\n61\n00:03:00,000 --> 00:03:02,000\nwell, this might be our data structure\n\n62\n00:03:02,000 --> 00:03:05,000\nthat we're indexing--and that's correct. \n\n63\n00:03:05,000 --> 00:03:07,000\nWe want to index the data structure \n\n64\n00:03:07,000 --> 00:03:09,000\nand we want to index it by the URL \n\n65\n00:03:09,000 --> 00:03:11,000\nthat we're looking for. \n\n66\n00:03:11,000 --> 00:03:14,000\nAnd the Python dictionary provides a great way to do that. \n\n67\n00:03:14,000 --> 00:03:16,000\nAt the end of this will be a Python dictionary,\n\n68\n00:03:16,000 --> 00:03:18,000\nand that's exactly what we want. \n\n69\n00:03:18,000 --> 00:03:20,000\nSo I think we're ready to start looking at the code.\n\n70\n00:03:20,000 --> 00:03:23,000\nWe've written this formula; it's still a mix of math and Python,\n\n71\n00:03:23,000 --> 00:03:27,000\nbut we're going to turn this into the code for computing the Page Ranks. \n\n", "id": 472008}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYyeccDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/472009", "type": "Nugget", "id": 472009}, {"nuggetType": "lecture", "name": "Palindromes", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "5a5114ba-a9ed-490a-98b6-a1173fb4a976", "name": "cs101_unit6_09_p_palindromes", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKnvHAw", "youtube_id": "m5J5W4uXLQY", "youtube_state": "done", "path": "Course/cs101/Media/473001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Evans] We're going to do another example of defining our recursive procedure.\n\n2\n00:00:04,000 --> 00:00:09,000\nThe goal this time is to take in a string and determine whether or not it's a palindrome.\n\n3\n00:00:09,000 --> 00:00:13,000\nWhat a palindrome is is a string that reads the same way forwards and backwards.\n\n4\n00:00:13,000 --> 00:00:17,000\nSo an example of a palindrome would be level.\n\n5\n00:00:17,000 --> 00:00:20,000\nIf we read level forwards, we get level.\n\n6\n00:00:20,000 --> 00:00:25,000\nIf we read it backwards, we get exactly the same thing.\n\n7\n00:00:25,000 --> 00:00:30,000\nAnother example of a palindrome would be the word the single letter a.\n\n8\n00:00:30,000 --> 00:00:35,000\nIf we read a forwards, we get a. If we read a backwards, we also get a.\n\n9\n00:00:35,000 --> 00:00:38,000\nIn fact, any single letter must be a palindrome.\n\n10\n00:00:38,000 --> 00:00:40,000\nThe empty string is also a palindrome.\n\n11\n00:00:40,000 --> 00:00:43,000\nIf we read the empty string forward, we have the empty string.\n\n12\n00:00:43,000 --> 00:00:48,000\nIf we read the empty string backward, we also have the empty string.\n\n13\n00:00:48,000 --> 00:00:51,000\nI'll put quotes around these to indicate that they're strings.\n\n14\n00:00:51,000 --> 00:00:56,000\nSo our goal is to define a procedure that will take any string as input\n\n15\n00:00:56,000 --> 00:00:59,000\nand output True if that string is a palindrome.\n\n16\n00:00:59,000 --> 00:01:01,000\nI'm going to give you a few hints how to do this, \n\n17\n00:01:01,000 --> 00:01:06,000\nbut start thinking on your own if you can think of a way to define a procedure\n\n18\n00:01:06,000 --> 00:01:09,000\nthat tests whether or not a string is a palindrome.\n\n19\n00:01:09,000 --> 00:01:12,000\nThis is a pretty tough question. See how far you can get on your own.\n\n20\n00:01:12,000 --> 00:01:14,000\nI'm going to provide some hints before we make the quiz.\n\n21\n00:01:14,000 --> 00:01:19,000\nThe first hint is we want to think of what it means to be a palindrome,\n\n22\n00:01:19,000 --> 00:01:22,000\nto try to formalize that definition.\n\n23\n00:01:22,000 --> 00:01:27,000\nIf we knew easy ways to produce the reverse of the string and check if it's equal,\n\n24\n00:01:27,000 --> 00:01:29,000\nthat would be an easy way to solve this.\n\n25\n00:01:29,000 --> 00:01:32,000\nAnd in fact, there are ways to do that in Python, but we haven't seen them yet,\n\n26\n00:01:32,000 --> 00:01:37,000\nand I want to have you think about ways to do is_palindrome that don't depend on that.\n\n27\n00:01:37,000 --> 00:01:41,000\nSo that means we need to think about a way of defining is_palindrome\n\n28\n00:01:41,000 --> 00:01:43,000\nin terms of simpler things.\n\n29\n00:01:43,000 --> 00:01:47,000\nThe first thing to notice is there's 1 simple case where we know right away\n\n30\n00:01:47,000 --> 00:01:49,000\nwhether a string is a palindrome,\n\n31\n00:01:49,000 --> 00:01:53,000\nso we should think that that might be our base case.\n\n32\n00:01:53,000 --> 00:01:55,000\nWhen we do procedures on numbers,\n\n33\n00:01:55,000 --> 00:02:01,000\nour base case is often something that deals with a number like 0 or 1, a small number.\n\n34\n00:02:01,000 --> 00:02:04,000\nWhen we do recursive procedures on strings,\n\n35\n00:02:04,000 --> 00:02:08,000\nit's more likely that our base case is going to be the simpler string,\n\n36\n00:02:08,000 --> 00:02:10,000\nwhich is the empty string.\n\n37\n00:02:10,000 --> 00:02:15,000\nSo we know that if the input is an empty string, the result of this palindrome is True.\n\n38\n00:02:15,000 --> 00:02:18,000\nThe empty string is a palindrome.\n\n39\n00:02:18,000 --> 00:02:20,000\nWhat if the input is not an empty string?\n\n40\n00:02:20,000 --> 00:02:26,000\nThen one way to solve that would be to look at the first letter of the string\n\n41\n00:02:26,000 --> 00:02:28,000\nand look at the last letter of the string.\n\n42\n00:02:28,000 --> 00:02:31,000\nIf those 2 are equal, then it might be a palindrome.\n\n43\n00:02:31,000 --> 00:02:37,000\nIt's a palindrome if all the ones left over in the middle are also a palindrome.\n\n44\n00:02:37,000 --> 00:02:41,000\nSo this is how we could break the question of testing whether a string is a palindrome\n\n45\n00:02:41,000 --> 00:02:43,000\ninto smaller steps.\n\n46\n00:02:43,000 --> 00:02:50,000\nOur recursive case is going to test this first and the last character of the string,\n\n47\n00:02:50,000 --> 00:02:52,000\nsee if those are equal.\n\n48\n00:02:52,000 --> 00:02:56,000\nSo for our recursive case we're going to test the first and the last characters of the string.\n\n49\n00:02:56,000 --> 00:03:00,000\nIf those don't match, we know it's not a palindrome.\n\n50\n00:03:00,000 --> 00:03:04,000\nThat means we know the result is False.\n\n51\n00:03:04,000 --> 00:03:07,000\nIf they do match, we're not done. We need to check the rest of the string.\n\n52\n00:03:07,000 --> 00:03:12,000\nAnd that means we need to check the middle of the string, if that's a palindrome.\n\n53\n00:03:12,000 --> 00:03:17,000\nAnd because we're able to define this recursively,\n\n54\n00:03:17,000 --> 00:03:19,000\nremember that we're defining the procedure is_palindrome\n\n55\n00:03:19,000 --> 00:03:22,000\nbut we can do this test assuming that we've already defined it.\n\n56\n00:03:22,000 --> 00:03:25,000\nIn order to check whether the middle of the string is a palindrome,\n\n57\n00:03:25,000 --> 00:03:27,000\nwe can use the procedure that we're defining.\n\n58\n00:03:27,000 --> 00:03:32,000\nThis is like we were able to use factorial to define factorial in terms of a smaller number.\n\n59\n00:03:32,000 --> 00:03:36,000\nIn this case we're defining palindrome in terms of a smaller string.\n\n60\n00:03:36,000 --> 00:03:38,000\nSo I hope this is enough for you to get started.\n\n61\n00:03:38,000 --> 00:03:41,000\nSee if you can define the code for is_palindrome,\n\n62\n00:03:41,000 --> 00:03:45,000\nkeeping in mind that we can break it down into these 2 cases\n\n63\n00:03:45,000 --> 00:03:48,000\nwhere if it's empty, we know it's a palindrome right away;\n\n64\n00:03:48,000 --> 00:03:52,000\nif it's not empty, we need to look at the first and last characters.\n\n65\n00:03:52,000 --> 00:03:56,000\nIf they do match, we also need to look at the middle of the string.\n\n", "id": 473001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYkfccDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/474001", "type": "Nugget", "id": 474001}, {"nuggetType": "lecture", "name": "Good Definitions Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "94ef8991-9cfa-4a27-a290-6017195e0646", "name": "cs101_unit6_17_s_good-definitions", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOOGHQw", "youtube_id": "RI59ZiDQXk4", "youtube_state": "processing", "path": "Course/cs101/Media/476003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nSo the answer is no, that it does not, and the key reason why it does not\n\n2\n00:00:05,000 --> 00:00:10,000\nis there is no base case. Without a base case, it's not a recursive definition.\n\n3\n00:00:10,000 --> 00:00:16,000\nWhat it is is a circular definition, and that means that it doesn't actually give us \n\n4\n00:00:16,000 --> 00:00:21,000\nany answers, because we'll never finish here, right? The only way that we've defined\n\n5\n00:00:21,000 --> 00:00:24,000\npopularity, whether you look at the mathematical expression or the \n\n6\n00:00:24,000 --> 00:00:29,000\npython code, always involves calling popularity again, and we're never going to \n\n7\n00:00:29,000 --> 00:00:32,000\nget to a point where we can stop--that we're going to keep calling popularity\n\n8\n00:00:32,000 --> 00:00:36,000\nfor different people. If we think of doing this for our friend graph, well here's \n\n9\n00:00:36,000 --> 00:00:40,000\nwhat would happen. So if we want to know the popularity of Charlie, well we have to \n\n10\n00:00:40,000 --> 00:00:44,000\nlook at all the people who are friends with Charlie--so that means that the popularity \n\n11\n00:00:44,000 --> 00:00:50,000\nof Diana, the popularity of Edgar, and the popularity of Fred. But for each of those, \n\n12\n00:00:50,000 --> 00:00:55,000\nwe need to compute their popularity. So the popularity of Diana, that's going to be\n\n13\n00:00:55,000 --> 00:00:59,000\nequal to the popularity of Alice, and now we're here, but we need to keep going.\n\n14\n00:00:59,000 --> 00:01:04,000\nAnd the popularity of Alice is the popularity of Edgar plus the popularity of Bob.\n\n15\n00:01:04,000 --> 00:01:08,000\nBut we need to keep going. We still need the popularity of Edgar. Well that's \n\n16\n00:01:08,000 --> 00:01:14,000\npopularity of Fred, and we need the popularity of Bob, which is the popularity \n\n17\n00:01:14,000 --> 00:01:19,000\nof Fred, and we need the popularity of Fred, which is the popularity of Charlie\n\n18\n00:01:19,000 --> 00:01:25,000\nplus the popularity of Bob. So this is not okay, right? The problem is we started\n\n19\n00:01:25,000 --> 00:01:30,000\ntrying to figure out the popularity of Charlie. We did all this work following these\n\n20\n00:01:30,000 --> 00:01:35,000\nlinks backwards, and now to solve it, we need to know the popularity of Charlie.\n\n21\n00:01:35,000 --> 00:01:38,000\nBut that's what we were trying to solve. So this is not a recursive definition. \n\n22\n00:01:38,000 --> 00:01:42,000\nTo be a good recursive definition, we have to end up with a simpler version\n\n23\n00:01:42,000 --> 00:01:45,000\nof the problem and never go back to the one that we started with.\n\n24\n00:01:45,000 --> 00:01:48,000\nThe way we've defined it we get back to the one that we started with, \n\n25\n00:01:48,000 --> 00:01:52,000\nwe haven't made any progress. We're never going to get an enhancer. Charlie will be\n\n26\n00:01:52,000 --> 00:01:55,000\nvery unhappy because we'll never know how popular he is. \n\n", "id": 476003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYlfccDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/474005", "type": "Nugget", "id": 474005}, {"nuggetType": "lecture", "name": "Computing Page Rank", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "169eb1df-2441-4f59-8b3b-5aa4f463bf39", "name": "cs101_unit6_24_l_computing-page-rank", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKv1Ggw", "youtube_id": "If1QwdT1BJM", "youtube_state": "done", "path": "Course/cs101/Media/441003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nSo our goal is to write code now \n\n2\n00:00:03,000 --> 00:00:05,000\nthat computes the formula that we worked out earlier--\n\n3\n00:00:05,000 --> 00:00:09,000\nthat we want to compute the rank for each page. \n\n4\n00:00:09,000 --> 00:00:12,000\nThe thing that we're going to do--instead of\n\n5\n00:00:12,000 --> 00:00:14,000\nusing this recursive definition,\n\n6\n00:00:14,000 --> 00:00:17,000\nwe're going to write a loop that goes through the timesteps,\n\n7\n00:00:17,000 --> 00:00:19,000\nand we're going to figure out how many timesteps we want.\n\n8\n00:00:19,000 --> 00:00:21,000\nThe more timesteps, the more accurate rankings we'll have--\n\n9\n00:00:21,000 --> 00:00:23,000\nbut the longer it will take. \n\n10\n00:00:23,000 --> 00:00:25,000\nSo we'll just pick a value \n\n11\n00:00:25,000 --> 00:00:27,000\nfor the maximum number of timesteps\n\n12\n00:00:27,000 --> 00:00:29,000\nand we'll make our loop go through those steps, \n\n13\n00:00:29,000 --> 00:00:31,000\ncomputing these equations. \n\n14\n00:00:31,000 --> 00:00:33,000\nSo let's work out the code to do that. \n\n15\n00:00:33,000 --> 00:00:35,000\nSo now that we've got the graph,\n\n16\n00:00:35,000 --> 00:00:37,000\nall that's left to do is figure out how to use it \n\n17\n00:00:37,000 --> 00:00:39,000\nto compute the Page Ranks. \n\n18\n00:00:39,000 --> 00:00:42,000\nSo to do that, we'll make a procedure called, \"compute.ranks\".\n\n19\n00:00:42,000 --> 00:00:46,000\nIt takes, as input, a graph that gives the link structure. \n\n20\n00:00:46,000 --> 00:00:49,000\nSo, as an example, we have our graph  \n\n21\n00:00:49,000 --> 00:00:52,000\nthat has the URLs--\n\n22\n00:00:52,000 --> 00:00:56,000\nand each URL, followed by the link of pages that it links to .\n\n23\n00:00:56,000 --> 00:01:00,000\nAnd this is the graph that was produced by our crawler. \n\n24\n00:01:00,000 --> 00:01:02,000\nAnd crawl_web produced, as outputs, \n\n25\n00:01:02,000 --> 00:01:05,000\na graph as well as an index.\n\n26\n00:01:05,000 --> 00:01:08,000\nWe're going to use the graph as the input to compute.ranks.\n\n27\n00:01:08,000 --> 00:01:11,000\nSo the output from compute.ranks will be a dictionary,\n\n28\n00:01:11,000 --> 00:01:14,000\ngiving, for each URL, its urank--\n\n29\n00:01:14,000 --> 00:01:17,000\nthe ranking that we compute, using our formula--\n\n30\n00:01:17,000 --> 00:01:19,000\nand the higher the rank, the better.\n\n31\n00:01:19,000 --> 00:01:22,000\nAnd what we're going to do, once we have those ranks--\n\n32\n00:01:22,000 --> 00:01:25,000\nand this last part is going to be left as a homework assignment for you--\n\n33\n00:01:25,000 --> 00:01:28,000\nwe're going to--instead of having just \"lookup\", \n\n34\n00:01:28,000 --> 00:01:30,000\nwe're going to have \"lookup_best\". \n\n35\n00:01:30,000 --> 00:01:32,000\nAnd lookup_best will take 3 inputs. \n\n36\n00:01:32,000 --> 00:01:35,000\nIt will take the keyword we're looking for.\n\n37\n00:01:35,000 --> 00:01:39,000\nIt will also take the index that came from the crawl,\n\n38\n00:01:39,000 --> 00:01:41,000\nand it will also take the ranks. \n\n39\n00:01:41,000 --> 00:01:44,000\nAnd from those 3 inputs, the index will give us \n\n40\n00:01:44,000 --> 00:01:46,000\nall of the pages that contain the keyword.\n\n41\n00:01:46,000 --> 00:01:48,000\nAnd then what lookup_best will do is \n\n42\n00:01:48,000 --> 00:01:51,000\nuse the ranks to find the highest Rank Page \n\n43\n00:01:51,000 --> 00:01:53,000\nand give that as the output. \n\n44\n00:01:53,000 --> 00:01:56,000\nSo once we've done that, you'll have a complete search engine. \n\n45\n00:01:56,000 --> 00:02:00,000\nYou'll have a crawler that starts from a seed, \n\n46\n00:02:00,000 --> 00:02:03,000\nfinds pages, produces an index, produces a graph;\n\n47\n00:02:03,000 --> 00:02:05,000\nthat graph is the input to compute.ranks;\n\n48\n00:02:05,000 --> 00:02:08,000\ncompute.ranks uses our page-ranking algorithm \n\n49\n00:02:08,000 --> 00:02:11,000\nto figure out the pages that are most popular.\n\n50\n00:02:11,000 --> 00:02:14,000\nAnd then lookup_best takes the graph, as input--\n\n51\n00:02:14,000 --> 00:02:16,000\nthe index as input--and the keyword, \n\n52\n00:02:16,000 --> 00:02:18,000\nfinds the pages that contain that keyword,\n\n53\n00:02:18,000 --> 00:02:21,000\nand identifies the one that's best, using the ranks. \n\n54\n00:02:21,000 --> 00:02:24,000\nSo that's what you'll have, after the homework of this unit. \n\n55\n00:02:24,000 --> 00:02:27,000\nWe're going to finish compute.ranks now\n\n56\n00:02:27,000 --> 00:02:31,000\nand leave it up to you to define lookup_best, as a homework question.  \n\n", "id": 441003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYl_ccDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/474007", "type": "Nugget", "id": 474007}, {"nuggetType": "lecture", "name": "Finishing Urank Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "eb12d19f-f1ff-47b5-a12a-45f038b90528", "name": "cs101_unit6_27_s_finishing-urank", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMLqGww", "youtube_id": "YjrysJkSDF0", "youtube_state": "done", "path": "Course/cs101/Media/456002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nSo here's what we want to do: we want to go through all the pages in the graph. \n\n2\n00:00:05,000 --> 00:00:07,000\nSo we'll call them \"nodes\" this time. \n\n3\n00:00:07,000 --> 00:00:09,000\nWe can't use \"page\" again because we already used page up here.\n\n4\n00:00:09,000 --> 00:00:12,000\nSo we're going to go through each page in the graph, \n\n5\n00:00:12,000 --> 00:00:14,000\ngiving it the name, node.\n\n6\n00:00:14,000 --> 00:00:16,000\nAnd for each node, now\n\n7\n00:00:16,000 --> 00:00:18,000\nwhat we need to do is check \n\n8\n00:00:18,000 --> 00:00:20,000\nwhether that page links to this one. \n\n9\n00:00:20,000 --> 00:00:23,000\nSo we're going to look in graph[node]--\n\n10\n00:00:23,000 --> 00:00:26,000\nthat's going to get us the list of all the pages that [node] links to.\n\n11\n00:00:26,000 --> 00:00:31,000\nIf \"page\" is in that list--well, that means that [node] links to \"page\". \n\n12\n00:00:31,000 --> 00:00:35,000\nSo that means that we should add to newrank, \n\n13\n00:00:35,000 --> 00:00:37,000\nbased on the rank of this [node].\n\n14\n00:00:37,000 --> 00:00:39,000\nSo that's what we're going to do.\n\n15\n00:00:39,000 --> 00:00:41,000\nWe're going to add to newrank,\n\n16\n00:00:41,000 --> 00:00:43,000\nand the new value is going to be the old value--\n\n17\n00:00:43,000 --> 00:00:46,000\nwe're summing into the value of newrank. \n\n18\n00:00:46,000 --> 00:00:49,000\nWe're going to multiple by \"d\"--that's our damping factor,\n\n19\n00:00:49,000 --> 00:00:51,000\nand the value that we're going to use here \n\n20\n00:00:51,000 --> 00:00:54,000\nis the Page Rank of the node--\n\n21\n00:00:54,000 --> 00:00:58,000\nremember, it's the node that links to this node that we care about--\n\n22\n00:00:58,000 --> 00:01:00,000\nso we're getting the rank of the page. \n\n23\n00:01:00,000 --> 00:01:04,000\nWhat we want to do is divide that by the number of outlinks from that page. \n\n24\n00:01:04,000 --> 00:01:06,000\nAnd that' s important.\n\n25\n00:01:06,000 --> 00:01:09,000\nThat means that a page with many links--\n\n26\n00:01:09,000 --> 00:01:11,000\nthe value of each link is less. \n\n27\n00:01:11,000 --> 00:01:14,000\nWe need to divide that by the length of that list, \n\n28\n00:01:14,000 --> 00:01:18,000\nwhich is what we get by looking at graph[node].\n\n29\n00:01:18,000 --> 00:01:21,000\nSo that's all we need and we're going to update the newrank.\n\n30\n00:01:21,000 --> 00:01:23,000\nWe're going through all the nodes in the graph.\n\n31\n00:01:23,000 --> 00:01:25,000\nWe're finding all the nodes that link to this one, \n\n32\n00:01:25,000 --> 00:01:28,000\nand we're updating our rank, using the formula, to get that--\n\n33\n00:01:28,000 --> 00:01:31,000\nand at the end, we're returning the ranks. \n\n34\n00:01:31,000 --> 00:01:33,000\nSo let's try that in the Python Interpreter. \n\n35\n00:01:33,000 --> 00:01:36,000\nWe have the code that we just wrote for our compute_ranks. \n\n36\n00:01:36,000 --> 00:01:39,000\nWe're going to use crawl_web--passing in the example site--\n\n37\n00:01:39,000 --> 00:01:41,000\nassigning the outputs to the variable, index, \n\n38\n00:01:41,000 --> 00:01:43,000\nwhich is the index in \"graph\". \n\n39\n00:01:43,000 --> 00:01:46,000\nAnd then we're passing in graph to compute_ranks,\n\n40\n00:01:46,000 --> 00:01:48,000\nstoring the result in variable, ranks. \n\n41\n00:01:48,000 --> 00:01:53,000\nAnd we can print out the result in \"ranks\" to see the Page Ranks. \n\n42\n00:01:53,000 --> 00:01:55,000\nSo here's what we get: \n\n43\n00:01:55,000 --> 00:01:59,000\nso we get a dictionary for each URL that we crawled.\n\n44\n00:01:59,000 --> 00:02:03,000\nWe have an entry where we have the URL, \n\n45\n00:02:03,000 --> 00:02:05,000\nfollowed by each Page Rank, as the value. \n\n46\n00:02:05,000 --> 00:02:08,000\nSo let's see if the ranks that we get make sense. \n\n47\n00:02:08,000 --> 00:02:11,000\nSo, going back to our example site, \n\n48\n00:02:11,000 --> 00:02:13,000\nwe have the page, kathleen, \n\n49\n00:02:13,000 --> 00:02:15,000\nthat has 2 links going into it. \n\n50\n00:02:15,000 --> 00:02:17,000\nWe have the page, nickel,\n\n51\n00:02:17,000 --> 00:02:19,000\nthat has 3 links going into it.\n\n52\n00:02:19,000 --> 00:02:21,000\nIf we just did simple link counting--\n\n53\n00:02:21,000 --> 00:02:25,000\nwell, then \"nickel\" should be more popular than \"kathleen\". \n\n54\n00:02:25,000 --> 00:02:28,000\nIf we look at the Page Ranks--well, the Page Rank for \"nickel\" \n\n55\n00:02:28,000 --> 00:02:30,000\nis 0.97. \n\n56\n00:02:30,000 --> 00:02:33,000\nThe Page Rank for \"kathleen\" is 0.11.\n\n57\n00:02:33,000 --> 00:02:35,000\nSo the Page Rank is actually higher \n\n58\n00:02:35,000 --> 00:02:38,000\nfor the page that only has 2 incoming links. \n\n59\n00:02:38,000 --> 00:02:40,000\nAnd the reason for that is: \n\n60\n00:02:40,000 --> 00:02:42,000\nwhile even though it only has 2 incoming links, \n\n61\n00:02:42,000 --> 00:02:44,000\nthe links that are coming into the page \n\n62\n00:02:44,000 --> 00:02:46,000\nare from popular pages.\n\n63\n00:02:46,000 --> 00:02:48,000\nIt's coming in from the \"index\" page, \n\n64\n00:02:48,000 --> 00:02:52,000\nand it's coming in from the very popular \"nickel\" page. \n\n65\n00:02:52,000 --> 00:02:55,000\nSo that's why the Page Rank of \"kathleen\" is actually higher \n\n66\n00:02:55,000 --> 00:02:57,000\nthan the Page Rank of \"nickel\".\n\n", "id": 456002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYmfccDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/474009", "type": "Nugget", "id": 474009}, {"nuggetType": "lecture", "name": "Implementing Urank", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "5eb1f3d2-292f-48fc-9213-3b8678e6ec4b", "name": "cs101_unit6_23_p_implementing-urank", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJr3HAw", "youtube_id": "-JJRw1K_6ZU", "youtube_state": "uploading", "path": "Course/cs101/Media/474010", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nSo your goal for this quiz is to finish modifying the crawl_web procedure\n\n2\n00:00:04,000 --> 00:00:07,000\nso that, instead of returning just the index, \n\n3\n00:00:07,000 --> 00:00:09,000\nit returns both an index and a graph--\n\n4\n00:00:09,000 --> 00:00:11,000\nand the graph gives the link structure.\n\n5\n00:00:11,000 --> 00:00:13,000\nThe graph should be a dictionary, \n\n6\n00:00:13,000 --> 00:00:15,000\nwhere the entries in the graph are \n\n7\n00:00:15,000 --> 00:00:18,000\na URL--which is the target page--\n\n8\n00:00:18,000 --> 00:00:21,000\nand a list, which is the pages that link to that target. \n\n9\n00:00:21,000 --> 00:00:24,000\nSo to test your graph-making code \n\n10\n00:00:24,000 --> 00:00:26,000\nwe've provided a sample site at this URL. \n\n11\n00:00:26,000 --> 00:00:31,000\nSo if that's the length that you pass in as the seed for the crawl_web, \n\n12\n00:00:31,000 --> 00:00:33,000\nit's going to crawl the site we set up,\n\n13\n00:00:33,000 --> 00:00:36,000\nand there's an index page that looks like this--it's got 5 links on it. \n\n14\n00:00:36,000 --> 00:00:39,000\nAnd those links go to different Web pages.\n\n15\n00:00:39,000 --> 00:00:42,000\nSo the first one goes to my Favorite Hummus Recipe.\n\n16\n00:00:42,000 --> 00:00:47,000\nSo there's a link from index.html,\n\n17\n00:00:47,000 --> 00:00:50,000\nand it goes to the page, hummus.html. \n\n18\n00:00:50,000 --> 00:00:54,000\nAnd if we follow that link, we get to a page that has new links on it. \n\n19\n00:00:54,000 --> 00:00:59,000\nThe second link goes to a page, arsenic.html--\n\n20\n00:00:59,000 --> 00:01:03,000\nand that page includes a link to the Nickel Chef page. \n\n21\n00:01:03,000 --> 00:01:05,000\nAnd the Nickel Chef page \n\n22\n00:01:05,000 --> 00:01:09,000\nincludes a link to kathleen.html,\n\n23\n00:01:09,000 --> 00:01:11,000\nand that page has no links on it. \n\n24\n00:01:11,000 --> 00:01:13,000\nAnd the third link on the index page \n\n25\n00:01:13,000 --> 00:01:16,000\nalso goes to the kathleen.html page. \n\n26\n00:01:16,000 --> 00:01:19,000\nAnd there's 2 more links on the Start page.\n\n27\n00:01:19,000 --> 00:01:21,000\nThe first one goes to the Nickel Chef page,\n\n28\n00:01:21,000 --> 00:01:23,000\nwhich we've already seen. \n\n29\n00:01:23,000 --> 00:01:25,000\nAnd the last link goes to the Zinc Chef.\n\n30\n00:01:25,000 --> 00:01:27,000\nAnd from the Zinc Chef page, we have 2 more links:\n\n31\n00:01:29,000 --> 00:01:32,000\nwe have 1 to the Nickel page\n\n32\n00:01:32,000 --> 00:01:38,000\nand we have 1 to the Arsenic Chef's Famous Hummus Recipe page. \n\n33\n00:01:38,000 --> 00:01:40,000\nSo this is a pretty complicated link structure;\n\n34\n00:01:40,000 --> 00:01:42,000\nalthough it's very simple, compared to the things\n\n35\n00:01:42,000 --> 00:01:44,000\nthat we actually find on the Web. \n\n36\n00:01:44,000 --> 00:01:46,000\nBut your goal is to be able to produce this graph \n\n37\n00:01:46,000 --> 00:01:49,000\nby modifying the code that we have for crawl_web\n\n38\n00:01:49,000 --> 00:01:51,000\nand then once we have the page ranks, \n\n39\n00:01:51,000 --> 00:01:54,000\nwe'll be able to use page rank to find the best page \n\n40\n00:01:54,000 --> 00:01:56,000\nto find the Hummus Recipe. \n\n41\n00:01:56,000 --> 00:02:00,000\nSo for this site, the graph that your crawl_web should produce\n\n42\n00:02:00,000 --> 00:02:03,000\nshould have entries that show these connections. \n\n43\n00:02:03,000 --> 00:02:05,000\nSo there should be an entry \n\n44\n00:02:05,000 --> 00:02:09,000\nwhere the URL is the urank/index.html.\n\n45\n00:02:09,000 --> 00:02:13,000\nI'm leaving out the beginning of the URL. \n\n46\n00:02:13,000 --> 00:02:17,000\nAnd the entries should be a list of all the pages that links to. \n\n47\n00:02:17,000 --> 00:02:19,000\nSo there are going to be 5 pages--all 5 of these \n\n48\n00:02:19,000 --> 00:02:22,000\nshould be in the list here. \n\n49\n00:02:22,000 --> 00:02:24,000\nThere should be the hummus page, \n\n50\n00:02:24,000 --> 00:02:27,000\nthere should be the arsenic page, \n\n51\n00:02:27,000 --> 00:02:29,000\nand the other 3 pages. \n\n52\n00:02:29,000 --> 00:02:32,000\nThe order that links appear in this list doesn't matter. \n\n53\n00:02:32,000 --> 00:02:34,000\nIt's correct, as long as we have all 5 of the links\n\n54\n00:02:34,000 --> 00:02:37,000\nthat you can reach from the index.html page. \n\n55\n00:02:37,000 --> 00:02:41,000\nThe kathleen.html page doesn't have any outgoing links,\n\n56\n00:02:41,000 --> 00:02:45,000\nso the entry for kathleen.html should be an empty list. \n\n57\n00:02:45,000 --> 00:02:48,000\nSo see if you can figure out how to change the code for crawl_web\n\n58\n00:02:48,000 --> 00:02:50,000\nto produce, as its second output, \n\n59\n00:02:50,000 --> 00:02:55,000\na graph that shows the structure of the Web pages that we crawled. \n\n", "id": 474010}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYm_ccDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/474011", "type": "Nugget", "id": 474011}, {"nuggetType": "lecture", "name": "Recursive Vs Iterative", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "42de6284-b32b-4db4-b17e-c3724d088b67", "name": "cs101_unit6_10_l_recursive-vs-iterative", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIvTGww", "youtube_id": "Yx0OFnUuAuI", "youtube_state": "done", "path": "Course/cs101/Media/453003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Narrator] Any procedure that we could write recursively,\n\n2\n00:00:04,000 --> 00:00:07,000\nwe can also write without using a recursive definition,\n\n3\n00:00:07,000 --> 00:00:11,000\nand I want to show you another way that we might have defined is palindrome.\n\n4\n00:00:11,000 --> 00:00:13,000\nHere we're doing this with a for loop, \n\n5\n00:00:13,000 --> 00:00:19,000\nand we're looping using the variable I and the range from 0 to the length of S divided by 2.\n\n6\n00:00:19,000 --> 00:00:24,000\nThat's going through halfway of S, and inside the loop,\n\n7\n00:00:24,000 --> 00:00:32,000\nwe have an if test that checks if the character at position I is different from the character at position -I + 1.\n\n8\n00:00:32,000 --> 00:00:36,000\nThat's going to be counting from the back of the string I's position away.\n\n9\n00:00:36,000 --> 00:00:40,000\nIf those are different, then we found a mismatch and we return false.\n\n10\n00:00:40,000 --> 00:00:43,000\nIf they're not different, we're going to keep going through the loop.\n\n11\n00:00:43,000 --> 00:00:46,000\nOnce we get to the end of the loop without finding any differences,\n\n12\n00:00:46,000 --> 00:00:48,000\nwe know it's a palindrome and we return true.\n\n13\n00:00:48,000 --> 00:00:51,000\nThis is also another way we could define is palindrome.\n\n14\n00:00:51,000 --> 00:00:55,000\nI think this is more complicated to understand and harder to get right.\n\n15\n00:00:55,000 --> 00:00:58,000\nIt took me 3 tries before this could work correctly,\n\n16\n00:00:58,000 --> 00:01:02,000\nwhereas the recursive definition I could get right the first time.\n\n17\n00:01:02,000 --> 00:01:06,000\nIf we wanted to test very long palindromes this would be much more efficient \n\n18\n00:01:06,000 --> 00:01:09,000\nthan the code that we had with the recursive definition,\n\n19\n00:01:09,000 --> 00:01:11,000\nand there are a couple reasons for that.\n\n20\n00:01:11,000 --> 00:01:14,000\nOne is that the recursive definition keeps making new strings.\n\n21\n00:01:14,000 --> 00:01:19,000\nEvery time we do the recursive call we have to create a new string and that's pretty expensive.\n\n22\n00:01:19,000 --> 00:01:23,000\nAnother reason is that the recursive calls themselves are fairly expensive,\n\n23\n00:01:23,000 --> 00:01:26,000\nand there are languages that make recursive calls fairly cheap.\n\n24\n00:01:26,000 --> 00:01:28,000\nPython is not one of them.\n\n25\n00:01:28,000 --> 00:01:31,000\nIn Python, it's fairly expensive to do a recursive call.\n\n26\n00:01:31,000 --> 00:01:34,000\nFor most procedures, the recursive way is often the most elegant\n\n27\n00:01:34,000 --> 00:01:36,000\nand the easiest way to get correct.\n\n28\n00:01:36,000 --> 00:01:40,000\nIf we're really worried about performance and we need procedures to work on really large inputs,\n\n29\n00:01:40,000 --> 00:01:46,000\nwe're often better off trying to find a non-recursive way of defining that procedure.\n\n", "id": 453003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY-f4cDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/475001", "type": "Nugget", "id": 475001}, {"nuggetType": "program", "name": "Bunnies", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY4oYdDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/476002", "suppliedCode": "#Define a procedure, fibonacci, that takes a natural number as its input, and\r\n#returns the value of that fibonacci number.\r\n\r\n#Two Base Cases:\r\n#    fibonacci(0) => 0\r\n#    fibonacci(1) => 1\r\n\r\n#Recursive Case:\r\n#    n > 1 : fibonacci(n) => fibonacci(n-1) + fibonacci(n-2)\r\n\r\ndef fibonacci(n):\r\n\r\n\r\n#print fibonacci(0)\r\n#>>> 0\r\n#print fibonacci(1)\r\n#>>> 1\r\n#print fibonacci(15)\r\n#>>> 610", "type": "Nugget", "id": 476002}, {"nuggetType": "lecture", "name": "Ranking Web Pages", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "7b2e86b7-190b-4e6e-9a5e-9b82efbb1f80", "name": "cs101_unit6_15_l_ranking-web-pages", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMqOHQw", "youtube_id": "gk6NRUD3q14", "youtube_state": "processing", "path": "Course/cs101/Media/477002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\n[Narrator] Now that you survived the bunny uprising,\n\n2\n00:00:03,000 --> 00:00:06,000\nwe're ready to get to the main goal of this class as far as building the search engine.\n\n3\n00:00:06,000 --> 00:00:10,000\nOur goal is to improve the results by finding the best webpage,\n\n4\n00:00:10,000 --> 00:00:13,000\ninstead of just returning a list of all the webpages that match a query.\n\n5\n00:00:13,000 --> 00:00:19,000\nAs the web has grown, it's become more and more important for search engines to do this ranking well,\n\n6\n00:00:19,000 --> 00:00:22,000\nthat what really distinguished Google from previous search engines\n\n7\n00:00:22,000 --> 00:00:26,000\nwas they had a much smarter way of ranking pages that produced more useful results\n\n8\n00:00:26,000 --> 00:00:33,000\nwhere the first 1 or 2 results in response to a search query were often the very thing that the user was searching for. \n\n9\n00:00:33,000 --> 00:00:36,000\nNow we're ready to start thinking about the problem of how to rank webpages. \n\n10\n00:00:36,000 --> 00:00:39,000\nLet's start by recapping how our search engine works.\n\n11\n00:00:39,000 --> 00:00:44,000\nWe started by building a crawler, and what the crawler did,\n\n12\n00:00:44,000 --> 00:00:48,000\nand this was what we did in units 1, 2, and 3;\n\n13\n00:00:48,000 --> 00:00:53,000\nwhat the crawler did was follow all the links in the webpages,\n\n14\n00:00:53,000 --> 00:00:58,000\nfollowing those links, building up an index, and \n\n15\n00:00:58,000 --> 00:01:06,000\nthe end result of the crawler, after units 4 and 5, was we had an index.\n\n16\n00:01:06,000 --> 00:01:10,000\nBy the end of unit 5, it was a hash table where we could look up a key word,\n\n17\n00:01:10,000 --> 00:01:14,000\nand we would find entry where that key word might appear,\n\n18\n00:01:14,000 --> 00:01:17,000\nand we would follow that, and we could look through each of those entries \n\n19\n00:01:17,000 --> 00:01:22,000\nto find the one that matched and that would match the key word we were looking for,\n\n20\n00:01:22,000 --> 00:01:28,000\nand as its value it would have a list of all the URLs where that key word appears,\n\n21\n00:01:28,000 --> 00:01:33,000\nand the order of those URLs in that list was determined just by how we added to them to the crawl.\n\n22\n00:01:33,000 --> 00:01:36,000\nEvery time we encountered a new page,\n\n23\n00:01:36,000 --> 00:01:39,000\nwe indexed that page and we added  a URL for that key word.\n\n24\n00:01:39,000 --> 00:01:42,000\nThe one that's first in this list is just the one that we happen to find first.\n\n25\n00:01:42,000 --> 00:01:47,000\nSay it's the C page, the one that's second would be the one that we find next,\n\n26\n00:01:47,000 --> 00:01:49,000\nand it's this page.\n\n27\n00:01:49,000 --> 00:01:53,000\nThis doesn't tell us anything about which page is best.\n\n28\n00:01:53,000 --> 00:01:58,000\nThe order of the URLs in the list and what we were getting as your output\n\n29\n00:01:58,000 --> 00:02:01,000\njust depends on the order that things happen to go in the crawl.\n\n30\n00:02:01,000 --> 00:02:05,000\nWhen the web was really small, which was quite awhile ago now,\n\n31\n00:02:05,000 --> 00:02:11,000\nthis was sort of okay that there were only a few pages that might match a given key word,\n\n32\n00:02:11,000 --> 00:02:14,000\nand you could look through them all and decide what one you wanted.\n\n33\n00:02:14,000 --> 00:02:16,000\nWith the web today, this doesn't work at all.\n\n34\n00:02:16,000 --> 00:02:21,000\nThere are thousands of pages that match any interesting key word, maybe millions,\n\n35\n00:02:21,000 --> 00:02:24,000\ncertainly many more than you want to look through by hand.\n\n36\n00:02:24,000 --> 00:02:30,000\nThe most important thing that a good search engine does is figure out how to rank these pages,\n\n37\n00:02:30,000 --> 00:02:34,000\nso the one that the user gets is to figure out how to rank these pages \n\n38\n00:02:34,000 --> 00:02:38,000\nso the one that's at the front of the list is the one the user wants.\n\n39\n00:02:38,000 --> 00:02:42,000\nThat's our goal for the rest of this unit to figure out how to rank pages.\n\n40\n00:02:42,000 --> 00:02:48,000\nBefore we do this for web pages, we're going to do something very similar but perhaps easier to relate to.\n\n41\n00:02:48,000 --> 00:02:52,000\nWe're going to talk about how we decide whose popular.\n\n", "id": 477002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYy44dDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/477003", "type": "Nugget", "id": 477003}, {"nuggetType": "quiz", "name": "Implementing Urank", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYs5YdDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/478003", "type": "Nugget", "id": 478003}, {"nuggetType": "lecture", "name": "Good Definitions", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "1b77dea0-611c-4637-88de-6a0e22941661", "name": "cs101_unit6_17_q_good-definitions", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLKWHQw", "youtube_id": "tKi3pBM8qvE", "youtube_state": "processing", "path": "Course/cs101/Media/478002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nSo the question is, is this a good recursive definition? \n\n2\n00:00:04,000 --> 00:00:11,000\nThe answers are yes or no. And for something to be a good definition, \n\n3\n00:00:11,000 --> 00:00:20,000\nwell it has to provide a meaningful answer for all possible inputs. \n\n", "id": 478002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYmZ4dDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/479001", "type": "Nugget", "id": 479001}, {"nuggetType": "program", "name": "Finishing Urank", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYm54dDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/479003", "suppliedCode": "#Finishing the page ranking algorithm.\n\ndef compute_ranks(graph):\n    d = 0.8 # damping factor\n    numloops = 10\n    \n    ranks = {}\n    npages = len(graph)\n    for page in graph:\n        ranks[page] = 1.0 / npages\n    \n    for i in range(0, numloops):\n        newranks = {}\n        for page in graph:\n            newrank = (1 - d) / npages\n            \n            #Insert Code Here\n            \n            newranks[page] = newrank\n        ranks = newranks\n    return ranks\n\n\n\ncache = {\n   'http://udacity.com/cs101x/urank/index.html': \"\"\"<html>\n<body>\n<h1>Dave's Cooking Algorithms</h1>\n<p>\nHere are my favorite recipies:\n<ul>\n<li> <a href=\"http://udacity.com/cs101x/urank/hummus.html\">Hummus Recipe</a>\n<li> <a href=\"http://udacity.com/cs101x/urank/arsenic.html\">World's Best Hummus</a>\n<li> <a href=\"http://udacity.com/cs101x/urank/kathleen.html\">Kathleen's Hummus Recipe</a>\n</ul>\n\nFor more expert opinions, check out the \n<a href=\"http://udacity.com/cs101x/urank/nickel.html\">Nickel Chef</a> \nand <a href=\"http://udacity.com/cs101x/urank/zinc.html\">Zinc Chef</a>.\n</body>\n</html>\n\n\n\n\n\n\n\"\"\", \n   'http://udacity.com/cs101x/urank/zinc.html': \"\"\"<html>\n<body>\n<h1>The Zinc Chef</h1>\n<p>\nI learned everything I know from \n<a href=\"http://udacity.com/cs101x/urank/nickel.html\">the Nickel Chef</a>.\n</p>\n<p>\nFor great hummus, try \n<a href=\"http://udacity.com/cs101x/urank/arsenic.html\">this recipe</a>.\n\n</body>\n</html>\n\n\n\n\n\n\n\"\"\", \n   'http://udacity.com/cs101x/urank/nickel.html': \"\"\"<html>\n<body>\n<h1>The Nickel Chef</h1>\n<p>\nThis is the\n<a href=\"http://udacity.com/cs101x/urank/kathleen.html\">\nbest Hummus recipe!\n</a>\n\n</body>\n</html>\n\n\n\n\n\n\n\"\"\", \n   'http://udacity.com/cs101x/urank/kathleen.html': \"\"\"<html>\n<body>\n<h1>\nKathleen's Hummus Recipe\n</h1>\n<p>\n\n<ol>\n<li> Open a can of garbonzo beans.\n<li> Crush them in a blender.\n<li> Add 3 tablesppons of tahini sauce.\n<li> Squeeze in one lemon.\n<li> Add salt, pepper, and buttercream frosting to taste.\n</ol>\n\n</body>\n</html>\n\n\"\"\", \n   'http://udacity.com/cs101x/urank/arsenic.html': \"\"\"<html>\n<body>\n<h1>\nThe Arsenic Chef's World Famous Hummus Recipe\n</h1>\n<p>\n\n<ol>\n<li> Kidnap the <a href=\"http://udacity.com/cs101x/urank/nickel.html\">Nickel Chef</a>.\n<li> Force her to make hummus for you.\n</ol>\n\n</body>\n</html>\n\n\"\"\", \n   'http://udacity.com/cs101x/urank/hummus.html': \"\"\"<html>\n<body>\n<h1>\nHummus Recipe\n</h1>\n<p>\n\n<ol>\n<li> Go to the store and buy a container of hummus.\n<li> Open it.\n</ol>\n\n</body>\n</html>\n\n\n\n\n\"\"\", \n}\n\ndef crawl_web(seed): # returns index, graph of inlinks\n    tocrawl = [seed]\n    crawled = []\n    graph = {}  # <url>, [list of pages it links to]\n    index = {} \n    while tocrawl: \n        page = tocrawl.pop()\n        if page not in crawled:\n            content = get_page(page)\n            add_page_to_index(index, page, content)\n            outlinks = get_all_links(content)\n            \n            \n            graph[page] = outlinks\n            \n            \n            union(tocrawl, outlinks)\n            crawled.append(page)\n    return index, graph\n\n\ndef get_page(url):\n    if url in cache:\n        return cache[url]\n    else:\n        return None\n    \ndef get_next_target(page):\n    start_link = page.find('<a href=')\n    if start_link == -1: \n        return None, 0\n    start_quote = page.find('\"', start_link)\n    end_quote = page.find('\"', start_quote + 1)\n    url = page[start_quote + 1:end_quote]\n    return url, end_quote\n\ndef get_all_links(page):\n    links = []\n    while True:\n        url, endpos = get_next_target(page)\n        if url:\n            links.append(url)\n            page = page[endpos:]\n        else:\n            break\n    return links\n\n\ndef union(a, b):\n    for e in b:\n        if e not in a:\n            a.append(e)\n\ndef add_page_to_index(index, url, content):\n    words = content.split()\n    for word in words:\n        add_to_index(index, word, url)\n        \ndef add_to_index(index, keyword, url):\n    if keyword in index:\n        index[keyword].append(url)\n    else:\n        index[keyword] = [url]\n\ndef lookup(index, keyword):\n    if keyword in index:\n        return index[keyword]\n    else:\n        return None\n\nindex, graph = crawl_web('http://udacity.com/cs101x/urank/index.html')\nranks = compute_ranks(graph)\nprint ranks\n\n#>>> {'http://udacity.com/cs101x/urank/kathleen.html': 0.11661866666666663,\n#'http://udacity.com/cs101x/urank/zinc.html': 0.038666666666666655,\n#'http://udacity.com/cs101x/urank/hummus.html': 0.038666666666666655,\n#'http://udacity.com/cs101x/urank/arsenic.html': 0.054133333333333325,\n#'http://udacity.com/cs101x/urank/index.html': 0.033333333333333326,\n#'http://udacity.com/cs101x/urank/nickel.html': 0.09743999999999997}\n\n\n\n", "type": "Nugget", "id": 479003}, {"nuggetType": "lecture", "name": "Circular Definitions", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "82144a30-2f1f-4d0b-8203-6abb333ee2cf", "name": "cs101_unit6_18_q_circular-definitions", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKrvHAw", "youtube_id": "kFv1MB28WEU", "youtube_state": "uploading", "path": "Course/cs101/Media/473002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nSo how can we fix this problem?\n\n2\n00:00:02,000 --> 00:00:04,000\nWell, the first thing we should think about is\n\n3\n00:00:04,000 --> 00:00:06,000\ncan we give a base case, right?\n\n4\n00:00:06,000 --> 00:00:09,000\nAll of the other recursive definitions we had, we had a way of stopping.\n\n5\n00:00:09,000 --> 00:00:11,000\nSo we have a base case, right?\n\n6\n00:00:11,000 --> 00:00:14,000\nWith factorial we said we're going to predefine\n\n7\n00:00:14,000 --> 00:00:16,000\n that we know the value of factorial\n\n8\n00:00:16,000 --> 00:00:19,000\nwhen the input is zero, we know that the value is 1,\n\n9\n00:00:19,000 --> 00:00:21,000\nand we're not going to define it in terms of factorial.\n\n10\n00:00:21,000 --> 00:00:23,000\nWe're going to know its value.\n\n11\n00:00:23,000 --> 00:00:25,000\nWe did this for palindrome.\n\n12\n00:00:25,000 --> 00:00:28,000\nWe said palindrome, we have a base case.\n\n13\n00:00:28,000 --> 00:00:31,000\nWhen the input string is the empty string,\n\n14\n00:00:31,000 --> 00:00:33,000\n it's predefined as a palindrome.\n\n15\n00:00:33,000 --> 00:00:35,000\nWe don't have to do anything else. \n\n16\n00:00:35,000 --> 00:00:37,000\nAnd we did this for Fibonacci where we had 2 base cases.\n\n17\n00:00:37,000 --> 00:00:40,000\nBut for all these definitions, we have some starting point \n\n18\n00:00:40,000 --> 00:00:43,000\nthat was not defined in terms of the thing we're defining, \n\n19\n00:00:43,000 --> 00:00:45,000\nand that's why it was a recursive definition\n\n20\n00:00:45,000 --> 00:00:47,000\nbecause we had the base case.\n\n21\n00:00:47,000 --> 00:00:49,000\nWe don't have one here.\n\n22\n00:00:49,000 --> 00:00:51,000\nSo let's try to invent one.\n\n23\n00:00:51,000 --> 00:00:53,000\nLet's suppose that we made our base case.\n\n24\n00:00:53,000 --> 00:00:55,000\nSo if we're going to fix this, what we need to do \n\n25\n00:00:55,000 --> 00:00:58,000\nis invent a base case, maybe that will solve our problem.\n\n26\n00:00:58,000 --> 00:01:00,000\n So let's try and add a base case.\n\n27\n00:01:00,000 --> 00:01:04,000\nSo suppose we assume we know the popularity of Alice,\n\n28\n00:01:04,000 --> 00:01:08,000\n and sadly Alice is not very popular. \n\n29\n00:01:08,000 --> 00:01:12,000\nHer popularity score is a 1. \n\n30\n00:01:12,000 --> 00:01:14,000\nSo that looks like a base case, right?\n\n31\n00:01:14,000 --> 00:01:17,000\nWe defined the base case for factorial for zero, for palindrome for space,\n\n32\n00:01:17,000 --> 00:01:19,000\nlet's pick Alice for our base case now.\n\n33\n00:01:19,000 --> 00:01:23,000\nAnd that works like this for the mathematical definition.\n\n34\n00:01:23,000 --> 00:01:25,000\nFor the Python code, what we would need to do is add \n\n35\n00:01:25,000 --> 00:01:27,000\nthe base case as an if statement\n\n36\n00:01:27,000 --> 00:01:29,000\nso we'd insert a line here that says\n\n37\n00:01:29,000 --> 00:01:36,000\nif P is Alice, return Alice's popularity score,\n\n38\n00:01:36,000 --> 00:01:39,000\nwhich is our base case, which is 1. \n\n39\n00:01:39,000 --> 00:01:41,000\nSo this looks more like the recursive definitions we've seen.\n\n40\n00:01:41,000 --> 00:01:43,000\nNow we have a question.\n\n41\n00:01:43,000 --> 00:01:45,000\nLet's see if this actually works.\n\n42\n00:01:45,000 --> 00:01:48,000\nSo the questions is, will this definition work?\n\n43\n00:01:48,000 --> 00:01:50,000\nThe possible answers are \n\n44\n00:01:50,000 --> 00:01:53,000\nonly if everyone is friends with Alice;\n\n45\n00:01:53,000 --> 00:01:56,000\nonly if no one is friends with Alice;\n\n46\n00:01:56,000 --> 00:01:59,000\nonly if from every person in the network \n\n47\n00:01:59,000 --> 00:02:02,000\nthere is some way that you can follow links\n\n48\n00:02:02,000 --> 00:02:04,000\n that eventually reaches Alice;\n\n49\n00:02:04,000 --> 00:02:06,000\nonly if there are no cycles in the graph\n\n50\n00:02:06,000 --> 00:02:08,000\nso there is no way to start from 1 person \n\n51\n00:02:08,000 --> 00:02:11,000\nand end up at the same person by following friendships--\n\n52\n00:02:11,000 --> 00:02:13,000\nby following friendship links;\n\n53\n00:02:13,000 --> 00:02:15,000\nand the final choice is no\n\n54\n00:02:15,000 --> 00:02:20,000\nthat there is really no situation where this definition works well.\n\n", "id": 473002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYgaYdDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/480001", "type": "Nugget", "id": 480001}, {"nuggetType": "lecture", "name": "Relaxation", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "818d99ab-40e0-4c2c-bfae-02c911b31550", "name": "cs101_unit6_19_q_relaxation", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOmtHQw", "youtube_id": "wfusYH9r7mc", "youtube_state": "processing", "path": "Course/cs101/Media/481001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nSo we need to figure out something different. There's no sensible base case\n\n2\n00:00:04,000 --> 00:00:08,000\nthat gives us a good recursive definition. What we're going to do instead is \n\n3\n00:00:08,000 --> 00:00:12,000\nwhat's called the relaxation algorithm. And the basic idea is pretty simple. \n\n4\n00:00:12,000 --> 00:00:16,000\nWe're going to start with a guess. So we're going to start with a guess, and then \n\n5\n00:00:16,000 --> 00:00:21,000\nwe're going to have some loop where we keep going. We'll just say \n\n6\n00:00:21,000 --> 00:00:24,000\nwhile we're not done. We'll figure out how to decide when we're done. \n\n7\n00:00:24,000 --> 00:00:28,000\nWe're going to do something to make the guess better. So that's the basic idea, \n\n8\n00:00:28,000 --> 00:00:33,000\nthat we don't have a good stopping point, we don't have a clear starting point\n\n9\n00:00:33,000 --> 00:00:37,000\nof saying Alice's popularity is 1, and we're going to define everything in that. \n\n10\n00:00:37,000 --> 00:00:40,000\nWhat we're going to do instead is we're going to start with a guess, and our guess \n\n11\n00:00:40,000 --> 00:00:44,000\ncould be-- well let's assume everyone's initial popularity is 1. And then we're going to \n\n12\n00:00:44,000 --> 00:00:48,000\nkeep refining the guess. We're going to have some process that updates the guess\n\n13\n00:00:48,000 --> 00:00:52,000\nbased on what we've learned, and each time we do this we're going to get \n\n14\n00:00:52,000 --> 00:00:56,000\nbetter and better, and at some point we're going to stop and we're going to say,\n\n15\n00:00:56,000 --> 00:00:59,000\n\"Well, that's the result we want.\" So let's think about how to do that for \n\n16\n00:00:59,000 --> 00:01:05,000\npopularity scores. So instead of just having one input to popularity now, \n\n17\n00:01:05,000 --> 00:01:10,000\nthere's going to be two. It's going to take the time step--that's the number of times \n\n18\n00:01:10,000 --> 00:01:16,000\nwe've tried to guess--and it's going to take the person and it's still going to output\n\n19\n00:01:16,000 --> 00:01:21,000\na score. And now we can define this in a way that we do have a starting point\n\n20\n00:01:21,000 --> 00:01:26,000\nwhich is the equivalent to having a stopping point in a recursive definition. \n\n21\n00:01:26,000 --> 00:01:33,000\nWe'll define what the value is at step zero for any person, we'll say that the score is 1.\n\n22\n00:01:33,000 --> 00:01:36,000\nAnd it didn't work to have a base case in terms of the person, because there is \n\n23\n00:01:36,000 --> 00:01:40,000\nno clear ordering of the people. We had a graph. We had lots of different \n\n24\n00:01:40,000 --> 00:01:44,000\nfriendship connections. There was no clear starting point. We're going to add \n\n25\n00:01:44,000 --> 00:01:47,000\nan extra parameter which is our time step, and that's going to be our base case.\n\n26\n00:01:47,000 --> 00:01:52,000\nAnd if we think of our time step as our base case, it's easy to say that time step zero\n\n27\n00:01:52,000 --> 00:01:56,000\nis our base case. And at step zero, we're going to say that everyone's popularity \n\n28\n00:01:56,000 --> 00:02:02,000\nscore is 1. And now we can have our update rule, which says we can figure out \n\n29\n00:02:02,000 --> 00:02:08,000\nthe popularity at any time step t, where t is greater than zero, for any person.\n\n30\n00:02:08,000 --> 00:02:14,000\nAnd we're going to define that as the sum over all their friends. So we're going to pick\n\n31\n00:02:14,000 --> 00:02:21,000\na friend in their set of friends. So we're going to go through each friend summing up\n\n32\n00:02:21,000 --> 00:02:28,000\nthe popularity score of the friend, but instead of at time t, we're going to use \n\n33\n00:02:28,000 --> 00:02:33,000\ntime t minus 1. So that means we're looking for the popularity of the friend \n\n34\n00:02:33,000 --> 00:02:37,000\nin the previous step, and we're using that to compute the popularity of the person\n\n35\n00:02:37,000 --> 00:02:45,000\nthey're friends with in this step. So let me write out that more in psuedo code. \n\n36\n00:02:45,000 --> 00:02:48,000\nIf we think of this as the python procedure, it's going to be something where we're \n\n37\n00:02:48,000 --> 00:02:55,000\ntaking in 2 inputs now, the time and the person, and now we have the base case\n\n38\n00:02:55,000 --> 00:03:01,000\nif the time is zero, we're going to return the score as always 1. If the time is not zero,\n\n39\n00:03:01,000 --> 00:03:05,000\nwell we can compute the score similar to how we did before. We're going to have \n\n40\n00:03:05,000 --> 00:03:11,000\nthe score of zero. We're going to sum over the friends--we're summing over the friends, \n\n41\n00:03:11,000 --> 00:03:18,000\nupdating the score by adding the friend's popularity score at the previous step,\n\n42\n00:03:18,000 --> 00:03:23,000\nand when we're done, the value of score is the result. Okay. So now we've got \n\n43\n00:03:23,000 --> 00:03:29,000\nour python code. So now we have our new definition. We have it written \n\n44\n00:03:29,000 --> 00:03:33,000\nin mathematical notation at the top and in the python code here. So the question is,\n\n45\n00:03:33,000 --> 00:03:37,000\nis this a good recursive definition? And I don't mean to ask whether it's \n\n46\n00:03:37,000 --> 00:03:41,000\na good definition of popularity. Let's hope it's not. What I mean to ask is\n\n47\n00:03:41,000 --> 00:03:45,000\nfor all possible inputs, so all values we could pass in as t and p, \n\n48\n00:03:45,000 --> 00:03:52,000\ndoes the way we define popularity give us a result? So here are the possible choices.\n\n49\n00:03:52,000 --> 00:03:57,000\nSo yes it's good only if people can't be friends with themselves. \n\n50\n00:03:57,000 --> 00:04:01,000\nIt's good only if everyone has at least one friend. Hopefully everyone does, \n\n51\n00:04:01,000 --> 00:04:04,000\nbut it's only a good definition if that's the case. \n\n52\n00:04:04,000 --> 00:04:10,000\nOr only if everyone is more popular than Alice.  \n\n", "id": 481001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY0bUdDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/482001", "type": "Nugget", "id": 482001}, {"nuggetType": "quiz", "name": "Relaxation", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYocUdDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/484001", "type": "Nugget", "id": 484001}, {"nuggetType": "lecture", "name": "Altavista", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "d79b8ae2-42a6-4c0c-9dec-b1346ef76acd", "name": "cs101_unit6_21_q_altavista", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPPXHAw", "youtube_id": "mECPOKrtyZs", "youtube_state": "uploading", "path": "Course/cs101/Media/470003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\n[Evans] The final change we're going to make is thinking about our random surfer model.\n\n2\n00:00:05,000 --> 00:00:09,000\nIf this was our model, a page that has no incoming links,\n\n3\n00:00:09,000 --> 00:00:14,000\nif the page has no incoming links, its popularity ranking would be 0.\n\n4\n00:00:14,000 --> 00:00:16,000\nWe don't want to have that be the case.\n\n5\n00:00:16,000 --> 00:00:19,000\nIf we think of our random Web surfer, she randomly starts at a page.\n\n6\n00:00:19,000 --> 00:00:22,000\nShe could randomly start at a page that has no links.\n\n7\n00:00:22,000 --> 00:00:26,000\nIf we made all the page scores 0 for pages with no links,\n\n8\n00:00:26,000 --> 00:00:28,000\nthen it would be very hard for a new page to get started.\n\n9\n00:00:28,000 --> 00:00:32,000\nWe don't want those to be 0, so we're going to have some random probability\n\n10\n00:00:32,000 --> 00:00:36,000\nthat you reach a page even when it has no links.\n\n11\n00:00:36,000 --> 00:00:38,000\nSo that means we're going to add something to this sum \n\n12\n00:00:38,000 --> 00:00:41,000\nso it's not 0 when there are no incoming links.\n\n13\n00:00:41,000 --> 00:00:45,000\nAnd the other thing we're going to do is we're going to scale this summation a little bit,\n\n14\n00:00:45,000 --> 00:00:48,000\nand we're going to scale that with what is called the damping function.\n\n15\n00:00:48,000 --> 00:00:53,000\nThat just means if we think of our random Web surfer again,\n\n16\n00:00:53,000 --> 00:00:57,000\neven if she's following a path that does have more links,\n\n17\n00:00:57,000 --> 00:00:59,000\nat some point she might decide to get tired and give up\n\n18\n00:00:59,000 --> 00:01:01,000\nand start again with a new random page.\n\n19\n00:01:01,000 --> 00:01:05,000\nSo the damping function determines how frequently we think our random Web surfer\n\n20\n00:01:05,000 --> 00:01:11,000\nwill pick a random link versus starting over again on a new random page.\n\n21\n00:01:11,000 --> 00:01:13,000\nSo that's called the damping value.\n\n22\n00:01:13,000 --> 00:01:16,000\nWe're just going to use the damping value to scale this number.\n\n23\n00:01:16,000 --> 00:01:18,000\nWe'll call that d. That's the damping constant.\n\n24\n00:01:18,000 --> 00:01:22,000\nA typical value for that is something less than 1,\n\n25\n00:01:22,000 --> 00:01:24,000\nand a good value is something like 0.8.\n\n26\n00:01:24,000 --> 00:01:27,000\nNow we're going to change our rank function to take into account of that.\n\n27\n00:01:27,000 --> 00:01:30,000\nWe're going to have some initial value.\n\n28\n00:01:30,000 --> 00:01:32,000\nIf we want to keep the values in a reasonable range,\n\n29\n00:01:32,000 --> 00:01:38,000\ninstead of starting from 1 we're going to divide the values by the total number of pages.\n\n30\n00:01:38,000 --> 00:01:42,000\nThe reason for that is just to keep the ranks in some meaningful range.\n\n31\n00:01:42,000 --> 00:01:48,000\nThis will keep the ranks so the total of the ranks when we start, the sum of the ranks is 1.\n\n32\n00:01:48,000 --> 00:01:51,000\nThat gives them a little more meaning than if the sum of the ranks was the number of pages.\n\n33\n00:01:51,000 --> 00:01:56,000\nSo N is going to be the number of pages, the total number in our corpus,\n\n34\n00:01:56,000 --> 00:01:58,000\nand d is the damping constant.\n\n35\n00:01:58,000 --> 00:02:03,000\nAnd so now we're going to change our initial values to divide them by N.\n\n36\n00:02:03,000 --> 00:02:06,000\nThis means the sum of the page ranks at the beginning will be 1.\n\n37\n00:02:06,000 --> 00:02:10,000\nAnd we're going to change the way we compute the rank\n\n38\n00:02:10,000 --> 00:02:15,000\nby adding to it a value that gives us the sense of starting over.\n\n39\n00:02:15,000 --> 00:02:20,000\nSo the value that we're going to use for this is 1 - d divided by N,\n\n40\n00:02:20,000 --> 00:02:24,000\nand that gives the notion that the times when we don't decide to do a new page--\n\n41\n00:02:24,000 --> 00:02:28,000\nso 0.8 of the time we decide to follow a new page,\n\n42\n00:02:28,000 --> 00:02:30,000\nso we're going to multiply this by d.\n\n43\n00:02:30,000 --> 00:02:34,000\nThe times when we don't follow a new page--that's 1 - d--\n\n44\n00:02:34,000 --> 00:02:38,000\nwe're going to start over and we're going to divide that by N\n\n45\n00:02:38,000 --> 00:02:40,000\nbecause N is the number of pages.\n\n46\n00:02:40,000 --> 00:02:43,000\nThat's the probability that this is the page that would be picked when we start over.\n\n47\n00:02:43,000 --> 00:02:47,000\nSo now we've got our recursive definition of page rank.\n\n48\n00:02:47,000 --> 00:02:51,000\nWe start by initializing the rank at time step 0 to 1/N.\n\n49\n00:02:51,000 --> 00:02:56,000\nAnd then for as many time steps as we want, we're going to keep improving our results\n\n50\n00:02:56,000 --> 00:02:58,000\nby using this formula.\n\n51\n00:02:58,000 --> 00:03:03,000\nFor each link that links to us we're going to take its popularity on the last step,\n\n52\n00:03:03,000 --> 00:03:06,000\ndivide that by the number of outlinks--so it's dividing it by the number\n\n53\n00:03:06,000 --> 00:03:08,000\nof other pages it links to--\n\n54\n00:03:08,000 --> 00:03:11,000\nmultiply that by our damping constant, \n\n55\n00:03:11,000 --> 00:03:15,000\nand that gives the probability that this page was selected by the random Web surfer.\n\n56\n00:03:15,000 --> 00:03:18,000\nAnd then we're going to add the term that takes into account \n\n57\n00:03:18,000 --> 00:03:20,000\nthe random Web surfer might have started over from scratch \n\n58\n00:03:20,000 --> 00:03:22,000\nand picked a new random page.\n\n59\n00:03:22,000 --> 00:03:26,000\nSo before we try to change our Web search engine to actually program this,\n\n60\n00:03:26,000 --> 00:03:28,000\nit's time for a little quiz.\n\n61\n00:03:28,000 --> 00:03:32,000\nThe quiz is, what is AltaVista?\n\n62\n00:03:32,000 --> 00:03:37,000\nIf you don't know this, feel free to use Google or DuckDuckGo to find out.\n\n63\n00:03:37,000 --> 00:03:39,000\nThese are the choices.\n\n64\n00:03:39,000 --> 00:03:42,000\nIt's the view from the Udacity headquarters in Palo Alto;\n\n65\n00:03:42,000 --> 00:03:46,000\nit's the most popular Web search engine in 1998;\n\n66\n00:03:46,000 --> 00:03:50,000\nit is Spanish for, \"You're Terminated, Baby!\";\n\n67\n00:03:50,000 --> 00:03:53,000\nand it's a small town in Virginia.\n\n68\n00:03:53,000 --> 00:03:57,000\nAnd feel free to Google the answer if you don't know.\n\n", "id": 470003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY8dQdDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/486001", "type": "Nugget", "id": 486001}, {"nuggetType": "lecture", "name": "Finishing Urank", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "b018f239-44eb-460e-9451-0ac2fa5afe25", "name": "cs101_unit6_27_p_finishing-urank", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOGDHgw", "youtube_id": "fXARha9xdeU", "youtube_state": "done", "path": "Course/cs101/Media/492001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nSo I've left the most interesting and challenging part of this \n\n2\n00:00:02,000 --> 00:00:04,000\nfor you to finish, as a quiz--\n\n3\n00:00:04,000 --> 00:00:07,000\nand that's how to compute the newrank, \n\n4\n00:00:07,000 --> 00:00:11,000\nbased on the values of the previous iteration,\n\n5\n00:00:11,000 --> 00:00:14,000\nwhich are now stored in the variable ranks. \n\n6\n00:00:14,000 --> 00:00:16,000\nWe want to compute the newrank, based on \n\n7\n00:00:16,000 --> 00:00:18,000\nall the pages that link to this one. \n\n8\n00:00:18,000 --> 00:00:20,000\nAnd if you think about the graph structure and how to go through\n\n9\n00:00:20,000 --> 00:00:23,000\nthe nodes in the graph, I think you can figure out how to do this. \n\n", "id": 492001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQY8tQdDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/486002", "type": "Nugget", "id": 486002}, {"nuggetType": "quiz", "name": "Altavista", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYweQdDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/488001", "type": "Nugget", "id": 488001}, {"nuggetType": "lecture", "name": "Altavista Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "90671f26-5ee3-4233-88b8-e191bfd64a8c", "name": "cs101_unit6_21_s_altavista", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKnsHQw", "youtube_id": "PHxmZC1EBe4", "youtube_state": "uploading", "path": "Course/cs101/Media/489001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\n[Evans] The answer is the second choice.\n\n2\n00:00:02,000 --> 00:00:06,000\nIt is also true that there is a small town in Virginia named Altavista,\n\n3\n00:00:06,000 --> 00:00:08,000\nbut the relevant answer is the second choice.\n\n4\n00:00:08,000 --> 00:00:12,000\nBack in 1998, the most popular search engine \n\n5\n00:00:12,000 --> 00:00:15,000\nwas probably the search engine called AltaVista.\n\n6\n00:00:15,000 --> 00:00:17,000\nThey certainly had the biggest Web index at the time,\n\n7\n00:00:17,000 --> 00:00:21,000\nand they also had great technology for responding to queries quickly.\n\n8\n00:00:21,000 --> 00:00:24,000\n1998 is the year that Google was founded.\n\n9\n00:00:24,000 --> 00:00:27,000\nMost people probably have not heard of AltaVista today\n\n10\n00:00:27,000 --> 00:00:30,000\nand might have had a hard time answering this quiz.\n\n11\n00:00:30,000 --> 00:00:34,000\nAnd the reason for that is Google figured out a better way to do page ranking.\n\n12\n00:00:34,000 --> 00:00:39,000\nBecause of this, search engines that didn't have good ways of ranking pages,\n\n13\n00:00:39,000 --> 00:00:42,000\nlike AltaVista, quickly became irrelevant.\n\n14\n00:00:42,000 --> 00:00:45,000\nAnd the algorithm that I've described is the algorithm that launched Google.\n\n15\n00:00:45,000 --> 00:00:48,000\nIt's called Page Rank.\n\n16\n00:00:48,000 --> 00:00:52,000\nYou may think the Page stands for web page.\n\n17\n00:00:52,000 --> 00:00:56,000\nThe page actually stands for Larry Page, who was the co-founder\n\n18\n00:00:56,000 --> 00:01:00,000\nwith Sergey Brin of Google.\n\n19\n00:01:00,000 --> 00:01:02,000\nSo that's the algorithm that we've described, \n\n20\n00:01:02,000 --> 00:01:06,000\nand that's what allowed Google to produce so much better search results\n\n21\n00:01:06,000 --> 00:01:08,000\nthan other search engines at the time.\n\n22\n00:01:08,000 --> 00:01:10,000\nI hope you remember Anna Patterson from Unit 3 \n\n23\n00:01:10,000 --> 00:01:14,000\nand are still following her advice to be polite on the Web.\n\n24\n00:01:14,000 --> 00:01:16,000\nOne of the reasons AltaVista started to work so badly\n\n25\n00:01:16,000 --> 00:01:18,000\nwas because websites were not polite.\n\n26\n00:01:18,000 --> 00:01:20,000\nThey tried to find ways to game the rankings.\n\n27\n00:01:20,000 --> 00:01:22,000\nCertainly this is still something websites do today.\n\n28\n00:01:22,000 --> 00:01:25,000\nAnd the way AltaVista ranked pages, it was very easy to game them.\n\n29\n00:01:25,000 --> 00:01:28,000\nSo the site that would be ranked first was not the best site about something\n\n30\n00:01:28,000 --> 00:01:31,000\nbut a site that was best at gaming the rankings.\n\n31\n00:01:31,000 --> 00:01:33,000\nSo I asked Anna to explain why Google's page ranking algorithm\n\n32\n00:01:33,000 --> 00:01:36,000\nwas so important to the success of Google.\n\n33\n00:01:36,000 --> 00:01:41,000\n[Anna Patterson - Director, Google] Page Rank on the Web was a huge step forward.\n\n34\n00:01:41,000 --> 00:01:46,000\nI'm old enough to actually remember the time that Google launched.\n\n35\n00:01:46,000 --> 00:01:52,000\nIts advance over AltaVista was AltaVista was very, very prone to keyword stuffing spam.\n\n36\n00:01:52,000 --> 00:01:57,000\nSo if you said \"restaurant\" 32 times, you were better than a page that said \"restaurant\" twice.\n\n37\n00:01:57,000 --> 00:02:02,000\nSo Page Rank came out and actually gave a measure of popularity or traffic.\n\n38\n00:02:02,000 --> 00:02:06,000\nAnd therefore, the things that said \"restaurant\" twice but were awesome,\n\n39\n00:02:06,000 --> 00:02:09,000\nthey wound up going to the top.\n\n40\n00:02:09,000 --> 00:02:11,000\n[Evans] Certainly things have gotten more complicated since then\n\n41\n00:02:11,000 --> 00:02:14,000\nand there's more things that go into the ranking algorithm than just what we've shown you,\n\n42\n00:02:14,000 --> 00:02:16,000\nbut that's the basic idea.\n\n43\n00:02:16,000 --> 00:02:21,000\nThe next thing we're going to do is change our search engine to implement this algorithm.\n\n", "id": 489001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYkfQdDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/490001", "type": "Nugget", "id": 490001}, {"nuggetType": "lecture", "name": "Putting It All Together", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": null, "name": "cs373_unit6_00_l_Putting-It-All-Together", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLGTHgw", "youtube_id": "wEACoh3zLm4", "youtube_state": "processing", "path": "Course/cs101/Media/494001", "transcript": null, "id": 494001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYmZseDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/495001", "type": "Nugget", "id": 495001}, {"nuggetType": "lecture", "name": "Infinite Power", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1Ggw", "media": {"dotsub_id": "91071ab5-3ab9-4cb0-98a4-5e8024cc70e3", "name": "cs101_unit6_00_l_Infinite-Power", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLGQHww", "youtube_id": "Zj0mahX3Woo", "youtube_state": "processing", "path": "Course/cs101/Media/510001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nWelcome to Unit 6.\n\n2\n00:00:02,000 --> 00:00:04,000\nThis is the last technical content for the class.\n\n3\n00:00:04,000 --> 00:00:07,000\nAfter Unit 6 you'll know everything you need to do well on the exam.\n\n4\n00:00:07,000 --> 00:00:13,000\nUnit 7 will be all field trips and interviews to put things you've learned in context.\n\n5\n00:00:13,000 --> 00:00:17,000\nThe big idea that we're going to introduce in Unit 6 is recursive definitions,\n\n6\n00:00:17,000 --> 00:00:20,000\nand we'll see how to use that to improve our page ranking\n\n7\n00:00:20,000 --> 00:00:23,000\nso we'll be able to find the best page to respond to a particular query.\n\n8\n00:00:23,000 --> 00:00:26,000\nThe real goal of this unit is to give you infinite power.\n\n9\n00:00:26,000 --> 00:00:29,000\nI know what you're thinking--that you already have infinite power\n\n10\n00:00:29,000 --> 00:00:31,000\nand you don't really need this unit.\n\n11\n00:00:31,000 --> 00:00:33,000\nAnd you're right.\n\n12\n00:00:33,000 --> 00:00:37,000\nBack in Unit 2, we introduced procedures and if\n\n13\n00:00:37,000 --> 00:00:39,000\nand claimed that you had enough from that \n\n14\n00:00:39,000 --> 00:00:43,000\nto be able to write every possible computer program, and that's infinitely powerful.\n\n15\n00:00:43,000 --> 00:00:47,000\nAnd then we showed you how to use the while loop to go on.\n\n16\n00:00:47,000 --> 00:00:49,000\nIf you were infinitely powerful before that, \n\n17\n00:00:49,000 --> 00:00:52,000\nyou shouldn't have needed to learn how to use the while loop.\n\n18\n00:00:52,000 --> 00:00:55,000\nYou should have been able to build it from the things that we've already seen.\n\n19\n00:00:55,000 --> 00:00:57,000\nAnd it turns out that you can. \n\n20\n00:00:57,000 --> 00:00:59,000\nThat's what we're going to learn about in this unit \n\n21\n00:00:59,000 --> 00:01:02,000\nis how to build up our own powerful control structures\n\n22\n00:01:02,000 --> 00:01:05,000\nwithout using anything other than procedures.\n\n23\n00:01:05,000 --> 00:01:07,000\nAnd what we're going to see in this unit\n\n24\n00:01:07,000 --> 00:01:09,000\nis that you can build up your own powerful control structures, \n\n25\n00:01:09,000 --> 00:01:14,000\nas powerful as the while loop, from nothing but the procedures, if,\n\n26\n00:01:14,000 --> 00:01:19,000\nand arithmetic and comparison operations that you knew in Unit 2.\n\n27\n00:01:19,000 --> 00:01:22,000\nThe main point of this is not because we really want to build our own construct\n\n28\n00:01:22,000 --> 00:01:25,000\nto replace while. While is perfectly good.\n\n29\n00:01:25,000 --> 00:01:27,000\nThe main point of this is it's going to teach you a new way of thinking.\n\n30\n00:01:27,000 --> 00:01:30,000\nThis is a very powerful tool for solving problems,\n\n31\n00:01:30,000 --> 00:01:34,000\nand the way of thinking is called recursive definitions.\n\n32\n00:01:34,000 --> 00:01:37,000\nThis is something that a lot of people find intimidating, but it really isn't.\n\n33\n00:01:37,000 --> 00:01:39,000\nIt's something that you actually already know.\n\n34\n00:01:39,000 --> 00:01:43,000\nYou've been using language all your life, and language is defined in a very recursive way.\n\n35\n00:01:43,000 --> 00:01:46,000\nWe're going to see how to use recursive definitions \n\n36\n00:01:46,000 --> 00:01:48,000\nto make powerful computer programs.\n\n", "id": 510001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKn1GgwLEgZOdWdnZXQYmZgfDA", "path": "Course/cs101/CourseRev/feb2012/Unit/441001/Nugget/511001", "type": "Nugget", "id": 511001}]}, {"name": "Homework 6", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": true, "closedAt": "04/04/2012 00:00", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAwLEgZOdWdnZXQY-eYkDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAwLEgZOdWdnZXQYubQgDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAwLEgZOdWdnZXQYsf4kDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAwLEgZOdWdnZXQYi8oeDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAwLEgZOdWdnZXQY6ZUlDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAwLEgZOdWdnZXQY8csgDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAwLEgZOdWdnZXQY6pUlDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAwLEgZOdWdnZXQYwdsgDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAwLEgZOdWdnZXQYgpEkDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAwLEgZOdWdnZXQYkesgDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAw", "path": "Course/cs101/CourseRev/feb2012/Unit/528001", "open": false, "id": 528001, "nuggets": [{"nuggetType": "program", "name": "Rabbits Multiplying", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAwLEgZOdWdnZXQYi8oeDA", "path": "Course/cs101/CourseRev/feb2012/Unit/528001/Nugget/501003", "suppliedCode": "#Rabbits Multiplying \r\n\r\n#A (slightly) more realistic model of rabbit multiplication than the Fibonacci\r\n#model, would assume that rabbits eventually die. For this question, assume that\r\n#every rabbit dies when it is six months old.\r\n#\r\n#Thus, we can model the number of rabbits as: \r\n#\r\n#rabbits(1) = 1 # There is one pair of immature rabbits in Month 1\r\n#rabbits(2) = 1 # There is one pair of mature rabbits in Month 2\r\n#\r\n#For months 3-5:\r\n# Same as Fibonacci model, no rabbits dying yet\r\n#rabbits(n) = rabbits(n - 1) + rabbits(n - 2) \r\n# \r\n#\r\n#For months > 5:\r\n# All the rabbits that are over 5 months old die, but after first reproducing.\r\n#rabbits(n) = rabbits(n - 1) + rabbits(n - 2) - rabbits(n - 5)  \r\n#\r\n#This produces the rabbit sequence: 1, 1, 2, 3, 5, 7, 11, 16, 24, 35, 52, ... \r\n#\r\n#Define a procedure rabbits that takes as input a number n, and returns a \r\n#number that is the value of the nth number in the rabbit sequence. \r\n#For example, rabbits(10) -> 35. (It is okay if your procedure takes too \r\n#                                long to run on inputs above 30.)\r\n\r\ndef rabbits(n):\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n#print rabbits(10)\r\n#>>> 35\r\n\r\n#s = \"\"\r\n#for i in range(1,12):\r\n#    s = s + str(rabbits(i)) + \" \"\r\n#print s\r\n#>>> 1 1 2 3 5 7 11 16 24 35 52 \r\n\r\n    \r\n \r\n", "type": "Nugget", "id": 501003}, {"nuggetType": "quiz", "name": "Recursive Grammars", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAwLEgZOdWdnZXQYubQgDA", "path": "Course/cs101/CourseRev/feb2012/Unit/528001/Nugget/531001", "type": "Nugget", "id": 531001}, {"nuggetType": "program", "name": "Spreading Udaciousness", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAwLEgZOdWdnZXQY8csgDA", "path": "Course/cs101/CourseRev/feb2012/Unit/528001/Nugget/534001", "suppliedCode": "#Spreading Udaciousness\r\n \r\n#One of our modest goals is to teach everyone in the world to program and\r\n#understand computer science. To estimate how long this will take we have\r\n#developed a (very flawed!) model:\r\n\r\n#Everyone answering this question will convince a number, spread, (input to the\r\n#model) of their friends to take the course next offering. This will continue,\r\n#so that all of the newly recruited students, as well as the original students, \r\n#will convince spread of their\r\n#friends to take the following offering of the course.\r\n#recruited friends are unique, so there is no duplication among the newly\r\n#recruited students. Define a procedure, hexes_to_udaciousness(n, spread,\r\n#target), that takes three inputs: the starting number of Udacians, the spread\r\n#rate (how many new friends each Udacian convinces to join each hexamester), and\r\n#the target number, and outputs the number of hexamesters needed to reach (or\r\n#exceed) the target.\r\n\r\n#For credit, your procedure must not use: while, for, or import math. \r\n\r\ndef hexes_to_udaciousness(n, spread, target):\r\n\r\n\r\n\r\n#0 more needed, since n already exceeds target\r\n#print hexes_to_udaciousness(100000, 2, 36230) \r\n#>>> 0\r\n\r\n#after 1 hexamester, there will be 50000 + (50000 * 2) Udacians\r\n#print hexes_to_udaciousness(50000, 2, 150000) \r\n#>>> 1 \r\n\r\n#need to match or exceed the target\r\n#print hexes_to_udaciousness(50000, 2, 150001)\r\n#>>> 2 \r\n\r\n#only 12 hexamesters (2 years) to world domination!\r\n#print hexes_to_udaciousness(20000, 2, 7 * 10 ** 9) \r\n#>>> 12 \r\n\r\n#more friends means faster world domination!\r\n#print hexes_to_udaciousness(15000, 3, 7 * 10 ** 9)\r\n#>>> 10 \r\n\r\n\r\n\r\n", "type": "Nugget", "id": 534001}, {"nuggetType": "program", "name": "Deep Count", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAwLEgZOdWdnZXQYwdsgDA", "path": "Course/cs101/CourseRev/feb2012/Unit/528001/Nugget/536001", "suppliedCode": "#Deep Count \r\n\r\n#The built-in len operator outputs the number of top-level elements in a List,\r\n#but not the total number of elements. For this question, your goal is to count\r\n#the total number of elements in a list, including all of the inner lists.\r\n\r\n#Define a procedure, deep_count, that takes as input a list, and outputs the\r\n#total number of elements in the list, including all elements in lists that it\r\n#contains.\r\n\r\n\r\n#For this procedure, you will need a way to test if a value is a list. We have\r\n#provided a procedure, is_list(p) that does this:\r\n\r\ndef is_list(p):\r\n    return isinstance(p, list)\r\n\r\n#It is not necessary to understand how is_list works. It returns True if the\r\n#input is a List, and returns False otherwise.\r\n\r\ndef deep_count(p):\r\n\r\n\r\n\r\n\r\n\r\n\r\n#print deep_count([1, 2, 3])\r\n#>>> 3\r\n\r\n# the empty list still counts as an element of the outer list\r\n#print deep_count([1, [], 3]) \r\n#>>> 3 \r\n\r\n#print deep_count([1, [1, 2, [3, 4]]])\r\n#>>> 7\r\n\r\n#print deep_count([[[[[[[[1, 2, 3]]]]]]]])\r\n#>>> 10\r\n ", "type": "Nugget", "id": 536001}, {"nuggetType": "program", "name": "Feeling Lucky", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAwLEgZOdWdnZXQYkesgDA", "path": "Course/cs101/CourseRev/feb2012/Unit/528001/Nugget/538001", "suppliedCode": "#Feeling Lucky\r\n \r\n#In Unit 6, we implemented a page ranking algorithm, but didn't finish the final\r\n#step of using it to improve our search results. For this question, you will use\r\n#the page rankings to produce the best output for a given query.\r\n\r\n#Define a procedure, lucky_search, that takes as input an index, a ranks\r\n#dictionary (the result of compute_ranks), and a keyword, and returns the one\r\n#URL most likely to be the best site for that keyword. If the keyword does not\r\n#appear in the index, lucky_search should return None.\r\n\r\ndef lucky_search(index, ranks, keyword):\r\n    \r\n            \r\n\r\ncache = {\r\n   'http://udacity.com/cs101x/urank/index.html': \"\"\"<html>\r\n<body>\r\n<h1>Dave's Cooking Algorithms</h1>\r\n<p>\r\nHere are my favorite recipies:\r\n<ul>\r\n<li> <a href=\"http://udacity.com/cs101x/urank/hummus.html\">Hummus Recipe</a>\r\n<li> <a href=\"http://udacity.com/cs101x/urank/arsenic.html\">World's Best Hummus</a>\r\n<li> <a href=\"http://udacity.com/cs101x/urank/kathleen.html\">Kathleen's Hummus Recipe</a>\r\n</ul>\r\n\r\nFor more expert opinions, check out the \r\n<a href=\"http://udacity.com/cs101x/urank/nickel.html\">Nickel Chef</a> \r\nand <a href=\"http://udacity.com/cs101x/urank/zinc.html\">Zinc Chef</a>.\r\n</body>\r\n</html>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\"\"\",\r\n   'http://udacity.com/cs101x/urank/zinc.html': \"\"\"<html>\r\n<body>\r\n<h1>The Zinc Chef</h1>\r\n<p>\r\nI learned everything I know from \r\n<a href=\"http://udacity.com/cs101x/urank/nickel.html\">the Nickel Chef</a>.\r\n</p>\r\n<p>\r\nFor great hummus, try \r\n<a href=\"http://udacity.com/cs101x/urank/arsenic.html\">this recipe</a>.\r\n\r\n</body>\r\n</html>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\"\"\",\r\n   'http://udacity.com/cs101x/urank/nickel.html': \"\"\"<html>\r\n<body>\r\n<h1>The Nickel Chef</h1>\r\n<p>\r\nThis is the\r\n<a href=\"http://udacity.com/cs101x/urank/kathleen.html\">\r\nbest Hummus recipe!\r\n</a>\r\n\r\n</body>\r\n</html>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\"\"\",\r\n   'http://udacity.com/cs101x/urank/kathleen.html': \"\"\"<html>\r\n<body>\r\n<h1>\r\nKathleen's Hummus Recipe\r\n</h1>\r\n<p>\r\n\r\n<ol>\r\n<li> Open a can of garbonzo beans.\r\n<li> Crush them in a blender.\r\n<li> Add 3 tablesppons of tahini sauce.\r\n<li> Squeeze in one lemon.\r\n<li> Add salt, pepper, and buttercream frosting to taste.\r\n</ol>\r\n\r\n</body>\r\n</html>\r\n\r\n\"\"\",\r\n   'http://udacity.com/cs101x/urank/arsenic.html': \"\"\"<html>\r\n<body>\r\n<h1>\r\nThe Arsenic Chef's World Famous Hummus Recipe\r\n</h1>\r\n<p>\r\n\r\n<ol>\r\n<li> Kidnap the <a href=\"http://udacity.com/cs101x/urank/nickel.html\">Nickel Chef</a>.\r\n<li> Force her to make hummus for you.\r\n</ol>\r\n\r\n</body>\r\n</html>\r\n\r\n\"\"\",\r\n   'http://udacity.com/cs101x/urank/hummus.html': \"\"\"<html>\r\n<body>\r\n<h1>\r\nHummus Recipe\r\n</h1>\r\n<p>\r\n\r\n<ol>\r\n<li> Go to the store and buy a container of hummus.\r\n<li> Open it.\r\n</ol>\r\n\r\n</body>\r\n</html>\r\n\r\n\r\n\r\n\r\n\"\"\",\r\n}\r\n\r\ndef get_page(url):\r\n    if url in cache:\r\n        return cache[url]\r\n    return \"\"\r\n\r\n\r\ndef get_next_target(page):\r\n    start_link = page.find('<a href=')\r\n    if start_link == -1: \r\n        return None, 0\r\n    start_quote = page.find('\"', start_link)\r\n    end_quote = page.find('\"', start_quote + 1)\r\n    url = page[start_quote + 1:end_quote]\r\n    return url, end_quote\r\n\r\ndef get_all_links(page):\r\n    links = []\r\n    while True:\r\n        url, endpos = get_next_target(page)\r\n        if url:\r\n            links.append(url)\r\n            page = page[endpos:]\r\n        else:\r\n            break\r\n    return links\r\n\r\n\r\ndef union(a, b):\r\n    for e in b:\r\n        if e not in a:\r\n            a.append(e)\r\n\r\ndef add_page_to_index(index, url, content):\r\n    words = content.split()\r\n    for word in words:\r\n        add_to_index(index, word, url)\r\n        \r\ndef add_to_index(index, keyword, url):\r\n    if keyword in index:\r\n        index[keyword].append(url)\r\n    else:\r\n        index[keyword] = [url]\r\n    \r\ndef lookup(index, keyword):\r\n    if keyword in index:\r\n        return index[keyword]\r\n    else:\r\n        return None\r\n\r\ndef crawl_web(seed): # returns index, graph of inlinks\r\n    tocrawl = [seed]\r\n    crawled = []\r\n    graph = {}  # <url>, [list of pages it links to]\r\n    index = {} \r\n    while tocrawl: \r\n        page = tocrawl.pop()\r\n        if page not in crawled:\r\n            content = get_page(page)\r\n            add_page_to_index(index, page, content)\r\n            outlinks = get_all_links(content)\r\n            graph[page] = outlinks\r\n            union(tocrawl, outlinks)\r\n            crawled.append(page)\r\n    return index, graph\r\n\r\ndef compute_ranks(graph):\r\n    d = 0.8 # damping factor\r\n    numloops = 10\r\n    \r\n    ranks = {}\r\n    npages = len(graph)\r\n    for page in graph:\r\n        ranks[page] = 1.0 / npages\r\n    \r\n    for i in range(0, numloops):\r\n        newranks = {}\r\n        for page in graph:\r\n            newrank = (1 - d) / npages\r\n            for node in graph:\r\n                if page in graph[node]:\r\n                    newrank = newrank + d * (ranks[node] / len(graph[node]))\r\n            newranks[page] = newrank\r\n        ranks = newranks\r\n    return ranks\r\n\r\n\r\n#Here's an example of how your procedure should work on the test site: \r\n\r\n#index, graph = crawl_web('http://udacity.com/cs101x/urank/index.html')\r\n#ranks = compute_ranks(graph)\r\n\r\n#print lucky_search(index, ranks, 'Hummus')\r\n#>>> http://udacity.com/cs101x/urank/kathleen.html\r\n\r\n#print lucky_search(index, ranks, 'the')\r\n#>>> http://udacity.com/cs101x/urank/nickel.html\r\n\r\n#print lucky_search(index, ranks, 'babaganoush')\r\n#>>> None\r\n", "type": "Nugget", "id": 538001}, {"nuggetType": "lecture", "name": "Feeling Lucky", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAw", "media": {"dotsub_id": "13122034-f0f9-4cab-bb35-2a2116261282", "name": "cs101_hw6_04_l_feeling-lucky", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKGtJQw", "youtube_id": "6qVB4lZmzMc", "youtube_state": "done", "path": "Course/cs101/Media/612001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nIn the lucky search problem, we have 3 inputs.\n\n2\n00:00:02,000 --> 00:00:08,000\nThe index, which is a hash table of all the keywords in the pages in which they appear.\n\n3\n00:00:08,000 --> 00:00:13,000\nWe have the ranks, which rank each page based on the URank algorithm\n\n4\n00:00:13,000 --> 00:00:15,000\nthat we discussed in lecture.\n\n5\n00:00:15,000 --> 00:00:18,000\nAnd then we have the keyword we are searching for.\n\n6\n00:00:18,000 --> 00:00:21,000\nThe output is going to be the highest ranking page with that keyword.\n\n7\n00:00:21,000 --> 00:00:25,000\nThe steps to solve this can briefly be summarized as follows.\n\n8\n00:00:25,000 --> 00:00:29,000\nWe're going to go through every page that contains the keyword,\n\n9\n00:00:29,000 --> 00:00:33,000\nand we're just going to find the page with the maximum rank.\n\n10\n00:00:33,000 --> 00:00:35,000\nSo we're going to find a maximum.\n\n11\n00:00:35,000 --> 00:00:37,000\nIt sounds pretty simple, but it's actually a few lines of code.\n\n12\n00:00:37,000 --> 00:00:38,000\nSo let's go right to the ID.\n\n13\n00:00:38,000 --> 00:00:43,000\nSo the first thing we're going to do is get the pages from the index with that keyword.\n\n14\n00:00:43,000 --> 00:00:46,000\nIf there aren't any pages, then we're going to return none,\n\n15\n00:00:46,000 --> 00:00:51,000\nand if there's at least 1 page, we're going to say for now the best_page is the first one.\n\n16\n00:00:51,000 --> 00:00:55,000\nAnd we're going to iterate through each page in the pages list,\n\n17\n00:00:55,000 --> 00:00:57,000\nupdating our best_page accordingly.\n\n18\n00:00:57,000 --> 00:01:02,000\nSo if the rank of the candidate page, the page that we're iterating through,\n\n19\n00:01:02,000 --> 00:01:07,000\nis greater than the rank of our best_page, we're going to update our best_page.\n\n20\n00:01:07,000 --> 00:01:09,000\nOnce we're done, we're going to return the best_page.\n\n", "id": 612001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAwLEgZOdWdnZXQYgpEkDA", "path": "Course/cs101/CourseRev/feb2012/Unit/528001/Nugget/592002", "type": "Nugget", "id": 592002}, {"nuggetType": "lecture", "name": "Recursive Grammars", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAw", "media": {"dotsub_id": "a78c6bd8-9831-4209-95f5-4ae7ccfefbf5", "name": "cs101_hw6_00_l_recursive-grammars", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJHfJAw", "youtube_id": "Ej9obZ0QECY", "youtube_state": "done", "path": "Course/cs101/Media/602001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nFor this question, we need to determine if the given grammar generates\n\n2\n00:00:05,000 --> 00:00:10,000\ninfinitely many strings starting from the nonterminal word.\n\n3\n00:00:10,000 --> 00:00:12,000\nSo we can start from either substitution rule.\n\n4\n00:00:12,000 --> 00:00:16,000\nIf we start from the first one, then we end up with 1 possible word.\n\n5\n00:00:16,000 --> 00:00:20,000\nIf we start from the second word, then we get the letter a, \n\n6\n00:00:20,000 --> 00:00:21,000\nand then we can insert another word.\n\n7\n00:00:21,000 --> 00:00:25,000\nThis can be udacity, so then we end up with audacity.\n\n8\n00:00:25,000 --> 00:00:28,000\nWe can do the same thing but twice.\n\n9\n00:00:28,000 --> 00:00:33,000\nSo we have a, then instead of going to udacity, we do a again,\n\n10\n00:00:33,000 --> 00:00:35,000\nand then we do udacity.\n\n11\n00:00:35,000 --> 00:00:38,000\nThe way this is breaking down kind of looks like this.\n\n12\n00:00:38,000 --> 00:00:42,000\nIt should be pretty clear that we can continue this forever and eventually end\n\n13\n00:00:42,000 --> 00:00:43,000\nwith udacity.\n\n14\n00:00:43,000 --> 00:00:46,000\nSo we can have an arbitrary number of a's, followed by udacity.\n\n15\n00:00:46,000 --> 00:00:51,000\nThis inidicates that this grammar generates an infinite number of possible words.\n\n16\n00:00:51,000 --> 00:00:56,000\nIn this grammar, we can see that every word begins with a root and then a tail.\n\n17\n00:00:56,000 --> 00:00:59,000\nSo what we're going to do to see how many strings this generates is,\n\n18\n00:00:59,000 --> 00:01:05,000\ngo through every possible root there can be and then every tail there can be.\n\n19\n00:01:05,000 --> 00:01:09,000\nSo root can be uda and also boda.\n\n20\n00:01:09,000 --> 00:01:14,000\nTail can go directly to cious and city.\n\n21\n00:01:14,000 --> 00:01:19,000\nBut we should also look at this substitution rule that has root going directly to tail.\n\n22\n00:01:19,000 --> 00:01:24,000\nSo you could have a word that's really the same as tail tail,\n\n23\n00:01:24,000 --> 00:01:28,000\nwhich adds 2 more possible combinations to what root can be.\n\n24\n00:01:28,000 --> 00:01:33,000\nThis gives us 4 possibilites for root and 2 possibilities for tail,\n\n25\n00:01:33,000 --> 00:01:35,000\nwhich means 8 possibilities all together.\n\n26\n00:01:35,000 --> 00:01:38,000\nThis grammar can generate 8 different words.\n\n27\n00:01:38,000 --> 00:01:47,000\nWe know that 8 < infinity, so this grammar does not generate an infinite number of words.\n\n28\n00:01:47,000 --> 00:01:51,000\nSo here we have a grammar that looks a lot like our first one.\n\n29\n00:01:51,000 --> 00:01:55,000\nHowever, let's still work it out to see if there's an infinite number of words.\n\n30\n00:01:55,000 --> 00:01:57,000\nSo according to problem, we start with word.\n\n31\n00:01:57,000 --> 00:02:00,000\nAnd there's only 1 substitution rule for word.\n\n32\n00:02:00,000 --> 00:02:02,000\nFrom pre udacious, we have 2 options.\n\n33\n00:02:02,000 --> 00:02:07,000\nWe could go to super udacious, which gives us one complete word,\n\n34\n00:02:07,000 --> 00:02:09,000\nor we can do pre super udacious.\n\n35\n00:02:09,000 --> 00:02:14,000\nYou might have already noticed that we can keep substituting the pre with pre super,\n\n36\n00:02:14,000 --> 00:02:16,000\nand we can keep doing this forever,\n\n37\n00:02:16,000 --> 00:02:20,000\nand stopping at any point and ending with some number of supers\n\n38\n00:02:20,000 --> 00:02:22,000\nfollowed by udacious.\n\n39\n00:02:22,000 --> 00:02:25,000\nThis grammar generates an infinite number of strings.\n\n", "id": 602001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAwLEgZOdWdnZXQY-eYkDA", "path": "Course/cs101/CourseRev/feb2012/Unit/528001/Nugget/603001", "type": "Nugget", "id": 603001}, {"nuggetType": "lecture", "name": "Rabbits Multiplying", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAw", "media": {"dotsub_id": "1566d5a5-79fc-4dd5-b80f-7bef5ec23bc4", "name": "cs101_hw6_01_l_rabbits-multiplying", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMn2JAw", "youtube_id": "pcGGCOPPtmE", "youtube_state": "done", "path": "Course/cs101/Media/605001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nIn lecture, we said the number of rabbits in a given month was = to\n\n2\n00:00:05,000 --> 00:00:11,000\nthe number of rabbits the previous month + the number of rabbits 2 months ago.\n\n3\n00:00:11,000 --> 00:00:15,000\nIn the new model, we have the same number of growth of rabbits,\n\n4\n00:00:15,000 --> 00:00:21,000\nbut instead we're going to subtract the number of rabbits that are 5 months old\n\n5\n00:00:21,000 --> 00:00:24,000\nto account for them dying.\n\n6\n00:00:24,000 --> 00:00:31,000\nAstute readers will know that this doesn't actually model death correctly of rabbits,\n\n7\n00:00:31,000 --> 00:00:35,000\nbut it's a good example for coding a recursive function.\n\n8\n00:00:35,000 --> 00:00:38,000\nSo with this in mind, let's get to the programming.\n\n9\n00:00:38,000 --> 00:00:41,000\nSo the first thing I've done is at our base case,\n\n10\n00:00:41,000 --> 00:00:43,000\nwhich was defined in the problem statement.\n\n11\n00:00:43,000 --> 00:00:46,000\nAnd if it's not the base case, we're just going to plug in the formula \n\n12\n00:00:46,000 --> 00:00:47,000\nthat we got from the problem statement.\n\n13\n00:00:47,000 --> 00:00:50,000\nSo this may look like it's finished, but there's one issue,\n\n14\n00:00:50,000 --> 00:00:57,000\nand that is, what we'd do and say n = 3, when 3 - 5 is a negative number,\n\n15\n00:00:57,000 --> 00:00:59,000\nand we don't have anything to account for that.\n\n16\n00:00:59,000 --> 00:01:01,000\nWe're just going to continue forever, basically,\n\n17\n00:01:01,000 --> 00:01:04,000\nbecause we're never going to hit the base case of 1 or 2.\n\n18\n00:01:04,000 --> 00:01:06,000\nSo we need to actually add a second base case.\n\n19\n00:01:06,000 --> 00:01:12,000\nAnd our second base case, basically, says if we had a number that's not 1 or 2,\n\n20\n00:01:12,000 --> 00:01:18,000\nor below a 1 or 2, then we're going to return 0 and not effect the count \n\n21\n00:01:18,000 --> 00:01:20,000\nof the number of rabbits alive for that month.\n\n", "id": 605001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAwLEgZOdWdnZXQYsf4kDA", "path": "Course/cs101/CourseRev/feb2012/Unit/528001/Nugget/606001", "type": "Nugget", "id": 606001}, {"nuggetType": "lecture", "name": "Spreading Udaciousness", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAw", "media": {"dotsub_id": "b15a670c-64ac-474c-82c6-51c7a0d546f7", "name": "cs101_hw6_02_l_spreading-udaciousness", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIGOJQw", "youtube_id": "q_atgGWy57Y", "youtube_state": "done", "path": "Course/cs101/Media/608001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:07,000\nSo in this problem, we start out with n number of people with big heads and happy smiles.\n\n2\n00:00:07,000 --> 00:00:13,000\nAnd after every hexamester, each one of our happy udacians goes out and asks\n\n3\n00:00:13,000 --> 00:00:17,000\nspread number of their friends to also take the course.\n\n4\n00:00:17,000 --> 00:00:23,000\nThis process continues as long as the number of udacians is less than the target.\n\n5\n00:00:23,000 --> 00:00:27,000\nWith a little bit of math, you can solve this pretty straightforward,\n\n6\n00:00:27,000 --> 00:00:29,000\nand you might have done it in middle school or high school,\n\n7\n00:00:29,000 --> 00:00:33,000\nbut we're going to use recursion to solve this problem very easily.\n\n8\n00:00:33,000 --> 00:00:39,000\nRemember what we're looking for is the number of hexamesters this process goes through\n\n9\n00:00:39,000 --> 00:00:41,000\nuntil we reach the target.\n\n10\n00:00:41,000 --> 00:00:44,000\nI saw on the forms a couple of people were trying to use global variables\n\n11\n00:00:44,000 --> 00:00:46,000\nthat counted recursive calls,\n\n12\n00:00:46,000 --> 00:00:51,000\nbut really that kind of defeats the purpose in the power that we can use in the recursion.\n\n13\n00:00:51,000 --> 00:00:54,000\nI'm going to show you how to do that right now.\n\n14\n00:00:54,000 --> 00:01:01,000\nSo our base case says that if we've met our target, then we don't need any time to spread\n\n15\n00:01:01,000 --> 00:01:05,000\nin order to reach the target because we're already there.\n\n16\n00:01:05,000 --> 00:01:11,000\nNow here I have a + 1 because we're going to say that we're doing 1 iteration\n\n17\n00:01:11,000 --> 00:01:14,000\nof the udacian spreading process.\n\n18\n00:01:14,000 --> 00:01:16,000\nNow for the recursive call.\n\n19\n00:01:16,000 --> 00:01:18,000\nThe first thing we need is n.\n\n20\n00:01:18,000 --> 00:01:23,000\nWell, n is going to be the same thing as last time + how many new people we've gotten,\n\n21\n00:01:23,000 --> 00:01:25,000\nwhich is spread x n. \n\n22\n00:01:25,000 --> 00:01:30,000\nA more succinct way of writing this would be simply (n x (1 + spread).\n\n23\n00:01:30,000 --> 00:01:34,000\nThe spreading rate doesn't change, so we're going to leave that alone.\n\n24\n00:01:34,000 --> 00:01:35,000\nOur target doesn't change.\n\n25\n00:01:35,000 --> 00:01:37,000\nAnd that's it. We're done.\n\n", "id": 608001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAwLEgZOdWdnZXQY6ZUlDA", "path": "Course/cs101/CourseRev/feb2012/Unit/528001/Nugget/609001", "type": "Nugget", "id": 609001}, {"nuggetType": "lecture", "name": "Deep Count", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAw", "media": {"dotsub_id": "b82b6b29-5ba5-40ef-94f0-ee16c3549925", "name": "cs101_hw6_03_l_deep-count", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNGdJQw", "youtube_id": "Aht-cqoi-qA", "youtube_state": "done", "path": "Course/cs101/Media/610001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nIn this problem, given a list that possibly contains lists,\n\n2\n00:00:05,000 --> 00:00:08,000\nwe want to count all of the elements in all of the lists.\n\n3\n00:00:08,000 --> 00:00:12,000\nSo to go through an example, the black list has 2 elements.\n\n4\n00:00:12,000 --> 00:00:20,000\nThis blue list has 3 elements, and the pink list has 2 more elements,\n\n5\n00:00:20,000 --> 00:00:22,000\nleaving us with the total of 7 elements.\n\n6\n00:00:22,000 --> 00:00:26,000\nSo this is what we want to compute, and we can take a second to think about \n\n7\n00:00:26,000 --> 00:00:27,000\nhow we're going to do that.\n\n8\n00:00:27,000 --> 00:00:30,000\nWe're basically going to start with the length of this list,\n\n9\n00:00:30,000 --> 00:00:33,000\nand then we're going to iterate through each element\n\n10\n00:00:33,000 --> 00:00:36,000\nand repeat the process for every sublist.\n\n11\n00:00:36,000 --> 00:00:37,000\nLet me show you how that works.\n\n12\n00:00:37,000 --> 00:00:39,000\nWe're going to start with our sum at 0,\n\n13\n00:00:39,000 --> 00:00:41,000\nand then we're going to iterate through each element.\n\n14\n00:00:41,000 --> 00:00:44,000\nFor every element we see, we increase the sum by 1,\n\n15\n00:00:44,000 --> 00:00:49,000\nand if it's a sublist, we're going to do deep_count on the sublist.\n\n16\n00:00:49,000 --> 00:00:52,000\nOnce we've gone through every list, we're going to return the sum.\n\n17\n00:00:52,000 --> 00:00:56,000\n[Mouth sound mimicing explosion] I've got to get like a catch word, like pow!\n\n", "id": 610001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIGdIAwLEgZOdWdnZXQY6pUlDA", "path": "Course/cs101/CourseRev/feb2012/Unit/528001/Nugget/609002", "type": "Nugget", "id": 609002}]}, {"name": "Homework 6 Starred", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": true, "closedAt": "04/04/2012 00:00", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmkIAwLEgZOdWdnZXQY-ukjDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmkIAwLEgZOdWdnZXQY-fIgDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmkIAwLEgZOdWdnZXQY8r8kDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmkIAwLEgZOdWdnZXQYyYIhDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmkIAwLEgZOdWdnZXQYwcwlDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmkIAwLEgZOdWdnZXQY8ssgDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmkIAw", "path": "Course/cs101/CourseRev/feb2012/Unit/529001", "open": false, "id": 529001, "nuggets": [{"nuggetType": "program", "name": "Only A Little Lucky", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmkIAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmkIAwLEgZOdWdnZXQY8ssgDA", "path": "Course/cs101/CourseRev/feb2012/Unit/529001/Nugget/534002", "suppliedCode": "#Triple Gold Star\n\n#Only A Little Lucky\n\n#The Feeling Lucky question (from the regular homework) assumed it was enough to\n#find the best-ranked page for a given query. For most queries, though, we don't\n#just want the best page (according to the page ranking algorithm), we want a\n#list of many pages that match the query, ordered from the most likely to be\n#useful to the least likely.\n\n#Your goal for this question is to define a procedure, ordered_search(index,\n#ranks, keyword), that takes the same inputs as lucky_search from Question 5,\n#but returns an ordered list of all the URLs that match the query.\n\n#To order the pages, use the quicksort algorithm, invented by Sir Tony Hoare in\n#1959. Quicksort provides a way to sort any list of data, using an expected\n#number of comparisons that scales as n log n where n is the number of elements\n#in the list.\n\n#The idea of quicksort is quite simple:\n\n#If the list has zero or one elements, it is already sorted.\n\n#Otherwise, pick a pivot element, and split the list into two partitions: one\n#contains all the elements equal to or lower than the value of the pivot\n#element, and the other contains all the elements that are greater than the\n#pivot element. Recursively sort each of the sub-lists, and then return the\n#result of concatenating the sorted left sub-list, the pivot element, and the\n#sorted right sub-list.\n\n#For simplicity, use the first element in the list as your pivot element (this\n#is not usually a good choice, since it means if the input list is already\n#nearly sorted, the actual work will be much worse than expected).\n\n\ndef ordered_search(index, ranks, keyword):\n\n\n\n\n\n\n\n\n\n\n\ncache = {\n   'http://udacity.com/cs101x/urank/index.html': \"\"\"<html>\n<body>\n<h1>Dave's Cooking Algorithms</h1>\n<p>\nHere are my favorite recipies:\n<ul>\n<li> <a href=\"http://udacity.com/cs101x/urank/hummus.html\">Hummus Recipe</a>\n<li> <a href=\"http://udacity.com/cs101x/urank/arsenic.html\">World's Best Hummus</a>\n<li> <a href=\"http://udacity.com/cs101x/urank/kathleen.html\">Kathleen's Hummus Recipe</a>\n</ul>\n\nFor more expert opinions, check out the \n<a href=\"http://udacity.com/cs101x/urank/nickel.html\">Nickel Chef</a> \nand <a href=\"http://udacity.com/cs101x/urank/zinc.html\">Zinc Chef</a>.\n</body>\n</html>\n\n\n\n\n\n\n\"\"\",\n   'http://udacity.com/cs101x/urank/zinc.html': \"\"\"<html>\n<body>\n<h1>The Zinc Chef</h1>\n<p>\nI learned everything I know from \n<a href=\"http://udacity.com/cs101x/urank/nickel.html\">the Nickel Chef</a>.\n</p>\n<p>\nFor great hummus, try \n<a href=\"http://udacity.com/cs101x/urank/arsenic.html\">this recipe</a>.\n\n</body>\n</html>\n\n\n\n\n\n\n\"\"\",\n   'http://udacity.com/cs101x/urank/nickel.html': \"\"\"<html>\n<body>\n<h1>The Nickel Chef</h1>\n<p>\nThis is the\n<a href=\"http://udacity.com/cs101x/urank/kathleen.html\">\nbest Hummus recipe!\n</a>\n\n</body>\n</html>\n\n\n\n\n\n\n\"\"\",\n   'http://udacity.com/cs101x/urank/kathleen.html': \"\"\"<html>\n<body>\n<h1>\nKathleen's Hummus Recipe\n</h1>\n<p>\n\n<ol>\n<li> Open a can of garbonzo beans.\n<li> Crush them in a blender.\n<li> Add 3 tablesppons of tahini sauce.\n<li> Squeeze in one lemon.\n<li> Add salt, pepper, and buttercream frosting to taste.\n</ol>\n\n</body>\n</html>\n\n\"\"\",\n   'http://udacity.com/cs101x/urank/arsenic.html': \"\"\"<html>\n<body>\n<h1>\nThe Arsenic Chef's World Famous Hummus Recipe\n</h1>\n<p>\n\n<ol>\n<li> Kidnap the <a href=\"http://udacity.com/cs101x/urank/nickel.html\">Nickel Chef</a>.\n<li> Force her to make hummus for you.\n</ol>\n\n</body>\n</html>\n\n\"\"\",\n   'http://udacity.com/cs101x/urank/hummus.html': \"\"\"<html>\n<body>\n<h1>\nHummus Recipe\n</h1>\n<p>\n\n<ol>\n<li> Go to the store and buy a container of hummus.\n<li> Open it.\n</ol>\n\n</body>\n</html>\n\n\n\n\n\"\"\",\n}\n\ndef get_page(url):\n    if url in cache:\n        return cache[url]\n    return \"\"\n\n\ndef get_next_target(page):\n    start_link = page.find('<a href=')\n    if start_link == -1: \n        return None, 0\n    start_quote = page.find('\"', start_link)\n    end_quote = page.find('\"', start_quote + 1)\n    url = page[start_quote + 1:end_quote]\n    return url, end_quote\n\ndef get_all_links(page):\n    links = []\n    while True:\n        url, endpos = get_next_target(page)\n        if url:\n            links.append(url)\n            page = page[endpos:]\n        else:\n            break\n    return links\n\n\ndef union(a, b):\n    for e in b:\n        if e not in a:\n            a.append(e)\n\ndef add_page_to_index(index, url, content):\n    words = content.split()\n    for word in words:\n        add_to_index(index, word, url)\n        \ndef add_to_index(index, keyword, url):\n    if keyword in index:\n        index[keyword].append(url)\n    else:\n        index[keyword] = [url]\n    \ndef lookup(index, keyword):\n    if keyword in index:\n        return index[keyword]\n    else:\n        return None\n\ndef crawl_web(seed): # returns index, graph of inlinks\n    tocrawl = [seed]\n    crawled = []\n    graph = {}  # <url>, [list of pages it links to]\n    index = {} \n    while tocrawl: \n        page = tocrawl.pop()\n        if page not in crawled:\n            content = get_page(page)\n            add_page_to_index(index, page, content)\n            outlinks = get_all_links(content)\n            graph[page] = outlinks\n            union(tocrawl, outlinks)\n            crawled.append(page)\n    return index, graph\n\ndef compute_ranks(graph):\n    d = 0.8 # damping factor\n    numloops = 10\n    \n    ranks = {}\n    npages = len(graph)\n    for page in graph:\n        ranks[page] = 1.0 / npages\n    \n    for i in range(0, numloops):\n        newranks = {}\n        for page in graph:\n            newrank = (1 - d) / npages\n            for node in graph:\n                if page in graph[node]:\n                    newrank = newrank + d * (ranks[node] / len(graph[node]))\n            newranks[page] = newrank\n        ranks = newranks\n    return ranks\n\n\n#Here are some example showing what ordered_search should do:\n\n#Observe that the result list is sorted so the highest-ranking site is at the\n#beginning of the list.\n\n#Note: the intent of this question is for students to write their own sorting\n#code, not to use the built-in sort procedure.\n\nindex, graph = crawl_web('http://udacity.com/cs101x/urank/index.html')\nranks = compute_ranks(graph)\n\n#print ordered_search(index, ranks, 'Hummus')\n#>>> ['http://udacity.com/cs101x/urank/kathleen.html', \n#    'http://udacity.com/cs101x/urank/nickel.html', \n#    'http://udacity.com/cs101x/urank/arsenic.html', \n#    'http://udacity.com/cs101x/urank/hummus.html', \n#    'http://udacity.com/cs101x/urank/index.html'] \n\n#print ordered_search(index, ranks, 'the')\n#>>> ['http://udacity.com/cs101x/urank/nickel.html', \n#    'http://udacity.com/cs101x/urank/arsenic.html', \n#    'http://udacity.com/cs101x/urank/hummus.html', \n#    'http://udacity.com/cs101x/urank/index.html']\n\n\n#print ordered_search(index, ranks, 'babaganoush')\n#>>> None\n\n\n\n\n\n", "type": "Nugget", "id": 534002}, {"nuggetType": "program", "name": "Family Trees", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmkIAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmkIAwLEgZOdWdnZXQY-fIgDA", "path": "Course/cs101/CourseRev/feb2012/Unit/529001/Nugget/539001", "suppliedCode": "#Single Gold Star\n\n#Family Trees\n\n#In the lecture, we showed a recursive definition for your ancestors. For this\n#question, your goal is to define a procedure that finds someone's ancestors,\n#given a Dictionary that provides the parent relationships.\n\n#Here's an example of an input Dictionary: \n\nada_family = { 'Judith Blunt-Lytton': ['Anne Isabella Blunt', 'Wilfrid Scawen Blunt'], \n              'Ada King-Milbanke': ['Ralph King-Milbanke', 'Fanny Heriot'], \n              'Ralph King-Milbanke': ['Augusta Ada King', 'William King-Noel'], \n              'Anne Isabella Blunt': ['Augusta Ada King', 'William King-Noel'], \n              'Byron King-Noel': ['Augusta Ada King', 'William King-Noel'], \n              'Augusta Ada King': ['Anne Isabella Milbanke', 'George Gordon Byron'], \n              'George Gordon Byron': ['Catherine Gordon', 'Captain John Byron'], \n              'John Byron': ['Vice-Admiral John Byron', 'Sophia Trevannion'] } \n\n#Define a procedure, ancestors(genealogy, person), that takes as its first input\n#a Dictionary in the form given above, and as its second in put the name of a\n#person. It should return a list giving all the known ancestors of the input\n#person (this should be the empty list if there are none). The order of the list\n#does not matter and duplicates will be ignored.\n \ndef ancestors(genealogy, person):\n\n\n\n\n\n\n#Here are some examples:\n\n#print ancestors(ada_family, 'Augusta Ada King')\n#>>> ['Anne Isabella Milbanke', 'George Gordon Byron', \n#    'Catherine Gordon','Captain John Byron']\n\n#print ancestors(ada_family, 'Judith Blunt-Lytton')\n#>>> ['Anne Isabella Blunt', 'Wilfrid Scawen Blunt', 'Augusta Ada King', \n#    'William King-Noel', 'Anne Isabella Milbanke', 'George Gordon Byron', \n#    'Catherine Gordon', 'Captain John Byron']\n\n#print ancestors(ada_family, 'Dave')\n#>>> []\n", "type": "Nugget", "id": 539001}, {"nuggetType": "program", "name": "Khayyam Triangle", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmkIAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmkIAwLEgZOdWdnZXQYyYIhDA", "path": "Course/cs101/CourseRev/feb2012/Unit/529001/Nugget/541001", "suppliedCode": "#Double Gold Star\n\n#Khayyam Triangle\n\n#The French mathematician, Blaise Pascal, who built a mechanical computer in the\n#17th century, studied a pattern of numbers now commonly known in parts of the\n#world as Pascal's Triangle (it was also previously studied by many Indian,\n#Chinese, and Persian mathematicians, and is known by different names in other\n#parts of the world).\n\n#The pattern is shown below:\n\n#                    1\n#                   1 1\n#                  1 2 1\n#                 1 3 3 1\n#                1 4 6 4 1\n#                   ...\n\n\n#Each number is the sum of the number above it to the left and the number above\n#it to the right (any missing numbers are counted as 0).\n\n#Define a procedure, triangle(n), that takes a number n as its input, and\n#returns a list of the first n rows in the triangle. Each element of the\n#returned list should be a list of the numbers at the corresponding row in the\n#triangle.\n\ndef triangle(n):\n\n\n\n\n#For example:\n\n#print triangle(0)\n#>>> []\n\n#print triangle(1)\n#>>> [[1]]\n\n#print triangle(2)\n#>> [[1], [1, 1]]\n\n#print triangle(3)\n#>>> [[1], [1, 1], [1, 2, 1]]\n\n#print triangle(6)\n#>>> [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]", "type": "Nugget", "id": 541001}, {"nuggetType": "lecture", "name": "Family Trees", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmkIAw", "media": {"dotsub_id": "ff23bde7-49c1-47fb-8cef-7195a50c3479", "name": "cs101_hw7_00_l_family-trees", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLKBJAw", "youtube_id": "SQ6508of_ZA", "youtube_state": "done", "path": "Course/cs101/Media/590002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nIn this problem, we're given a dictionary where the keys are children\n\n2\n00:00:05,000 --> 00:00:08,000\nand the values are a list of parents,\n\n3\n00:00:08,000 --> 00:00:12,000\nand given a person, we want to go through the dictionary,\n\n4\n00:00:12,000 --> 00:00:17,000\nand calculate a list that contains all of that person's ancestors.\n\n5\n00:00:17,000 --> 00:00:19,000\nSo let's go over the plan.\n\n6\n00:00:19,000 --> 00:00:21,000\nWe're going to use recursion. \n\n7\n00:00:21,000 --> 00:00:24,000\nWe're going to find the person that we're searching for in the dictionary.\n\n8\n00:00:24,000 --> 00:00:29,000\nWe're going to add that person's parents, their direct relatives, to the output list,\n\n9\n00:00:29,000 --> 00:00:33,000\nand then we're going to recurse on the parents to find the ancestors, \n\n10\n00:00:33,000 --> 00:00:36,000\nadding the result of this recursive call to our output list.\n\n11\n00:00:36,000 --> 00:00:37,000\nThis should be enough to get started,\n\n12\n00:00:37,000 --> 00:00:39,000\nso let's go right to the editor.\n\n13\n00:00:39,000 --> 00:00:42,000\nIf the person we're searching for is in the genealogy dictionary, \n\n14\n00:00:42,000 --> 00:00:45,000\nwe're going to do what we described previously.\n\n15\n00:00:45,000 --> 00:00:47,000\nIf they're not in the dictionary, we're going to return an empty list\n\n16\n00:00:47,000 --> 00:00:50,000\nbecause we don't know any of their ancestors.\n\n17\n00:00:50,000 --> 00:00:53,000\nSo for each parent, we're going to add their ancestors to the result list,\n\n18\n00:00:53,000 --> 00:00:57,000\nand once we're done, we're going to return the result list. And that's it.\n\n", "id": 590002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmkIAwLEgZOdWdnZXQY-ukjDA", "path": "Course/cs101/CourseRev/feb2012/Unit/529001/Nugget/587002", "type": "Nugget", "id": 587002}, {"nuggetType": "lecture", "name": "Khayyam Triangle", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmkIAw", "media": {"dotsub_id": "59a5b86a-ae89-4145-a5d3-21d9b0f67c21", "name": "cs101_hw7_01_l_khayyam-triangle", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMr2JAw", "youtube_id": "i8X3KHanfXE", "youtube_state": "done", "path": "Course/cs101/Media/605002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:07,000\nSo in this problem, we're going to try to build up a given row of Pascal's triangle.\n\n2\n00:00:07,000 --> 00:00:11,000\nSo you could solve this problem recursively, and that's what I did my first time,\n\n3\n00:00:11,000 --> 00:00:16,000\nbut I feel that the iterative solution is a bit simpler and more intuitive to understand.\n\n4\n00:00:16,000 --> 00:00:20,000\nThis isn't always the case, but this is how I'm going to explain this problem.\n\n5\n00:00:20,000 --> 00:00:25,000\nWhat we're going to do is, we're going to start with a list that's row 1,\n\n6\n00:00:25,000 --> 00:00:29,000\nand then we're going to build the next list by adding the 2 numbers above it.\n\n7\n00:00:29,000 --> 00:00:35,000\nMore precisely, let's say we're doing the last row, and we have the previous row\n\n8\n00:00:35,000 --> 00:00:38,000\nalready made, we're going to start an invisible 0 here,\n\n9\n00:00:38,000 --> 00:00:43,000\nand we're going to say, 1 is going to be the sum of the 0 number that I just made up\n\n10\n00:00:43,000 --> 00:00:49,000\nand the 1 that's the first element of the previous row.\n\n11\n00:00:49,000 --> 00:00:52,000\nWe're going to update our pointers to move over by 1,\n\n12\n00:00:52,000 --> 00:00:55,000\nand we get to the element 4 by adding 1 and 3.\n\n13\n00:00:55,000 --> 00:00:58,000\nI'm going to repeat this process all the way through.\n\n14\n00:00:58,000 --> 00:01:04,000\n6 is 3 + 3. 4 is 3 + 1. 1 is 1 and 0.\n\n15\n00:01:04,000 --> 00:01:08,000\nSo that's pretty easy to explain, and that's basically how you would do it\n\n16\n00:01:08,000 --> 00:01:10,000\nif you were building it out by hand,\n\n17\n00:01:10,000 --> 00:01:15,000\nbut putting it in a code may be a little bit more complicated and have alluded you.\n\n18\n00:01:15,000 --> 00:01:16,000\nSo let's see how it's done.\n\n19\n00:01:16,000 --> 00:01:21,000\nSo if I initialize the first row in the triangle to 1.\n\n20\n00:01:21,000 --> 00:01:24,000\nWe don't have anything for a result yet, so that's an empty list.\n\n21\n00:01:24,000 --> 00:01:30,000\nI'm then going to iterate through the process of building each row 1 at a time, n times.\n\n22\n00:01:30,000 --> 00:01:33,000\nThat way we can get to the nth row.\n\n23\n00:01:33,000 --> 00:01:37,000\nWe're going to append the row that we just discovered onto the result list.\n\n24\n00:01:37,000 --> 00:01:41,000\nThe first time around it will just be the list of 1 because that's how the triangle starts.\n\n25\n00:01:41,000 --> 00:01:44,000\nWe're then going to find the next row, which I haven't defined yet,\n\n26\n00:01:44,000 --> 00:01:48,000\nand then repeat this process appending the current row onto the result list.\n\n27\n00:01:48,000 --> 00:01:51,000\nOnce we're done, we're going to return the result.\n\n28\n00:01:51,000 --> 00:01:55,000\nSo this is a good outline of what we're doing, but we're missing the most important part,\n\n29\n00:01:55,000 --> 00:01:57,000\nand that is the make_next_row.\n\n30\n00:01:57,000 --> 00:02:00,000\nSo a row is going to start as an empty list.\n\n31\n00:02:00,000 --> 00:02:03,000\nAs I had the 2 pointers before, we're going to have the previous one\n\n32\n00:02:03,000 --> 00:02:05,000\nand then we're going to have one that I'm going to call e.\n\n33\n00:02:05,000 --> 00:02:10,000\nSo as I said in the description, we're going to start out with 0.\n\n34\n00:02:10,000 --> 00:02:14,000\nThat way when we add 1, we get 1, which is the sides of the triangle.\n\n35\n00:02:14,000 --> 00:02:18,000\nWe're going to calculate the new entry in the current row\n\n36\n00:02:18,000 --> 00:02:25,000\nby adding e--that's our right pointer--with the previous one that we start at 0\n\n37\n00:02:25,000 --> 00:02:26,000\nso that we get 1.\n\n38\n00:02:26,000 --> 00:02:29,000\nWe're going to update the values in previous and then the next iteration, \n\n39\n00:02:29,000 --> 00:02:32,000\ne will update to the next value in row.\n\n40\n00:02:32,000 --> 00:02:36,000\nThis last line basically includes the 1 on the right-hand side.\n\n41\n00:02:36,000 --> 00:02:41,000\nOnce we return result, triangle can use make_next_row accordingly, and we're done.\n\n", "id": 605002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmkIAwLEgZOdWdnZXQY8r8kDA", "path": "Course/cs101/CourseRev/feb2012/Unit/529001/Nugget/598002", "type": "Nugget", "id": 598002}, {"nuggetType": "lecture", "name": "Only A Little Lucky", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmkIAw", "media": {"dotsub_id": "4e680804-9a96-4f16-94f2-61bc82962ba0", "name": "cs101_hw7_02_l_only-a-little-lucky", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOLxIww", "youtube_id": "lI9O8wUEDFc", "youtube_state": "done", "path": "Course/cs101/Media/588002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nUnlike the previous problem called Feeling Lucky, where we wanted to modify \n\n2\n00:00:05,000 --> 00:00:10,000\nthe search engine such that it returned the highest ranking result,\n\n3\n00:00:10,000 --> 00:00:17,000\nwe want to create a new function that orders the results according to the ranking.\n\n4\n00:00:17,000 --> 00:00:22,000\nNow in order to do this, what we need to solve is sorting.\n\n5\n00:00:22,000 --> 00:00:27,000\nWe need to be able to sort the pages according to the ranking.\n\n6\n00:00:27,000 --> 00:00:29,000\nThis is a very well-studied problem.\n\n7\n00:00:29,000 --> 00:00:32,000\nand a canonical example of algorithms.\n\n8\n00:00:32,000 --> 00:00:36,000\nFor the purposes of this course and a kind of reinforced recursion, \n\n9\n00:00:36,000 --> 00:00:39,000\nwe're going to use the quicksort algorithm.\n\n10\n00:00:39,000 --> 00:00:42,000\nQuicksort is interesting because it's incredibly elegant.\n\n11\n00:00:42,000 --> 00:00:47,000\nIt's recursive, and it happens to be one of the fastest ways you can do sorting,\n\n12\n00:00:47,000 --> 00:00:49,000\nand we're going to do it in just a few lines of code.\n\n13\n00:00:49,000 --> 00:00:54,000\nBefore we get started, I'll go quickly over how quicksort works.\n\n14\n00:00:54,000 --> 00:00:57,000\nLet's say we have this list of 5 elements,\n\n15\n00:00:57,000 --> 00:00:59,000\nand we're going through the quicksort algorithm.\n\n16\n00:00:59,000 --> 00:01:02,000\nThe first thing we need to do is to choose a pivot point.\n\n17\n00:01:02,000 --> 00:01:06,000\nA lot of implementations use a random one, but it really doesn't matter \n\n18\n00:01:06,000 --> 00:01:09,000\nif we assume that the data we're given is randomly distributed.\n\n19\n00:01:09,000 --> 00:01:12,000\nSo let's just choose the first element as our pivot point.\n\n20\n00:01:12,000 --> 00:01:15,000\nThat makes coding it simpler, and it's also a little simpler to go through.\n\n21\n00:01:15,000 --> 00:01:20,000\nWhat we're going to do now is divide the rest of the elements according to things \n\n22\n00:01:20,000 --> 00:01:26,000\nthat are smaller than the pivot point and things that are greater than the pivot point.\n\n23\n00:01:26,000 --> 00:01:27,000\nSo let's do that.\n\n24\n00:01:27,000 --> 00:01:30,000\nSo we have our pivot point 2, and now we're going to go through the rest of the elements\n\n25\n00:01:30,000 --> 00:01:33,000\nand decide whether or not they're greater than or less than 2.\n\n26\n00:01:33,000 --> 00:01:35,000\nA pretty simple operation.\n\n27\n00:01:35,000 --> 00:01:37,000\nSo 1 is less than 2. We're going to add it to this list.\n\n28\n00:01:37,000 --> 00:01:39,000\n8 is greater than 2.\n\n29\n00:01:39,000 --> 00:01:44,000\n0 is less than 2. Notice how I didn't bother with the ordering of the sublist.\n\n30\n00:01:44,000 --> 00:01:50,000\nWe're going to take care of that by recurring quicksort onto the sublist of each side.\n\n31\n00:01:50,000 --> 00:01:53,000\n9 is greater than 2, and we're done.\n\n32\n00:01:53,000 --> 00:01:55,000\nWhat we have is a partially-sorted list.\n\n33\n00:01:55,000 --> 00:01:58,000\nEverything that is less than 2 is on the left side of this, \n\n34\n00:01:58,000 --> 00:02:01,000\nand everything that's greater than 2 is on the right side.\n\n35\n00:02:01,000 --> 00:02:05,000\nSo what we're going to do is, we're going to redo the same thing to the left side,\n\n36\n00:02:05,000 --> 00:02:07,000\nthe same thing to the right side,\n\n37\n00:02:07,000 --> 00:02:11,000\nand in the end, once we sorted everything, we combine them all together,\n\n38\n00:02:11,000 --> 00:02:13,000\nand we have a sorted list.\n\n39\n00:02:13,000 --> 00:02:15,000\nSo let's go through that real quick.\n\n40\n00:02:15,000 --> 00:02:18,000\nSo here 1 is the pivot point. We get 1.\n\n41\n00:02:18,000 --> 00:02:19,000\n0 is less than 1.\n\n42\n00:02:19,000 --> 00:02:23,000\nHere 8 is the pivot point. 9 is greater than 8.\n\n43\n00:02:23,000 --> 00:02:25,000\nAnd we're done here. We're also done here.\n\n44\n00:02:25,000 --> 00:02:28,000\nNow we're left with single element lists.\n\n45\n00:02:28,000 --> 00:02:34,000\nWe do quicksort on each of these, and a list of 1 element is sorted, \n\n46\n00:02:34,000 --> 00:02:36,000\nso we're done sorting at the bottom.\n\n47\n00:02:36,000 --> 00:02:39,000\n We now append on the way up.\n\n48\n00:02:39,000 --> 00:02:44,000\nSo the end result of all of these appendings will be our sorted list.\n\n49\n00:02:44,000 --> 00:02:48,000\nAnd just to finish our list, let's just say we called it conquer.\n\n50\n00:02:48,000 --> 00:02:50,000\nHopefully this gives you an idea of what we're doing.\n\n51\n00:02:50,000 --> 00:02:54,000\nSo let's go to the code, and it might become a little clearer if you're confused.\n\n52\n00:02:54,000 --> 00:02:56,000\nSo our ordered_search takes in 3 parameters:\n\n53\n00:02:56,000 --> 00:03:01,000\nthe index, the ranking of the pages, and the keyword that we're searching for.\n\n54\n00:03:01,000 --> 00:03:05,000\nI'm going to look up the pages that are associated with that keyword,\n\n55\n00:03:05,000 --> 00:03:09,000\nand then I'm going to quicksort the pages according to the rankings that it was passed \n\n56\n00:03:09,000 --> 00:03:10,000\ninto ordered search.\n\n57\n00:03:10,000 --> 00:03:13,000\nThis is another function that we'll have to define.\n\n58\n00:03:13,000 --> 00:03:16,000\nSo I'm taking in 2 lists--\n\n59\n00:03:16,000 --> 00:03:21,000\nthe url's and the rankings of those url's which is stored as a dictionary.\n\n60\n00:03:21,000 --> 00:03:25,000\nSo if I didn't get any pages passed in, or it was an empty list or whatnot,\n\n61\n00:03:25,000 --> 00:03:28,000\nthen I'm just going to not do anything and stop right here.\n\n62\n00:03:28,000 --> 00:03:33,000\nThis saves some cases that add a little bit of complexity later on if we take care of it now.\n\n63\n00:03:33,000 --> 00:03:36,000\nSo the first thing I'm going to do is find the pivot point,\n\n64\n00:03:36,000 --> 00:03:38,000\nwhich is the ranking of the first page.\n\n65\n00:03:38,000 --> 00:03:41,000\nThat's, basically, how we did it in the example I went through.\n\n66\n00:03:41,000 --> 00:03:45,000\nWe initialized our 2 lists, the better list and the worst list.\n\n67\n00:03:45,000 --> 00:03:50,000\nNow we're going to go through each page and put them in the correct list accordingly.\n\n68\n00:03:50,000 --> 00:03:53,000\nOne thing you might notice is that I didn't go through every page.\n\n69\n00:03:53,000 --> 00:03:54,000\nI skipped the first page.\n\n70\n00:03:54,000 --> 00:03:58,000\nThat makes the code a little bit simpler because I've already included the page\n\n71\n00:03:58,000 --> 00:03:59,000\nas the pivot point.\n\n72\n00:03:59,000 --> 00:04:03,000\nOnce we put the pages in the correct list, we're going to recur.\n\n73\n00:04:03,000 --> 00:04:06,000\nIn order to get the list concatenation to work appropriately, \n\n74\n00:04:06,000 --> 00:04:10,000\nyou need to put this pages into another list.\n\n75\n00:04:10,000 --> 00:04:17,000\nThis is the appending that I showed at the end, and this is the recurring that I showed earlier.\n\n76\n00:04:17,000 --> 00:04:18,000\nThis is all quicksort is.\n\n77\n00:04:18,000 --> 00:04:22,000\nWe got--what is it--14 lines of code,13 lines of code,\n\n78\n00:04:22,000 --> 00:04:25,000\nand we can even save a little bit here and there if we wanted to,\n\n79\n00:04:25,000 --> 00:04:29,000\nbut we're just going to recur, and we're done.\n\n80\n00:04:29,000 --> 00:04:34,000\nTo go through it real quickly, if we have 1 page on our list or if there are no pages in our list,\n\n81\n00:04:34,000 --> 00:04:38,000\nthen it's considered sorted, and we return it right away.\n\n82\n00:04:38,000 --> 00:04:42,000\nOtherwise, we find our pivot point, which we want to use as the first element,\n\n83\n00:04:42,000 --> 00:04:47,000\nand for the rest of them, we're going to put them in the appropriate worse or better list,\n\n84\n00:04:47,000 --> 00:04:49,000\nif they're better or worse ranked.\n\n85\n00:04:49,000 --> 00:04:53,000\nWe're then going to recur on each of our sublists, and once that's done,\n\n86\n00:04:53,000 --> 00:04:55,000\nwe're going to append them all together.\n\n", "id": 588002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmkIAwLEgZOdWdnZXQYwcwlDA", "path": "Course/cs101/CourseRev/feb2012/Unit/529001/Nugget/616001", "type": "Nugget", "id": 616001}]}, {"name": "Office Hours 6", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnpIwwLEgZOdWdnZXQYyfkjDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnpIwwLEgZOdWdnZXQYgZEkDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnpIwwLEgZOdWdnZXQYuagkDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnpIwwLEgZOdWdnZXQY8b8kDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnpIwwLEgZOdWdnZXQYorAkDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnpIwwLEgZOdWdnZXQYuqgkDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnpIww", "path": "Course/cs101/CourseRev/feb2012/Unit/587001", "open": false, "id": 587001, "nuggets": [{"nuggetType": "lecture", "name": "Exam Information", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnpIww", "media": {"dotsub_id": "bbf06f8f-53cb-4969-8f62-4733c59dabad", "name": "cs101_oo6_00_l_exam-information", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOHxIww", "youtube_id": "71jDKz0vh1U", "youtube_state": "processing", "path": "Course/cs101/Media/588001", "transcript": null, "id": 588001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnpIwwLEgZOdWdnZXQYyfkjDA", "path": "Course/cs101/CourseRev/feb2012/Unit/587001/Nugget/589001", "type": "Nugget", "id": 589001}, {"nuggetType": "lecture", "name": "Using Recursion", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnpIww", "media": {"dotsub_id": "20e88787-f7ff-4ed8-bc53-af73a0d0cf33", "name": "cs101_oo6_01_l_using-recursion", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJmJJAw", "youtube_id": "VWyHjEh0tfA", "youtube_state": "done", "path": "Course/cs101/Media/591001", "transcript": null, "id": 591001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnpIwwLEgZOdWdnZXQYgZEkDA", "path": "Course/cs101/CourseRev/feb2012/Unit/587001/Nugget/592001", "type": "Nugget", "id": 592001}, {"nuggetType": "lecture", "name": "Pythonic", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnpIww", "media": {"dotsub_id": "ea482341-b689-4067-acfd-8ddbe651a98d", "name": "cs101_oo6_02_l_pythonic", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNGgJAw", "youtube_id": "2g6qtjwKkA0", "youtube_state": "processing", "path": "Course/cs101/Media/594001", "transcript": null, "id": 594001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnpIwwLEgZOdWdnZXQYuagkDA", "path": "Course/cs101/CourseRev/feb2012/Unit/587001/Nugget/595001", "type": "Nugget", "id": 595001}, {"nuggetType": "lecture", "name": "Challenges In Search", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnpIww", "media": {"dotsub_id": "36df3e3c-166e-45af-87e7-e45ebeb44019", "name": "cs101_oo6_05_l_challenges-in-search", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMHPJAw", "youtube_id": "ulkWpQl6izE", "youtube_state": "done", "path": "Course/cs101/Media/600001", "transcript": null, "id": 600001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnpIwwLEgZOdWdnZXQYuqgkDA", "path": "Course/cs101/CourseRev/feb2012/Unit/587001/Nugget/595002", "type": "Nugget", "id": 595002}, {"nuggetType": "lecture", "name": "Pagerank", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnpIww", "media": {"dotsub_id": "3697a479-cfc6-42eb-811b-19d87b49ac45", "name": "cs101_oo6_04_l_pagerank", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNKgJAw", "youtube_id": "rN-5K_q4JDc", "youtube_state": "done", "path": "Course/cs101/Media/594002", "transcript": null, "id": 594002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnpIwwLEgZOdWdnZXQYorAkDA", "path": "Course/cs101/CourseRev/feb2012/Unit/587001/Nugget/596002", "type": "Nugget", "id": 596002}, {"nuggetType": "lecture", "name": "Python Versions", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnpIww", "media": {"dotsub_id": "0225e84f-fb88-4d96-a2e1-6df2e9bb7b61", "name": "cs101_oo6_03_l_python-versions", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIm4JAw", "youtube_id": "owH7bqKiR-g", "youtube_state": "done", "path": "Course/cs101/Media/597001", "transcript": null, "id": 597001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnpIwwLEgZOdWdnZXQY8b8kDA", "path": "Course/cs101/CourseRev/feb2012/Unit/587001/Nugget/598001", "type": "Nugget", "id": 598001}]}, {"name": "Unit 7", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQY-u8hDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYq-AhDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQY7aEhDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQY2tAhDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYgpQjDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYsfslDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQY0aMjDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYuasjDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYrOAhDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYuq4iDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYruAhDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQY8cIjDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQY2cojDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYwtghDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYo7khDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYy_wiDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQY3KkhDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYnY8iDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQY29AhDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYqtojDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYgpciDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYmowjDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYr-AhDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQY7p4iDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYi74iDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYs4QjDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "path": "Course/cs101/CourseRev/feb2012/Unit/545001", "open": false, "id": 545001, "nuggets": [{"nuggetType": "lecture", "name": "Computer History Museum", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": null, "name": "cs101_unit7_06_l_computer-history-museum", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOmeIgw", "youtube_id": "ClTnWszPp3Q", "youtube_state": "done", "path": "Course/cs101/Media/561001", "transcript": null, "id": 561001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQY6qEhDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/545002", "type": "Nugget", "id": 545002}, {"nuggetType": "lecture", "name": "Search On The Web", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": null, "name": "cs101_unit7_10_l_search-on-the-web", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLqxIQw", "youtube_id": "mgR9sInLwfc", "youtube_state": "processing", "path": "Course/cs101/Media/547002", "transcript": null, "id": 547002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQY66EhDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/545003", "type": "Nugget", "id": 545003}, {"nuggetType": "lecture", "name": "Overview", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": "d65067f8-a7ad-4fc5-a4ac-b744ab77f17d", "name": "cs101_unit7_02_l_overview", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOyhIQw", "youtube_id": "-atl1N1mvu0", "youtube_state": "failed", "path": "Course/cs101/Media/545004", "transcript": null, "id": 545004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQY7aEhDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/545005", "type": "Nugget", "id": 545005}, {"nuggetType": "lecture", "name": "Overview", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": null, "name": "cs101_unit7_02_l_overview", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNnQIQw", "youtube_id": "-atl1N1mvu0", "youtube_state": "done", "path": "Course/cs101/Media/551001", "transcript": null, "id": 551001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQY06khDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/546003", "type": "Nugget", "id": 546003}, {"nuggetType": "lecture", "name": "Search Before Computers", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": null, "name": "cs101_unit7_09_l_search-before-computers", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJqPIgw", "youtube_id": "F2DTZoa-zPo", "youtube_state": "done", "path": "Course/cs101/Media/559002", "transcript": null, "id": 559002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQY1qkhDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/546006", "type": "Nugget", "id": 546006}, {"nuggetType": "lecture", "name": "Getting Involved", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": "d92399f9-55bc-48bb-97e8-1b2bfa00d8bd", "name": "cs101_unit7_15_l_getting-involved", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNKjIww", "youtube_id": "56KQGpGOwLM", "youtube_state": "failed", "path": "Course/cs101/Media/578002", "transcript": null, "id": 578002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQY3KkhDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/546012", "type": "Nugget", "id": 546012}, {"nuggetType": "lecture", "name": "Past Present And Future", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": null, "name": "cs101_unit7_00_l_past-present-and-future", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNGpIQw", "youtube_id": "rcJPU-7F1hE", "youtube_state": "done", "path": "Course/cs101/Media/546001", "transcript": null, "id": 546001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYubEhDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/547001", "type": "Nugget", "id": 547001}, {"nuggetType": "lecture", "name": "Mozilla", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": "11278a98-996d-4ab0-811d-4e9b7bae9cab", "name": "cs101_unit7_13_l_mozilla", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKnaIww", "youtube_id": "_IfqKBbEqck", "youtube_state": "failed", "path": "Course/cs101/Media/585001", "transcript": null, "id": 585001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYo7khDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/548003", "type": "Nugget", "id": 548003}, {"nuggetType": "lecture", "name": "Themes", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": null, "name": "cs101_unit7_01_l_themes", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNKpIQw", "youtube_id": "-6OLwm10pqs", "youtube_state": "processing", "path": "Course/cs101/Media/546002", "transcript": null, "id": 546002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYicEhDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/549001", "type": "Nugget", "id": 549001}, {"nuggetType": "lecture", "name": "Computer Science Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": "577c903f-d83f-429c-933d-22cb98032d8c", "name": "cs101_unit7_04_s_computer-science", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOmbIww", "youtube_id": "DIbtX0GqIA8", "youtube_state": "processing", "path": "Course/cs101/Media/577001", "transcript": null, "id": 577001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYi8EhDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/549003", "type": "Nugget", "id": 549003}, {"nuggetType": "lecture", "name": "Present Of Computing", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": null, "name": "cs101_unit7_11_l_present-of-computing", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPHFIgw", "youtube_id": "0SW1GqqIXWw", "youtube_state": "done", "path": "Course/cs101/Media/566001", "transcript": null, "id": 566001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQY8sghDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/550002", "type": "Nugget", "id": 550002}, {"nuggetType": "lecture", "name": "Computer Science", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": "7b234f2f-10c4-49be-835d-a42e9befc269", "name": "cs101_unit7_03_q_computer-science", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNrNIgw", "youtube_id": "YBJk5Z5bAEA", "youtube_state": "failed", "path": "Course/cs101/Media/567002", "transcript": null, "id": 567002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQY2tAhDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/551002", "type": "Nugget", "id": 551002}, {"nuggetType": "lecture", "name": "Benetech", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": "7512098d-9a32-43fc-bc3e-88712f762489", "name": "cs101_unit7_17_l_benetech", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGO-hIQw", "youtube_id": "FqQFwXOJTeU", "youtube_state": "done", "path": "Course/cs101/Media/545007", "transcript": null, "id": 545007}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQY29AhDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/551003", "type": "Nugget", "id": 551003}, {"nuggetType": "lecture", "name": "Slac And Big Data", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": "c5a84756-ea98-46da-992f-f56a443f9767", "name": "cs101_unit7_12_l_slac-and-big-data", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNrKIww", "youtube_id": "4_0sCB_csRI", "youtube_state": "failed", "path": "Course/cs101/Media/583002", "transcript": null, "id": 583002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYwtghDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/552002", "type": "Nugget", "id": 552002}, {"nuggetType": "lecture", "name": "First Hard Drive", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": null, "name": "cs101_unit7_08_l_first-hard-drive", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLmuIgw", "youtube_id": "oSCCFDZLRgY", "youtube_state": "done", "path": "Course/cs101/Media/563001", "transcript": null, "id": 563001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYquAhDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/553002", "type": "Nugget", "id": 553002}, {"nuggetType": "lecture", "name": "Themes", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": "2cb4d333-02ec-473e-b2a1-96da08a2e4a0", "name": "cs101_unit7_01_l_themes", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJmMIww", "youtube_id": "-6OLwm10pqs", "youtube_state": "failed", "path": "Course/cs101/Media/575001", "transcript": null, "id": 575001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYq-AhDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/553003", "type": "Nugget", "id": 553003}, {"nuggetType": "lecture", "name": "Babbage Engine", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": "ee9a9b03-b913-4b23-a480-34f00f587b7a", "name": "cs101_unit7_07_l_babbage-engine", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJuPIgw", "youtube_id": "5nYcND7WjCY", "youtube_state": "failed", "path": "Course/cs101/Media/559003", "transcript": null, "id": 559003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYrOAhDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/553004", "type": "Nugget", "id": 553004}, {"nuggetType": "lecture", "name": "Search Before Computers", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": "94346776-ab15-4d94-8bcc-289348d21731", "name": "cs101_unit7_09_l_search-before-computers", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGK3gIQw", "youtube_id": "F2DTZoa-zPo", "youtube_state": "failed", "path": "Course/cs101/Media/553005", "transcript": null, "id": 553005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYruAhDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/553006", "type": "Nugget", "id": 553006}, {"nuggetType": "lecture", "name": "Computer Security", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": "791d18a4-0129-4f98-a827-6b30fc25be56", "name": "cs101_unit7_20_l_computer-security", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJToIQw", "youtube_id": "H87Yxc4p-C8", "youtube_state": "done", "path": "Course/cs101/Media/554004", "transcript": null, "id": 554004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYr-AhDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/553007", "type": "Nugget", "id": 553007}, {"nuggetType": "lecture", "name": "Computer Science", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": null, "name": "cs101_unit7_03_q_computer-science", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKngIQw", "youtube_id": "YBJk5Z5bAEA", "youtube_state": "done", "path": "Course/cs101/Media/553001", "transcript": null, "id": 553001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYkeghDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/554001", "type": "Nugget", "id": 554001}, {"nuggetType": "quiz", "name": "Computer Science", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQY-e8hDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/555001", "type": "Nugget", "id": 555001}, {"nuggetType": "lecture", "name": "Past Present And Future", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": "b3fcd452-9046-4dd9-bf5e-61ee5b4b7eb3", "name": "cs101_unit7_00_l_past-present-and-future", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMr_IQw", "youtube_id": "rcJPU-7F1hE", "youtube_state": "uploading", "path": "Course/cs101/Media/557002", "transcript": null, "id": 557002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQY-u8hDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/555002", "type": "Nugget", "id": 555002}, {"nuggetType": "lecture", "name": "Computer Science Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": null, "name": "cs101_unit7_04_s_computer-science", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKK5IQw", "youtube_id": "DIbtX0GqIA8", "youtube_state": "processing", "path": "Course/cs101/Media/548002", "transcript": null, "id": 548002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQY4fchDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/556001", "type": "Nugget", "id": 556001}, {"nuggetType": "lecture", "name": "Open Source", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": null, "name": "cs101_unit7_14_l_open-source", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPnsIgw", "youtube_id": "TUBAD93kCfA", "youtube_state": "done", "path": "Course/cs101/Media/571001", "transcript": null, "id": 571001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQY4vchDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/556002", "type": "Nugget", "id": 556002}, {"nuggetType": "lecture", "name": "Past Of Computing", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": null, "name": "cs101_unit7_05_l_past-of-computing", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLGHIgw", "youtube_id": "dmddF8nIzJY", "youtube_state": "done", "path": "Course/cs101/Media/558001", "transcript": null, "id": 558001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYmY8iDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/559001", "type": "Nugget", "id": 559001}, {"nuggetType": "lecture", "name": "Having An Impact", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": "497fd6a4-5692-40b9-bc42-fff067bd03e3", "name": "cs101_unit7_16_l_having-an-impact", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNvKIww", "youtube_id": "lL36LxpsXBI", "youtube_state": "done", "path": "Course/cs101/Media/583003", "transcript": null, "id": 583003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYnY8iDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/559005", "type": "Nugget", "id": 559005}, {"nuggetType": "lecture", "name": "Text Analysis", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": "814f70ff-2ed3-4cfe-a192-c15ebb0fb076", "name": "cs101_unit7_19_l_text-analysis", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIzBIQw", "youtube_id": "679-n8LWaVo", "youtube_state": "done", "path": "Course/cs101/Media/549004", "transcript": null, "id": 549004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYgpciDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/560002", "type": "Nugget", "id": 560002}, {"nuggetType": "lecture", "name": "Babbage Engine", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": null, "name": "cs101_unit7_07_l_babbage-engine", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNWpIQw", "youtube_id": "5nYcND7WjCY", "youtube_state": "done", "path": "Course/cs101/Media/546005", "transcript": null, "id": 546005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQY6p4iDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/561002", "type": "Nugget", "id": 561002}, {"nuggetType": "lecture", "name": "Slac And Big Data", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": null, "name": "cs101_unit7_12_l_slac-and-big-data", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNnNIgw", "youtube_id": "4_0sCB_csRI", "youtube_state": "processing", "path": "Course/cs101/Media/567001", "transcript": null, "id": 567001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQY654iDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/561003", "type": "Nugget", "id": 561003}, {"nuggetType": "lecture", "name": "Getting Involved", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": null, "name": "cs101_unit7_15_l_getting-involved", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNipIQw", "youtube_id": "56KQGpGOwLM", "youtube_state": "processing", "path": "Course/cs101/Media/546008", "transcript": null, "id": 546008}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQY7J4iDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/561004", "type": "Nugget", "id": 561004}, {"nuggetType": "lecture", "name": "Theory Of Computation", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": "b5683df0-a6e1-4c77-a5a6-a62b3d587737", "name": "cs101_unit7_21_l_theory-of-computation", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGO2eIgw", "youtube_id": "W7nD3AMJDAI", "youtube_state": "done", "path": "Course/cs101/Media/561005", "transcript": null, "id": 561005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQY7p4iDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/561006", "type": "Nugget", "id": 561006}, {"nuggetType": "lecture", "name": "First Hard Drive", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": "85003c1b-34b2-485e-807e-483d91b83eae", "name": "cs101_unit7_08_l_first-hard-drive", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJPoIQw", "youtube_id": "oSCCFDZLRgY", "youtube_state": "failed", "path": "Course/cs101/Media/554003", "transcript": null, "id": 554003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYuq4iDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/563002", "type": "Nugget", "id": 563002}, {"nuggetType": "lecture", "name": "Quantum Computing", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": "994b248a-2fb7-46f6-8c1a-18d28f27eee1", "name": "cs101_unit7_22_l_quantum-computing", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIq7Iww", "youtube_id": "XafsCK3yk4U", "youtube_state": "done", "path": "Course/cs101/Media/581002", "transcript": null, "id": 581002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYi74iDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/565003", "type": "Nugget", "id": 565003}, {"nuggetType": "lecture", "name": "Mozilla", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": null, "name": "cs101_unit7_13_l_mozilla", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKndIgw", "youtube_id": "_IfqKBbEqck", "youtube_state": "done", "path": "Course/cs101/Media/569001", "transcript": null, "id": 569001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYkeUiDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/570001", "type": "Nugget", "id": 570001}, {"nuggetType": "lecture", "name": "Open Source", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": "54224053-2806-431e-9324-0589009171a2", "name": "cs101_unit7_14_l_open-source", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKS5IQw", "youtube_id": "TUBAD93kCfA", "youtube_state": "failed", "path": "Course/cs101/Media/548004", "transcript": null, "id": 548004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYy_wiDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/573003", "type": "Nugget", "id": 573003}, {"nuggetType": "lecture", "name": "Stay Udacious", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": "5e992f00-0bdd-4fbe-a0c6-3c023fd51222", "name": "cs101_unit7_24_l_stay-udacious", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNzKIww", "youtube_id": "oDxqlHY6V1w", "youtube_state": "done", "path": "Course/cs101/Media/583004", "transcript": null, "id": 583004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYs4QjDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/574003", "type": "Nugget", "id": 574003}, {"nuggetType": "lecture", "name": "Energy Aware Computing", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": "d2c0305e-042a-4848-a7fc-438231b20cde", "name": "cs101_unit7_23_l_energy-aware-computing", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGJXoIQw", "youtube_id": "wLyAANVyJQM", "youtube_state": "done", "path": "Course/cs101/Media/554005", "transcript": null, "id": 554005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYmowjDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/575002", "type": "Nugget", "id": 575002}, {"nuggetType": "quiz", "name": "Computer Science", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYgpQjDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/576002", "type": "Nugget", "id": 576002}, {"nuggetType": "lecture", "name": "Past Of Computing", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": "95dc9530-3126-4c92-9f9a-8639418643bf", "name": "cs101_unit7_05_l_past-of-computing", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGO6hIQw", "youtube_id": "dmddF8nIzJY", "youtube_state": "failed", "path": "Course/cs101/Media/545006", "transcript": null, "id": 545006}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQY0aMjDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/578001", "type": "Nugget", "id": 578001}, {"nuggetType": "lecture", "name": "Computer History Museum", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": "cbdfa39e-8e29-4d1d-8f6b-46c1caa07240", "name": "cs101_unit7_06_l_computer-history-museum", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMr8Igw", "youtube_id": "ClTnWszPp3Q", "youtube_state": "failed", "path": "Course/cs101/Media/573002", "transcript": null, "id": 573002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYuasjDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/579001", "type": "Nugget", "id": 579001}, {"nuggetType": "lecture", "name": "Search On The Web", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": "c453e01c-ea43-4f86-ac78-f6c122178528", "name": "cs101_unit7_10_l_search-on-the-web", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKK2Igw", "youtube_id": "mgR9sInLwfc", "youtube_state": "failed", "path": "Course/cs101/Media/564002", "transcript": null, "id": 564002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQY8cIjDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/582001", "type": "Nugget", "id": 582001}, {"nuggetType": "lecture", "name": "Present Of Computing", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": "dda69685-7351-4a3d-9cf9-a553c315ec83", "name": "cs101_unit7_11_l_present-of-computing", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIq-Igw", "youtube_id": "0SW1GqqIXWw", "youtube_state": "failed", "path": "Course/cs101/Media/565002", "transcript": null, "id": 565002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQY2cojDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/583001", "type": "Nugget", "id": 583001}, {"nuggetType": "lecture", "name": "Future Of Computing", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": "bc62f7f3-4aee-46a9-9ef0-67b76de2af98", "name": "cs101_unit7_18_l_future-of-computing", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMz8Igw", "youtube_id": "EsTiQxNDQfo", "youtube_state": "done", "path": "Course/cs101/Media/573004", "transcript": null, "id": 573004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYqtojDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/585002", "type": "Nugget", "id": 585002}, {"nuggetType": "lecture", "name": "Computer Science", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQw", "media": {"dotsub_id": "45c8f8cc-7daf-4f4a-88b6-8ebcceb7093e", "name": "cs373_unit7_04_l_computer-science", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMnzJQw", "youtube_id": "DIbtX0GqIA8", "youtube_state": "failed", "path": "Course/cs101/Media/621001", "transcript": null, "id": 621001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOmhIQwLEgZOdWdnZXQYsfslDA", "path": "Course/cs101/CourseRev/feb2012/Unit/545001/Nugget/622001", "type": "Nugget", "id": 622001}]}, {"name": "Final Exam", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": true, "closedAt": "04/09/2012 23:59", "nuggetLayout": [[null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQYoaomDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQY2b4nDA"}], [null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQYibImDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQYkdYnDA"}], [null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQY4_EjDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQY4eUnDA"}], [null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQYgo4lDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQYmf0nDA"}], [null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQYwckmDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQY0ZQoDA"}], [null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQYgosmDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQYiawoDA"}], [null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQYg44lDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQYoqcnDA"}], [null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQY-eAmDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQYktwlDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgw", "path": "Course/cs101/CourseRev/feb2012/Unit/626001", "open": false, "id": 626001, "nuggets": [{"nuggetType": "program", "name": "Prefix Removal", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQY4_EjDA", "path": "Course/cs101/CourseRev/feb2012/Unit/626001/Nugget/588003", "suppliedCode": "#Prefix Removal\n\n\n#Define a procedure, remove_prefix, that takes as input a string, and returns a\n#string that is the part of the string following the first hyphen -. If the input string does\n#not contain any hyphen -, remove_prefix should return the full input string.\n\ndef remove_prefix(s):\n\n\n\n#For example,\n\n#print remove_prefix('super-udacity')\n#>>> udacity\n\n#print remove_prefix('counter-counter-intelligence')\n#>>> counter-intelligence\n\n#print remove_prefix('antigravity')\n#>>> antigravity\n", "type": "Nugget", "id": 588003}, {"nuggetType": "program", "name": "Collatz Returns", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQYgo4lDA", "path": "Course/cs101/CourseRev/feb2012/Unit/626001/Nugget/608002", "suppliedCode": "#Collatz Returns!\n\n\n#Define a procedure, collatz_steps, that takes as input a positive integer, n, and returns\n#the number of steps it takes to reach 1 by following these steps:\n\n#    If n is even, divide it by 2. (You can test for evenness using n % 2 == 0.)\n#    If n is odd, replace it with 3n + 1.\n\ndef collatz_steps(n):\n\n        \n\n\n#For example,\n\n#print collatz_steps(1)\n#>>> 0\n\n#print collatz_steps(2)\n#>>> 1\n\n#print collatz_steps(6)\n#>>> 8\n\n#print collatz_steps(101)\n#>>> 25\n", "type": "Nugget", "id": 608002}, {"nuggetType": "program", "name": "Reverse Index", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQYg44lDA", "path": "Course/cs101/CourseRev/feb2012/Unit/626001/Nugget/608003", "suppliedCode": "#Reverse Index\n\n\n#Define a procedure, reverse_index, that takes as input a Dictionary, and\n#returns a new Dictionary where the keys are the values in the input dictionary.\n#The value associated with a key in the result is a list of all the keys in the\n#input dictionary that match this value (in any order).\n\ndef reverse_index(dict):\n\n\n\n#For example,\n\nwinners_by_year = {\n    1930: 'Uruguay', 1934: 'Italy', 1938: 'Italy', 1950: 'Uruguay',\n    1954: 'West Germany', 1958: 'Brazil', 1962: 'Brazil', 1966: 'England',\n    1970: 'Brazil', 1974: 'West Germany', 1978: 'Argentina',\n    1982: 'Italy', 1986: 'Argentina', 1990: 'West Germany', 1994: 'Brazil',\n    1998: 'France', 2002: 'Brazil', 2006: 'Italy', 2010: 'Spain' }\n\nwins_by_country = reverse_index(winners_by_year)\n\n#print wins_by_country['Brazil']\n#>>> [1958, 2002, 1970, 1994, 1962]\n\n#print wins_by_country['England'] \n#>>> [1966]\n", "type": "Nugget", "id": 608003}, {"nuggetType": "lecture", "name": "Same Structure Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgw", "media": {"dotsub_id": "78a6bd10-126d-43ef-8e56-d391948a941f", "name": "cs101_hw8_07_s_same-structure", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNrEJQw", "youtube_id": "08yWp5D-TeY", "youtube_state": "processing", "path": "Course/cs101/Media/615002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nThe final question in the regular portion in the exam asks us to determine \n\n2\n00:00:04,000 --> 00:00:08,000\nwhether two lists have the same structure.\n\n3\n00:00:08,000 --> 00:00:11,000\nBut what does it mean to have the same structure?\n\n4\n00:00:11,000 --> 00:00:14,000\nLet's go through a couple examples.\n\n5\n00:00:14,000 --> 00:00:18,000\nHere I have two lists that have four elements each.\n\n6\n00:00:18,000 --> 00:00:20,000\nI'm going to say that they have the same structure.\n\n7\n00:00:20,000 --> 00:00:22,000\nHere I have two inputs.\n\n8\n00:00:22,000 --> 00:00:25,000\nOne is a list that contains one element.\n\n9\n00:00:25,000 --> 00:00:27,000\nThe other is just a number.\n\n10\n00:00:27,000 --> 00:00:30,000\nI'm going to say that they don't have the same structure.\n\n11\n00:00:30,000 --> 00:00:36,000\nHere I have two lists where the second element is a list that contains one element.\n\n12\n00:00:36,000 --> 00:00:39,000\nI'm going to say they also have the same structure.\n\n13\n00:00:39,000 --> 00:00:43,000\nYou can probably infer what I mean by the same structure,\n\n14\n00:00:43,000 --> 00:00:48,000\nbut it's really wherever there is a number, an element or whatever,\n\n15\n00:00:48,000 --> 00:00:53,000\nanything that's not a list, it matches both of our inputs.\n\n16\n00:00:53,000 --> 00:00:57,000\nIf there is a list, those lists themselves have the same structure.\n\n17\n00:00:57,000 --> 00:01:00,000\nReally, I just don't care about the numbers.\n\n18\n00:01:00,000 --> 00:01:07,000\nI can replace every number in here with some jibberish and kind of look better at what I'm thinking.\n\n19\n00:01:07,000 --> 00:01:10,000\nHere I replaced all the numbers with smiley faces.\n\n20\n00:01:10,000 --> 00:01:13,000\nIt could have been frowny faces, but I'm feeling in a good mood.\n\n21\n00:01:13,000 --> 00:01:16,000\nNow the whole structure argument seems a lot clearer.\n\n22\n00:01:16,000 --> 00:01:20,000\nIf I remove the list and made it just an element, just a smiley face,\n\n23\n00:01:20,000 --> 00:01:23,000\nthis would be an x, because they're clearly not the same.\n\n24\n00:01:23,000 --> 00:01:28,000\nYou may be thinking one step ahead and see that as we add more sublists,\n\n25\n00:01:28,000 --> 00:01:31,000\nit's really a recursive definition.\n\n26\n00:01:31,000 --> 00:01:37,000\nWhat we're asking is for each element in the list, or in this case, the element itself,\n\n27\n00:01:37,000 --> 00:01:39,000\ndoes that have the same structure.\n\n28\n00:01:39,000 --> 00:01:43,000\nWe're going to do this for each element, and it's really a recursive definition,\n\n29\n00:01:43,000 --> 00:01:46,000\nbecause we're going to go down and down and down until we get to an element itself.\n\n30\n00:01:46,000 --> 00:01:49,000\nIn this case, the first item in the list is an element,\n\n31\n00:01:49,000 --> 00:01:53,000\nbut if we're going right here, we're going to ask if this has the same structure as this.\n\n32\n00:01:53,000 --> 00:02:00,000\nThen if this was also a list, they would ask if this has the same structure as this and continued.\n\n33\n00:02:00,000 --> 00:02:04,000\nWe have a recursive definition. Let's write a recursive function.\n\n34\n00:02:04,000 --> 00:02:11,000\nRemember from the included code in your IDE we were given this procedure as a list\n\n35\n00:02:11,000 --> 00:02:16,000\nthat told us if a given input is an instance of a list.\n\n36\n00:02:16,000 --> 00:02:20,000\nYou can kind of see that this is just a simple built-in function.\n\n37\n00:02:20,000 --> 00:02:26,000\nTo Python isinstance we're saying if that is a list. Not too complex.\n\n38\n00:02:26,000 --> 00:02:32,000\nHere we have our two-inputed list--p and q. Make sure you mind them.\n\n39\n00:02:32,000 --> 00:02:39,000\nThe first thing we're going to check is whether or not the two inputs \n\n40\n00:02:39,000 --> 00:02:43,000\nare both in a list or are both singleton elements.\n\n41\n00:02:43,000 --> 00:02:47,000\nIf they're not the same thing, such as the second example I had earlier\n\n42\n00:02:47,000 --> 00:02:52,000\nwhere we had a list and just a number, then we're going to return false and stop.\n\n43\n00:02:52,000 --> 00:02:54,000\nThis is our base case.\n\n44\n00:02:54,000 --> 00:03:01,000\nIf one of them is a list and by the property of this first if statement both of them will be a list,\n\n45\n00:03:01,000 --> 00:03:04,000\nwe're going to check whether or not they have the same length.\n\n46\n00:03:04,000 --> 00:03:08,000\nNotice how we're not caring about the elements in the list themselves.\n\n47\n00:03:08,000 --> 00:03:10,000\nWe're just checking for their length.\n\n48\n00:03:10,000 --> 00:03:14,000\nIf they're different lengths, we're going to stop here and just return false.\n\n49\n00:03:14,000 --> 00:03:19,000\nNow we're going to go through each element in p and q\n\n50\n00:03:19,000 --> 00:03:23,000\nand recurse on whether or not they have the same structure. Here we go. \n\n51\n00:03:23,000 --> 00:03:27,000\nThrough each element in p and q, we're going to do it by \n\n52\n00:03:27,000 --> 00:03:32,000\nindexing on i where i goes from zero to the length of one of the lists.\n\n53\n00:03:32,000 --> 00:03:36,000\nWe know that they both have the same length thanks to this check right here.\n\n54\n00:03:36,000 --> 00:03:40,000\nIf at any point they don't have the same structure by our recursive call,\n\n55\n00:03:40,000 --> 00:03:43,000\nwe're going to stop and return false.\n\n56\n00:03:43,000 --> 00:03:47,000\nIf we make it through all of this, we're going to return true.\n\n57\n00:03:47,000 --> 00:03:54,000\nAlso keep in mind that we return true in the case where both of them are something like numbers,\n\n58\n00:03:54,000 --> 00:03:58,000\nanything but not lists, we're going to skip this and we're just going to go right to true.\n\n59\n00:03:58,000 --> 00:04:03,000\nThat's how we check for, given two inputs, say 1 and 2.\n\n60\n00:04:03,000 --> 00:04:06,000\nThis is the code. We're done.\n\n", "id": 615002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQYktwlDA", "path": "Course/cs101/CourseRev/feb2012/Unit/626001/Nugget/618002", "type": "Nugget", "id": 618002}, {"nuggetType": "program", "name": "List Explosion", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQYgosmDA", "path": "Course/cs101/CourseRev/feb2012/Unit/626001/Nugget/624002", "suppliedCode": "#List Explosion\n\n\n#Define a procedure, explode_list, that takes as inputs a list and a number, n.\n#It should return a list which contains each of the elements of the input list,\n#in the original order, but repeated n times.\n\ndef explode_list(p,n):\n\n\n\n#For example,\n\n#print explode_list([1, 2, 3], 2)\n#>>> [1, 1, 2, 2, 3, 3]\n\n#print explode_list([1, 0, 1], 0)\n#>>> []\n\n#print explode_list([\"super\"], 5)\n#>>> [\"super\", \"super\", \"super\", \"super\", \"super\"]", "type": "Nugget", "id": 624002}, {"nuggetType": "quiz", "name": "Grammars", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQYoaomDA", "path": "Course/cs101/CourseRev/feb2012/Unit/626001/Nugget/628001", "type": "Nugget", "id": 628001}, {"nuggetType": "program", "name": "Procedures And If", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQYibImDA", "path": "Course/cs101/CourseRev/feb2012/Unit/626001/Nugget/629001", "suppliedCode": "#Procedures and If\n\n#Define a procedure, unique, that takes three numbers as its inputs and returns\n#the Boolean value True if all three numbers are different. Otherwise, it should\n#return the Boolean value False.\n\ndef unique(a, b, c):\n\n\n#For example,\n\n#print unique(1, 2, 3)\n#>>> True\n\n#print unique(1, 0, 1)\n#>>> False\n\n#print unique(7, 7, 7)\n#>>> False\n", "type": "Nugget", "id": 629001}, {"nuggetType": "quiz", "name": "Cost", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQYwckmDA", "path": "Course/cs101/CourseRev/feb2012/Unit/626001/Nugget/632001", "type": "Nugget", "id": 632001}, {"nuggetType": "program", "name": "Same Structure", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQY-eAmDA", "path": "Course/cs101/CourseRev/feb2012/Unit/626001/Nugget/635001", "suppliedCode": "#Same Structure\n\n#Define a procedure, same_structure, that takes two inputs. It should output\n#True if the lists contain the same elements in the same structure, and False\n#otherwise. Two values, p and q have the same structure if:\n\n#    Neither p or q is a list.\n\n#    Both p and q are lists, they have the same number of elements, and each\n#    element of p has the same structure as the corresponding element of q.\n\n\n#For this procedure, you can use the is_list(p) procedure from Homework 6:\n\ndef is_list(p):\n    return isinstance(p, list)\n\n\ndef same_structure(a,b):\n\n\n\n#Here are some examples:\n\n#print same_structure(3, 7)\n#>>> True\n\n#print same_structure([1, 0, 1], [2, 1, 2])\n#>>> True\n\n#print same_structure([1, [0], 1], [2, 5, 3])\n#>>> False\n\n#print same_structure([1, [2, [3, [4, 5]]]], ['a', ['b', ['c', ['d', 'e']]]])\n#>>> True\n\n#print same_structure([1, [2, [3, [4, 5]]]], ['a', ['b', ['c', ['de']]]])\n#>>> False", "type": "Nugget", "id": 635001}, {"nuggetType": "lecture", "name": "Reverse Index Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgw", "media": {"dotsub_id": "53c94f59-b717-4d43-94c3-ba487874e81b", "name": "cs101_hw8_06_s_reverse-index", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGNm7KAw", "youtube_id": "OHSlAOEK3jw", "youtube_state": "uploading", "path": "Course/cs101/Media/663001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nIn this problem, we're going to reverse a dictionary or, more specifically, an index.\n\n2\n00:00:05,000 --> 00:00:09,000\nIn a dictionary, we have a key mapping to a value\n\n3\n00:00:09,000 --> 00:00:12,000\n where the keys can't be repeated but the values can.\n\n4\n00:00:12,000 --> 00:00:18,000\nWe're going to reverse it such that we have a value that goes to a list of keys.\n\n5\n00:00:18,000 --> 00:00:20,000\nWe have to have a list of keys, \n\n6\n00:00:20,000 --> 00:00:23,000\nbecause it's possible that two keys will map to the same value.\n\n7\n00:00:23,000 --> 00:00:25,000\nLet's get a more concrete example.\n\n8\n00:00:25,000 --> 00:00:28,000\nHere we have a pretty simple dictionary d\n\n9\n00:00:28,000 --> 00:00:33,000\nwhere 1 maps to a, 2 maps to b, and 3 maps to a as well.\n\n10\n00:00:33,000 --> 00:00:36,000\nThe result of the reversal is going to look like this.\n\n11\n00:00:36,000 --> 00:00:42,000\nSince 1 and 3 both map to a, a maps to the list that contains the elements 1 and 3.\n\n12\n00:00:42,000 --> 00:00:45,000\n2 mapped to b but now b maps to 2, \n\n13\n00:00:45,000 --> 00:00:50,000\nbut more specifically, the list that contains the one element 2.\n\n14\n00:00:50,000 --> 00:00:53,000\nThis is a bit more tricky than the previous problems.\n\n15\n00:00:53,000 --> 00:00:56,000\nLet's just walk through the code.\n\n16\n00:00:56,000 --> 00:00:59,000\nWe're going to start. Our result dictionary is empty.\n\n17\n00:00:59,000 --> 00:01:01,000\nWe're going to go through each key in the dictionary.\n\n18\n00:01:01,000 --> 00:01:05,000\nIf we've seen the value of this key in the result dictionary,\n\n19\n00:01:05,000 --> 00:01:14,000\nwe're going to append k, the key, onto the list to which this value is the key in the result dictionary.\n\n20\n00:01:14,000 --> 00:01:20,000\nOtherwise, we're going to create a new list where the one element in that list is the key.\n\n21\n00:01:20,000 --> 00:01:25,000\nOnce we're done, we're going to return our dictionary.\n\n", "id": 663001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQYoqcnDA", "path": "Course/cs101/CourseRev/feb2012/Unit/626001/Nugget/644002", "type": "Nugget", "id": 644002}, {"nuggetType": "lecture", "name": "Grammars Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgw", "media": {"dotsub_id": "800164b2-fb24-4784-aa99-4d795aa289ef", "name": "cs101_hw8_00_s_grammars", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPG2Jww", "youtube_id": "TTRx4ngJp8I", "youtube_state": "uploading", "path": "Course/cs101/Media/646001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nFortunately, the final starts out with a straightforward question on grammars.\n\n2\n00:00:05,000 --> 00:00:09,000\nHere we have a simple grammar, which is two substitution rules.\n\n3\n00:00:09,000 --> 00:00:14,000\nIt should look familiar to one of the homework problems that we had earlier in the class.\n\n4\n00:00:14,000 --> 00:00:18,000\nNow, the question is how many words does this grammar generate--\n\n5\n00:00:18,000 --> 00:00:22,000\n0, 1, 2, or infinite?\n\n6\n00:00:22,000 --> 00:00:24,000\nLet's say we start from word.\n\n7\n00:00:24,000 --> 00:00:29,000\nOne thing we can do is substitute word for \"udacious,\" according to the first substitution rule.\n\n8\n00:00:29,000 --> 00:00:31,000\nWe have a word. Udacious.\n\n9\n00:00:31,000 --> 00:00:33,000\nSo zero isn't an answer.\n\n10\n00:00:33,000 --> 00:00:35,000\nWe have a second rule we can use right from the beginning, \n\n11\n00:00:35,000 --> 00:00:38,000\nand that is super and word.\n\n12\n00:00:38,000 --> 00:00:40,000\nFrom word we can go back to udacious.\n\n13\n00:00:40,000 --> 00:00:42,000\nThat gives us super udacious.\n\n14\n00:00:42,000 --> 00:00:44,000\nNow we have 2 words.\n\n15\n00:00:44,000 --> 00:00:47,000\nJust as we did before, instead of going directly to udacious,\n\n16\n00:00:47,000 --> 00:00:49,000\nwe can go to super word.\n\n17\n00:00:49,000 --> 00:00:53,000\nHere we can go to udacious, which gives us our third word.\n\n18\n00:00:53,000 --> 00:00:56,000\nThe process of elimination tells us the answer is infinite,\n\n19\n00:00:56,000 --> 00:00:59,000\nbut if you look at the pattern we're forming, you can continue this process\n\n20\n00:00:59,000 --> 00:01:03,000\nof substituting word for super word and eventually ending in udacious\n\n21\n00:01:03,000 --> 00:01:05,000\nas many times as you want.\n\n22\n00:01:05,000 --> 00:01:09,000\nThat implies there is an infinite number of words generated by this grammar.\n\n23\n00:01:09,000 --> 00:01:12,000\nThe answer is infinite.\n\n", "id": 646001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQY2b4nDA", "path": "Course/cs101/CourseRev/feb2012/Unit/626001/Nugget/647001", "type": "Nugget", "id": 647001}, {"nuggetType": "lecture", "name": "Procedures And If Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgw", "media": {"dotsub_id": "f80d69ca-b776-4684-8665-0d45009752c3", "name": "cs101_hw8_01_s_procedures-and-if", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKnOJww", "youtube_id": "nOXJW1wN9DM", "youtube_state": "uploading", "path": "Course/cs101/Media/649001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nIn this problem, we're given three numbers--a, b, and c.\n\n2\n00:00:04,000 --> 00:00:09,000\nWe want to create a function that tells us if a, b, c are unique.\n\n3\n00:00:09,000 --> 00:00:16,000\nThat is, no number--a, b, or c--is equal to any other number--a, b, or c--besides itself.\n\n4\n00:00:16,000 --> 00:00:19,000\nLet's go through a little more precisely what that means.\n\n5\n00:00:19,000 --> 00:00:22,000\nIf these numbers are unique, what are some properties that are true?\n\n6\n00:00:22,000 --> 00:00:24,000\nWe know a can't equal b.\n\n7\n00:00:24,000 --> 00:00:26,000\nWe also know a can't equal c.\n\n8\n00:00:26,000 --> 00:00:30,000\nLastly, we can say b doesn't equal c.\n\n9\n00:00:30,000 --> 00:00:32,000\nThis covers all the cases.\n\n10\n00:00:32,000 --> 00:00:35,000\nIf these three properties are true, then these numbers are unique.\n\n11\n00:00:35,000 --> 00:00:37,000\nThis is pretty close to Python code.\n\n12\n00:00:37,000 --> 00:00:42,000\nHere is this statement written exactly as Python.\n\n13\n00:00:42,000 --> 00:00:46,000\nAll we have to do is put a function around it, and we have our answer.\n\n14\n00:00:46,000 --> 00:00:50,000\nHere we go. A one-line solution to show if three numbers are unique.\n\n", "id": 649001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQYkdYnDA", "path": "Course/cs101/CourseRev/feb2012/Unit/626001/Nugget/650001", "type": "Nugget", "id": 650001}, {"nuggetType": "lecture", "name": "Prefix Removal Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgw", "media": {"dotsub_id": "cc2cb5c2-3e07-42c0-8396-ea953df507f6", "name": "cs101_hw8_02_s_prefix-removal", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGPndJww", "youtube_id": "4O-90cuXDUg", "youtube_state": "processing", "path": "Course/cs101/Media/651001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nThe prefix removal problem asks us to remove a prefix from a word if it has one.\n\n2\n00:00:04,000 --> 00:00:06,000\nHere are a few examples.\n\n3\n00:00:06,000 --> 00:00:08,000\nLet's say we have the word \"super-Andy.\"\n\n4\n00:00:08,000 --> 00:00:13,000\nIf we pass in this function, we want to return just \"Andy.\"\n\n5\n00:00:13,000 --> 00:00:18,000\nIf we have the word \"counter-counter-Irvin,\" we just want to remove the first prefix\n\n6\n00:00:18,000 --> 00:00:21,000\nand leave us with \"counter-Irvin.\"\n\n7\n00:00:21,000 --> 00:00:25,000\nLastly, if we have \"Bob,\" we're just going to return \"Bob.\"\n\n8\n00:00:25,000 --> 00:00:29,000\nHere are three cases that basically cover everything we want this function to do.\n\n9\n00:00:29,000 --> 00:00:32,000\nLet's come up with a strategy of how we're going to do this.\n\n10\n00:00:32,000 --> 00:00:34,000\nFirst, we want to check if there is a hyphen.\n\n11\n00:00:34,000 --> 00:00:37,000\nIf there is no hyphen in the word, such as in the example \"Bob,\"\n\n12\n00:00:37,000 --> 00:00:40,000\nwe just want to return this string.\n\n13\n00:00:40,000 --> 00:00:46,000\nIf there is one, we want to return everything that's after the first hyphen.\n\n14\n00:00:46,000 --> 00:00:49,000\nAs you can see in our examples, \"super-Andy\" and \"counter-Irvin,\"\n\n15\n00:00:49,000 --> 00:00:53,000\nwe return everything after the hyphen.\n\n16\n00:00:53,000 --> 00:00:56,000\nThis should be enough to go right to the code. Let's do that.\n\n17\n00:00:56,000 --> 00:01:02,000\nAs our plan stated, we're going to find whether or not there is a hyphen in the string S.\n\n18\n00:01:02,000 --> 00:01:07,000\nIf we didn't find a hyphen in the string, we're going to just return the string itself.\n\n19\n00:01:07,000 --> 00:01:09,000\nOtherwise, we did find a hyphen in the string.\n\n20\n00:01:09,000 --> 00:01:13,000\nOtherwise, we want to return everything after the hyphen.\n\n21\n00:01:13,000 --> 00:01:18,000\nRemember to add +1 because the first element in the substring operator \n\n22\n00:01:18,000 --> 00:01:22,000\nis inclusive and then exclusive. \n\n", "id": 651001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQY4eUnDA", "path": "Course/cs101/CourseRev/feb2012/Unit/626001/Nugget/652001", "type": "Nugget", "id": 652001}, {"nuggetType": "lecture", "name": "Collatz Returns Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgw", "media": {"dotsub_id": "5a2c40ca-8d8a-4fa7-8423-e4e9aada8181", "name": "cs101_hw8_03_s_collatz-returns", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGLH1Jww", "youtube_id": "UgftsK1Hql8", "youtube_state": "uploading", "path": "Course/cs101/Media/654001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nIn this problem, we see a reappearance of the Collatz conjecture.\n\n2\n00:00:04,000 --> 00:00:08,000\nThis could be a triumphant return or a devastating encounter, \n\n3\n00:00:08,000 --> 00:00:11,000\ndepending on how you felt about the original problem.\n\n4\n00:00:11,000 --> 00:00:16,000\nHere on the final exam, what we're asked to do is actually kind of implement a function\n\n5\n00:00:16,000 --> 00:00:23,000\nthat tests whether or not any given number returns to one following the rules of the Collatz conjecture.\n\n6\n00:00:23,000 --> 00:00:27,000\nAs a review, let's go over what was given in the problem statement.\n\n7\n00:00:27,000 --> 00:00:32,000\nGiven that n is an integer greater than or equal to 1,\n\n8\n00:00:32,000 --> 00:00:34,000\nif it's equal to 1 we're going to stop.\n\n9\n00:00:34,000 --> 00:00:38,000\nOtherwise, if n is even, we're going to divide by 2.\n\n10\n00:00:38,000 --> 00:00:41,000\nIf it's odd, we're going to multiply by 3 and add 1.\n\n11\n00:00:41,000 --> 00:00:46,000\nWe're going to repeat this process until n equals 1.\n\n12\n00:00:46,000 --> 00:00:51,000\nIf you look kind of closely at this, this looks a lot like the code we need to write.\n\n13\n00:00:51,000 --> 00:00:54,000\nSometimes we call this psuedocode for that reason.\n\n14\n00:00:54,000 --> 00:00:58,000\nIt's often a way programmers map out what they're going to do before the sit down\n\n15\n00:00:58,000 --> 00:01:01,000\nand program it in a high-level, abstract way.\n\n16\n00:01:01,000 --> 00:01:04,000\nThis code is just kind of an outline of what we're going to do. It's a plan.\n\n17\n00:01:04,000 --> 00:01:09,000\nWe're going to be able to translate each of these steps right into our code.\n\n18\n00:01:09,000 --> 00:01:12,000\nLet's try that out.\n\n19\n00:01:12,000 --> 00:01:16,000\nIf you remember properly, the goal of the problem is to count how many steps,\n\n20\n00:01:16,000 --> 00:01:21,000\nfollowing the Collatz conjecture, it takes for n to reach 1.\n\n21\n00:01:21,000 --> 00:01:24,000\nIt's logical to start at 0.\n\n22\n00:01:24,000 --> 00:01:26,000\nHere I kind of have already implemented an outline.\n\n23\n00:01:26,000 --> 00:01:29,000\nIf n equals 1 we're just going to return steps.\n\n24\n00:01:29,000 --> 00:01:31,000\nOtherwise, we're going to sit in this while loop, \n\n25\n00:01:31,000 --> 00:01:35,000\nfollow the process detailed by the Collatz conjecture\n\n26\n00:01:35,000 --> 00:01:38,000\nuntil we reach 1, and then we're going to return steps, \n\n27\n00:01:38,000 --> 00:01:41,000\nwhich we're updating with ever iteration of this loop.\n\n28\n00:01:41,000 --> 00:01:45,000\nThe first thing we do is increment our steps counter as detailed in our pseudocode.\n\n29\n00:01:45,000 --> 00:01:48,000\nIf it's even, we're going to divide by 2.\n\n30\n00:01:48,000 --> 00:01:51,000\nOtherwise we're going to multiply n by 3 and add 1.\n\n31\n00:01:51,000 --> 00:01:54,000\nWe're going to keep doing this while loop until n equals 1.\n\n32\n00:01:54,000 --> 00:01:58,000\nEach time we update the number of steps, and when we're done we're going to return steps.\n\n33\n00:01:58,000 --> 00:02:04,000\nThis function calculates the number of steps it takes, following the Collatz conjecture,\n\n34\n00:02:04,000 --> 00:02:09,000\nhow long it takes a given integer n to reach 1.\n\n", "id": 654001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQYmf0nDA", "path": "Course/cs101/CourseRev/feb2012/Unit/626001/Nugget/655001", "type": "Nugget", "id": 655001}, {"nuggetType": "lecture", "name": "Cost Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgw", "media": {"dotsub_id": "9f5f8b65-ce72-48a7-a938-74e1a82d529b", "name": "cs101_hw8_04_s_cost", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGOmMKAw", "youtube_id": "PLzaPG6TLSY", "youtube_state": "uploading", "path": "Course/cs101/Media/657001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:07,000\nWe've been tasked with calculating the worst case running time for a given set of functions.\n\n2\n00:00:07,000 --> 00:00:10,000\nMore specifically we have to determine whether or not the running time is linear.\n\n3\n00:00:10,000 --> 00:00:14,000\nIt's a little easier than the general run-time case.\n\n4\n00:00:14,000 --> 00:00:16,000\nWe're given three functions. \n\n5\n00:00:16,000 --> 00:00:19,000\nLet's go through them one at a time, since they're independent,\n\n6\n00:00:19,000 --> 00:00:23,000\nand decide whether or not independently they are linear in their run time \n\n7\n00:00:23,000 --> 00:00:30,000\naccording to the length of a list of numbers p in the worst case.\n\n8\n00:00:30,000 --> 00:00:37,000\nOur first function, product returns the value of all the integers in p multiplied by one another.\n\n9\n00:00:37,000 --> 00:00:41,000\nYou can see in this loop we do a multiplication operation, \n\n10\n00:00:41,000 --> 00:00:45,000\nwhich, given the that the numbers are small, is a constant time operation,\n\n11\n00:00:45,000 --> 00:00:47,000\nonce for each element in the length of p.\n\n12\n00:00:47,000 --> 00:00:54,000\nWe can very certainly say that the run time of this procedure is linear in the worst case\n\n13\n00:00:54,000 --> 00:00:56,000\nsince there is really no case. \n\n14\n00:00:56,000 --> 00:01:01,000\nNo matter what the number of operations is directly linked to the length of p.\n\n15\n00:01:01,000 --> 00:01:05,000\nAnd so we can say the overall runtime is linear.\n\n16\n00:01:05,000 --> 00:01:10,000\nThis function determines whether or not any two elements in the input list p\n\n17\n00:01:10,000 --> 00:01:13,000\nmultiplied by on another equal the target.\n\n18\n00:01:13,000 --> 00:01:17,000\nIn the best case, the first element multiplied by itself equals the target,\n\n19\n00:01:17,000 --> 00:01:21,000\nand we return true without iterating through the loop more than 1 time.\n\n20\n00:01:21,000 --> 00:01:24,000\nWe just go through right down to the return true.\n\n21\n00:01:24,000 --> 00:01:28,000\nIn the worst case, however, we're never going to hit this statement.\n\n22\n00:01:28,000 --> 00:01:34,000\nWe're going to iterate through every element the number of times for each element in the list\n\n23\n00:01:34,000 --> 00:01:36,000\nand eventually return false.\n\n24\n00:01:36,000 --> 00:01:42,000\nMore precisely, we can think of a worse case, one where p is comprised of all 1's,\n\n25\n00:01:42,000 --> 00:01:45,000\nand the target equals 2.\n\n26\n00:01:45,000 --> 00:01:49,000\nNow matter how hard you try, 1 times 1 will never equal 2.\n\n27\n00:01:49,000 --> 00:01:55,000\nWe're going to go through this for loop once for each element in p,\n\n28\n00:01:55,000 --> 00:02:00,000\nand we're going to go through this check once for each element in p.\n\n29\n00:02:00,000 --> 00:02:08,000\nAll together, we're doing a quadratic number of iterations given the length of p.\n\n30\n00:02:08,000 --> 00:02:10,000\nHere we have the good old tricky loop.\n\n31\n00:02:10,000 --> 00:02:14,000\nIt's a little different than what we saw last time we did a problem similar to this\n\n32\n00:02:14,000 --> 00:02:18,000\nin a previous homework assignment, but it's interesting nonetheless.\n\n33\n00:02:18,000 --> 00:02:23,000\nHere given a list p, we're going to check if the last element is equal to zero.\n\n34\n00:02:23,000 --> 00:02:30,000\nIf it is, we're going to pop it off and remember that pop removes and returns the last element of a list.\n\n35\n00:02:30,000 --> 00:02:36,000\nIf it's not equal to zero, we're going to set it to zero so that the next time around we'll pop it off.\n\n36\n00:02:36,000 --> 00:02:39,000\nWe're going to continue this process until there are no more elements,\n\n37\n00:02:39,000 --> 00:02:42,000\nand then I want to break and return 101.\n\n38\n00:02:42,000 --> 00:02:46,000\nIf you look at it closely, you can kind of see it always returns 101,\n\n39\n00:02:46,000 --> 00:02:49,000\nbut that doesn't really affect the cost of the algorithm.\n\n40\n00:02:49,000 --> 00:02:53,000\nBefore we continue, we should actually think about what the worst case is.\n\n41\n00:02:53,000 --> 00:02:59,000\nLogically, the worst case is going to cause us to go around this loop the most number of times.\n\n42\n00:02:59,000 --> 00:03:03,000\nThat's going to be whenever every element in the list is not equal to zero.\n\n43\n00:03:03,000 --> 00:03:05,000\nLet's come up with an example of that.\n\n44\n00:03:05,000 --> 00:03:08,000\nHere I have a list of all ones.\n\n45\n00:03:08,000 --> 00:03:14,000\nGoing through the code, the first thing we'll end up doing is checking if the last item is equal to zero.\n\n46\n00:03:14,000 --> 00:03:16,000\nOne does not equal zero.\n\n47\n00:03:16,000 --> 00:03:19,000\nWe're going to set this to zero.\n\n48\n00:03:19,000 --> 00:03:22,000\nThe next time around the loop we're going to pop off the last element,\n\n49\n00:03:22,000 --> 00:03:24,000\nand we're going to repeat the process.\n\n50\n00:03:24,000 --> 00:03:27,000\nWe set it to zero and then we pop it off the next time around.\n\n51\n00:03:27,000 --> 00:03:31,000\nWe do it again, and we do it again, until there is nothing left.\n\n52\n00:03:31,000 --> 00:03:34,000\nWe end up returning 101.\n\n53\n00:03:34,000 --> 00:03:38,000\nHow much work did we do in proportion to the number of items in the list.\n\n54\n00:03:38,000 --> 00:03:42,000\nFor each item we went around the loop twice, if that means anything.\n\n55\n00:03:42,000 --> 00:03:49,000\nFor every new item that we add to the list, in the worst case, we're going to do two more things of work.\n\n56\n00:03:49,000 --> 00:03:52,000\nWe don't really care about the fact that it's two,\n\n57\n00:03:52,000 --> 00:03:56,000\nthat the ratio is something like 2 times the length of the list.\n\n58\n00:03:56,000 --> 00:04:01,000\nRather, all we care about is the fact that it's linear.\n\n", "id": 657001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQY0ZQoDA", "path": "Course/cs101/CourseRev/feb2012/Unit/626001/Nugget/658001", "type": "Nugget", "id": 658001}, {"nuggetType": "lecture", "name": "List Explosion Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgw", "media": {"dotsub_id": "e185a069-c9af-4ad7-a685-21fc0a2b3500", "name": "cs101_hw8_05_s_list-explosion", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGKGkKAw", "youtube_id": "CmLu-zIAvCk", "youtube_state": "uploading", "path": "Course/cs101/Media/660001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:06,000\nIn this problem, you're given two inputs, say a list p and a number n.\n\n2\n00:00:06,000 --> 00:00:13,000\nAs an example, let's say that p is the list [1, 2, 3], and n is the number 2.\n\n3\n00:00:13,000 --> 00:00:20,000\nWhat we're going to do is explode the list, this is the kind of terminology we invented,\n\n4\n00:00:20,000 --> 00:00:26,000\nbut for every element that is in this, we're going to repeat it n number of times.\n\n5\n00:00:26,000 --> 00:00:34,000\nSo for everyone 1 there was before, we get 1, 1, and then we have 2, 2, 3, 3.\n\n6\n00:00:34,000 --> 00:00:39,000\nLet's say we had something else at the end--another 2.\n\n7\n00:00:39,000 --> 00:00:41,000\nThen we'd have 2, 2 again.\n\n8\n00:00:41,000 --> 00:00:48,000\nOur list in the end got twice as long, and the relative sequence stayed the same but with some duplicates.\n\n9\n00:00:48,000 --> 00:00:51,000\nOur code is going to work pretty similar to how we did it by hand.\n\n10\n00:00:51,000 --> 00:00:56,000\nWe're going to start with the first element and an empty list.\n\n11\n00:00:56,000 --> 00:01:01,000\nWe're going to do a loop n number of times where we keep appending to this list\n\n12\n00:01:01,000 --> 00:01:04,000\nthe element that we're currently at.\n\n13\n00:01:04,000 --> 00:01:10,000\nSo n is greater than 1. We went through once, and we added the first element 1.\n\n14\n00:01:10,000 --> 00:01:13,000\nWe go through it again for the second time, and we add 1 again.\n\n15\n00:01:13,000 --> 00:01:19,000\nWe continue this process over and over again going through each element in our list\n\n16\n00:01:19,000 --> 00:01:23,000\nuntil we've built up the resultant list, which we have here.\n\n17\n00:01:23,000 --> 00:01:25,000\nThis is pretty simple and straightforward.\n\n18\n00:01:25,000 --> 00:01:28,000\nLet's look at the code.\n\n19\n00:01:28,000 --> 00:01:31,000\nAs I showed before, we're going to start out with an empty list.\n\n20\n00:01:31,000 --> 00:01:35,000\nFor each element in p, we're going to go around n times.\n\n21\n00:01:35,000 --> 00:01:39,000\nThis creates a for loop in which i will increment n times.\n\n22\n00:01:39,000 --> 00:01:41,000\nWe're not going to use the i though.\n\n23\n00:01:41,000 --> 00:01:45,000\nEach iteration around we're going to append to our exploded list \n\n24\n00:01:45,000 --> 00:01:48,000\nthe element we're currently at n times.\n\n25\n00:01:48,000 --> 00:01:53,000\nWhen we're done we're going to return our exploded list.\n\n", "id": 660001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNGaJgwLEgZOdWdnZXQYiawoDA", "path": "Course/cs101/CourseRev/feb2012/Unit/626001/Nugget/661001", "type": "Nugget", "id": 661001}]}, {"name": "Final Exam Starred", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": true, "closedAt": "04/09/2012 23:59", "nuggetLayout": [[null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOHoJgwLEgZOdWdnZXQYsfgmDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOHoJgwLEgZOdWdnZXQYkdMoDA"}], [null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOHoJgwLEgZOdWdnZXQY5PEjDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOHoJgwLEgZOdWdnZXQY4eIoDA"}], [null, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOHoJgwLEgZOdWdnZXQY-uYkDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOHoJgwLEgZOdWdnZXQYo7AkDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOHoJgw", "path": "Course/cs101/CourseRev/feb2012/Unit/636001", "open": false, "id": 636001, "nuggets": [{"nuggetType": "program", "name": "Spelling Correction", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOHoJgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOHoJgwLEgZOdWdnZXQY5PEjDA", "path": "Course/cs101/CourseRev/feb2012/Unit/636001/Nugget/588004", "suppliedCode": "#Spelling Correction\n\n#Double Gold Star\n\n#For this question, your goal is to build a step towards a spelling corrector,\n#similarly to the way Google used to respond,\n\n#    \"Did you mean: audacity\"\n\n\n#when you searched for \"udacity\" (but now considers \"udacity\" a real word!).\n\n#One way to do spelling correction is to measure the edit distance between the\n#entered word and other words in the dictionary.  Edit distance is a measure of\n#the number of edits required to transform one word into another word.  An edit\n#is either: (a) replacing one letter with a different letter, (b) removing a\n#letter, or (c) inserting a letter.  The edit distance between two strings s and\n#t, is the minimum number of edits needed to transform s into t.\n\n#Define a procedure, edit_distance(s, t), that takes two strings as its inputs,\n#and returns a number giving the edit distance between those strings.\n\n#Note: it is okay if your edit_distance procedure is very expensive, and does\n#not work on strings longer than the ones shown here.\n\n#The built-in python function min() returns the mininum of all its arguments.\n\n#print min(1,2,3)\n#>>> 1\n\ndef edit_distance(s,t):\n\n\n\n#For example:\n\n# Delete the 'a'\n#print edit_distance('audacity', 'udacity')\n#>>> 1\n\n# Delete the 'a', replace the 'u' with 'U'\n#print edit_distance('audacity', 'Udacity')\n#>>> 2\n\n# Five replacements\n#print edit_distance('peter', 'sarah')\n#>>> 5\n\n# One deletion\n#print edit_distance('pete', 'peter')\n#>>> 1\n", "type": "Nugget", "id": 588004}, {"nuggetType": "lecture", "name": "Multiword Queries Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOHoJgw", "media": {"dotsub_id": "ac8d7801-b53f-4396-8b08-6b2dfa0dca59", "name": "cs101_hw9_02_s_multiword-queries", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIu1JQw", "youtube_id": "tRSdD3gKGBg", "youtube_state": "processing", "path": "Course/cs101/Media/613003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nHere we  are at the last problem in the final exam.\n\n2\n00:00:05,000 --> 00:00:08,000\nFirst off, I want to congratulate you for making it this far.\n\n3\n00:00:08,000 --> 00:00:14,000\nIt's been a blast to teach this course and interact with the great students that we have.\n\n4\n00:00:14,000 --> 00:00:19,000\nI don't have the opportunity to say this in lecture, so I'm taking it now.\n\n5\n00:00:19,000 --> 00:00:23,000\nEveryone gets a big ol' smiley face.\n\n6\n00:00:23,000 --> 00:00:28,000\nLet's go to what you actually want to hear and that is the solution to this problem.\n\n7\n00:00:28,000 --> 00:00:33,000\nLet's say we have a website--I don't know--searchwithpeter.info. You might've heard of it.\n\n8\n00:00:33,000 --> 00:00:36,000\nIt's only the greatest site ever.\n\n9\n00:00:36,000 --> 00:00:39,000\nBeautifully designed, magnificently executed.\n\n10\n00:00:39,000 --> 00:00:42,000\nWorld's greatest search engine.\n\n11\n00:00:42,000 --> 00:00:46,000\nIt has a string of text that contains the following words:\n\n12\n00:00:46,000 --> 00:00:50,000\nHere we have the string \"Irvin and Andy fight crime.\"\n\n13\n00:00:50,000 --> 00:00:57,000\nIs this true? Maybe. I can't tell. Superheroes never reveal their identity.\n\n14\n00:00:57,000 --> 00:01:01,000\nOur current search engine can only search one word at a time.\n\n15\n00:01:01,000 --> 00:01:04,000\nWe could search for Irvin, and we could search for Andy.\n\n16\n00:01:04,000 --> 00:01:07,000\nThat would bring us to the URL \"searchwithpeter.info,\"\n\n17\n00:01:07,000 --> 00:01:14,000\nbut what we'd really like to do is search a string like \"Irvin and Andy\" or \"fight crime\"\n\n18\n00:01:14,000 --> 00:01:17,000\nif we're interested in getting into the biz ourselves.\n\n19\n00:01:17,000 --> 00:01:20,000\nThis problem asked you to do just that.\n\n20\n00:01:20,000 --> 00:01:27,000\nWe need to return the URLs that contain multiple words that are located sequentially\n\n21\n00:01:27,000 --> 00:01:29,000\nright next to each other.\n\n22\n00:01:29,000 --> 00:01:32,000\nIn order to do this, we're going to modify our index.\n\n23\n00:01:32,000 --> 00:01:37,000\nBefore, we had a keyword that pointed to a list of URLs,\n\n24\n00:01:37,000 --> 00:01:43,000\nbut now we want to keep track of the position that word occurs in the URL.\n\n25\n00:01:43,000 --> 00:01:46,000\nLet's modify our index to do that.\n\n26\n00:01:46,000 --> 00:01:52,000\nInstead, we have a list of lists that are length 2 where we have the URL as the first element,\n\n27\n00:01:52,000 --> 00:01:58,000\nand the second element is is the position this keyword occurred in this URL.\n\n28\n00:01:58,000 --> 00:02:05,000\nPosition in the string looks something like this 0, 1, 2, 3, 4.\n\n29\n00:02:05,000 --> 00:02:12,000\nThis is the 5th word, index 4, in the string at searchwithpeter.info.\n\n30\n00:02:12,000 --> 00:02:16,000\nWhat we're going to do is see that if we're searching for \"Irvin and Andy\"\n\n31\n00:02:16,000 --> 00:02:18,000\nwe search \"Irvin\" as the keyword.\n\n32\n00:02:18,000 --> 00:02:24,000\nWe find that the position for the URL searchwithpeter.info is 0.\n\n33\n00:02:24,000 --> 00:02:26,000\nThen we search \"and.\"\n\n34\n00:02:26,000 --> 00:02:30,000\nWe find searchwithpeter.info in the list of URLs for the keyword \"and.\"\n\n35\n00:02:30,000 --> 00:02:33,000\nLo and behold, the position was 1.\n\n36\n00:02:33,000 --> 00:02:39,000\nWe know that 0 comes after 1 so that these two words--Irvin when we search it before\n\n37\n00:02:39,000 --> 00:02:42,000\nand now and--occur next to each other.\n\n38\n00:02:42,000 --> 00:02:47,000\nThe most important aspect is that the next word has an occurrence of whose position \n\n39\n00:02:47,000 --> 00:02:49,000\nis 1 greater than the previous word.\n\n40\n00:02:49,000 --> 00:02:54,000\nThat's going to be the basis for how we do multi-word queries in our search engine.\n\n41\n00:02:54,000 --> 00:02:57,000\nYou could modify the search engine however you wanted,\n\n42\n00:02:57,000 --> 00:03:01,000\nbut in my solution I just needed to modify two functions \n\n43\n00:03:01,000 --> 00:03:04,000\nin addition to adding the multi-lookup function.\n\n44\n00:03:04,000 --> 00:03:10,000\nHere I've modified add page to index so that it keeps track of the position of a word\n\n45\n00:03:10,000 --> 00:03:16,000\nin the total document, and it passes that position into the add_to_index procedure.\n\n46\n00:03:16,000 --> 00:03:23,000\nHere I've added add_to_index so that the index looks to what we described in my diagram previously.\n\n47\n00:03:23,000 --> 00:03:26,000\nEach entry is a URL and a position.\n\n48\n00:03:26,000 --> 00:03:29,000\nNow let's get to the multi-lookup procedure.\n\n49\n00:03:29,000 --> 00:03:34,000\nIn the case that keywords is empty, we're going to return an empty list.\n\n50\n00:03:34,000 --> 00:03:39,000\nWe're now going to get the URLs that have the first keyword.\n\n51\n00:03:39,000 --> 00:03:45,000\nFor the rest of the keywords, we're going to make sure that the URLs we get have positions \n\n52\n00:03:45,000 --> 00:03:49,000\nthat are 1 greater than the URLs that we found for the previous word.\n\n53\n00:03:49,000 --> 00:03:51,000\nHere we look up the next word.\n\n54\n00:03:51,000 --> 00:03:55,000\nAs long as we found something, we're going to go through the URLs that we found \n\n55\n00:03:55,000 --> 00:04:01,000\nwith the previous keyword and ensure that the current keyword has a position 1 greater\n\n56\n00:04:01,000 --> 00:04:04,000\nthan the previous one for that URL.\n\n57\n00:04:04,000 --> 00:04:09,000\nLastly, we update our list such that we can continue the same process\n\n58\n00:04:09,000 --> 00:04:12,000\nfor the next keyword if there are any.\n\n59\n00:04:12,000 --> 00:04:15,000\nBasically what we're doing here--I know it's a little hard to read--\n\n60\n00:04:15,000 --> 00:04:23,000\nis taking the URLs for the first keyword and then filtering them out one at a time\n\n61\n00:04:23,000 --> 00:04:29,000\nif they don't contain the next keyword 1 position after where we found it before.\n\n62\n00:04:29,000 --> 00:04:38,000\nAt the end, we need to change our list such that it looks exactly as it did for a normal lookup.\n\n63\n00:04:38,000 --> 00:04:40,000\nThat's what we do right here.\n\n64\n00:04:40,000 --> 00:04:44,000\nI'll be the first to admit that this isn't a very good elegant solution.\n\n65\n00:04:44,000 --> 00:04:48,000\nI tried my best to find one I really liked, but I never really succeeded.\n\n66\n00:04:48,000 --> 00:04:51,000\nPerhaps you can do something really cool with recursion. I don't know.\n\n67\n00:04:51,000 --> 00:04:57,000\nI hope to see some great solutions on the forums as we did with some earlier problems.\n\n68\n00:04:57,000 --> 00:05:01,000\nBut, alas, this is the last solution I will give for this course.\n\n69\n00:05:01,000 --> 00:05:07,000\nOnce again I want to reiterate it's been a pleasure and thank you.\n\n", "id": 613003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOHoJgwLEgZOdWdnZXQYo7AkDA", "path": "Course/cs101/CourseRev/feb2012/Unit/636001/Nugget/596003", "type": "Nugget", "id": 596003}, {"nuggetType": "program", "name": "Multiword Queries", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOHoJgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOHoJgwLEgZOdWdnZXQY-uYkDA", "path": "Course/cs101/CourseRev/feb2012/Unit/636001/Nugget/603002", "suppliedCode": "#Multi-word Queries\n\n#Triple Gold Star\n\n#For this question, your goal is to modify the search engine to be able to\n#handle multi-word queries.  To do this, we need to make two main changes:\n\n#    1. Modify the index to keep track of not only the URL, but the position\n#    within that page where a word appears.\n\n#    2. Make a version of the lookup procedure that takes a list of target\n#    words, and only counts a URL as a match if it contains all of the target\n#    words, adjacent to each other, in the order they are given in the input.\n\n#For example, if the search input is \"Monty Python\", it should match a page that\n#contains, \"Monty Python is funny!\", but should not match a page containing\n#\"Monty likes the Python programming language.\"  The words must appear in the\n#same order, and the next word must start right after the end of the previous\n#word.\n\n#Modify the search engine code to support multi-word queries. Your modified code\n#should define these two procedures:\n\n#    crawl_web(seed) => index, graph\n#        A modified version of crawl_web that produces an index that includes\n#        positional information.  It is up to you to figure out how to represent\n#        positions in your index and you can do this any way you want.  Whatever\n#        index you produce is the one we will pass into your multi_lookup(index,\n#        keyword) procedure.\n\n#    multi_lookup(index, list of keywords) => list of URLs\n#        A URL should be included in the output list, only if it contains all of\n#        the keywords in the input list, next to each other.\n\n\ndef multi_lookup(index, query):\n    \n\n\ndef crawl_web(seed): # returns index, graph of inlinks\n    tocrawl = [seed]\n    crawled = []\n    graph = {}  # <url>, [list of pages it links to]\n    index = {} \n    while tocrawl: \n        page = tocrawl.pop()\n        if page not in crawled:\n            content = get_page(page)\n            add_page_to_index(index, page, content)\n            outlinks = get_all_links(content)\n            graph[page] = outlinks\n            union(tocrawl, outlinks)\n            crawled.append(page)\n    return index, graph\n\n\ndef get_next_target(page):\n    start_link = page.find('<a href=')\n    if start_link == -1: \n        return None, 0\n    start_quote = page.find('\"', start_link)\n    end_quote = page.find('\"', start_quote + 1)\n    url = page[start_quote + 1:end_quote]\n    return url, end_quote\n\ndef get_all_links(page):\n    links = []\n    while True:\n        url, endpos = get_next_target(page)\n        if url:\n            links.append(url)\n            page = page[endpos:]\n        else:\n            break\n    return links\n\n\ndef union(a, b):\n    for e in b:\n        if e not in a:\n            a.append(e)\n\ndef add_page_to_index(index, url, content):\n    words = content.split()\n    for word in words:\n        add_to_index(index, word, url)\n        \ndef add_to_index(index, keyword, url):\n    if keyword in index:\n        index[keyword].append(url)\n    else:\n        index[keyword] = [url]\n\ndef lookup(index, keyword):\n    if keyword in index:\n        return index[keyword]\n    else:\n        return None\n    \n\n\n\ncache = {\n   'http://www.udacity.com/cs101x/final/multi.html': \"\"\"<html>\n<body>\n\n<a href=\"http://www.udacity.com/cs101x/final/a.html\">A</a><br>\n<a href=\"http://www.udacity.com/cs101x/final/b.html\">B</a><br>\n\n</body>\n\"\"\", \n   'http://www.udacity.com/cs101x/final/b.html': \"\"\"<html>\n<body>\n\nMonty likes the Python programming language\nThomas Jefferson founded the University of Virginia\nWhen Mandela was in London, he visited Nelson's Column.\n\n</body>\n</html>\n\"\"\", \n   'http://www.udacity.com/cs101x/final/a.html': \"\"\"<html>\n<body>\n\nMonty Python is not about a programming language\nUdacity was not founded by Thomas Jefferson\nNelson Mandela said \"Education is the most powerful weapon which you can\nuse to change the world.\"\n</body>\n</html>\n\"\"\", \n}\n\ndef get_page(url):\n    if url in cache:\n        return cache[url]\n    else:\n        print \"Page not in cache: \" + url\n        return None\n    \n\n\n\n\n\n#Here are a few examples from the test site:\n\n#index, graph = crawl_web('http://www.udacity.com/cs101x/final/multi.html')\n\n#print multi_lookup(index, ['Python'])\n#>>> ['http://www.udacity.com/cs101x/final/b.html', 'http://www.udacity.com/cs101x/final/a.html']\n\n#print multi_lookup(index, ['Monty', 'Python'])\n#>>> ['http://www.udacity.com/cs101x/final/a.html']\n\n#print multi_lookup(index, ['Python', 'programming', 'language'])\n#>>> ['http://www.udacity.com/cs101x/final/b.html']\n\n#print multi_lookup(index, ['Thomas', 'Jefferson'])\n#>>> ['http://www.udacity.com/cs101x/final/b.html', 'http://www.udacity.com/cs101x/final/a.html']\n\n#print multi_lookup(index, ['most', 'powerful', 'weapon'])\n#>>> ['http://www.udacity.com/cs101x/final/a.html']\n", "type": "Nugget", "id": 603002}, {"nuggetType": "program", "name": "Reachability", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOHoJgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOHoJgwLEgZOdWdnZXQYsfgmDA", "path": "Course/cs101/CourseRev/feb2012/Unit/636001/Nugget/638001", "suppliedCode": "#Reachability\n\n#Single Gold Star\n\n#Define a procedure, reachable(graph, node), that takes as input a graph and a\n#starting node, and returns a list of all the nodes in the graph that can be\n#reached by following zero or more edges starting from node.  The input graph is\n#represented as a Dictionary where each node in the graph is a key in the\n#Dictionary, and the value associated with a key is a list of the nodes that the\n#key node is connected to.  The nodes in the returned list may appear in any\n#order, but should not contain any duplicates.\n\n\ndef reachable(graph, node):\n\n\n\n\n\n#For example,\n\ngraph = {'a': ['b', 'c'], 'b': ['a', 'c'], 'c': ['b', 'd'], 'd': ['a'], 'e': ['a']}\n\n#print reachable(graph, 'a')\n#>>> ['a', 'c', 'd', 'b']\n\n#print reachable(graph, 'd')\n#>>> ['d', 'a', 'c', 'b']\n\n#print reachable(graph, 'e')\n#>>> ['e', 'a', 'c', 'd', 'b']\n", "type": "Nugget", "id": 638001}, {"nuggetType": "lecture", "name": "Reachability Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOHoJgw", "media": {"dotsub_id": "591fb068-3de3-41ba-b2c6-9f96eb2ba687", "name": "cs101_hw9_00_s_reachability", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGMLDKAw", "youtube_id": "uWdXSvRETGg", "youtube_state": "uploading", "path": "Course/cs101/Media/664002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nWelcome to the solution videos to the final exam starred questions.\n\n2\n00:00:04,000 --> 00:00:07,000\nLet's get started with the first one--reachability.\n\n3\n00:00:07,000 --> 00:00:11,000\nWe're given a dictionary that represents a graph.\n\n4\n00:00:11,000 --> 00:00:16,000\nI'm going to take the example dictionary and illustrate it right here.\n\n5\n00:00:16,000 --> 00:00:22,000\nI think I got every node, but let's start with some of the example inputs and outputs for the procedure.\n\n6\n00:00:22,000 --> 00:00:30,000\nIf we start from a, the question is which of these nodes can we reach with zero or more\n\n7\n00:00:30,000 --> 00:00:34,000\ntraversals across the edges in the graph.\n\n8\n00:00:34,000 --> 00:00:38,000\nWhich of these nodes is reachable from a.\n\n9\n00:00:38,000 --> 00:00:43,000\nWell, we can clearly get to a by following zero edges.\n\n10\n00:00:43,000 --> 00:00:46,000\nWe can get to b by following this edge here.\n\n11\n00:00:46,000 --> 00:00:51,000\nWe can get to c from b or we can get to c from a.\n\n12\n00:00:51,000 --> 00:00:57,000\nWe can get to d by following 2 edges, either to c and then to d\n\n13\n00:00:57,000 --> 00:01:03,000\nor from a to b to c to d, and that's it.\n\n14\n00:01:03,000 --> 00:01:07,000\nWe can't get to a, because there are no edges that go to a.\n\n15\n00:01:07,000 --> 00:01:10,000\nLet's try it with another example--d.\n\n16\n00:01:10,000 --> 00:01:16,000\nFrom d we can get to a, and therefore we can get to every thing that a can get to,\n\n17\n00:01:16,000 --> 00:01:20,000\nwhich happens to be the same output--it's okay if it's a different order--as we had for a.\n\n18\n00:01:20,000 --> 00:01:24,000\nThe same nodes are reachable from a that are reachable from d.\n\n19\n00:01:24,000 --> 00:01:27,000\nLastly let's try e.\n\n20\n00:01:27,000 --> 00:01:30,000\nE is different because we get to e with zero edges, \n\n21\n00:01:30,000 --> 00:01:33,000\nso we already have a different output for this procedure.\n\n22\n00:01:33,000 --> 00:01:37,000\nThen we can get to a, at which point we can  reach everything that a can reach.\n\n23\n00:01:37,000 --> 00:01:43,000\nWe can kind of follow with our finger on this graph, but does that really help us write the code?\n\n24\n00:01:43,000 --> 00:01:46,000\nIf we're a little more precise about what we're doing, it can.\n\n25\n00:01:46,000 --> 00:01:50,000\nThe way I solved this problem--and there are many ways you can solve this problem--\n\n26\n00:01:50,000 --> 00:01:53,000\nis I did what's called a depth-first search.\n\n27\n00:01:53,000 --> 00:01:56,000\nYou may have not known you were doing this,\n\n28\n00:01:56,000 --> 00:01:59,000\n but it's a good chance that you actually did implement this.\n\n29\n00:01:59,000 --> 00:02:04,000\nThis is a nice and easy solution because it lends itself very well to recursion.\n\n30\n00:02:04,000 --> 00:02:08,000\nWhat we're going to do is we're going to start with our input node.\n\n31\n00:02:08,000 --> 00:02:13,000\nWe're then going to follow one edge, and we're going to recurse doing a search from there.\n\n32\n00:02:13,000 --> 00:02:16,000\nFrom there we're going to follow one edge, so we're at a, b, c.\n\n33\n00:02:16,000 --> 00:02:21,000\nThen from there we're going to go to do, and from d we're going to go to a.\n\n34\n00:02:21,000 --> 00:02:25,000\nWell, we visited a. We'll keep track of what we visited along the way.\n\n35\n00:02:25,000 --> 00:02:29,000\nI'm going to then return an empty list on the way back.\n\n36\n00:02:29,000 --> 00:02:34,000\nD has visited all the edges it has, and it's going to add itself to the list that's returned,\n\n37\n00:02:34,000 --> 00:02:37,000\nwhich is now just a list that contains d.\n\n38\n00:02:37,000 --> 00:02:41,000\nC can go to b, but b has already been visited.\n\n39\n00:02:41,000 --> 00:02:44,000\nNow it just returns to b the list it had\n\n40\n00:02:44,000 --> 00:02:47,000\nalong with itself appended.\n\n41\n00:02:47,000 --> 00:02:55,000\nFrom b it can go to a, already been visited, so we return again appending b onto it.\n\n42\n00:02:55,000 --> 00:02:59,000\nA can try to go to c, already visited, it adds itself.\n\n43\n00:02:59,000 --> 00:03:01,000\nWe actually just did all this stuff.\n\n44\n00:03:01,000 --> 00:03:05,000\nWe can use what I walked through here as an outline for our recursive procedure.\n\n45\n00:03:05,000 --> 00:03:07,000\nLet's take a crack at it.\n\n46\n00:03:07,000 --> 00:03:11,000\nHere is the interface that the problem specification required.\n\n47\n00:03:11,000 --> 00:03:17,000\nI'm going to call a function I'm going to create \"dfs,\" standing for depth-first search,\n\n48\n00:03:17,000 --> 00:03:22,000\npassing in the graph, the node that we're currently at, which is the starting node,\n\n49\n00:03:22,000 --> 00:03:25,000\nand a list of all the nodes we've so far visited.\n\n50\n00:03:25,000 --> 00:03:29,000\nSince we haven't done anything yet, it's going to start with an empty list.\n\n51\n00:03:29,000 --> 00:03:35,000\nWe're going to do the first check that I did as I walked through the graph in my diagram.\n\n52\n00:03:35,000 --> 00:03:39,000\nThat is check whether or not the node is in the visited list.\n\n53\n00:03:39,000 --> 00:03:44,000\nIf we're already visited the node we're currently at, we're going to return the empty list,\n\n54\n00:03:44,000 --> 00:03:47,000\nbecause we're not adding anything to our visited list.\n\n55\n00:03:47,000 --> 00:03:50,000\nWe haven't seen anything new.\n\n56\n00:03:50,000 --> 00:03:55,000\nOtherwise, we've never before, so the first thing I'm going to do is append \n\n57\n00:03:55,000 --> 00:03:58,000\nthe current node to the visited list.\n\n58\n00:03:58,000 --> 00:04:03,000\nI'm going to take a moment again to emphasize that there are many ways you can solve this problem.\n\n59\n00:04:03,000 --> 00:04:05,000\nThis is just one.\n\n60\n00:04:05,000 --> 00:04:08,000\n You can also take this general approach of a depth-first search and just kind of mix the order\n\n61\n00:04:08,000 --> 00:04:11,000\naround and return different things in different cases. There's a lot of ways to do it.\n\n62\n00:04:11,000 --> 00:04:14,000\nThere are even more generic alternatives.\n\n63\n00:04:14,000 --> 00:04:16,000\nThere's something called a breadth-first search.\n\n64\n00:04:16,000 --> 00:04:18,000\nThen you can create something on your own with a lot of for loops.\n\n65\n00:04:18,000 --> 00:04:21,000\nIt may be inefficient, but it really doesn't matter.\n\n66\n00:04:21,000 --> 00:04:25,000\nWhat we tested it on were small lists, and as long as you get the idea across,\n\n67\n00:04:25,000 --> 00:04:31,000\nyou've done enough for the purposes of this assignment, able to solve our simple test cases.\n\n68\n00:04:31,000 --> 00:04:36,000\nNow I'm going to go through each, what I call a neighbor to this node.\n\n69\n00:04:36,000 --> 00:04:40,000\nEach other node that the current node points to.\n\n70\n00:04:40,000 --> 00:04:44,000\nWe get that by just accessing the graph where the key is the current node.\n\n71\n00:04:44,000 --> 00:04:47,000\nFor each neighbor we're going to recurse.\n\n72\n00:04:47,000 --> 00:04:50,000\nWe're going to perform a dfs with that neighbor.\n\n73\n00:04:50,000 --> 00:04:55,000\nFor everything that we visit in that dfs, that sub-call, we're going to check\n\n74\n00:04:55,000 --> 00:04:57,000\nif we visited it before.\n\n75\n00:04:57,000 --> 00:05:03,000\nIf we haven't seen it before but it was something new, we're going to append it to our visited list.\n\n76\n00:05:03,000 --> 00:05:08,000\nEventually, we'll build up our visited list so that it contains our every node we visited\n\n77\n00:05:08,000 --> 00:05:10,000\nwhile traversing the graph.\n\n78\n00:05:10,000 --> 00:05:17,000\nOnce we're done we're just going to return our visited list, and that's all there is to it.\n\n", "id": 664002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOHoJgwLEgZOdWdnZXQYkdMoDA", "path": "Course/cs101/CourseRev/feb2012/Unit/636001/Nugget/666001", "type": "Nugget", "id": 666001}, {"nuggetType": "lecture", "name": "Spelling Correction Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOHoJgw", "media": {"dotsub_id": "66c898f3-97dd-480c-aa38-87764e370f85", "name": "cs101_hw9_01_s_spelling-correction", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMTAxDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMTAxDAsSBU1lZGlhGIq1JQw", "youtube_id": "tm0ZQh8Pn3A", "youtube_state": "uploading", "path": "Course/cs101/Media/613002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nIn this two-star problem, we ask you to implement the basis for spell check.\n\n2\n00:00:05,000 --> 00:00:08,000\nIt's something you've probably used all the time on the internet \n\n3\n00:00:08,000 --> 00:00:12,000\nand your day-to-day uses of the computer, but it's actually something that,\n\n4\n00:00:12,000 --> 00:00:16,000\nas you may have found out, you're perfectly capable of getting a start on yourself.\n\n5\n00:00:16,000 --> 00:00:19,000\nThe basis for spell check is edit distance.\n\n6\n00:00:19,000 --> 00:00:24,000\nEdit distance is a way to measure the difference between two strings.\n\n7\n00:00:24,000 --> 00:00:29,000\nIn the case of spell check that is how different the word you wrote is \n\n8\n00:00:29,000 --> 00:00:32,000\nfrom a word that actually is in the dictionary.\n\n9\n00:00:32,000 --> 00:00:37,000\nThe idea is that you take or keep track of the edit distance\n\n10\n00:00:37,000 --> 00:00:40,000\n from your misspelling to all the words in the dictionary.\n\n11\n00:00:40,000 --> 00:00:46,000\nPresumably, the one that has the lowest edit distance between your misspelling and itself\n\n12\n00:00:46,000 --> 00:00:48,000\nis what you were trying to spell.\n\n13\n00:00:48,000 --> 00:00:51,000\nIf you're an awful speller like me, this doesn't help.\n\n14\n00:00:51,000 --> 00:00:54,000\nBut for most people it works pretty well.\n\n15\n00:00:54,000 --> 00:00:56,000\nLet's go through a couple examples.\n\n16\n00:00:56,000 --> 00:00:59,000\nLet's say we have the string \"audacity.\"\n\n17\n00:00:59,000 --> 00:01:05,000\nWe want to measure how many operations it takes to change audacity to \"udacity.\"\n\n18\n00:01:05,000 --> 00:01:09,000\nNow, the question is what do we consider to be an operation?\n\n19\n00:01:09,000 --> 00:01:14,000\nFor the purposes of edit distance here, we're going to define three operations--\n\n20\n00:01:14,000 --> 00:01:18,000\ninsertion, deletion, and substitution.\n\n21\n00:01:18,000 --> 00:01:22,000\nInsertion is adding a letter. Deletion is removing a letter.\n\n22\n00:01:22,000 --> 00:01:25,000\nSubstitution is changing a letter.\n\n23\n00:01:25,000 --> 00:01:28,000\nIn the case of going from \"audacity\" to \"udacity\"\n\n24\n00:01:28,000 --> 00:01:30,000\nall we do is remove a single letter.\n\n25\n00:01:30,000 --> 00:01:33,000\nIn this case, the a. That is 1.\n\n26\n00:01:33,000 --> 00:01:38,000\nThere are a number of other ways we couldn't gone from \"audacity\" to \"udacity.\"\n\n27\n00:01:38,000 --> 00:01:41,000\nOne example is that we could have deleted the a and the u\n\n28\n00:01:41,000 --> 00:01:44,000\nand then added back the u.\n\n29\n00:01:44,000 --> 00:01:47,000\nThat would be 3 operations.\n\n30\n00:01:47,000 --> 00:01:53,000\nBut what we do is we more precisely define edit distance as the minimum number of operations.\n\n31\n00:01:53,000 --> 00:01:58,000\nThe minimum number of operations to go from one word,\n\n32\n00:01:58,000 --> 00:02:01,000\none sequence of characters, to another.\n\n33\n00:02:01,000 --> 00:02:03,000\nLet's take another example.\n\n34\n00:02:03,000 --> 00:02:05,000\nLet's go from \"and\" and \"andy.\"\n\n35\n00:02:05,000 --> 00:02:07,000\nIn this case we just add a y.\n\n36\n00:02:07,000 --> 00:02:12,000\nThat's 1 insertion, so the edit distance is 1.\n\n37\n00:02:12,000 --> 00:02:16,000\nFor the purposes of motivating the way we're going to solve this, let's try one more.\n\n38\n00:02:16,000 --> 00:02:22,000\nLet's do the empty string, which I will symbolize with quotes that have nothing in them.\n\n39\n00:02:22,000 --> 00:02:28,000\nOften in computer science we will use epsilon to symbolize the empty string,\n\n40\n00:02:28,000 --> 00:02:31,000\nbut that's something you may see later on.\n\n41\n00:02:31,000 --> 00:02:35,000\nThe empty string to \"Irvin.\"\n\n42\n00:02:35,000 --> 00:02:42,000\nProbably the fastest way--the fastest way actually--is to do 5 operations, 5 insertions.\n\n43\n00:02:42,000 --> 00:02:49,000\nYou'll notice that's just the same as doing the length of Irvin, the length of the string.\n\n44\n00:02:49,000 --> 00:02:52,000\nLet's start thinking about the code we want to write.\n\n45\n00:02:52,000 --> 00:02:56,000\nIf it hasn't occurred to you yet, this will lend itself very well to recursion.\n\n46\n00:02:56,000 --> 00:02:59,000\nLet's think of a base case.\n\n47\n00:02:59,000 --> 00:03:01,000\nAs we just found, we found a good one.\n\n48\n00:03:01,000 --> 00:03:05,000\nIf one of the strings is empty, we can return the length of the other.\n\n49\n00:03:05,000 --> 00:03:09,000\nOtherwise, we're going to recurse, and we have two cases here.\n\n50\n00:03:09,000 --> 00:03:15,000\nOne is where the first element of each is equal.\n\n51\n00:03:15,000 --> 00:03:21,000\nIn this case, the substring up to this point--they are exactly the same.\n\n52\n00:03:21,000 --> 00:03:24,000\nWe don't need to do any operations on them.\n\n53\n00:03:24,000 --> 00:03:28,000\nActually we can just ignore it and just take the edit distance for the rest.\n\n54\n00:03:28,000 --> 00:03:34,000\nThen we have our other case where the first elements are not equal,\n\n55\n00:03:34,000 --> 00:03:39,000\nin which case we want to take the minimum of our three operations.\n\n56\n00:03:39,000 --> 00:03:43,000\nWe add one, because each operation is one edit.\n\n57\n00:03:43,000 --> 00:03:46,000\nSo really this is enough to start writing our code.\n\n58\n00:03:46,000 --> 00:03:50,000\nYou might be shocked at how simple it ends up being.\n\n59\n00:03:50,000 --> 00:03:56,000\nOur edit distance procedure takes in two strings, as we described--f and t.\n\n60\n00:03:56,000 --> 00:04:04,000\nIf the length of s is 0--that is, it has no characters in it, we're going to return the length of t.\n\n61\n00:04:04,000 --> 00:04:09,000\nWe know that's how many operations it would take--presumably, insertions.\n\n62\n00:04:09,000 --> 00:04:12,000\nWe do the same thing for the other way.\n\n63\n00:04:12,000 --> 00:04:16,000\nNow, let's do the first recursive call that we described in the case \n\n64\n00:04:16,000 --> 00:04:19,000\nthat the first character in each string is the same,\n\n65\n00:04:19,000 --> 00:04:22,000\nmeaning that there are no operations we need to perform,\n\n66\n00:04:22,000 --> 00:04:26,000\n and we can just return the edit distance of the rest of the string.\n\n67\n00:04:26,000 --> 00:04:29,000\nThat's exactly what we're doing here.\n\n68\n00:04:29,000 --> 00:04:33,000\nWe're going to return the edit distance for everything of each string, \n\n69\n00:04:33,000 --> 00:04:35,000\nexcluding the first element in each one.\n\n70\n00:04:35,000 --> 00:04:38,000\nOtherwise we're going to do the minimum that we described.\n\n71\n00:04:38,000 --> 00:04:42,000\nIf you don't remember, in the problems specification we gave you a hint\n\n72\n00:04:42,000 --> 00:04:45,000\nby encouraging you to use the min function.\n\n73\n00:04:45,000 --> 00:04:49,000\nMin returns the minimum of all its arguments.\n\n74\n00:04:49,000 --> 00:04:52,000\nThis first one is the substitution.\n\n75\n00:04:52,000 --> 00:04:55,000\nWe did one operation, in this case the substitution,\n\n76\n00:04:55,000 --> 00:05:00,000\nand that changed the first character of each string,\n\n77\n00:05:00,000 --> 00:05:04,000\nor really it substituted the first character of one to the other.\n\n78\n00:05:04,000 --> 00:05:07,000\nWe can ignore the first characters for the rest of the distance.\n\n79\n00:05:07,000 --> 00:05:12,000\nHere we have the insertion or the deletion case, depending on how you look at it,\n\n80\n00:05:12,000 --> 00:05:18,000\nwhere we add one operation and we continue on ignoring the first character from one string\n\n81\n00:05:18,000 --> 00:05:21,000\nand continuing with the entire other string.\n\n82\n00:05:21,000 --> 00:05:27,000\nLastly, we have the opposite action where we continue on with t \n\n83\n00:05:27,000 --> 00:05:31,000\nbut ignore the first string in s at the cost of one operation.\n\n84\n00:05:31,000 --> 00:05:34,000\nBelieve it or not, this is all the code to solve it.\n\n85\n00:05:34,000 --> 00:05:38,000\nThere are a number of other ways you could do it, especially ones that are more efficient,\n\n86\n00:05:38,000 --> 00:05:42,000\nbut as it turns out if you use the caching code that we used in an earlier homework,\n\n87\n00:05:42,000 --> 00:05:44,000\nthis can actually be a pretty fast solution.\n\n88\n00:05:44,000 --> 00:05:49,000\nBut as it stands, if you tried to run this on a string of 10 or so characters,\n\n89\n00:05:49,000 --> 00:05:54,000\nit goes really, really slow, which is why you need caching or more advanced approaches\n\n90\n00:05:54,000 --> 00:05:57,000\ninvolving alignment and dynamic programming \n\n91\n00:05:57,000 --> 00:06:02,000\nand things that you hopefully learn later on in Udacity courses.\n\n", "id": 613002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMTAxDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOHoJgwLEgZOdWdnZXQY4eIoDA", "path": "Course/cs101/CourseRev/feb2012/Unit/636001/Nugget/668001", "type": "Nugget", "id": 668001}]}], "path": "Course/cs101/CourseRev/feb2012", "type": "CourseRev", "id": "feb2012"}, "course_title": "Building a Search Engine", "progress": {}, "rev_name": "February 2012", "magik": false, "course_edit_url": "/edit_course?id=cs101"}}