{"version": "dacity-32", "payload": {"course": {"instructors": [{"bio": "Peter Norvig is Director of Research at Google Inc. He is also a Fellow of the American Association for Artificial Intelligence and the Association for Computing Machinery. Norvig is co-author of the popular textbook Artificial Intelligence: A Modern Approach. Prior to joining Google he was the head of the Computation Sciences Division at NASA Ames Research Center.", "name": "Peter Norvig", "parent": "None", "headshot_url": "/image/headshot/Instructor/1061104", "key": "agpzfnVkYWNpdHl1chILEgpJbnN0cnVjdG9yGPDhQAw", "path": "Instructor/1061104", "type": "Instructor", "id": 1061104}], "name": "Design of Computer Programs", "parent": "None", "icon_url": "/icon/Course/cs212", "faq": "<p>\n<b>Is there a fee to take the course?</b><br/>\nNope, no fees. All of our classes are offered free of charge.\n</p>\n\n<p>\n<b>Can you enroll in more than one class? </b><br/>\nYes! Keep in mind CS101 is intended for students with no previous programming background, CS212, 253 and 262 are courses are oriented towards students with some programming experience (the equivalent of CS101), while CS373 and CS387 assumes students have prior programming experience.</p>\n\n<p>\n<b>When do classes start?</b><br/>\n\nApril 16, 2012.\n</p>\n\n<p>\n<b>When do I have to be online to watch the lectures?</b><br/>\nThe lectures are posted each week for you to view at your convenience.\n</p>\n\n<p>\n<b>How is the class formatted?</b><br/>\nBoth classes are broken into 6 week-long units and seventh week that wraps up the course and has a final exam. Each unit contains multiple lecture segments with interactive quizzes built in.  There will be one homework assignment which will include programming problems each week. There will be approximately 50 minutes of lecture videos.\n</p>\n\n<p>\n<b>Will there be closed captioning?</b><br/>\n\nYes, the videos will have captions in English.  We're also working to support other languages in future.\n</p>\n\n<p>\n<b>What will I get for completing the classes?</b><br/>\nStudents who complete a course will also receive a certificate signed by the instructors. \n</p>", "syllabus": "<p>The key to progressing from a novice programmer to an expert is mindful \npractice. In this class you will practice going from a problem description \nto a solution, using a series of assignments.  With each problem you will \nlearn new concepts, patterns, and methods that will expand your ability and \nhelp move you along the path from novice towards expertise.</p>\n\n\t<p class=\"syllabus-week\">WEEK 1:</p>\n\t\t<p class=\"syllabus-desc\">\n\t\t<b>Winning Poker Hands</b><br>\n\t\t   Steps of the design process; Developing for clarity and generality; \n\t\t   Arguments for program correctness; Experimentation and simulation.; \n\t\t   Design tradeoffs; Simplicity and Clarity. Decomposition and composability.\n\t\t</p>\n\t\t<br class=\"clear\"/>\n\t\t<p class=\"syllabus-week\">WEEK 2:</p>\n\t\t<p class=\"syllabus-desc\">\n\t\t<b>Back of the Envelope</b><br>\n\t\t   Back of envelope calculations; When to use brute force and when to be \n\t\t   clever; The Zebra puzzle; Generator expressions; Permutations and \n\t\t   combinations. Cryptarithmetic; Recursive and wishful thinking.\n\t\t</p>\n\t\t<br class=\"clear\"/>\n\t\t<p class=\"syllabus-week\">WEEK 3:</p>\n\t\t<p class=\"syllabus-desc\">\n\t\t<b>Regular Expressions, other languages and interpreters</b><br>\n\t\t   Defining the language of regular expressions; Interpreting the language; \n\t\t   Defining the set of strings matched by a regular expression;  \n\t\t   Other languages.\n\t\t</p>\n\t\t<br class=\"clear\"/>\n\t\t<p class=\"syllabus-week\">WEEK 4:</p>\n\t\t<p class=\"syllabus-desc\">\n\t\t<b>Dealing with complexity through search</b><br>\n\t\t   Search: finding your way with a flashlight or boat; pouring water. \n\t\t   Analyzing the efficiency of an algorithm; Recurrence relations; Matching \n\t\t   data types with algorithms; Longest palindrome \n\t\t   substring algorithm.\n\t\t</p>\n\t\t<br class=\"clear\"/>\n\t\t<p class=\"syllabus-week\">WEEK 5:</p>\n\t\t<p class=\"syllabus-desc\">\n\t\t<b>Dealing with uncertainty through probability</b><br>\n\t\t   Probability: the game of Pig; Maximizing expected utility to optimize strategy. \n\t\t</p>\n\t\t<br class=\"clear\"/>\n\t\t<p class=\"syllabus-week\">WEEK 6:</p>\n\t\t<p class=\"syllabus-desc\">\n\t\t<b>Word Games</b><br>\n\t\t   Managing complexity; Large sets of words; Appropriate data structures; Word games. \n\t\t</p>\n\t\t<br class=\"clear\"/>\n\t\t<p class=\"syllabus-week\">WEEK 7:</p>\n\t\t<p class=\"syllabus-desc\">\n\t\t<b>Conclusion</b><br>\n\t\t   Final exam/project\n\t\t</p>", "teaser": {"dotsub_id": null, "name": "teaser", "parent": "None", "transcript": null, "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1cg0LEgVNZWRpYRiXlj8M", "youtube_id": "6LSVPBgEl6w", "youtube_state": null, "path": "Media/1035031", "type": "Media", "id": 1035031}, "prereqs": "<p>\nThis course assumes previous programming experience, comparable to what is covered by the Udacity CS101 course.  \n</p>", "image_url": "/image/Course/cs212", "key": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "is_public": true, "course_id": "cs212", "path": "Course/cs212", "type": "Course", "id": "cs212", "description": "Improve your programming skills with new patterns and techniques."}, "course_rev": {"unitLayout": [{"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GJnmBQw"}, {"unit_key": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7Aww"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAw"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKvAAgw"}], "name": "April 2012", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "state": 1, "key": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgw", "units": [{"name": "Python Glossary", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GJnmBQwLEgZOdWdnZXQY6fUFDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GJnmBQwLEgZOdWdnZXQYuYUGDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GJnmBQwLEgZOdWdnZXQYiZUGDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GJnmBQwLEgZOdWdnZXQYmeMGDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GJnmBQwLEgZOdWdnZXQY2aQGDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GJnmBQwLEgZOdWdnZXQYwawGDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GJnmBQwLEgZOdWdnZXQY0foGDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GJnmBQwLEgZOdWdnZXQYkbwGDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GJnmBQwLEgZOdWdnZXQY6vUFDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GJnmBQw", "path": "Course/cs212/CourseRev/apr2012/Unit/95001", "open": false, "id": 95001, "nuggets": [{"nuggetType": "lecture", "name": "Welcome", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GJnmBQw", "media": {"dotsub_id": "fc390025-ee29-4f52-819d-805e4c724c2d", "name": "cs212_unit999_00_l_Welcome", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGIHuBQw", "youtube_id": "XYo7-jwwE_Q", "youtube_state": "done", "path": "Course/cs212/Media/96001", "transcript": "\ufeff", "id": 96001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GJnmBQwLEgZOdWdnZXQY6fUFDA", "path": "Course/cs212/CourseRev/apr2012/Unit/95001/Nugget/97001", "type": "Nugget", "id": 97001}, {"nuggetType": "lecture", "name": "List Methods: count sort reverse", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GJnmBQw", "media": {"dotsub_id": "505509b9-d305-47d5-84b0-f3c39ce5cfeb", "name": "cs212_unit999_04_l_List-Methods-count-sort-reverse", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGPnDBgw", "youtube_id": "i0EsEnj3-O0", "youtube_state": "done", "path": "Course/cs212/Media/107001", "transcript": null, "id": 107001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GJnmBQwLEgZOdWdnZXQY6vUFDA", "path": "Course/cs212/CourseRev/apr2012/Unit/95001/Nugget/97002", "type": "Nugget", "id": 97002}, {"nuggetType": "lecture", "name": "Set Theory", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GJnmBQw", "media": {"dotsub_id": "ba7eeba7-a4c1-468e-80d7-9bc467297d29", "name": "cs212_unit999_01_l_Set-Theory", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGNH9BQw", "youtube_id": "x7ARbhM7kuw", "youtube_state": "done", "path": "Course/cs212/Media/98001", "transcript": "\ufeff", "id": 98001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GJnmBQwLEgZOdWdnZXQYuYUGDA", "path": "Course/cs212/CourseRev/apr2012/Unit/95001/Nugget/99001", "type": "Nugget", "id": 99001}, {"nuggetType": "lecture", "name": "Set Theory Quiz", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GJnmBQw", "media": {"dotsub_id": "56d4084f-d87c-48a0-8c50-8206c4571e81", "name": "cs212_unit999_02_q_Set-Theory-Quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGKGNBgw", "youtube_id": "FJbMkj-OEV8", "youtube_state": "done", "path": "Course/cs212/Media/100001", "transcript": "\ufeff", "id": 100001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GJnmBQwLEgZOdWdnZXQYiZUGDA", "path": "Course/cs212/CourseRev/apr2012/Unit/95001/Nugget/101001", "type": "Nugget", "id": 101001}, {"nuggetType": "lecture", "name": "Set Theory Quiz Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GJnmBQw", "media": {"dotsub_id": "3e7e40ca-3172-4f51-8634-e7c75c4307a8", "name": "cs212_unit999_02_s_Set-Theory-Quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGPGcBgw", "youtube_id": "VksDPV34al8", "youtube_state": "done", "path": "Course/cs212/Media/102001", "transcript": "\ufeff", "id": 102001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GJnmBQwLEgZOdWdnZXQY2aQGDA", "path": "Course/cs212/CourseRev/apr2012/Unit/95001/Nugget/103001", "type": "Nugget", "id": 103001}, {"nuggetType": "lecture", "name": "Python Sets", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GJnmBQw", "media": {"dotsub_id": "f3c1fad8-d667-46bd-8fcd-520bc4e793ce", "name": "cs212_unit999_03_q_Python-Sets", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGNL9BQw", "youtube_id": "NHmo6jchJWg", "youtube_state": "done", "path": "Course/cs212/Media/98002", "transcript": "\ufeff", "id": 98002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GJnmBQwLEgZOdWdnZXQYwawGDA", "path": "Course/cs212/CourseRev/apr2012/Unit/95001/Nugget/104001", "type": "Nugget", "id": 104001}, {"nuggetType": "lecture", "name": "Python Sets Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GJnmBQw", "media": {"dotsub_id": "6db35562-b0db-4116-a7c1-d7bf2f2faa41", "name": "cs212_unit999_03_s_Python-Sets", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGKm0Bgw", "youtube_id": "imL3CS83iHc", "youtube_state": "done", "path": "Course/cs212/Media/105001", "transcript": "\ufeff", "id": 105001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GJnmBQwLEgZOdWdnZXQYkbwGDA", "path": "Course/cs212/CourseRev/apr2012/Unit/95001/Nugget/106001", "type": "Nugget", "id": 106001}, {"nuggetType": "quiz", "name": "Set Theory Quiz", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GJnmBQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GJnmBQwLEgZOdWdnZXQYmeMGDA", "path": "Course/cs212/CourseRev/apr2012/Unit/95001/Nugget/111001", "type": "Nugget", "id": 111001}, {"nuggetType": "quiz", "name": "Python Sets", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GJnmBQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GJnmBQwLEgZOdWdnZXQY0foGDA", "path": "Course/cs212/CourseRev/apr2012/Unit/95001/Nugget/114001", "type": "Nugget", "id": 114001}]}, {"name": "Unit 1", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBi6Fww"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiKJww"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjZNgw"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjk2gEM"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBipRgw"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjJZQw"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiknAEM"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBi7Fww"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiZdQw"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjzqwEM"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjDPgw"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiSTgw"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjDuAIM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBi5lAEM"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiJpAEM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiB9wIM"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjaNgw"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjqhAEM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjr_gIM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjxqwEM"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjZswEM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiC9wIM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjrhAEM"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBipwwEM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBi5jgMM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBj50gEM"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBj5VQw"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBi8Fww"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjJ4gEM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjThgMM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBix6gEM"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiZ8gEM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjxpQMM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjyqwEM"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiB-gEM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjUhgMM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjpgQIM"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjDuwEM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiRxQMM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBi5kQIM"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiC-gEM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBi6jgMM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiJoQIM"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiMJww"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBj5zAMM"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjyLgw"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjxqAIM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjh1AMM"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjcNgw"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBirRgw"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjDtQMM"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBisRgw"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiMpAEM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiD9wIM"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBitRgw"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjqgQIM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiy5AMM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBi6kQIM"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjK4gEM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiB9AMM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjEuwEM"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjCuAIM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBji1AMM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjcswEM"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjasAIM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBi7jgMM"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjdswEM"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjdNgw"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiilgMM"}, {"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjeNgw"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjHPgw"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBirwwEM"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiDfQw"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "path": "Course/cs212/CourseRev/apr2012/Unit/3001", "open": false, "id": 3001, "nuggets": [{"nuggetType": "lecture", "name": "Welcome", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "58282e05-861e-4964-97d3-6f315286c651", "name": "cs212_unit1_00_l_Welcome", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGKEfDA", "youtube_id": "49qSOQpFExQ", "youtube_state": "done", "path": "Course/cs212/Media/4001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:06,000\nHi. I'm Peter Norvig. I'll be your instructor for CS212, Design of Computer Programs.\n\n2\n00:00:06,000 --> 00:00:08,000\nI'm assuming that you have some background.\n\n3\n00:00:08,000 --> 00:00:11,000\nYou took CS101 or the equivalent elsewhere,\n\n4\n00:00:11,000 --> 00:00:15,000\nso you understand the basics of statements, expressions, and data types\n\n5\n00:00:15,000 --> 00:00:18,000\nin Python or some other language.\n\n6\n00:00:18,000 --> 00:00:21,000\nNow, what this class will be about is the design process:\n\n7\n00:00:21,000 --> 00:00:26,000\nhow to take what you already know and put them together in order to solve a problem.\n\n8\n00:00:26,000 --> 00:00:29,000\nWe'll talk about some of the attributes of good programs--\n\n9\n00:00:29,000 --> 00:00:33,000\ncorrectness, efficiency, generality and so on--\n\n10\n00:00:33,000 --> 00:00:36,000\nand we'll give you a process for thinking about design:\n\n11\n00:00:36,000 --> 00:00:41,000\nhow to go from the uncertain stage of not knowing what the problem really is\n\n12\n00:00:41,000 --> 00:00:44,000\nand working your way all the way through to a good solution.\n\n13\n00:00:44,000 --> 00:00:48,000\nWe'll also give you a set of tools that you can use along the way.\n\n14\n00:00:48,000 --> 00:00:52,000\nI had a lot of fun choosing the examples for this class and working them out,\n\n15\n00:00:52,000 --> 00:00:54,000\nand I think you'll have a lot of fun too,\n\n16\n00:00:54,000 --> 00:00:58,000\nand when you're done, you'll have a real sense of accomplishment.\n\n17\n00:00:58,000 --> 00:01:00,000\nSo I hope to see you in class.\n\n", "id": 4001}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBi6Fww", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/3002", "type": "Nugget", "id": 3002}, {"nuggetType": "lecture", "name": "Poker Function Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "8446fa42-b43b-4632-b2ff-3e508b2574f6", "name": "cs212_unit1_04_s_Poker-Function", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGLFtDA", "youtube_id": "8gCpcSy0sBk", "youtube_state": "done", "path": "Course/cs212/Media/14001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Norvig] And the answer is that the function max fits the bill.\n\n2\n00:00:04,000 --> 00:00:08,000\nMax is a function that takes a list as input and returns the highest ranking one.\n\n", "id": 14001}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBi7Fww", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/3003", "type": "Nugget", "id": 3003}, {"nuggetType": "lecture", "name": "Back To Hand Rank", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "fbbe7adf-60aa-4825-85f7-8a479676d2de", "name": "cs212_unit1_11_l_Back-to-Hand-Rank", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGOHaAQw", "youtube_id": "WYHN2HfPISY", "youtube_state": "done", "path": "Course/cs212/Media/28001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\n[Norvig] Now let's go back to hand_rank.\n\n2\n00:00:02,000 --> 00:00:05,000\nWe still have the same specification that the input is a hand\n\n3\n00:00:05,000 --> 00:00:08,000\nand the output is a value indicating the ranking of a hand.\n\n4\n00:00:08,000 --> 00:00:12,000\nBut instead of having the value be an integer like it was before,\n\n5\n00:00:12,000 --> 00:00:16,000\nnow the value is going to be a tuple where the first element of the tuple\n\n6\n00:00:16,000 --> 00:00:21,000\nis still going to be the single value representing the type of ranking--\n\n7\n00:00:21,000 --> 00:00:23,000\n8 for a straight flush, for example--\n\n8\n00:00:23,000 --> 00:00:28,000\nbut then the next element of the tuple serves to break ties.\n\n9\n00:00:28,000 --> 00:00:32,000\nIf 8 is the highest compared to any other hand, then that's the winner.\n\n10\n00:00:32,000 --> 00:00:35,000\nBut if there are multiple hands that have an 8, they all tie\n\n11\n00:00:35,000 --> 00:00:37,000\nand we have to go on to the first tiebreaker.\n\n12\n00:00:37,000 --> 00:00:40,000\nAnd what should the tiebreaker be?\n\n13\n00:00:40,000 --> 00:00:44,000\nWell, in this case, we can just look at the high rank.\n\n14\n00:00:44,000 --> 00:00:50,000\nSo we can look at the max out of all the ranks breaks the ties.\n\n15\n00:00:50,000 --> 00:01:01,000\nAnd the idea there is if we had a hand that, say, had ranks 2  3  4  5  6,\n\n16\n00:01:01,000 --> 00:01:05,000\nthen the only thing we care about is the 6.\n\n17\n00:01:05,000 --> 00:01:10,000\nWe can completely specify this hand because we know it's a straight.\n\n18\n00:01:10,000 --> 00:01:15,000\nSo if 6 was the high card, then that tells us everything we need to know \n\n19\n00:01:15,000 --> 00:01:19,000\nabout the straight and how it compares to any other straight.\n\n20\n00:01:19,000 --> 00:01:25,000\nSo for that kind of hand, we'd get the value (8, 6)\n\n21\n00:01:25,000 --> 00:01:34,000\nand a hand that was, say, 6 7 8 9 T would get the value (8, 10),\n\n22\n00:01:34,000 --> 00:01:40,000\nand we know that this hand would win because (8, 10) is bigger than (8, 6).\n\n23\n00:01:40,000 --> 00:01:45,000\nSo this gives us a way to break ties between straight flushes.\n\n24\n00:01:45,000 --> 00:01:50,000\nWe can do the same type of thing for all the other rankings.\n\n25\n00:01:50,000 --> 00:01:55,000\nSo rank 7 is 4 of a kind. What do we want to put in there to break the tie?\n\n26\n00:01:55,000 --> 00:01:59,000\nThe first tiebreaker is the thing that you have 4 of a kind of.\n\n27\n00:01:59,000 --> 00:02:03,000\nSo you say, I've got 4 of a kind, 4 kings,\n\n28\n00:02:03,000 --> 00:02:08,000\nand we can just say, what do you have 4 of a kind of?\n\n29\n00:02:08,000 --> 00:02:14,000\nBut now I have to firm up the definition of kind.\n\n30\n00:02:14,000 --> 00:02:17,000\nWe weren't quite clear on what it returns.\n\n31\n00:02:17,000 --> 00:02:23,000\nWe can make it return a value which is the actual rank.\n\n32\n00:02:23,000 --> 00:02:25,000\nSo if I have four 7s, it should return 7.\n\n33\n00:02:25,000 --> 00:02:30,000\nIf I have four 10s, it should return 10, and that will be the tiebreaker.\n\n34\n00:02:30,000 --> 00:02:36,000\nAnd then normally, if we're playing a regular game, there would only be 4 of a kind in a deck.\n\n35\n00:02:36,000 --> 00:02:39,000\nSo if you had four 10s, nobody else could tie you\n\n36\n00:02:39,000 --> 00:02:41,000\nbecause there wouldn't be another four 10s.\n\n37\n00:02:41,000 --> 00:02:46,000\nBut we want to allow for the possibility of playing a game where there's 2 decks.\n\n38\n00:02:46,000 --> 00:02:48,000\nSo we could go to a tiebreaker, \n\n39\n00:02:48,000 --> 00:02:52,000\nand then the tiebreaker would be the remaining card in your hand,\n\n40\n00:02:52,000 --> 00:02:55,000\nwhich is the card that you have 1 of a kind of.\n\n41\n00:02:55,000 --> 00:03:04,000\nSo for example, say if you had a hand that had four 9s and a 3,\n\n42\n00:03:04,000 --> 00:03:08,000\nthen our value would be 7, meaning 4 of a kind,\n\n43\n00:03:08,000 --> 00:03:11,000\n9, meaning you have four 9s,\n\n44\n00:03:11,000 --> 00:03:15,000\nand then 3, meaning that's the final tiebreaker.\n\n45\n00:03:15,000 --> 00:03:19,000\nThere's something a little bit tricky here that I want to go over and make sure we get right.\n\n46\n00:03:19,000 --> 00:03:24,000\nHere I'm kind of overloading the idea of the function kind.\n\n47\n00:03:24,000 --> 00:03:30,000\nI'm using it to return a value--returns 9 when you have four 9s--\n\n48\n00:03:30,000 --> 00:03:32,000\nbut I'm also using it as a Boolean test, \n\n49\n00:03:32,000 --> 00:03:39,000\nsaying if you have 4 of a kind at all, then do this.\n\n50\n00:03:39,000 --> 00:03:45,000\nAnd so I want to arrange kind to return a false value when it doesn't have 4 of a kind\n\n51\n00:03:45,000 --> 00:03:51,000\nand to return a true value, which is a number, when you do have 4 of a kind.\n\n52\n00:03:51,000 --> 00:03:53,000\nAnd you can do that in Python.\n\n53\n00:03:53,000 --> 00:03:56,000\nIn other languages, you would have to decide one or another.\n\n54\n00:03:56,000 --> 00:04:03,000\nIn a language like Java, you couldn't have something that returns either a Boolean value\n\n55\n00:04:03,000 --> 00:04:06,000\nor a number, so you'd have to have another way of dealing with that.\n\n56\n00:04:06,000 --> 00:04:08,000\nBut in Python you can do that. \n\n57\n00:04:08,000 --> 00:04:11,000\nYou can have kind return a number when it's needed\n\n58\n00:04:11,000 --> 00:04:15,000\nand return a false value when it's needed.\n\n59\n00:04:15,000 --> 00:04:19,000\nOne thing you have to worry about is it turns out that in Java\n\n60\n00:04:19,000 --> 00:04:23,000\nthe value 0 is, in fact, counted as false.\n\n61\n00:04:23,000 --> 00:04:28,000\nSo if I was saying I'm going to return either a false value or return a number\n\n62\n00:04:28,000 --> 00:04:32,000\nand if 0 was one of those possible numbers, then I could be in trouble.\n\n63\n00:04:32,000 --> 00:04:35,000\nBut in this case, 0 is not a possible number\n\n64\n00:04:35,000 --> 00:04:40,000\nbecause the ranks go from 2 to 14, so I'm okay.\n\n65\n00:04:40,000 --> 00:04:44,000\nAnd we'll see more about that when we define the kind function.\n\n", "id": 28001}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBi8Fww", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/3004", "type": "Nugget", "id": 3004}, {"nuggetType": "lecture", "name": "Outlining The Problem", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "5e00598b-bbcd-4dbf-87e6-6b17bf21f9c6", "name": "cs212_unit1_01_l_Outlining-the-Problem", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGIknDA", "youtube_id": "COGYpAokXbg", "youtube_state": "done", "path": "Course/cs212/Media/5001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Norvig] In this unit, we're going to talk about how to write a poker program.\n\n2\n00:00:04,000 --> 00:00:07,000\nThis is going to be an example of a general process\n\n3\n00:00:07,000 --> 00:00:11,000\nwhere we start with a vague understanding\n\n4\n00:00:11,000 --> 00:00:16,000\nand then we refine our understanding to have a formal specification of a problem,\n\n5\n00:00:16,000 --> 00:00:22,000\nthen we specify that into something that is amenable to being coded,\n\n6\n00:00:22,000 --> 00:00:25,000\nand then the design process we end up with working code.\n\n7\n00:00:25,000 --> 00:00:28,000\nSo we'll follow these steps 1, 2, 3.\n\n8\n00:00:28,000 --> 00:00:31,000\nThe first thing I want to do in the understanding phase\n\n9\n00:00:31,000 --> 00:00:34,000\nis make an inventory of the concepts that we're going to have to deal with,\n\n10\n00:00:34,000 --> 00:00:37,000\nand so let's look at what we have.\n\n11\n00:00:37,000 --> 00:00:40,000\nFirst we have this notion of hands.\n\n12\n00:00:40,000 --> 00:00:46,000\nA hand consists of 5 cards, so here's an individual card,\n\n13\n00:00:46,000 --> 00:00:50,000\nand a card has a rank and a suit.\n\n14\n00:00:50,000 --> 00:00:55,000\nThis card, the 5 of diamonds, the rank is 5 and the suit is diamonds.\n\n15\n00:00:55,000 --> 00:00:58,000\nThe main program we're trying to specify we'll call poker,\n\n16\n00:00:58,000 --> 00:01:03,000\nand it takes a list of hands as input and returns the best hand.\n\n17\n00:01:03,000 --> 00:01:07,000\nWhat's the best hand? Well, you can see the rules of poker.\n\n18\n00:01:07,000 --> 00:01:09,000\nThere are links to describe where we can look them up,\n\n19\n00:01:09,000 --> 00:01:14,000\nand we'll go over them briefly throughout the course of this video.\n\n20\n00:01:14,000 --> 00:01:19,000\nBut we can say, for example, that this hand is called 2 pair.\n\n21\n00:01:19,000 --> 00:01:24,000\nYou can also say it's jacks over 2s with an extra 5,\n\n22\n00:01:24,000 --> 00:01:27,000\nand the rules specify which hands beat which,\n\n23\n00:01:27,000 --> 00:01:30,000\nwhich is the best ranking for each hand.\n\n24\n00:01:30,000 --> 00:01:33,000\nSo this is another concept that we have:\n\n25\n00:01:33,000 --> 00:01:39,000\nthe concept of a hand rank which takes a hand and maps to something like,\n\n26\n00:01:39,000 --> 00:01:44,000\nin this case, 2 pair and maybe with some more details.\n\n27\n00:01:44,000 --> 00:01:48,000\nAnd what are the concepts that make up the hand rank?\n\n28\n00:01:48,000 --> 00:01:50,000\nThere are 3.\n\n29\n00:01:50,000 --> 00:01:55,000\nOne is the concept of cards of the same rank, the same kind,\n\n30\n00:01:55,000 --> 00:02:00,000\nand we'll call that n of a kind for 2 of a kind, 3 of a kind, or 4 of a kind.\n\n31\n00:02:00,000 --> 00:02:04,000\nSo here I have 2 of a kind in two 2s and in two jacks.\n\n32\n00:02:04,000 --> 00:02:09,000\nThis hand is a straight--5, 6, 7, 8, 9--because it's 5 consecutive ranks.\n\n33\n00:02:09,000 --> 00:02:11,000\nSuits don't matter.\n\n34\n00:02:11,000 --> 00:02:15,000\nAnd then the notion of a flush.\n\n35\n00:02:15,000 --> 00:02:21,000\nThis hand is a flush because all 5 cards have the same suit, and the ranks don't matter.\n\n36\n00:02:21,000 --> 00:02:24,000\nSo there are a few more details about the ranking.\n\n37\n00:02:24,000 --> 00:02:30,000\nYou can look it up on the links, see the Wikipedia article on poker hands.\n\n38\n00:02:30,000 --> 00:02:32,000\nBut now I think we're ready.\n\n39\n00:02:32,000 --> 00:02:35,000\nWe know about the types of data we have to deal with--\n\n40\n00:02:35,000 --> 00:02:37,000\nhands, card ranks and suits--\n\n41\n00:02:37,000 --> 00:02:41,000\nand we know about the sort of operations or functions on them.\n\n42\n00:02:41,000 --> 00:02:45,000\nNow we're ready to move into the design phase.\n\n", "id": 5001}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiKJww", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/5002", "type": "Nugget", "id": 5002}, {"nuggetType": "lecture", "name": "Kind Function", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "176f0000-9e4f-4214-8298-6a662107764d", "name": "cs212_unit1_17_p_Kind-Function", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGKOcAQw", "youtube_id": "oZ9hHYlCVHg", "youtube_state": "done", "path": "Course/cs212/Media/20003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Norvig] Okay, so we're going great and we're almost done.\n\n2\n00:00:04,000 --> 00:00:07,000\nWe just need to implement kind and 2 pair.\n\n3\n00:00:07,000 --> 00:00:10,000\nSo let's write some tests first, as usual.\n\n4\n00:00:10,000 --> 00:00:13,000\nAgain, I'll do the tests for you.\n\n5\n00:00:13,000 --> 00:00:17,000\nSo what I've added here is one more card or one more hand to deal with--\n\n6\n00:00:17,000 --> 00:00:21,000\n2 pairs, a pair of 5s and 9s with a 6 left over--\n\n7\n00:00:21,000 --> 00:00:26,000\nand then I pulled out the ranks of 4 of a kind ranks and 2 pair ranks\n\n8\n00:00:26,000 --> 00:00:28,000\nby calling card_ranks,\n\n9\n00:00:28,000 --> 00:00:31,000\nand then I made these assertions.\n\n10\n00:00:31,000 --> 00:00:35,000\nSo is there a 4 of a kind in the 4 of a kind ranks? Yes, there is.\n\n11\n00:00:35,000 --> 00:00:39,000\nAnd in fact, it's a 9, those four 9s.\n\n12\n00:00:39,000 --> 00:00:41,000\nIs there a 3 of a kind there? No, there's not.\n\n13\n00:00:41,000 --> 00:00:45,000\nWe're asking for exactly 3, not at least 3,\n\n14\n00:00:45,000 --> 00:00:48,000\nand so there's 4 but there's not 3.\n\n15\n00:00:48,000 --> 00:00:51,000\nIs there a 2 of a kind there? No.\n\n16\n00:00:51,000 --> 00:00:55,000\nIs there 1 of a kind? Yes, there is. There's four 9s and there's one 7.\n\n17\n00:00:55,000 --> 00:01:00,000\nSo 1 of a kind in 4 of a kind ranks is yes, there is. There's a 7.\n\n18\n00:01:00,000 --> 00:01:05,000\nAnd then in terms of 2 pair, does the 4 of a kind have 2 pair? \n\n19\n00:01:05,000 --> 00:01:07,000\nNo, it doesn't, so we return None.\n\n20\n00:01:07,000 --> 00:01:14,000\nAnd does the 2 pair have 2 pair? Yes, it does, a 9 and a 5.\n\n21\n00:01:14,000 --> 00:01:19,000\nI'm going to ask you to write the kind function, which takes the n of a kind you're looking for,\n\n22\n00:01:19,000 --> 00:01:25,000\nthe list of ranks, and it returns the rank that that hand has exactly n of if there is one\n\n23\n00:01:25,000 --> 00:01:27,000\nand returns None otherwise.\n\n24\n00:01:27,000 --> 00:01:29,000\nAnd it should go through the ranks in left to right order\n\n25\n00:01:29,000 --> 00:01:33,000\nand find the first one that corresponds to n of a kind.\n\n", "id": 20003}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiMJww", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/5004", "type": "Nugget", "id": 5004}, {"nuggetType": "lecture", "name": "Kind Function Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "a93ff91d-d8d1-46cc-a875-ece720dc843a", "name": "cs212_unit1_17_s_Kind-Function", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGLLqAQw", "youtube_id": "TRtcnb9Z9NQ", "youtube_state": "done", "path": "Course/cs212/Media/30002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nAnd there are many ways to do it. Here's how I chose to do it.\n\n2\n00:00:03,000 --> 00:00:08,000\nI go through the ranks, and then for each r in the ranks,\n\n3\n00:00:08,000 --> 00:00:13,000\nI check to see if the ranks has a count of exactly n of those,\n\n4\n00:00:13,000 --> 00:00:17,000\nso count is one of the methods that exists on lists.\n\n5\n00:00:17,000 --> 00:00:21,000\nWe can ask a list to count how many times it has an element.\n\n6\n00:00:21,000 --> 00:00:25,000\nIf that's equal to n, then return that element.\n\n7\n00:00:25,000 --> 00:00:27,000\nAnd if not, then just return none.\n\n", "id": 30002}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjyLgw", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/6002", "type": "Nugget", "id": 6002}, {"nuggetType": "lecture", "name": "Representing Hands", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "dc272858-cba1-4f1f-9a37-5f9c0de1a659", "name": "cs212_unit1_02_q_Representing-Hands", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGPEuDA", "youtube_id": "vrej731Guz0", "youtube_state": "done", "path": "Course/cs212/Media/6001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\n[Norvig] Here's a quiz question.\n\n2\n00:00:02,000 --> 00:00:06,000\nI want you to tell me which of these possible representations for a hand\n\n3\n00:00:06,000 --> 00:00:09,000\ndo you think make sense.\n\n4\n00:00:09,000 --> 00:00:11,000\nSomewhat this is subjective.\n\n5\n00:00:11,000 --> 00:00:13,000\nYou may have different opinions.\n\n6\n00:00:13,000 --> 00:00:15,000\nSo tell me all the ones that you think are pretty good\n\n7\n00:00:15,000 --> 00:00:18,000\nand not the ones that you think are problematic.\n\n8\n00:00:18,000 --> 00:00:22,000\nSo it could be a list of 2 character strings,\n\n9\n00:00:22,000 --> 00:00:25,000\na list of tuples of numbers and strings,\n\n10\n00:00:25,000 --> 00:00:30,000\na set that was similar to the list,\n\n11\n00:00:30,000 --> 00:00:32,000\nor just a single big string.\n\n", "id": 6001}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjZNgw", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/7001", "type": "Nugget", "id": 7001}, {"nuggetType": "lecture", "name": "Testing Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "23d3eb2a-45b6-4374-b3e2-ccce88c6f429", "name": "cs212_unit1_07_s_Testing", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGIsnDA", "youtube_id": "jT-EDhFZ3Ss", "youtube_state": "done", "path": "Course/cs212/Media/5003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\n[Norvig] And here they are. It's very simple.\n\n2\n00:00:02,000 --> 00:00:05,000\nWe assert that when we call poker with 4 of a kind and full house\n\n3\n00:00:05,000 --> 00:00:07,000\nthat 4 of a kind wins\n\n4\n00:00:07,000 --> 00:00:12,000\nand when we call it with full house and full house that, in fact, full house wins.\n\n", "id": 5003}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjaNgw", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/7002", "type": "Nugget", "id": 7002}, {"nuggetType": "lecture", "name": "Two Pair Function Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "0c791d8c-1f40-41b9-82cd-886f754a0b0f", "name": "cs212_unit1_18_s_Two-Pair-Function", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGI0nDA", "youtube_id": "cUDOzVCuUnU", "youtube_state": "done", "path": "Course/cs212/Media/5005", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nSo here's how I chose to do it.\n\n2\n00:00:02,000 --> 00:00:04,000\nI first picked out the first pair,\n\n3\n00:00:04,000 --> 00:00:07,000\nand if there are 2 pairs, that should be the highest,\n\n4\n00:00:07,000 --> 00:00:11,000\nbecause remember, the ranks are ordered  from highest to lowest,\n\n5\n00:00:11,000 --> 00:00:14,000\nso if I'm going through the ranks from left to right,\n\n6\n00:00:14,000 --> 00:00:16,000\nI should hit the highest one first.\n\n7\n00:00:16,000 --> 00:00:18,000\nAnd then to find if there's a low pair,\n\n8\n00:00:18,000 --> 00:00:21,000\nwhat I've done is reverse the ranks \n\n9\n00:00:21,000 --> 00:00:25,000\nand then look through those, so now I'm going from\n\n10\n00:00:25,000 --> 00:00:28,000\nlowest to highest, and I should find the lowest pair first.\n\n11\n00:00:28,000 --> 00:00:31,000\nNow if I found a pair, and I found a low pair, \n\n12\n00:00:31,000 --> 00:00:35,000\nwhich is not equal to the pair, then I want to return the two of them.\n\n13\n00:00:35,000 --> 00:00:37,000\nOtherwise I just return none.\n\n14\n00:00:37,000 --> 00:00:39,000\nSo congratulations. \n\n15\n00:00:39,000 --> 00:00:41,000\nWe've gone through the whole program.\n\n16\n00:00:41,000 --> 00:00:43,000\nWe've come up with a solution,\n\n17\n00:00:43,000 --> 00:00:49,000\nand now when we hit the Run button,\n\n18\n00:00:49,000 --> 00:00:52,000\nit prints out \"tests pass,\" so we've done everything \n\n19\n00:00:52,000 --> 00:00:55,000\nthat we promised to do, and it works okay.\n\n20\n00:00:55,000 --> 00:00:59,000\nBut I'm still not confident because \n\n21\n00:00:59,000 --> 00:01:03,000\nI know we've done some tests, but we haven't done exhaustive tests yet,\n\n22\n00:01:03,000 --> 00:01:05,000\nso I feel pretty good about it.\n\n23\n00:01:05,000 --> 00:01:07,000\nYou should feel good about what we've done together.\n\n24\n00:01:07,000 --> 00:01:09,000\nCongratulations on that.\n\n25\n00:01:09,000 --> 00:01:11,000\nBut don't feel like we're done yet.\n\n26\n00:01:11,000 --> 00:01:13,000\nWe've still got to come up with more tests\n\n27\n00:01:13,000 --> 00:01:16,000\nto prove that we've got it right in every case,\n\n28\n00:01:16,000 --> 00:01:20,000\nand in fact, I want to share with you a test that somebody pointed out to me\n\n29\n00:01:20,000 --> 00:01:23,000\nthat I hadn't thought of at all.\n\n", "id": 5005}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjcNgw", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/7004", "type": "Nugget", "id": 7004}, {"nuggetType": "lecture", "name": "Hand Frequencies", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "0079ca0a-fc2f-4729-a2d6-565de50ddc47", "name": "cs212_unit1_25_q_Hand-Frequencies", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGLPqAQw", "youtube_id": "-XBygC4JeI4", "youtube_state": "done", "path": "Course/cs212/Media/30003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nNow, I said that Wikipedia has a very nice page that mentions\n\n2\n00:00:04,000 --> 00:00:08,000\nall the types of hands, and it also gives the percentages for each hand.\n\n3\n00:00:08,000 --> 00:00:11,000\nThat is, out of all the possible poker hands,\n\n4\n00:00:11,000 --> 00:00:14,000\nwhat percentage are a straight flush, four of a kind,\n\n5\n00:00:14,000 --> 00:00:16,000\nfull house, and so on, so here's the percentages.\n\n6\n00:00:16,000 --> 00:00:19,000\nWe see that about half the hands don't have anything.\n\n7\n00:00:19,000 --> 00:00:21,000\nThey're just the high card with no pairs or anything else.\n\n8\n00:00:21,000 --> 00:00:27,000\nAnd then 42% are pairs, and then less for each of those.\n\n9\n00:00:27,000 --> 00:00:31,000\nAnd we see the percentages align with the actual poker values.\n\n10\n00:00:31,000 --> 00:00:36,000\nThat is, the most rare hand, the straight flush, is the highest ranking.\n\n11\n00:00:36,000 --> 00:00:39,000\nThe next most rare hand, four of a kind, is the next highest ranking,\n\n12\n00:00:39,000 --> 00:00:42,000\nand the most common is the least highest, so that makes sense.\n\n13\n00:00:42,000 --> 00:00:46,000\nPoker is a sensible game from the point of view of probability.\n\n14\n00:00:46,000 --> 00:00:50,000\nNow, one thing we can do is see if we can duplicate this type of table.\n\n15\n00:00:50,000 --> 00:00:54,000\nThat is, can we test our routines and make sure\n\n16\n00:00:54,000 --> 00:00:58,000\nwe've got it right in that we identify straight flushes,\n\n17\n00:00:58,000 --> 00:01:01,000\nhigh cards, and everything else the correct number of times?\n\n18\n00:01:01,000 --> 00:01:05,000\nWhat I'm going to do is come up with a program that randomly generates\n\n19\n00:01:05,000 --> 00:01:09,000\ndecks or deals from the deck and then checks to see \n\n20\n00:01:09,000 --> 00:01:13,000\nwhat kind it is and checks to see if we can reproduce  this probability table.\n\n21\n00:01:13,000 --> 00:01:17,000\nWe're going to look at random deal percentages,\n\n22\n00:01:17,000 --> 00:01:19,000\nand first we're going to have a quiz.\n\n23\n00:01:19,000 --> 00:01:22,000\nSay we want to deal out a random number of hands\n\n24\n00:01:22,000 --> 00:01:24,000\nand then count how many of each type we have\n\n25\n00:01:24,000 --> 00:01:27,000\nand then come up with that table like we just saw from Wikipedia.\n\n26\n00:01:27,000 --> 00:01:31,000\nAnd the question is about how many hands should we deal out\n\n27\n00:01:31,000 --> 00:01:34,000\nto get a good estimate of the probabilities?\n\n28\n00:01:34,000 --> 00:01:36,000\nThat is, we're not going to get the exact estimate,\n\n29\n00:01:36,000 --> 00:01:40,000\nbut we want to get some estimates that are close to the right probabilities,\n\n30\n00:01:40,000 --> 00:01:43,000\nand the more we sample, the closer we'll get.\n\n31\n00:01:43,000 --> 00:01:49,000\nShould we look at about 52 hands,\n\n32\n00:01:49,000 --> 00:01:55,000\nabout 50,000 hands, 700,000 hands, \n\n33\n00:01:55,000 --> 00:02:00,000\nor about 52 factorial hands?\n\n34\n00:02:00,000 --> 00:02:04,000\nAnd then I also want you to answer why,\n\n35\n00:02:04,000 --> 00:02:13,000\nso one per card, or do we need about 1,000 per card\n\n36\n00:02:13,000 --> 00:02:17,000\nso that the random variations are evened out?\n\n37\n00:02:17,000 --> 00:02:24,000\nOr do we need about 10 for least common hand, least common ranking?\n\n38\n00:02:24,000 --> 00:02:31,000\nOr do we need one for each of the possible permutations\n\n39\n00:02:31,000 --> 00:02:34,000\nof everything that came out of the deck?\n\n", "id": 30003}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjdNgw", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/7005", "type": "Nugget", "id": 7005}, {"nuggetType": "lecture", "name": "Hand Frequencies Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "1430a072-9c75-4b8c-a856-80e84be21eb4", "name": "cs212_unit1_25_s_Hand-Frequencies", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGIP6AQw", "youtube_id": "F0ktZqumrPM", "youtube_state": "done", "path": "Course/cs212/Media/32003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nThe answer is one per card wouldn't be enough, and in any case,\n\n2\n00:00:03,000 --> 00:00:05,000\nthe number of cards is really irrelevant.\n\n3\n00:00:05,000 --> 00:00:08,000\nWhat's important is the number of possible hands\n\n4\n00:00:08,000 --> 00:00:12,000\nand the number of possible results we get for each type of hand,\n\n5\n00:00:12,000 --> 00:00:14,000\nthe rankings we get for each.\n\n6\n00:00:14,000 --> 00:00:17,000\nOne per card doesn't make sense. 1,000 per card doesn't really help that much.\n\n7\n00:00:17,000 --> 00:00:19,000\nNow we're talking. \n\n8\n00:00:19,000 --> 00:00:25,000\nSo here we say at least expect to get 10 possible results for the least common rank,\n\n9\n00:00:25,000 --> 00:00:28,000\nso least common is the straight flush, and if we said\n\n10\n00:00:28,000 --> 00:00:31,000\nif we expect to get 10 straight flushes,\n\n11\n00:00:31,000 --> 00:00:34,000\nthen probably we're not going to get exactly 10,\n\n12\n00:00:34,000 --> 00:00:36,000\nbut it's not going to be off by that much.\n\n13\n00:00:36,000 --> 00:00:39,000\nIf we expected only to get one straight flush,\n\n14\n00:00:39,000 --> 00:00:42,000\nthen maybe half the time we'd get zero, and half the time \n\n15\n00:00:42,000 --> 00:00:44,000\nwe'd get 2, and that would be off by a lot.\n\n16\n00:00:44,000 --> 00:00:47,000\nThat wouldn't be very good, but 10 seems about right.\n\n17\n00:00:47,000 --> 00:00:50,000\nAt least we're in the right ballpark.\n\n18\n00:00:50,000 --> 00:00:55,000\nIf that's the right answer here, then what does that translate over here?\n\n19\n00:00:55,000 --> 00:00:57,000\nWell, we can just look up the probability.\n\n20\n00:00:57,000 --> 00:00:59,000\nWe had that on the previous page.\n\n21\n00:00:59,000 --> 00:01:01,000\nLook up the probability.\n\n22\n00:01:01,000 --> 00:01:04,000\nIt's about 1 in 60,000 or 66,000,\n\n23\n00:01:04,000 --> 00:01:07,000\nand so if we have a little bit more than 10 of each,\n\n24\n00:01:07,000 --> 00:01:11,000\nthen that comes up to 700,000,\n\n25\n00:01:11,000 --> 00:01:15,000\nand that's a lot less than 52 factorial, which is the total number \n\n26\n00:01:15,000 --> 00:01:18,000\nof permutations of the hands.\n\n27\n00:01:18,000 --> 00:01:20,000\nActually, permutations isn't that important.\n\n28\n00:01:20,000 --> 00:01:23,000\nA better number would be the total number of combinations.\n\n29\n00:01:23,000 --> 00:01:26,000\nBut even the total number of combinations is bigger than 700,000,\n\n30\n00:01:26,000 --> 00:01:28,000\nso we're probably okay going here.\n\n31\n00:01:28,000 --> 00:01:32,000\nAnd here's the code to calculate the hand percentages.\n\n32\n00:01:32,000 --> 00:01:35,000\nI give a default value for n, the number of deals that we're going to do,\n\n33\n00:01:35,000 --> 00:01:38,000\nthe default of 700,000, but you can put in as many as you want.\n\n34\n00:01:38,000 --> 00:01:42,000\nAnd I should say don't try to run this function here\n\n35\n00:01:42,000 --> 00:01:45,000\nwith 700,000 as the input because it will take too long.\n\n36\n00:01:45,000 --> 00:01:47,000\nIt should take 20 or 30 seconds,\n\n37\n00:01:47,000 --> 00:01:51,000\nand running on our servers, we don't let you run that long,\n\n38\n00:01:51,000 --> 00:01:55,000\nso if you want to run it here, put in a smaller value for n,\n\n39\n00:01:55,000 --> 00:01:59,000\nsay 1,000 or so, or if you want to run it on your own home machine,\n\n40\n00:01:59,000 --> 00:02:01,000\nyou're welcome to go ahead and do that.\n\n41\n00:02:01,000 --> 00:02:06,000\nWe make up a vector of counts which starts with no count \n\n42\n00:02:06,000 --> 00:02:09,000\nfor each of the 9 possibilities, and then we go through \n\n43\n00:02:09,000 --> 00:02:13,000\nthe deals, and what I'm going to do is deal 10 hands\n\n44\n00:02:13,000 --> 00:02:16,000\nand over 10 times, and for each of those hands,\n\n45\n00:02:16,000 --> 00:02:19,000\nI compute the ranking and then increment the count for the ranking,\n\n46\n00:02:19,000 --> 00:02:21,000\nand then I just print out the results.\n\n47\n00:02:21,000 --> 00:02:24,000\nWhen I hit Run, here's what the results look like.\n\n48\n00:02:24,000 --> 00:02:27,000\nAnd if I want to compare them to what we got from Wikipedia, \n\n49\n00:02:27,000 --> 00:02:29,000\nI can go ahead and do that.\n\n50\n00:02:29,000 --> 00:02:31,000\nHere you can see we have 2 columns.\n\n51\n00:02:31,000 --> 00:02:34,000\nThese are the results as computed by our random sampling,\n\n52\n00:02:34,000 --> 00:02:37,000\nand these are the results as computed by exact math\n\n53\n00:02:37,000 --> 00:02:42,000\nas shown in Wikipedia, and you can see they're pretty close in all cases.\n\n", "id": 32003}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjeNgw", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/7006", "type": "Nugget", "id": 7006}, {"nuggetType": "lecture", "name": "Understanding Max Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "7ff10394-e0f8-4426-bedf-0de1250a362e", "name": "cs212_unit1_05_s_Understanding-Max", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGIF9DA", "youtube_id": "z2w3qytiGq8", "youtube_state": "done", "path": "Course/cs212/Media/16001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Norvig] So here I have the 2 calls to max.\n\n2\n00:00:04,000 --> 00:00:09,000\nAnd when I hit Run, I see the answers are 5 and -5.\n\n3\n00:00:09,000 --> 00:00:13,000\nSo the first call to max, what's the maximum of 3, 4, 5, and 0? \n\n4\n00:00:13,000 --> 00:00:14,000\nThat's 5. That's the highest number.\n\n5\n00:00:14,000 --> 00:00:20,000\nThe second call to max I'm using the keyword argument which says\n\n6\n00:00:20,000 --> 00:00:22,000\ngive me the maximum according to this function,\n\n7\n00:00:22,000 --> 00:00:25,000\nso give me the maximum of these numbers \n\n8\n00:00:25,000 --> 00:00:28,000\naccording to the absolute value of those numbers.\n\n9\n00:00:28,000 --> 00:00:34,000\nAnd the largest absolute value is -5 has the absolute value of 5, so that's the highest,\n\n10\n00:00:34,000 --> 00:00:37,000\nand so that gives me the highest value.\n\n11\n00:00:37,000 --> 00:00:42,000\nAnd so here we see the result -5 is the actual value\n\n12\n00:00:42,000 --> 00:00:49,000\nwhich has the highest according to the absolute function, and so it tells me -5 is the best.\n\n", "id": 16001}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjDPgw", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/8003", "type": "Nugget", "id": 8003}, {"nuggetType": "lecture", "name": "Dimensions Of Programming", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "5056e0e6-513f-423b-8811-9b454897fc7b", "name": "cs212_unit1_26_l_Dimensions-of-Programming", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGMY-DA", "youtube_id": "nEfMvR2OMcM", "youtube_state": "done", "path": "Course/cs212/Media/8006", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nIn the real world, problems tend not to solve just one specific puzzle,\n\n2\n00:00:05,000 --> 00:00:08,000\nbut they exist in an environment.\n\n3\n00:00:08,000 --> 00:00:11,000\nThey occupy a niche in an environment that evolves over time, \n\n4\n00:00:11,000 --> 00:00:15,000\nand we can plot the program's evolution\n\n5\n00:00:15,000 --> 00:00:18,000\nthrough a multidimensional space,\n\n6\n00:00:18,000 --> 00:00:22,000\nand we can think of the different axes along this space,\n\n7\n00:00:22,000 --> 00:00:26,000\nand one of the most important axes is correctness.\n\n8\n00:00:26,000 --> 00:00:28,000\nDoes the program do the right thing?\n\n9\n00:00:28,000 --> 00:00:32,000\nAnother axis is efficiency.\n\n10\n00:00:32,000 --> 00:00:34,000\nDoes it do it fast enough? \n\n11\n00:00:34,000 --> 00:00:36,000\nAnother axis is features.\n\n12\n00:00:36,000 --> 00:00:38,000\nWhat exactly does it do?\n\n13\n00:00:38,000 --> 00:00:42,000\nAnd another one is elegance,\n\n14\n00:00:42,000 --> 00:00:47,000\nand I'm using the word elegance here coming from Richard O'Keefe,\n\n15\n00:00:47,000 --> 00:00:51,000\na programmer who said \"Elegance is not optional.\"\n\n16\n00:00:51,000 --> 00:00:54,000\nAnd elegance encompasses a number of attributes,\n\n17\n00:00:54,000 --> 00:00:58,000\nor as they're sometimes called, \"ity.\"\n\n18\n00:00:58,000 --> 00:01:02,000\nThat is, things that end in i-t-y like clarity,\n\n19\n00:01:02,000 --> 00:01:06,000\nsimplicity, and generality are all part of elegance.\n\n20\n00:01:06,000 --> 00:01:09,000\nWe can think of our program as occupying a point\n\n21\n00:01:09,000 --> 00:01:13,000\nin this multidimensional space, and we'd really like it to be\n\n22\n00:01:13,000 --> 00:01:17,000\nover here on the right where the correctness is high,\n\n23\n00:01:17,000 --> 00:01:20,000\nalthough correctness doesn't have to be 100%.\n\n24\n00:01:20,000 --> 00:01:24,000\nWe all use programs that crash occasionally, and the programs are still useful to us.\n\n25\n00:01:24,000 --> 00:01:28,000\nAnd then over time, the program evolves and moves in some of these directions.\n\n26\n00:01:28,000 --> 00:01:31,000\nIf the program is too slow, then we have to move it up\n\n27\n00:01:31,000 --> 00:01:34,000\nalong the efficiency direction,\n\n28\n00:01:34,000 --> 00:01:38,000\nso we have to re-architect it and move it up to make it faster.\n\n29\n00:01:38,000 --> 00:01:41,000\nOver time, we want to add more features to our program,\n\n30\n00:01:41,000 --> 00:01:46,000\nso say for a poker program we want to deal with \n\n31\n00:01:46,000 --> 00:01:50,000\nwild cards, or we want to deal with having to deal with ties,\n\n32\n00:01:50,000 --> 00:01:53,000\nand so we move out along the feature dimension\n\n33\n00:01:53,000 --> 00:01:56,000\nand move that program to a new space.\n\n34\n00:01:56,000 --> 00:02:00,000\nAnd then sometimes we think about moving the program to a new point \n\n35\n00:02:00,000 --> 00:02:04,000\nin the space of elegance, so moving along the elegance dimension\n\n36\n00:02:04,000 --> 00:02:09,000\nwithout increasing the correctness or features or efficiency.\n\n37\n00:02:09,000 --> 00:02:13,000\nAnd in some sense you  might think \"Well, that's not really doing anything.\"\n\n38\n00:02:13,000 --> 00:02:18,000\n\"Changing the elegance isn't gaining you any of these features.\"\n\n39\n00:02:18,000 --> 00:02:21,000\nBut what it is gaining you is nothing right now,\n\n40\n00:02:21,000 --> 00:02:23,000\nbut it's gaining you something for the future.\n\n41\n00:02:23,000 --> 00:02:27,000\nA program that is more elegant is easier to maintain,\n\n42\n00:02:27,000 --> 00:02:30,000\neasier to change, and so what you're doing\n\n43\n00:02:30,000 --> 00:02:33,000\nis you're buying time in the future by making the program\n\n44\n00:02:33,000 --> 00:02:35,000\neasier to maintain today.\n\n45\n00:02:35,000 --> 00:02:39,000\nNow, when I think of a point in this multidimensional space, \n\n46\n00:02:39,000 --> 00:02:42,000\nhere we have correctness, and we're up against the right edge\n\n47\n00:02:42,000 --> 00:02:45,000\nbut maybe not quite all the way to the right edge,\n\n48\n00:02:45,000 --> 00:02:47,000\nand similarly with all these other features.\n\n49\n00:02:47,000 --> 00:02:50,000\nNow, Voltaire was not a programmer, \n\n50\n00:02:50,000 --> 00:02:54,000\nbut he gave some very good advice to programmers and engineers.\n\n51\n00:02:54,000 --> 00:02:58,000\nHe said, \"The best is the enemy of the good,\"\n\n52\n00:02:58,000 --> 00:03:02,000\nand so what Voltaire meant by this is if you're striving for perfection,\n\n53\n00:03:02,000 --> 00:03:04,000\nthen you may waste too much time.\n\n54\n00:03:04,000 --> 00:03:07,000\nYou may make a bad engineering tradeoff to say \n\n55\n00:03:07,000 --> 00:03:09,000\n\"I'm going to have to get to 100% correctness,\n\n56\n00:03:09,000 --> 00:03:12,000\nand I'm going to spend so much time doing that when I could have been doing something else.\"\n\n57\n00:03:12,000 --> 00:03:18,000\n\"I could have been adding more features or adding other attributes to the program.\"\n\n58\n00:03:18,000 --> 00:03:22,000\nSo you  have to learn to be a good engineer and make good tradeoffs.\n\n59\n00:03:22,000 --> 00:03:25,000\nFor any change you make in this multidimensional space,\n\n60\n00:03:25,000 --> 00:03:28,000\nany improvement you make in any of the dimensions,\n\n61\n00:03:28,000 --> 00:03:30,000\nthere's a benefit to that. \n\n62\n00:03:30,000 --> 00:03:34,000\nYou make the program more correct or more featureful or more efficient.\n\n63\n00:03:34,000 --> 00:03:37,000\nBut there's also a cost. It takes you time to do that.\n\n64\n00:03:37,000 --> 00:03:39,000\nAnd you have to learn to make the right tradeoffs and say\n\n65\n00:03:39,000 --> 00:03:41,000\n\"What do I need most?\"\n\n66\n00:03:41,000 --> 00:03:44,000\n\"Which direction do I need to move, or am I done?\"\n\n67\n00:03:44,000 --> 00:03:46,000\n\"Do I not have to move anymore?\"\n\n", "id": 8006}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjHPgw", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/8007", "type": "Nugget", "id": 8007}, {"nuggetType": "lecture", "name": "Representing Hands Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "ba9645d0-7d06-47ec-90d1-5817d2424ade", "name": "cs212_unit1_02_s_Representing-Hands", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGME-DA", "youtube_id": "9FiSLK53VCg", "youtube_state": "done", "path": "Course/cs212/Media/8001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Norvig] My answer is I think these first 2 are both quite good.\n\n2\n00:00:04,000 --> 00:00:06,000\nEither of them would work just fine.\n\n3\n00:00:06,000 --> 00:00:13,000\nThe set one I think would work great for a regular deck of cards with 52 cards,\n\n4\n00:00:13,000 --> 00:00:16,000\nbut it might not work well if you had wild cards \n\n5\n00:00:16,000 --> 00:00:20,000\nor if you were playing with a big shoe of 2 decks.\n\n6\n00:00:20,000 --> 00:00:23,000\nThen you might have 2 of the exact same card,\n\n7\n00:00:23,000 --> 00:00:25,000\nand then a set can't represent that.\n\n8\n00:00:25,000 --> 00:00:28,000\nThis string has all the information, and so you could deal with that,\n\n9\n00:00:28,000 --> 00:00:32,000\nbut at some point you're going to want to break this string up into 5 individual cards.\n\n10\n00:00:32,000 --> 00:00:34,000\nIt's just easier to have that done right from the start\n\n11\n00:00:34,000 --> 00:00:37,000\nrather than have to do the operation on it.\n\n", "id": 8001}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBipRgw", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/9001", "type": "Nugget", "id": 9001}, {"nuggetType": "lecture", "name": "Making Changes", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "96253d60-7979-4828-bbee-1a716130aa88", "name": "cs212_unit1_19_q_Making-Changes", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGNmwAgw", "youtube_id": "Gzozd-qXEfA", "youtube_state": "done", "path": "Course/cs212/Media/39001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nSo I've added 1 more test,\n\n2\n00:00:02,000 --> 00:00:05,000\nbut I've added a bunch of new hands,\n\n3\n00:00:05,000 --> 00:00:07,000\nand since it seemed to be getting complicated,\n\n4\n00:00:07,000 --> 00:00:10,000\nI documented what each hand is.\n\n5\n00:00:10,000 --> 00:00:14,000\nAnd the key point here is one particular hand\n\n6\n00:00:14,000 --> 00:00:17,000\nor one particular set of rankings which is a straight\n\n7\n00:00:17,000 --> 00:00:20,000\nthat goes from ace through 5.\n\n8\n00:00:20,000 --> 00:00:23,000\nAn ace, 2, 3, 4, 5. \n\n9\n00:00:23,000 --> 00:00:26,000\nIt's almost a straight flush, but we just missed, but that's not important.\n\n10\n00:00:26,000 --> 00:00:28,000\nWhat's important is that it's a straight\n\n11\n00:00:28,000 --> 00:00:30,000\nand that the ace is low,\n\n12\n00:00:30,000 --> 00:00:34,000\nand this is the only hand or the only set of rankings\n\n13\n00:00:34,000 --> 00:00:38,000\nin which the ace counts as a low card rather than a high card,\n\n14\n00:00:38,000 --> 00:00:42,000\nand in our program, we'll mess that up in 2 ways.\n\n15\n00:00:42,000 --> 00:00:46,000\nOne is we won't even recognize this as a straight\n\n16\n00:00:46,000 --> 00:00:50,000\nbecause we're counting the ace as being a 14, not as being a 1,\n\n17\n00:00:50,000 --> 00:00:52,000\nso we won't know that it's a straight, and secondly,\n\n18\n00:00:52,000 --> 00:00:56,000\neven if we did, we'd want to count the 5 as being the high card \n\n19\n00:00:56,000 --> 00:00:58,000\nin this hand, not the ace.\n\n20\n00:00:58,000 --> 00:01:00,000\nWe've got to come up with something to deal with that,\n\n21\n00:01:00,000 --> 00:01:03,000\nso let's see, what are the possibilities?\n\n22\n00:01:03,000 --> 00:01:06,000\nWell, perhaps we want to modify the function straight.\n\n23\n00:01:06,000 --> 00:01:10,000\nWe also want to return the correct hand rank for this hand,\n\n24\n00:01:10,000 --> 00:01:13,000\nso maybe we have to modify the function hand rank.\n\n25\n00:01:13,000 --> 00:01:19,000\nAnd third, the card ranks probably have to change as well.\n\n26\n00:01:19,000 --> 00:01:22,000\nWe want the card ranks for this hand to have\n\n27\n00:01:22,000 --> 00:01:28,000\na 1 for the straight rather than a 14.\n\n28\n00:01:28,000 --> 00:01:34,000\nAnd what do you think about the prospects of making 3 changes?\n\n29\n00:01:34,000 --> 00:01:41,000\nWould you say that that's okay because the changes that you envision making\n\n30\n00:01:41,000 --> 00:01:45,000\nseem to be small ones to the 3 functions?\n\n31\n00:01:45,000 --> 00:01:52,000\nWould you say it's okay regardless of the size of the change?\n\n32\n00:01:52,000 --> 00:01:56,000\nThat's just the way it is. We have to put up with it.\n\n33\n00:01:56,000 --> 00:02:01,000\nOr would you say we should be able to do better?\n\n34\n00:02:01,000 --> 00:02:04,000\nAnd we should look for a solution that doesn't require \n\n35\n00:02:04,000 --> 00:02:06,000\nchanging all 3 functions.\n\n36\n00:02:06,000 --> 00:02:08,000\nWhat would you vote for?\n\n", "id": 39001}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBirRgw", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/9003", "type": "Nugget", "id": 9003}, {"nuggetType": "lecture", "name": "Making Changes Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "f56ae433-13f6-4eae-aebf-9f6dca955b64", "name": "cs212_unit1_19_s_Making-Changes", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGMU-DA", "youtube_id": "tyK9cJgcw9A", "youtube_state": "done", "path": "Course/cs212/Media/8005", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nWell, my inclination was I think we can do better.\n\n2\n00:00:04,000 --> 00:00:07,000\nI listed 3 places where we could make a change,\n\n3\n00:00:07,000 --> 00:00:10,000\nbut it seems like we're really only changing 1 thing.\n\n4\n00:00:10,000 --> 00:00:14,000\nI mean, after all, it's really only one hand that we're dealing with.\n\n5\n00:00:14,000 --> 00:00:18,000\nI think we can do better by isolating that change,\n\n6\n00:00:18,000 --> 00:00:20,000\nand in general, that's what I want to try to do.\n\n7\n00:00:20,000 --> 00:00:23,000\nI want to be able to say that the amount of change\n\n8\n00:00:23,000 --> 00:00:27,000\nshould be proportional to the amount of change in the conceptualization,\n\n9\n00:00:27,000 --> 00:00:30,000\nand here there's only 1 change in the conceptualization\n\n10\n00:00:30,000 --> 00:00:33,000\nof what it means to be a straight with a low ace.\n\n11\n00:00:33,000 --> 00:00:37,000\nWe should be able to confine that change to 1 place in our program\n\n12\n00:00:37,000 --> 00:00:39,000\nrather than 3 places.\n\n", "id": 8005}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBisRgw", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/9004", "type": "Nugget", "id": 9004}, {"nuggetType": "lecture", "name": "What To Change Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "2aaca67f-037e-4e4c-ae90-ba8da758e9cb", "name": "cs212_unit1_20_s_What-to-Change", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGMG4Agw", "youtube_id": "B8S8z0qG-jU", "youtube_state": "done", "path": "Course/cs212/Media/40001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nAnd my answer is that only card ranks needs to change,\n\n2\n00:00:04,000 --> 00:00:07,000\nand let's see what we have to do to make that work.\n\n", "id": 40001}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBitRgw", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/9005", "type": "Nugget", "id": 9005}, {"nuggetType": "lecture", "name": "Using Max", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "9ab0654c-ee7d-45a3-b2f4-4b69fe1124f1", "name": "cs212_unit1_06_p_Using-Max", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGOmEAQw", "youtube_id": "tKqbrWoq-MI", "youtube_state": "done", "path": "Course/cs212/Media/17001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\n[Norvig] So now you understand how the key argument to max works,\n\n2\n00:00:03,000 --> 00:00:11,000\nand now let's assume that we've defined a function called hand_rank,\n\n3\n00:00:11,000 --> 00:00:16,000\nwhich takes a hand as input and returns some sort of a rank.\n\n4\n00:00:16,000 --> 00:00:22,000\nNow, given that, how would you write the definition of the function poker\n\n5\n00:00:22,000 --> 00:00:26,000\nto return the maximum hand according to the highest ranked?\n\n", "id": 17001}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiSTgw", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/10002", "type": "Nugget", "id": 10002}, {"nuggetType": "lecture", "name": "Wild West Poker", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "456feac3-34a5-41df-a54c-12d09fd2b7da", "name": "cs212_unit1_03_l_Wild-West-Poker", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGJFODA", "youtube_id": "4bpc2A3gIuc", "youtube_state": "processing", "path": "Course/cs212/Media/10001", "transcript": null, "id": 10001}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBj5VQw", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/11001", "type": "Nugget", "id": 11001}, {"nuggetType": "lecture", "name": "Poker Function", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "bf7ac605-ceed-4c6c-bee3-be8f4536a5cc", "name": "cs212_unit1_04_q_Poker-Function", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGOFdDA", "youtube_id": "Co7CLVyMIqg", "youtube_state": "done", "path": "Course/cs212/Media/12001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\n[Norvig] So now I'm ready to tackle the main function, poker.\n\n2\n00:00:03,000 --> 00:00:07,000\nAnd we said it takes as input a list of hands,\n\n3\n00:00:07,000 --> 00:00:10,000\nand it's going to return the best hand.\n\n4\n00:00:10,000 --> 00:00:13,000\nSo it takes as input the list, returns the best hand.\n\n5\n00:00:13,000 --> 00:00:16,000\nI haven't quite figured out how to write the function itself,\n\n6\n00:00:16,000 --> 00:00:19,000\nbut at least I've got the prototype going.\n\n7\n00:00:19,000 --> 00:00:24,000\nNow, out of a list of hands we want poker to return the highest ranking hand.\n\n8\n00:00:24,000 --> 00:00:28,000\nDo we know of something that will help us do that? Think about it.\n\n9\n00:00:28,000 --> 00:00:33,000\nDo you know of a built-in function in Python that selects the highest ranking item from a list?\n\n10\n00:00:33,000 --> 00:00:37,000\nIf you do, go ahead and give its name.\n\n", "id": 12001}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjJZQw", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/13001", "type": "Nugget", "id": 13001}, {"nuggetType": "lecture", "name": "Understanding Max", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "0164e4ab-b135-4098-82ca-7d0af5e95991", "name": "cs212_unit1_05_q_Understanding-Max", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGMI-DA", "youtube_id": "cfMjuVKCViI", "youtube_state": "done", "path": "Course/cs212/Media/8002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:08,000\n[Norvig] Just to make sure you understand max, tell me what these 2 calls will return.\n\n", "id": 8002}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiZdQw", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/15001", "type": "Nugget", "id": 15001}, {"nuggetType": "lecture", "name": "Summary", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "40111ee5-beb7-42ce-92fb-36a7b8909086", "name": "cs212_unit1_28_l_Summary", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGMg-DA", "youtube_id": "BEADCYTt0rE", "youtube_state": "done", "path": "Course/cs212/Media/8008", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nNow let's scroll down and look at the group function.\n\n2\n00:00:03,000 --> 00:00:07,000\nWhat group does is it takes a list of items\n\n3\n00:00:07,000 --> 00:00:11,000\nand then returns a list of counts of items and the item itself.\n\n4\n00:00:11,000 --> 00:00:14,000\nIt just goes through the set of items\n\n5\n00:00:14,000 --> 00:00:18,000\nand returns pairs of the count \n\n6\n00:00:18,000 --> 00:00:21,000\nand the set and then sorts them in reverse order\n\n7\n00:00:21,000 --> 00:00:23,000\nso that the highest comes first.\n\n8\n00:00:23,000 --> 00:00:26,000\nAnd now this returns a list of pairs,\n\n9\n00:00:26,000 --> 00:00:30,000\nand we'd like to turn that into a pair of lists,\n\n10\n00:00:30,000 --> 00:00:32,000\nand the unzip function does that.\n\n11\n00:00:32,000 --> 00:00:34,000\nIt's a little bit tricky.\n\n12\n00:00:34,000 --> 00:00:37,000\nYou have to look up the zip function and apply it\n\n13\n00:00:37,000 --> 00:00:41,000\nto the destructured list of the pairs,\n\n14\n00:00:41,000 --> 00:00:44,000\nbut rest assured that that just pulls out,\n\n15\n00:00:44,000 --> 00:00:49,000\nconverts a list of pairs into a pair of lists,\n\n16\n00:00:49,000 --> 00:00:52,000\nand we call that up here in order to get the right answer.\n\n17\n00:00:52,000 --> 00:00:54,000\nNow, I'm always thinking about refactoring.\n\n18\n00:00:54,000 --> 00:00:58,000\nI'm also always thinking of when are you done, and when is it time not to refactor anymore?\n\n19\n00:00:58,000 --> 00:01:02,000\nBut I was having so much fun with this, I just wanted to try one more possibility,\n\n20\n00:01:02,000 --> 00:01:05,000\nand that's to say rather than have a long case statement\n\n21\n00:01:05,000 --> 00:01:08,000\nof the different results, can we just have them in a look-up table?\n\n22\n00:01:08,000 --> 00:01:12,000\nAnd so what I did is I took all 7 of the partitions of the numbers\n\n23\n00:01:12,000 --> 00:01:17,000\nof the number 5 and put them into a table called \"count_rankings\"\n\n24\n00:01:17,000 --> 00:01:20,000\nand then had the corresponding poker ranking,\n\n25\n00:01:20,000 --> 00:01:25,000\n0 for a high card, 1 for a pair, 2 for two pair, and so on.\n\n26\n00:01:25,000 --> 00:01:31,000\nAnd now instead of having a statement here that's a long case statement\n\n27\n00:01:31,000 --> 00:01:35,000\nfor all of the 9 possibilities, I can just say\n\n28\n00:01:35,000 --> 00:01:39,000\nthat the result is the maximum of taking the counts,\n\n29\n00:01:39,000 --> 00:01:42,000\nlooking them up in this table, and that will give you a value\n\n30\n00:01:42,000 --> 00:01:45,000\nfor anything having to do with pairs or 3 or 4 of a kind.\n\n31\n00:01:45,000 --> 00:01:49,000\nAnd take the maximum of that, and this expression here,\n\n32\n00:01:49,000 --> 00:01:53,000\nwhich says 4 times straight plus 5 times flush.\n\n33\n00:01:53,000 --> 00:01:56,000\nNow, that might  seem a little confusing, but what that's doing is\n\n34\n00:01:56,000 --> 00:02:00,000\nit's using automatic conversion of booleans into integers\n\n35\n00:02:00,000 --> 00:02:03,000\nand saying if straight is true, that corresponds to 1,\n\n36\n00:02:03,000 --> 00:02:06,000\nand if false, that corresponds to 0.\n\n37\n00:02:06,000 --> 00:02:09,000\nSo if straight alone is true, that will give  you a 4,\n\n38\n00:02:09,000 --> 00:02:11,000\nand that's the right ranking for straight.\n\n39\n00:02:11,000 --> 00:02:16,000\nIf 5 alone is true, that will give you a 5, and that's the right ranking for flush.\n\n40\n00:02:16,000 --> 00:02:20,000\nAnd if straight and flush are true, that will give you a 9.\n\n41\n00:02:20,000 --> 00:02:24,000\nAnd what we had to do here, in the previous results\n\n42\n00:02:24,000 --> 00:02:28,000\nstraight flush was supposed to be 8, but it's okay if it's 9.\n\n43\n00:02:28,000 --> 00:02:30,000\nAll we have to do is take 5 of a kind and bump that up to 10,\n\n44\n00:02:30,000 --> 00:02:34,000\nand now we get the right rankings by taking the maximum of that.\n\n45\n00:02:34,000 --> 00:02:36,000\nWe still have to return the ranks to break the ties,\n\n46\n00:02:36,000 --> 00:02:40,000\nbut now in 1 line we did what took 9 lines before,\n\n47\n00:02:40,000 --> 00:02:42,000\nand you can decide is this what you like?\n\n48\n00:02:42,000 --> 00:02:44,000\nIt's nice and concise.\n\n49\n00:02:44,000 --> 00:02:48,000\nOr do you like the previous approach because it was more explicit?\n\n50\n00:02:48,000 --> 00:02:51,000\nAnd that's a question  of taste. It's up to you which one you prefer.\n\n51\n00:02:51,000 --> 00:02:54,000\nNow let's look at our lessons learned.\n\n52\n00:02:54,000 --> 00:02:57,000\nWe always start by understanding the problem.\n\n53\n00:02:57,000 --> 00:03:00,000\nLook at the specification. See if it makes sense.\n\n54\n00:03:00,000 --> 00:03:02,000\nIf it doesn't make sense, talk to people.\n\n55\n00:03:02,000 --> 00:03:06,000\nTry to figure it out. Consider different ways of trying to make sense of it.\n\n56\n00:03:06,000 --> 00:03:08,000\nThen define the pieces of the problem.\n\n57\n00:03:08,000 --> 00:03:13,000\nFor our problem we had cards and hands and ranks and suits and so on.\n\n58\n00:03:13,000 --> 00:03:17,000\nFigure out everything there is to represent in the problem.\n\n59\n00:03:17,000 --> 00:03:20,000\nAs much as you can, try to reuse the pieces that you have.\n\n60\n00:03:20,000 --> 00:03:22,000\nWe used the max function.\n\n61\n00:03:22,000 --> 00:03:24,000\nWe used the random shuffle function.\n\n62\n00:03:24,000 --> 00:03:27,000\nThose were sort of standard pieces that we already knew about.\n\n63\n00:03:27,000 --> 00:03:29,000\nMake sure you write tests.\n\n64\n00:03:29,000 --> 00:03:31,000\nYou don't know what you've done. \n\n65\n00:03:31,000 --> 00:03:34,000\nYou don't know what your program does unless you can specify it\n\n66\n00:03:34,000 --> 00:03:37,000\nboth in terms of the pieces that you're defining \n\n67\n00:03:37,000 --> 00:03:41,000\nand in terms of the test that tells you what is it that this program does?\n\n68\n00:03:41,000 --> 00:03:44,000\nAnd then explore the design space.\n\n69\n00:03:44,000 --> 00:03:47,000\nWe have many dimensions for the design space.\n\n70\n00:03:47,000 --> 00:03:52,000\nWe have to deal with correctness, with efficiency,\n\n71\n00:03:52,000 --> 00:03:54,000\nwith elegance, and with features.\n\n72\n00:03:54,000 --> 00:03:56,000\nDecide where in the design space you want to be.\n\n73\n00:03:56,000 --> 00:04:00,000\nKeep moving in the right direction, and use good taste to know when to stop.\n\n74\n00:04:00,000 --> 00:04:03,000\nI hope we've learned something from this.\n\n75\n00:04:03,000 --> 00:04:06,000\nNow let's take a look at some homework problems to really \n\n76\n00:04:06,000 --> 00:04:09,000\nreinforce these lessons learned. \n\n", "id": 8008}, "key": "agpzfnVkYWNpdHl1cj8LEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiDfQw", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/16003", "type": "Nugget", "id": 16003}, {"nuggetType": "lecture", "name": "Extreme Values", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "1fafaaf7-963c-40f9-813d-2debdd7304db", "name": "cs212_unit1_08_p_Extreme-Values", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGMplDA", "youtube_id": "sT5Wq-UyOPg", "youtube_state": "done", "path": "Course/cs212/Media/13002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\n[Norvig] One important principle of testing is to do extreme values.\n\n2\n00:00:03,000 --> 00:00:06,000\nSo in some sense, this is kind of an extreme value.\n\n3\n00:00:06,000 --> 00:00:09,000\nWe're testing 1 hand against itself.\n\n4\n00:00:09,000 --> 00:00:11,000\nBut there are other types of extreme values.\n\n5\n00:00:11,000 --> 00:00:15,000\nWhat if the list of hands that's passed to poker has only 1 item \n\n6\n00:00:15,000 --> 00:00:18,000\nor 0 items or 100 items?\n\n7\n00:00:18,000 --> 00:00:20,000\nWell, poker is not usually played as solitaire, \n\n8\n00:00:20,000 --> 00:00:24,000\nso there wouldn't be much point in having 1,\n\n9\n00:00:24,000 --> 00:00:26,000\nbut nothing in the specification rules it out.\n\n10\n00:00:26,000 --> 00:00:32,000\nSo add a test that checks when 1 hand plays that that 1 hand is the winner.\n\n11\n00:00:32,000 --> 00:00:34,000\nWhat about 0 hands?\n\n12\n00:00:34,000 --> 00:00:38,000\nThe specification doesn't say, but it does say that the function poker \n\n13\n00:00:38,000 --> 00:00:41,000\nis supposed to return a hand.\n\n14\n00:00:41,000 --> 00:00:45,000\nAnd if we pass it a list with nothing in it, then there's no hand to return.\n\n15\n00:00:45,000 --> 00:00:52,000\nSo I think the best thing to do is to make it clear that when we're passed 0 hands\n\n16\n00:00:52,000 --> 00:00:55,000\nthat that's going to be an error.\n\n17\n00:00:55,000 --> 00:00:57,000\nIf you wanted to, you could return the value none.\n\n18\n00:00:57,000 --> 00:00:59,000\nThat might be a reasonable thing to return.\n\n19\n00:00:59,000 --> 00:01:02,000\nBut I think the best thing to do is just to say that that's an error.\n\n20\n00:01:02,000 --> 00:01:04,000\nWe also want to have extreme values.\n\n21\n00:01:04,000 --> 00:01:07,000\nWhat if 100 people are playing poker at once,\n\n22\n00:01:07,000 --> 00:01:10,000\nif hands is a list of 100 different hands?\n\n23\n00:01:10,000 --> 00:01:12,000\nWe want to allow that too.\n\n24\n00:01:12,000 --> 00:01:20,000\nIt would be unusual, and we'd need a big deck of cards with 500 cards, but it could be done.\n\n25\n00:01:20,000 --> 00:01:29,000\nSo I want you to write tests to check for 1 player and to check for 100 players.\n\n", "id": 13002}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjqhAEM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/17002", "type": "Nugget", "id": 17002}, {"nuggetType": "lecture", "name": "Hand Rank Attempt Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "7467483c-8fb4-4702-9ab5-a4d0db57020b", "name": "cs212_unit1_09_s_Hand-Rank-Attempt", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGIqkAQw", "youtube_id": "lzPiuNv18bk", "youtube_state": "done", "path": "Course/cs212/Media/21002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\n[Norvig] And the answer is that it would, in fact, get some of the cases right.\n\n2\n00:00:05,000 --> 00:00:07,000\nIn fact, it would get many cases right.\n\n3\n00:00:07,000 --> 00:00:10,000\nIt would get all the test cases that we've seen so far correct\n\n4\n00:00:10,000 --> 00:00:14,000\nbecause in each one of those we can distinguish between 2 hands \n\n5\n00:00:14,000 --> 00:00:16,000\njust by a single number.\n\n6\n00:00:16,000 --> 00:00:22,000\nWe can distinguish that a full house is better than a straight\n\n7\n00:00:22,000 --> 00:00:26,000\njust because looking at the numbers that get returned.\n\n8\n00:00:26,000 --> 00:00:30,000\nFor a full house we would return a 6, and for a straight we would return a 4,\n\n9\n00:00:30,000 --> 00:00:35,000\nand we know 6 is greater than 4,\n\n10\n00:00:35,000 --> 00:00:39,000\nand so max would do its job and would give us the right answer.\n\n11\n00:00:39,000 --> 00:00:43,000\nBut it wouldn't give us the right answer in all cases.\n\n12\n00:00:43,000 --> 00:00:52,000\nSo for example, what happens if somebody had a pair of 10s and 3 other cards\n\n13\n00:00:52,000 --> 00:00:57,000\nand another player had a pair of 9s and 3 other cards?\n\n14\n00:00:57,000 --> 00:01:03,000\nWith what we had written so far, pair turns out to be ranking number 1,\n\n15\n00:01:03,000 --> 00:01:08,000\nand so the hand rank for this would be equal to 1\n\n16\n00:01:08,000 --> 00:01:11,000\nand the hand rank for this would be equal to 1,\n\n17\n00:01:11,000 --> 00:01:15,000\nand those would be the same and it wouldn't be able to choose between them.\n\n18\n00:01:15,000 --> 00:01:22,000\nBut we know that we want the pair of 10s to outrank the pair of 9s,\n\n19\n00:01:22,000 --> 00:01:25,000\nso we've got to come up with some way to make that comparison\n\n20\n00:01:25,000 --> 00:01:32,000\nso that we're able to distinguish between 2 rankings that are the same\n\n21\n00:01:32,000 --> 00:01:35,000\nin terms of what they're called.\n\n22\n00:01:35,000 --> 00:01:38,000\nThey're both called pairs, but they differ in what they are:\n\n23\n00:01:38,000 --> 00:01:41,000\na pair of 10s versus a pair of 9s.\n\n", "id": 21002}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjrhAEM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/17003", "type": "Nugget", "id": 17003}, {"nuggetType": "lecture", "name": "Using Max Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "48113c90-6bdc-4f39-a0c7-0c544044eddb", "name": "cs212_unit1_06_s_Using-Max", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGNGMAQw", "youtube_id": "jOOl0etWRg0", "youtube_state": "done", "path": "Course/cs212/Media/18001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\n[Norvig] And the answer is simple.\n\n2\n00:00:02,000 --> 00:00:10,000\nWe take the maximum out of all the hands, with the key equal to the hand_rank.\n\n3\n00:00:10,000 --> 00:00:12,000\nI like this definition because it's so simple--\n\n4\n00:00:12,000 --> 00:00:14,000\nthe whole body is just 1 line--\n\n5\n00:00:14,000 --> 00:00:19,000\nand also because it corresponds so closely to the problem specification.\n\n6\n00:00:19,000 --> 00:00:23,000\nThe specification says, return the highest ranking hand.\n\n7\n00:00:23,000 --> 00:00:28,000\nThe function definition says, return the max of the hands according to the hand_rank,\n\n8\n00:00:28,000 --> 00:00:30,000\nwhich is basically the same thing.\n\n9\n00:00:30,000 --> 00:00:33,000\nIt's easy to see that the implementation matches the specification.\n\n10\n00:00:33,000 --> 00:00:37,000\nNow, if we can just make the hand_rank function clear and correct, \n\n11\n00:00:37,000 --> 00:00:39,000\nwe'll be in great shape.\n\n12\n00:00:39,000 --> 00:00:43,000\nBut before moving on to defining hand_rank, which will be the most complex function\n\n13\n00:00:43,000 --> 00:00:46,000\nthat we will write, it's a good idea to think about how the functions will be used\n\n14\n00:00:46,000 --> 00:00:49,000\nand to write down some test cases.\n\n15\n00:00:49,000 --> 00:00:53,000\nThere are several ways to write tests in Python, and here's the simplest way I know.\n\n16\n00:00:53,000 --> 00:00:58,000\nThat is, we define and then call a function.\n\n17\n00:00:58,000 --> 00:01:04,000\nI'm calling the function here test, and test consists of some setup of some variables\n\n18\n00:01:04,000 --> 00:01:09,000\nand then some tests that I'm writing with the assert statement.\n\n19\n00:01:09,000 --> 00:01:12,000\nAn assert statement in Python, if you haven't seen that before, says,\n\n20\n00:01:12,000 --> 00:01:15,000\nI'm asserting that the following thing must be true.\n\n21\n00:01:15,000 --> 00:01:20,000\nAnd if it's not true, then the program will stop and print an error message.\n\n22\n00:01:20,000 --> 00:01:26,000\nIf it is true, it'll just move on, and if the tests pass--here I have only 1 test--\n\n23\n00:01:26,000 --> 00:01:30,000\nif that test passed, then we'll return tests pass and print that.\n\n", "id": 18001}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBi5lAEM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/19001", "type": "Nugget", "id": 19001}, {"nuggetType": "quiz", "name": "Poker Function", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiknAEM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/20004", "type": "Nugget", "id": 20004}, {"nuggetType": "lecture", "name": "Testing", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "ffcaeb67-5cb2-4d7f-ac17-98fbea55b6bf", "name": "cs212_unit1_07_p_Testing", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGKGcAQw", "youtube_id": "Srw2x5t4NgM", "youtube_state": "done", "path": "Course/cs212/Media/20001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\n[Norvig] What is the one test I have here?\n\n2\n00:00:02,000 --> 00:00:04,000\nFirst I've defined 3 hands.\n\n3\n00:00:04,000 --> 00:00:09,000\nsf stands for a straight flush, fk stands for 4 of a kind,\n\n4\n00:00:09,000 --> 00:00:13,000\nand fh stands for full house.\n\n5\n00:00:13,000 --> 00:00:18,000\nI've defined those by taking this string, splitting the string up on the spaces,\n\n6\n00:00:18,000 --> 00:00:24,000\nand so that will give me a list of 5 cards for each of these 3 possible hands.\n\n7\n00:00:24,000 --> 00:00:29,000\nAnd then I've asserted that when we play a game of poker between these 3 hands\n\n8\n00:00:29,000 --> 00:00:32,000\nthat the winning hand is the straight flush.\n\n9\n00:00:32,000 --> 00:00:37,000\nThe whole idea of having tests like this is a vital part of software development.\n\n10\n00:00:37,000 --> 00:00:42,000\nIt's important that each part of the specification gets turned into a piece of code\n\n11\n00:00:42,000 --> 00:00:44,000\nthat implements it and a test that tests it.\n\n12\n00:00:44,000 --> 00:00:46,000\nSo here we have only 1 test.\n\n13\n00:00:46,000 --> 00:00:52,000\nThis is a test that tests part of the implementation of the poker function.\n\n14\n00:00:52,000 --> 00:00:56,000\nIf you don't have tests like these, then you don't know when you're done,\n\n15\n00:00:56,000 --> 00:00:59,000\nand you won't know if you've done it right,\n\n16\n00:00:59,000 --> 00:01:03,000\nand you won't have confidence that any future changes might not be breaking something.\n\n17\n00:01:03,000 --> 00:01:07,000\nSo remember, to be a good programmer, you must be a good tester.\n\n18\n00:01:07,000 --> 00:01:10,000\nWrite your test cases and test them often.\n\n19\n00:01:10,000 --> 00:01:13,000\nI want you to add 2 more tests:\n\n20\n00:01:13,000 --> 00:01:22,000\n1 test that will test whether the winner between 4 of a kind and full house is correct--\n\n21\n00:01:22,000 --> 00:01:25,000\nand so what should that be? It should be 4 of a kind--\n\n22\n00:01:25,000 --> 00:01:29,000\nand another test that seems a little bit more trivial\n\n23\n00:01:29,000 --> 00:01:34,000\nbut testing if we have 2 copies of full house playing each other\n\n24\n00:01:34,000 --> 00:01:37,000\nthat full house indeed is the winner out of those 2.\n\n", "id": 20001}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiJpAEM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/21001", "type": "Nugget", "id": 21001}, {"nuggetType": "lecture", "name": "What To Change", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "3a6a57ab-b968-42f8-a3d6-d0a50e96c85f", "name": "cs212_unit1_20_q_What-to-Change", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGIukAQw", "youtube_id": "MfGOqij0-JY", "youtube_state": "done", "path": "Course/cs212/Media/21003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nSo what can we change?\n\n2\n00:00:03,000 --> 00:00:06,000\nDo we have to change the function poker?\n\n3\n00:00:06,000 --> 00:00:11,000\nDo we have to change the function hand rank?\n\n4\n00:00:11,000 --> 00:00:17,000\nDo we have to change the function card ranks?\n\n5\n00:00:17,000 --> 00:00:21,000\nOr the function straight?\n\n6\n00:00:21,000 --> 00:00:24,000\nNow, I said I wanted to get it down to changing 1 function,\n\n7\n00:00:24,000 --> 00:00:30,000\nbut that might not be possible, so select all the functions\n\n8\n00:00:30,000 --> 00:00:34,000\nthat you think are going to need changes in order to accommodate that ace-low straight.\n\n", "id": 21003}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiMpAEM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/21004", "type": "Nugget", "id": 21004}, {"nuggetType": "lecture", "name": "Extreme Values Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "4a5482ea-0908-48da-9f18-39a17d408c87", "name": "cs212_unit1_08_s_Extreme-Values", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGKpGDA", "youtube_id": "jKt1EnCVcFc", "youtube_state": "done", "path": "Course/cs212/Media/9002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Norvig] So here we have a test for 1 player, and I've chosen the straight flush.\n\n2\n00:00:04,000 --> 00:00:06,000\nI could have chosen anything.\n\n3\n00:00:06,000 --> 00:00:10,000\nI say when the straight flush plays solitaire, it wins.\n\n4\n00:00:10,000 --> 00:00:18,000\nHere I've chosen a list with 1 straight flush and 99 full houses,\n\n5\n00:00:18,000 --> 00:00:22,000\nand I say when 99 full houses play a straight flush, the straight flush wins.\n\n6\n00:00:22,000 --> 00:00:28,000\nYou may not know this notation, these types of operators in Python.\n\n7\n00:00:28,000 --> 00:00:32,000\nWe can take a list and multiply it by a number, and that just says\n\n8\n00:00:32,000 --> 00:00:34,000\nrepeat that list that many times.\n\n9\n00:00:34,000 --> 00:00:40,000\nSo 99 times a 1 element list is a 99 element list all with the same element,\n\n10\n00:00:40,000 --> 00:00:45,000\nand then we can add 2 lists together, and that just says concatenate them.\n\n11\n00:00:45,000 --> 00:00:50,000\nSo this 1 element joins in with these 99 elements to make a 100 element list.\n\n12\n00:00:50,000 --> 00:00:53,000\nThis is far from a complete test suite.\n\n13\n00:00:53,000 --> 00:00:58,000\nWe would really want much more complete coverage of tests.\n\n14\n00:00:58,000 --> 00:01:01,000\nPoker, we have 9 different rankings of the hands.\n\n15\n00:01:01,000 --> 00:01:04,000\nWe would want to have at least 1 for each of those,\n\n16\n00:01:04,000 --> 00:01:08,000\nso there would have to be at least 9 tests and probably many more tests than that\n\n17\n00:01:08,000 --> 00:01:10,000\nbefore we had real confidence that we got it right,\n\n18\n00:01:10,000 --> 00:01:17,000\nbut at least we got a start and we have some simple sanity tests within our test suite.\n\n", "id": 9002}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjxqwEM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/22001", "type": "Nugget", "id": 22001}, {"nuggetType": "lecture", "name": "Writing Hand Rank Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "185e0647-cffb-4e27-99a9-ddae2678e692", "name": "cs212_unit1_13_s_Writing-Hand-Rank", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGJp1DA", "youtube_id": "zMSF8qrGS7A", "youtube_state": "done", "path": "Course/cs212/Media/15002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\n[Norvig] So here's my solution. You can look at the code.\n\n2\n00:00:03,000 --> 00:00:06,000\nI think it's pretty self-explanatory, so I won't go through all the details.\n\n3\n00:00:06,000 --> 00:00:08,000\nI'll just mention a few things.\n\n4\n00:00:08,000 --> 00:00:14,000\nFirst of all, notice that it's returning a tuple consisting of the major rank\n\n5\n00:00:14,000 --> 00:00:17,000\nand then the tiebreakers, and it just goes through them all in order--\n\n6\n00:00:17,000 --> 00:00:20,000\n8, 7, 6, 5, 4, 3, 2, 1, 0.\n\n7\n00:00:20,000 --> 00:00:26,000\nAnd then the interesting part is, 1, how do you determine what major rank it is?\n\n8\n00:00:26,000 --> 00:00:31,000\nSo we test to see if it's a straight flush. Then it's number 8. That's a straight flush.\n\n9\n00:00:31,000 --> 00:00:35,000\nAnother example: If you have 3 of a kind and you also have 2 of a kind,\n\n10\n00:00:35,000 --> 00:00:37,000\nthen that's a full house, which is number 6.\n\n11\n00:00:37,000 --> 00:00:39,000\nAnd then what are the tiebreakers?\n\n12\n00:00:39,000 --> 00:00:43,000\nThey're the important cards first that are part of the thing.\n\n13\n00:00:43,000 --> 00:00:48,000\nSo with a full house the most important tiebreaker is the 3 of a kind,\n\n14\n00:00:48,000 --> 00:00:52,000\nand then the next most important is the 2 of a kind,\n\n15\n00:00:52,000 --> 00:00:57,000\nand we pick out what each one is, put them in that return value to break the ties.\n\n16\n00:00:57,000 --> 00:01:03,000\nAnd a final thing I'll note is that card_ranks is defined to return the ranks in sorted order.\n\n17\n00:01:03,000 --> 00:01:07,000\nso that, for example, when you have nothing, just returning the ranks,\n\n18\n00:01:07,000 --> 00:01:11,000\nthat means that the highest card is first and that's going to be the first tiebreaker,\n\n19\n00:01:11,000 --> 00:01:14,000\nthe next highest card is second and that's the next tiebreaker and so on.\n\n20\n00:01:14,000 --> 00:01:16,000\nAnd that's all you need to know.\n\n", "id": 15002}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjyqwEM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/22002", "type": "Nugget", "id": 22002}, {"nuggetType": "quiz", "name": "Understanding Max", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjzqwEM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/22003", "type": "Nugget", "id": 22003}, {"nuggetType": "lecture", "name": "Hand Rank Attempt", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "4c4bd932-bc84-4802-a53b-da9c800e4792", "name": "cs212_unit1_09_q_Hand-Rank-Attempt", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGMtlDA", "youtube_id": "in-TSV5KBBY", "youtube_state": "done", "path": "Course/cs212/Media/13003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\n[Norvig] I think it's a good time to return to hand_rank,\n\n2\n00:00:03,000 --> 00:00:06,000\nthe most complicated function we'll have to deal with.\n\n3\n00:00:06,000 --> 00:00:11,000\nWe know hand_rank takes a hand as input, but what does it return?\n\n4\n00:00:11,000 --> 00:00:14,000\nWe want it to return a value indicating the ranking of a hand,\n\n5\n00:00:14,000 --> 00:00:16,000\nbut we're not quite sure what that value should be.\n\n6\n00:00:16,000 --> 00:00:19,000\nIt has to be something that's comparable by max,\n\n7\n00:00:19,000 --> 00:00:22,000\nso, well, why not a number?\n\n8\n00:00:22,000 --> 00:00:26,000\nThere are 9 different types of hands that we know about,\n\n9\n00:00:26,000 --> 00:00:30,000\nfrom straight flush at the top to high card at the bottom,\n\n10\n00:00:30,000 --> 00:00:33,000\nand we can number them from, say, 0 to 8,\n\n11\n00:00:33,000 --> 00:00:36,000\nwith 8 being the highest for the straight flush.\n\n12\n00:00:36,000 --> 00:00:39,000\nSo here's a sketch of a solution.\n\n13\n00:00:39,000 --> 00:00:44,000\nWe know it's going to be important to look at ranks, so let's get them first.\n\n14\n00:00:44,000 --> 00:00:50,000\nWe can extract the ranks with our card_ranks function,\n\n15\n00:00:50,000 --> 00:00:55,000\nand then we can say first we want to check and see if we have a straight flush.\n\n16\n00:00:55,000 --> 00:01:04,000\nSo if the ranks form a straight and the cards form a flush,\n\n17\n00:01:04,000 --> 00:01:07,000\nthen we can return 8, the highest value.\n\n18\n00:01:07,000 --> 00:01:10,000\nOtherwise what's next?\n\n19\n00:01:10,000 --> 00:01:12,000\nFour of a kind.\n\n20\n00:01:12,000 --> 00:01:20,000\nAnd the only thing we need in kind is the rank, so I'm going to just pass that in.\n\n21\n00:01:20,000 --> 00:01:29,000\nIf the ranks form 4 of a kind, then return 7.\n\n22\n00:01:29,000 --> 00:01:31,000\nAnd we could go on from there.\n\n23\n00:01:31,000 --> 00:01:35,000\nI go through the cases 1 by 1.\n\n24\n00:01:35,000 --> 00:01:39,000\nWe have straight flush, we have 4 of a kind, \n\n25\n00:01:39,000 --> 00:01:43,000\nwe would next go to full house and then flush and so on.\n\n26\n00:01:43,000 --> 00:01:47,000\nThe question is, would this work?\n\n27\n00:01:47,000 --> 00:01:51,000\nIf we continued to flesh this out and we defined the 9 different cases\n\n28\n00:01:51,000 --> 00:01:56,000\nto return the numbers from 0 to 8, would that give us a definition of hand_rank\n\n29\n00:01:56,000 --> 00:01:59,000\nthat's a working program?\n\n30\n00:01:59,000 --> 00:02:04,000\nAnd I want you to tell me yes, it would work fine in all cases;\n\n31\n00:02:04,000 --> 00:02:10,000\nno, it would signal an error condition and crash the program;\n\n32\n00:02:10,000 --> 00:02:15,000\nno, it would get some inputs wrong and some of them right;\n\n33\n00:02:15,000 --> 00:02:21,000\nor no, it would get all the inputs wrong.\n\n34\n00:02:21,000 --> 00:02:23,000\nWhich do you think is correct?\n\n", "id": 13003}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjZswEM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/23001", "type": "Nugget", "id": 23001}, {"nuggetType": "lecture", "name": "Allmax Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "9ff7fd97-e302-4891-a8a1-c82f4ea8a1d1", "name": "cs212_unit1_23_s_allmax", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGOyEAQw", "youtube_id": "NU4nqTPANM0", "youtube_state": "done", "path": "Course/cs212/Media/17004", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nHere's what I'm going to do.\n\n2\n00:00:02,000 --> 00:00:04,000\nI'm going to start out by keeping track of the results in a list,\n\n3\n00:00:04,000 --> 00:00:06,000\nwhich is initially the empty list.\n\n4\n00:00:06,000 --> 00:00:08,000\nI'm keeping track of the max value.\n\n5\n00:00:08,000 --> 00:00:10,000\nInitially we don't have any.\n\n6\n00:00:10,000 --> 00:00:13,000\nNow, the key function, I'm either going to use the key function\n\n7\n00:00:13,000 --> 00:00:16,000\nyou provided me, or if you didn't,\n\n8\n00:00:16,000 --> 00:00:19,000\nI'm going to use the function that just maps\n\n9\n00:00:19,000 --> 00:00:22,000\nan argument to itself, and that's for this notation here.\n\n10\n00:00:22,000 --> 00:00:25,000\nLambda x maps to x means\n\n11\n00:00:25,000 --> 00:00:28,000\nthe function that maps the function to itself.\n\n12\n00:00:28,000 --> 00:00:30,000\nAnd then I'm going to go through the iterable. \n\n13\n00:00:30,000 --> 00:00:32,000\nFor each x, I come up with an x value, which I get \n\n14\n00:00:32,000 --> 00:00:37,000\nby applying the key, and if the x value\n\n15\n00:00:37,000 --> 00:00:39,000\nis greater than the max value so far,\n\n16\n00:00:39,000 --> 00:00:42,000\nor if I don't have a result yet at all,\n\n17\n00:00:42,000 --> 00:00:47,000\nand that would be the case if I'm at the first element of the iterable,\n\n18\n00:00:47,000 --> 00:00:51,000\nthen I want to create the result to be\n\n19\n00:00:51,000 --> 00:00:55,000\nthis list of the single item x,\n\n20\n00:00:55,000 --> 00:00:58,000\nthe value of the first one that I've looked at,\n\n21\n00:00:58,000 --> 00:01:01,000\nand I want to set the max value to be equal to that x value.\n\n22\n00:01:01,000 --> 00:01:06,000\nIf it's a tie, then I just want to append x onto the list of results \n\n23\n00:01:06,000 --> 00:01:09,000\nthat I've been building up all along.\n\n24\n00:01:09,000 --> 00:01:12,000\nAnd then at the end, I want to return the result.\n\n25\n00:01:12,000 --> 00:01:17,000\nNow, of course, I should write tests for this as well\n\n26\n00:01:17,000 --> 00:01:21,000\njust as I always did, and now that I have allmax\n\n27\n00:01:21,000 --> 00:01:25,000\nand I have my new version  of poker,\n\n28\n00:01:25,000 --> 00:01:29,000\nI've also got to write a new documentation string here.\n\n29\n00:01:29,000 --> 00:01:32,000\nI've written a new documentation string for poker\n\n30\n00:01:32,000 --> 00:01:34,000\nto say that it's returning a list of the winning hands\n\n31\n00:01:34,000 --> 00:01:37,000\nrather than a single winning hand.\n\n32\n00:01:37,000 --> 00:01:39,000\nI have the definition terms of allmax.\n\n33\n00:01:39,000 --> 00:01:42,000\nI should write more tests for allmax.\n\n34\n00:01:42,000 --> 00:01:46,000\nI should go back and change the tests for poker\n\n35\n00:01:46,000 --> 00:01:49,000\nso that instead of returning a single hand,\n\n36\n00:01:49,000 --> 00:01:53,000\nthey return a list of the single hand for the tests I have so far.\n\n37\n00:01:53,000 --> 00:01:56,000\nAnd then I should also add some more tests where there are some ties\n\n38\n00:01:56,000 --> 00:01:59,000\nand make sure that it handles that properly.\n\n39\n00:01:59,000 --> 00:02:03,000\nOnce I've done that, it looks like I'm done.\n\n", "id": 17004}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjcswEM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/23004", "type": "Nugget", "id": 23004}, {"nuggetType": "lecture", "name": "Deal Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "e4e11a4e-9304-43d6-bcec-a7dc6bc6e76e", "name": "cs212_unit1_24_s_Deal", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGJHIAgw", "youtube_id": "Qt8h6G3FFzM", "youtube_state": "done", "path": "Course/cs212/Media/42001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nOkay, here's my solution.\n\n2\n00:00:02,000 --> 00:00:05,000\nI define deal. It takes the number of hands and the number of cards in each hand.\n\n3\n00:00:05,000 --> 00:00:09,000\nAnd then I've also added in an optional parameter\n\n4\n00:00:09,000 --> 00:00:11,000\nto make the function a little bit more general.\n\n5\n00:00:11,000 --> 00:00:14,000\nHere I built up a normal poker deck\n\n6\n00:00:14,000 --> 00:00:18,000\nwith the 13 different ranks and 4 different suits.\n\n7\n00:00:18,000 --> 00:00:20,000\nI have a list comprehension that goes over both of them \n\n8\n00:00:20,000 --> 00:00:22,000\nand makes  a 52-card deck.\n\n9\n00:00:22,000 --> 00:00:25,000\nBut I provide that as a parameter because you might want to \n\n10\n00:00:25,000 --> 00:00:27,000\ndeal different types of decks.\n\n11\n00:00:27,000 --> 00:00:31,000\nIn other games like pinochle, you have a different number of cards.\n\n12\n00:00:31,000 --> 00:00:33,000\nI just want to make deal a little bit more general, so I provide that \n\n13\n00:00:33,000 --> 00:00:35,000\nas an optional parameter.\n\n14\n00:00:35,000 --> 00:00:38,000\nThen I randomly shuffle the deck, \n\n15\n00:00:38,000 --> 00:00:41,000\nand if you looked up in the random module, you see there is a function called shuffle.\n\n16\n00:00:41,000 --> 00:00:43,000\nThat's the one you want.\n\n17\n00:00:43,000 --> 00:00:46,000\nAnd then I go through, and for the number of hands\n\n18\n00:00:46,000 --> 00:00:49,000\nI take a slice out of the deck which has been shuffled\n\n19\n00:00:49,000 --> 00:00:52,000\nand accumulate that into the result list.\n\n20\n00:00:52,000 --> 00:00:54,000\nNow, let's look a little bit more carefully at exactly\n\n21\n00:00:54,000 --> 00:00:59,000\nwhat this expression here means, pulling out this slice.\n\n22\n00:00:59,000 --> 00:01:03,000\nI've got a deck of cards which have been shuffled,\n\n23\n00:01:03,000 --> 00:01:05,000\nso they're not in any particular order.\n\n24\n00:01:05,000 --> 00:01:12,000\nSay the 3 of clubs is first, and then the 7 of spades, and so on.\n\n25\n00:01:12,000 --> 00:01:16,000\nAnd now I want to pull out this slice out of the deck,\n\n26\n00:01:16,000 --> 00:01:22,000\nwhich is defined as the deck starting at n x i\n\n27\n00:01:22,000 --> 00:01:27,000\nand going up to n x (i + 1).\n\n28\n00:01:27,000 --> 00:01:30,000\nAnd we'll assume for now that n = 5.\n\n29\n00:01:30,000 --> 00:01:37,000\nWhen i = 0, then this will go from 0 to 5.\n\n30\n00:01:37,000 --> 00:01:40,000\nAnd we'll pull out the first 5 cards, 1, 2, 3, 4, 5.\n\n31\n00:01:40,000 --> 00:01:44,000\nThat slice will be the first element that we'll pull out.\n\n32\n00:01:44,000 --> 00:01:49,000\nNow when i is equal to 1, we're dealing to the second player,\n\n33\n00:01:49,000 --> 00:01:56,000\nand 5 x 1 is 5, 5 x 1 + 1 is 10,\n\n34\n00:01:56,000 --> 00:02:00,000\nand we'll pull out the next 5 cards.\n\n35\n00:02:00,000 --> 00:02:04,000\n1, 2, 3, 4, 5, and so on.\n\n36\n00:02:04,000 --> 00:02:09,000\nWe'll keep on going until we get  numhands different cards and return them in a list.\n\n37\n00:02:09,000 --> 00:02:11,000\nNow let's just make sure this works.\n\n38\n00:02:11,000 --> 00:02:15,000\nLet's print, and let's just deal out 2 hands.\n\n39\n00:02:15,000 --> 00:02:18,000\nAnd there we see we get 2 hands back.\n\n40\n00:02:18,000 --> 00:02:22,000\nThere are 2 total hands, and each of them has 5 cards.\n\n41\n00:02:22,000 --> 00:02:26,000\nIf we wanted to, we could deal different numbers of cards,\n\n42\n00:02:26,000 --> 00:02:30,000\nso here we deal 2 hands, and they each have 7 cards.\n\n", "id": 42001}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjdswEM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/23005", "type": "Nugget", "id": 23005}, {"nuggetType": "lecture", "name": "Fixing Card Rank", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "d7f7b885-1062-49e5-a07a-1ed289d45d41", "name": "cs212_unit1_15_p_Fixing-Card-Rank", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGNGJAgw", "youtube_id": "wM1f0yuLM8Q", "youtube_state": "done", "path": "Course/cs212/Media/34001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Norvig] Here's a definition of card_ranks that's almost right.\n\n2\n00:00:04,000 --> 00:00:08,000\nWe say what card_ranks does. It returns a list of the ranks sorted with higher first.\n\n3\n00:00:08,000 --> 00:00:11,000\nWe pulled the ranks out of the cards,\n\n4\n00:00:11,000 --> 00:00:17,000\nso here we're iterating over the cards and we're having 2 values: the rank and the suit.\n\n5\n00:00:17,000 --> 00:00:22,000\nAnd what this is doing is saying each card is a 2 value element,\n\n6\n00:00:22,000 --> 00:00:26,000\nand we can break down those 2 elements into the first and second,\n\n7\n00:00:26,000 --> 00:00:32,000\nthe one that has rank 0 and rank 1 or index 0 and index 1.\n\n8\n00:00:32,000 --> 00:00:36,000\nAnd so we're saying a card consists of a rank and a suit,\n\n9\n00:00:36,000 --> 00:00:40,000\nand we're only going to collect up the ranks and make that into a list.\n\n10\n00:00:40,000 --> 00:00:46,000\nSo ranks is the list of ranks, then we sorted it and we said we want to reverse sort\n\n11\n00:00:46,000 --> 00:00:50,000\nso that the higher comes first rather than the lower, and then we return the ranks.\n\n12\n00:00:50,000 --> 00:00:57,000\nThis is almost right, but the problem is if we just pull out the rank of each card as is,\n\n13\n00:00:57,000 --> 00:01:05,000\nthen the rank T for 10 is the highest because T comes alphabetically after A \n\n14\n00:01:05,000 --> 00:01:08,000\nand Q and all the other cards. But we don't want that.\n\n15\n00:01:08,000 --> 00:01:15,000\nInstead we want 10 to map to the number 10 and J to the number 11 and so on.\n\n16\n00:01:15,000 --> 00:01:18,000\nSo we're going to have to come up with a way of fixing that,\n\n17\n00:01:18,000 --> 00:01:21,000\ntaking these letters that we pulled out of the cards\n\n18\n00:01:21,000 --> 00:01:25,000\nand mapping them into an integer in the correct way.\n\n19\n00:01:25,000 --> 00:01:28,000\nSee if you can fix this definition of card_ranks\n\n20\n00:01:28,000 --> 00:01:33,000\nto correctly return a list of numbers, not a list of characters.\n\n", "id": 34001}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjDuwEM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/24003", "type": "Nugget", "id": 24003}, {"nuggetType": "lecture", "name": "Handling Ties Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "68a3d022-1d3d-46f8-becb-f607a1c97cfe", "name": "cs212_unit1_22_s_Handling-Ties", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGPpVDA", "youtube_id": "EsoR1ar85DM", "youtube_state": "done", "path": "Course/cs212/Media/11002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nWell, the answer is that changing hand_rank wouldn't help anything\n\n2\n00:00:03,000 --> 00:00:08,000\nbecause it really is a tie, and hand_rank really does return the same value.\n\n3\n00:00:08,000 --> 00:00:12,000\nIf we both have straight flushes ace high,\n\n4\n00:00:12,000 --> 00:00:15,000\nhand_rank should return exactly the same thing for both.\n\n5\n00:00:15,000 --> 00:00:18,000\nJust because we have different suits doesn't mean they should have a different hand_rank.\n\n6\n00:00:18,000 --> 00:00:22,000\nBut we could change poker to return\n\n7\n00:00:22,000 --> 00:00:26,000\na list of everybody that tied rather than arbitrarily choose one of them.\n\n8\n00:00:26,000 --> 00:00:30,000\nOr we could invent a new function, say, \n\n9\n00:00:30,000 --> 00:00:36,000\nwe might want the function \"poker_with_ties.\"\n\n10\n00:00:36,000 --> 00:00:38,000\nSo either of those would be okay.\n\n11\n00:00:38,000 --> 00:00:42,000\nI think the best is not to introduce this new function\n\n12\n00:00:42,000 --> 00:00:46,000\nbecause once we have that, who would really want the poker function?\n\n13\n00:00:46,000 --> 00:00:49,000\nWho would want to say \"Let's play a game of poker\n\n14\n00:00:49,000 --> 00:00:51,000\nwhere we don't do ties correctly?\"\n\n15\n00:00:51,000 --> 00:00:54,000\nI think we really want to handle ties correctly,\n\n16\n00:00:54,000 --> 00:00:58,000\nso I think that's the best approach of the 3,\n\n17\n00:00:58,000 --> 00:01:00,000\nbut either approach would do.\n\n", "id": 11002}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjEuwEM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/24004", "type": "Nugget", "id": 24004}, {"nuggetType": "lecture", "name": "Representing Rank", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "bc857ee0-3441-4149-94bd-08ff286316f2", "name": "cs212_unit1_10_q_Representing-Rank", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGMG7AQw", "youtube_id": "jAvhLRAsVNo", "youtube_state": "done", "path": "Course/cs212/Media/24001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Norvig] It looks like that means that we're going to have to use something more complicated\n\n2\n00:00:04,000 --> 00:00:08,000\nthan just this ranking from 0 to 8.\n\n3\n00:00:08,000 --> 00:00:11,000\nI'm going to propose a couple possibilities.\n\n4\n00:00:11,000 --> 00:00:19,000\nOne possibility would be to continue to return integers but to use bigger ones.\n\n5\n00:00:19,000 --> 00:00:23,000\nSo let's take an example of what we want to compare.\n\n6\n00:00:23,000 --> 00:00:26,000\nLet's say we have 2 hands that are 4 of a kind.\n\n7\n00:00:26,000 --> 00:00:35,000\nOne has four 9s and a 5, and the other one has four 3s and a 2.\n\n8\n00:00:35,000 --> 00:00:39,000\nWe want this hand to rank higher.\n\n9\n00:00:39,000 --> 00:00:45,000\nUnder the old formulation, they would both be ranked as a 7\n\n10\n00:00:45,000 --> 00:00:50,000\nbecause 7 is the rank for 4 of a kind.\n\n11\n00:00:50,000 --> 00:00:55,000\nSo if we want to change that to use a different type of result,\n\n12\n00:00:55,000 --> 00:00:59,000\nwe could use integers and we could say,\n\n13\n00:00:59,000 --> 00:01:11,000\nlet's say, 70905 and 70302,\n\n14\n00:01:11,000 --> 00:01:20,000\nso the 9 and the 5 to represent that this is 4 of a kind of 9s with a 5 left over\n\n15\n00:01:20,000 --> 00:01:24,000\nand the 3 and the 2 to say it's 4 of a kind of 3s with a 2 left over.\n\n16\n00:01:24,000 --> 00:01:27,000\nWe could use real numbers.\n\n17\n00:01:27,000 --> 00:01:36,000\nWe could say 7.0905 or 7.0302.\n\n18\n00:01:36,000 --> 00:01:39,000\nAnother possibility is we could use tuples.\n\n19\n00:01:39,000 --> 00:01:51,000\nWe could use 7, 9, 5 versus 7, 3, 2.\n\n20\n00:01:51,000 --> 00:01:54,000\nA tuple is just like a list, \n\n21\n00:01:54,000 --> 00:02:02,000\nexcept it can't be modified and it has a slightly different set of operations associated with it.\n\n22\n00:02:02,000 --> 00:02:08,000\nBut basically, it just means a grouping of 3 values in this case.\n\n23\n00:02:08,000 --> 00:02:15,000\nWhat I want you to tell me is out of these 3 possibilities,\n\n24\n00:02:15,000 --> 00:02:21,000\nwhich one of them would work at all\n\n25\n00:02:21,000 --> 00:02:26,000\nand which one of them seems best in terms of being most convenient\n\n26\n00:02:26,000 --> 00:02:28,000\nand easy to work with within our program?\n\n", "id": 24001}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBipwwEM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/25001", "type": "Nugget", "id": 25001}, {"nuggetType": "lecture", "name": "Refactoring", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "81c23862-1445-4e5a-b351-174fa32d924a", "name": "cs212_unit1_27_l_Refactoring", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGPtVDA", "youtube_id": "oroZM95FA-s", "youtube_state": "done", "path": "Course/cs212/Media/11003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nNow, for the moment I want to get back to this other idea\n\n2\n00:00:02,000 --> 00:00:05,000\nof moving along the elegance direction without changing\n\n3\n00:00:05,000 --> 00:00:09,000\nthe other dimensions, and that's often called \"refactoring.\"\n\n4\n00:00:09,000 --> 00:00:13,000\nThat is, we take a program, and we change it around\n\n5\n00:00:13,000 --> 00:00:16,000\nnot that it does something different but that it's clearer\n\n6\n00:00:16,000 --> 00:00:18,000\nand easier to maintain.\n\n7\n00:00:18,000 --> 00:00:21,000\nNow, here's a line from my hand_rank program\n\n8\n00:00:21,000 --> 00:00:24,000\nthat bothers me a little bit, and what bothers me here\n\n9\n00:00:24,000 --> 00:00:28,000\nis I'm repeating myself, so I'm asking\n\n10\n00:00:28,000 --> 00:00:31,000\ndo we have 3 of a kind in the ranks, and do we have 2 of a kind in the ranks?\n\n11\n00:00:31,000 --> 00:00:34,000\nOkay, if we do, that's a full house, and then what are we going to return?\n\n12\n00:00:34,000 --> 00:00:38,000\n6 is the marker for a full house, and then the 3 of a kind\n\n13\n00:00:38,000 --> 00:00:40,000\nand the 2 of a kind.\n\n14\n00:00:40,000 --> 00:00:43,000\nBut I'm repeating myself, and so that violates\n\n15\n00:00:43,000 --> 00:00:47,000\nwhat's known as the \"Don't repeat yourself\" principle\n\n16\n00:00:47,000 --> 00:00:49,000\nor sometimes called \"DRY.\"\n\n17\n00:00:49,000 --> 00:00:51,000\nI thought to myself is there a different way to do this?\n\n18\n00:00:51,000 --> 00:00:55,000\nCan I refactor my routine so that I'm not repeating myself,\n\n19\n00:00:55,000 --> 00:00:58,000\nso that I only have to say this once?\n\n20\n00:00:58,000 --> 00:01:01,000\nAnd in doing that, I came up with a different representation for a hand,\n\n21\n00:01:01,000 --> 00:01:03,000\nfor the ranks of a  hand.\n\n22\n00:01:03,000 --> 00:01:05,000\nConsider this hand. \n\n23\n00:01:05,000 --> 00:01:09,000\nWe have a 7, a 10, a 7, \n\n24\n00:01:09,000 --> 00:01:12,000\na 9, and another 7.\n\n25\n00:01:12,000 --> 00:01:16,000\nNow, in the representation we have so far--and note I'm leaving out\n\n26\n00:01:16,000 --> 00:01:18,000\nthe suits here, they don't matter--in the representation we have so far,\n\n27\n00:01:18,000 --> 00:01:20,000\nwe would sort these in order.\n\n28\n00:01:20,000 --> 00:01:22,000\nWe'd have the 10 and the 9 and the three 7s,\n\n29\n00:01:22,000 --> 00:01:24,000\nand then we'd go through and we'd say is there 3 of a kind,\n\n30\n00:01:24,000 --> 00:01:27,000\nis there 4 of a kind, is there 2 of a kind, and so on.\n\n31\n00:01:27,000 --> 00:01:29,000\nBut I want to come up now with a representation\n\n32\n00:01:29,000 --> 00:01:32,000\nthat takes into account everything we need to know about this hand,\n\n33\n00:01:32,000 --> 00:01:37,000\nand I can do that using this function that I'll call \"group.\"\n\n34\n00:01:37,000 --> 00:01:42,000\nWe group this hand, and group is going to return 2 values.\n\n35\n00:01:42,000 --> 00:01:46,000\nFirst it's going to return the counts for each of the different kinds\n\n36\n00:01:46,000 --> 00:01:50,000\nof card ranks, and so here\n\n37\n00:01:50,000 --> 00:01:55,000\nwe have three 7s and one 10 and one 9.\n\n38\n00:01:55,000 --> 00:01:57,000\nAnd those counts are going to be sorted biggest first.\n\n39\n00:01:57,000 --> 00:02:01,000\nAnd then the second value that groups is going to return\n\n40\n00:02:01,000 --> 00:02:04,000\nis the card ranks for each of these,\n\n41\n00:02:04,000 --> 00:02:07,000\nand so what did we have 3 of?\n\n42\n00:02:07,000 --> 00:02:09,000\nWe had three 7s. And what do we have 1 of?\n\n43\n00:02:09,000 --> 00:02:13,000\nWell, 10s and 9s, and we're going to put those in order of biggest first.\n\n44\n00:02:13,000 --> 00:02:17,000\nThis representation of taking this hand\n\n45\n00:02:17,000 --> 00:02:21,000\nand turning it into a counts and a list of ranks\n\n46\n00:02:21,000 --> 00:02:24,000\nis in some ways a better representation of exactly \n\n47\n00:02:24,000 --> 00:02:26,000\nhow a poker hand counts.\n\n48\n00:02:26,000 --> 00:02:30,000\nHere's the new hand_rank function using this new representation for hands.\n\n49\n00:02:30,000 --> 00:02:32,000\nWe call it in the same way. We pass in a hand.\n\n50\n00:02:32,000 --> 00:02:37,000\nAnd now we create the groups and pull out the counts and the ranks,\n\n51\n00:02:37,000 --> 00:02:40,000\nand then we do what we did before where we say \n\n52\n00:02:40,000 --> 00:02:43,000\nwe have to deal with the ace-high straight,\n\n53\n00:02:43,000 --> 00:02:46,000\nand so change the ranks if we have to.\n\n54\n00:02:46,000 --> 00:02:51,000\nAnd then similarly to before, we check to see if we have a straight or a flush,\n\n55\n00:02:51,000 --> 00:02:54,000\nand now we can check for what the results are, and here\n\n56\n00:02:54,000 --> 00:02:59,000\nwe're returning a single number, 0 through 9,\n\n57\n00:02:59,000 --> 00:03:01,000\nand in every case we return the ranks.\n\n58\n00:03:01,000 --> 00:03:03,000\nKnow that what we're doing here is we're actually \n\n59\n00:03:03,000 --> 00:03:05,000\nchanging  the signature of hand_rank.\n\n60\n00:03:05,000 --> 00:03:09,000\nThis version of hand_rank is going to return different results\n\n61\n00:03:09,000 --> 00:03:12,000\nthan the previous version of hand_rank, but that's okay \n\n62\n00:03:12,000 --> 00:03:16,000\nbecause it's still going to work in conjunction\n\n63\n00:03:16,000 --> 00:03:21,000\nwith our evaluation in that it's going to return the higher value\n\n64\n00:03:21,000 --> 00:03:24,000\nfor the higher hand, even though it's returning slightly different values.\n\n65\n00:03:24,000 --> 00:03:26,000\nWhy is it slightly different?\n\n66\n00:03:26,000 --> 00:03:29,000\nBecause we're only returning a single number,\n\n67\n00:03:29,000 --> 00:03:33,000\nand then we always return the set of ranks,\n\n68\n00:03:33,000 --> 00:03:35,000\nand those ranks are there even when they aren't needed,\n\n69\n00:03:35,000 --> 00:03:39,000\nso for example, when we have a straight, we don't really need all the cards in the ranks.\n\n70\n00:03:39,000 --> 00:03:42,000\nAnd in the previous version of hand_rank, we only return the high card.\n\n71\n00:03:42,000 --> 00:03:45,000\nHere we're returning all of them, and what we do\n\n72\n00:03:45,000 --> 00:03:50,000\nis we go through and we say, \"What are the counts?\"\n\n73\n00:03:50,000 --> 00:03:54,000\nIf the counts are just 5 of a kind, that's the highest.\n\n74\n00:03:54,000 --> 00:03:57,000\nOtherwise we check for straight and flush, like we did before.\n\n75\n00:03:57,000 --> 00:04:01,000\nOtherwise 4 of a kind, and the only way we can have 4 of a kind\n\n76\n00:04:01,000 --> 00:04:03,000\nis if the counts are 4 and 1.\n\n77\n00:04:03,000 --> 00:04:06,000\nOtherwise we check for a full house, and the only way we can have a full house\n\n78\n00:04:06,000 --> 00:04:08,000\nis if the counts are 3 and 2.\n\n79\n00:04:08,000 --> 00:04:10,000\nThen we look for flush and straight. Those are next in order.\n\n80\n00:04:10,000 --> 00:04:12,000\nThen we look for 3 of a kind.\n\n81\n00:04:12,000 --> 00:04:15,000\nThe only way to have 3 of a kind is 3, 1, 1.\n\n82\n00:04:15,000 --> 00:04:17,000\n2 pairs has to be 2, 2, 1.\n\n83\n00:04:17,000 --> 00:04:21,000\nOne pair has to be 2, 1, 1, 1.\n\n84\n00:04:21,000 --> 00:04:24,000\nAnd then high card would be 1, 1, 1, 1, 1,\n\n85\n00:04:24,000 --> 00:04:26,000\nbut we don't have to explicitly check for that.\n\n86\n00:04:26,000 --> 00:04:28,000\nWe just have 0 as the final value.\n\n87\n00:04:28,000 --> 00:04:30,000\nThis is simpler. We're not repeating ourselves.\n\n88\n00:04:30,000 --> 00:04:32,000\nWe have a nice representation here.\n\n89\n00:04:32,000 --> 00:04:36,000\nAlso, one thing that I really like about this representation\n\n90\n00:04:36,000 --> 00:04:39,000\nis it showed me a new fact about poker hands\n\n91\n00:04:39,000 --> 00:04:43,000\nthat I had never realized before, and that if we look at these values,\n\n92\n00:04:43,000 --> 00:04:48,000\n(5,) (4, 1) (3, 2) (3, 1, 1)  (2, 2, 1) (2, 1, 1, 1) \n\n93\n00:04:48,000 --> 00:04:51,000\nand then here--I haven't written it but it would be 1, 1, 1, 1, 1-- \n\n94\n00:04:51,000 --> 00:04:54,000\nthese are all the partitions of the number 5, \n\n95\n00:04:54,000 --> 00:04:57,000\nso in mathematics, a partition of an integer\n\n96\n00:04:57,000 --> 00:05:00,000\nis the set of numbers that add up to that integer.\n\n97\n00:05:00,000 --> 00:05:08,000\nAnd for the number 5, that partitions into 7 possible ways,\n\n98\n00:05:08,000 --> 00:05:14,000\nand it turns out that poker recognizes all 7 of those as a different thing.\n\n99\n00:05:14,000 --> 00:05:16,000\nPoker has a name for all the partitions,\n\n100\n00:05:16,000 --> 00:05:19,000\nand the even more amazing thing is look,\n\n101\n00:05:19,000 --> 00:05:21,000\nthey're in lexicographic order.\n\n102\n00:05:21,000 --> 00:05:24,000\nIf we sort the 7 partitions, they're in exactly \n\n103\n00:05:24,000 --> 00:05:26,000\nthe same order as the poker hands.\n\n104\n00:05:26,000 --> 00:05:28,000\n5 comes first, that's the highest.\n\n105\n00:05:28,000 --> 00:05:31,000\n4, 1 comes next. That's the next highest, and so on.\n\n106\n00:05:31,000 --> 00:05:34,000\nI never knew that before about the mapping between poker hands \n\n107\n00:05:34,000 --> 00:05:38,000\nand partitions, but this representation of hand rank makes it clear.\n\n", "id": 11003}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBirwwEM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/25003", "type": "Nugget", "id": 25003}, {"nuggetType": "lecture", "name": "Representing Rank Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "972a4c7f-e900-4fb6-839d-2718badeb4f9", "name": "cs212_unit1_10_s_Representing-Rank", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGJHLAQw", "youtube_id": "iu0bNs3KSdc", "youtube_state": "done", "path": "Course/cs212/Media/26001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\n[Norvig] And the answer is that all 3 of them would work just fine.\n\n2\n00:00:03,000 --> 00:00:05,000\nWe could make it work in all cases.\n\n3\n00:00:05,000 --> 00:00:07,000\nIt makes the necessary distinction.\n\n4\n00:00:07,000 --> 00:00:13,000\nAnd in each of these cases, the entries in this column \n\n5\n00:00:13,000 --> 00:00:16,000\nare greater than the entries in this column,\n\n6\n00:00:16,000 --> 00:00:18,000\nand so max could do the job.\n\n7\n00:00:18,000 --> 00:00:24,000\nBut it seems to me that the case with tuples is the most convenient.\n\n8\n00:00:24,000 --> 00:00:29,000\nHere with these integers or reals we'd have to be doing very complicated arithmetic\n\n9\n00:00:29,000 --> 00:00:34,000\nto add things up and then break them apart to make sure we got the right answer.\n\n10\n00:00:34,000 --> 00:00:36,000\nBut with the tuples it's simple.\n\n11\n00:00:36,000 --> 00:00:38,000\nWe just use a comma operator.\n\n12\n00:00:38,000 --> 00:00:44,000\nWe say start with a 7, add in what we have 4 of a kind in,\n\n13\n00:00:44,000 --> 00:00:50,000\nadd in what we have the remaining 1 card of, and that gives you the 3 values,\n\n14\n00:00:50,000 --> 00:00:53,000\nand we don't have to deal with any complicated arithmetic.\n\n15\n00:00:53,000 --> 00:00:59,000\nNow, if you aren't familiar with tuples, you might want a little bit of practice\n\n16\n00:00:59,000 --> 00:01:02,000\nto understand how they work.\n\n17\n00:01:02,000 --> 00:01:14,000\nWe said that 7, 9, 5 is greater than 7, 3, 2.\n\n18\n00:01:14,000 --> 00:01:18,000\nSo in other words, this expression is a true expression in Python.\n\n19\n00:01:18,000 --> 00:01:22,000\nAnd the way the evaluation works is you first look at the first element.\n\n20\n00:01:22,000 --> 00:01:25,000\nIf one of them is greater, then that element is greater.\n\n21\n00:01:25,000 --> 00:01:28,000\nIf they're the same, then you go on to the second element.\n\n22\n00:01:28,000 --> 00:01:32,000\nSo in this case, 7 is equal to 7 so we move on.\n\n23\n00:01:32,000 --> 00:01:38,000\n9 is greater than 3, and so that means this guy is greater than that guy.\n\n24\n00:01:38,000 --> 00:01:43,000\nYou may have seen a similar type of thing in ordering between strings.\n\n25\n00:01:43,000 --> 00:01:54,000\nSo we can have the string 'hello' and compare that to the string 'help',\n\n26\n00:01:54,000 --> 00:01:57,000\nand we do it in exactly the same way that we compare tuples.\n\n27\n00:01:57,000 --> 00:01:59,000\nWe go left to right.\n\n28\n00:01:59,000 --> 00:02:04,000\nH compares to h. They're the same, so we move on to the next character.\n\n29\n00:02:04,000 --> 00:02:08,000\nE compares to e. They're the same, so we move on to the next.\n\n30\n00:02:08,000 --> 00:02:11,000\nL is equal to l. Move on.\n\n31\n00:02:11,000 --> 00:02:17,000\nAnd here we have an l and a p, and p comes later in the alphabet than l,\n\n32\n00:02:17,000 --> 00:02:23,000\nso help would be greater than hello, or hello would be less than help.\n\n33\n00:02:23,000 --> 00:02:30,000\nThe same type of idea, and this is known as lexigraphic ordering.\n\n34\n00:02:30,000 --> 00:02:33,000\nIt's so called because lex meaning words.\n\n35\n00:02:33,000 --> 00:02:36,000\nThis is the way that words are ordered.\n\n36\n00:02:36,000 --> 00:02:39,000\nBut we use the same name when we're comparing strings\n\n37\n00:02:39,000 --> 00:02:43,000\nor when we're comparing lists of numbers or lists of any other type of value.\n\n", "id": 26001}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBj50gEM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/27001", "type": "Nugget", "id": 27001}, {"nuggetType": "quiz", "name": "Representing Hands", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjk2gEM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/28004", "type": "Nugget", "id": 28004}, {"nuggetType": "lecture", "name": "Testing Hand Rank", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "ad32a295-ecff-483b-8b22-00756005eaee", "name": "cs212_unit1_12_p_Testing-Hand-Rank", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGMK7AQw", "youtube_id": "nFoZSJvS1cQ", "youtube_state": "done", "path": "Course/cs212/Media/24002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\n[Norvig] Before we finish up the hand_rank function,\n\n2\n00:00:02,000 --> 00:00:05,000\nI'm going to go back to the tests and add some tests for it.\n\n3\n00:00:05,000 --> 00:00:12,000\nSo let's take our 3 sample hands here and write tests for each of them--\n\n4\n00:00:12,000 --> 00:00:18,000\nwrite what the hand_rank function should return for each of these 3 hands\n\n5\n00:00:18,000 --> 00:00:21,000\nand write a test that asserts that value.\n\n", "id": 24002}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjJ4gEM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/29001", "type": "Nugget", "id": 29001}, {"nuggetType": "lecture", "name": "Handling Ties", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "141c6c09-54fe-4ef3-8dc3-22755eb7aebd", "name": "cs212_unit1_22_q_Handling-Ties", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGKrDAQw", "youtube_id": "Npu50YbV-t8", "youtube_state": "done", "path": "Course/cs212/Media/25002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nSo now we're in pretty good shape, but there's one more thing that bothered me\n\n2\n00:00:03,000 --> 00:00:06,000\nin the initial specification,\n\n3\n00:00:06,000 --> 00:00:09,000\nand that was we said that if there's a tie, don't worry about it,\n\n4\n00:00:09,000 --> 00:00:13,000\nor we claim that there won't be any ties, but there could be.\n\n5\n00:00:13,000 --> 00:00:17,000\nAnd I would hate to have this program tell me I lost\n\n6\n00:00:17,000 --> 00:00:19,000\nwhen I actually tied.\n\n7\n00:00:19,000 --> 00:00:21,000\nI wouldn't mind it telling me I won when I actually tied,\n\n8\n00:00:21,000 --> 00:00:23,000\nbut I don't want it to tell me that I lost. \n\n9\n00:00:23,000 --> 00:00:27,000\nWhat if I finally got a straight flush, ace high,\n\n10\n00:00:27,000 --> 00:00:30,000\nonly to find that another player had exactly the same hand\n\n11\n00:00:30,000 --> 00:00:32,000\nbut in a different suit?\n\n12\n00:00:32,000 --> 00:00:35,000\nWell, if that happened in the Old West, you might expect some shots to be fired, \n\n13\n00:00:35,000 --> 00:00:38,000\nbut assuming there was no cheating going on, \n\n14\n00:00:38,000 --> 00:00:40,000\nthe 2 winners should split the pot equally.\n\n15\n00:00:40,000 --> 00:00:42,000\nThat's the way the rules of poker work.\n\n16\n00:00:42,000 --> 00:00:45,000\nAnd the way our program would work is\n\n17\n00:00:45,000 --> 00:00:50,000\nit would arbitrarily choose one of the maximums out of the 2 that tied.\n\n18\n00:00:50,000 --> 00:00:54,000\nThat doesn't seem fair, so to accommodate that idea,\n\n19\n00:00:54,000 --> 00:00:56,000\nwhat do you think we can do?\n\n20\n00:00:56,000 --> 00:01:01,000\nHow are we going to handle ties?\n\n21\n00:01:01,000 --> 00:01:06,000\nWe could change the function hand_rank.\n\n22\n00:01:06,000 --> 00:01:09,000\nWe could change the function poker,\n\n23\n00:01:09,000 --> 00:01:13,000\nor we could add a new function.\n\n24\n00:01:13,000 --> 00:01:16,000\nAnd check which ones you think would work okay\n\n25\n00:01:16,000 --> 00:01:22,000\nand which single one do you think would be best?\n\n", "id": 25002}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjK4gEM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/29002", "type": "Nugget", "id": 29002}, {"nuggetType": "lecture", "name": "Testing Hand Rank Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "8d959968-2113-44d9-ac20-afd374e954b1", "name": "cs212_unit1_12_s_Testing-Hand-Rank", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGMQ-DA", "youtube_id": "ZaTlwMrlpPQ", "youtube_state": "done", "path": "Course/cs212/Media/8004", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\n[Norvig] Here I've added the tests.\n\n2\n00:00:02,000 --> 00:00:07,000\nFor a straight flush the value is 8, the value for a straight flush,\n\n3\n00:00:07,000 --> 00:00:12,000\nfollowed by a 10, because 10 is the high card in this particular straight flush.\n\n4\n00:00:12,000 --> 00:00:18,000\nFor 4 of a kind the value is 7, indicating 4 of a kind,\n\n5\n00:00:18,000 --> 00:00:21,000\nthen a 9, indicating that we had four 9s, \n\n6\n00:00:21,000 --> 00:00:25,000\nand then another 7, indicating that the remaining card was the 7 of diamonds.\n\n7\n00:00:25,000 --> 00:00:31,000\nAnd for a full house the value is 6, 6 meaning full house,\n\n8\n00:00:31,000 --> 00:00:34,000\nfollowed by a 10, meaning that we had three 10s,\n\n9\n00:00:34,000 --> 00:00:37,000\nand a 7, meaning that we had two 7s.\n\n", "id": 8004}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBix6gEM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/30001", "type": "Nugget", "id": 30001}, {"nuggetType": "lecture", "name": "Writing Hand Rank", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "1f7ee367-1021-4cdf-beb5-e61bfea6b2e1", "name": "cs212_unit1_13_p_Writing-Hand-Rank", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGOLaAQw", "youtube_id": "D4e_XnQTaVo", "youtube_state": "done", "path": "Course/cs212/Media/28002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\n[Norvig] So now I'd like you to fill in the rest of the definition for hand_rank.\n\n2\n00:00:03,000 --> 00:00:06,000\nWe have the values for 8 and 7.\n\n3\n00:00:06,000 --> 00:00:13,000\nGo ahead and fill in the remaining tests and return tuples for the values from 6 down to 0.\n\n4\n00:00:13,000 --> 00:00:16,000\nThat will be the hardest assignment you've had yet.\n\n5\n00:00:16,000 --> 00:00:19,000\nIt might take you a little while to work on it.\n\n6\n00:00:19,000 --> 00:00:21,000\nMake sure you use the test cases, run the tests\n\n7\n00:00:21,000 --> 00:00:25,000\nto make sure you have your hand_rank function working properly.\n\n", "id": 28002}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiZ8gEM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/31001", "type": "Nugget", "id": 31001}, {"nuggetType": "lecture", "name": "Testing Card Rank", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "a5e229f7-0ea2-40ae-9a74-39fe732f161f", "name": "cs212_unit1_14_p_Testing-Card-Rank", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGNs2DA", "youtube_id": "rm6eZiL1J4E", "youtube_state": "done", "path": "Course/cs212/Media/7003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\n[Norvig] So let's go through the helper functions 1 by 1,\n\n2\n00:00:03,000 --> 00:00:08,000\nbut first let's go back to tests and add some tests.\n\n3\n00:00:08,000 --> 00:00:11,000\nLet's work on the card_ranks function first.\n\n4\n00:00:11,000 --> 00:00:19,000\nAnd what I want you to do is add tests for each of the 3 cards that we've specified here\n\n5\n00:00:19,000 --> 00:00:21,000\nto say what the card ranks should be.\n\n", "id": 7003}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiB-gEM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/32001", "type": "Nugget", "id": 32001}, {"nuggetType": "lecture", "name": "Straight And Flush", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "8dba5f84-71af-484b-8a8d-c4d210c2032e", "name": "cs212_unit1_16_p_Straight-and-Flush", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGKGZAgw", "youtube_id": "iO0c05snk0Y", "youtube_state": "done", "path": "Course/cs212/Media/36001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:06,000\n[Norvig] Okay, now let's go on to the straight and flush functions.\n\n2\n00:00:06,000 --> 00:00:09,000\nThe first thing to do, of course, is to add more tests.\n\n3\n00:00:09,000 --> 00:00:13,000\nIn this case, I won't make you write them. I'm going to write them myself.\n\n4\n00:00:13,000 --> 00:00:15,000\nI've written 4 tests here.\n\n5\n00:00:15,000 --> 00:00:18,000\nI should be much more exhaustive than this, but I wanted to have 1 true \n\n6\n00:00:18,000 --> 00:00:21,000\nand 1 false for each of the 2 cases.\n\n7\n00:00:21,000 --> 00:00:28,000\nRemember a straight takes as input a list of ranks, not a hand or list of cards.\n\n8\n00:00:28,000 --> 00:00:33,000\nAnd so 9, 8, 7, 6, 5, yes, that is a straight.\n\n9\n00:00:33,000 --> 00:00:40,000\n9, 8, 8, 6, 5. That's got a pair; it's not a straight, and so that should be false.\n\n10\n00:00:40,000 --> 00:00:45,000\nAs for flushes, the straight flush which had all clubs, that should be true.\n\n11\n00:00:45,000 --> 00:00:47,000\nThat should be a flush.\n\n12\n00:00:47,000 --> 00:00:52,000\nAnd the 4 of a kind which had all 4 different suits should not be a flush.\n\n13\n00:00:52,000 --> 00:00:56,000\nI've written the tests. Now it's your turn to write the code.\n\n14\n00:00:56,000 --> 00:00:59,000\nI want you to write straight, which should return True\n\n15\n00:00:59,000 --> 00:01:03,000\nif the ordered ranks form a 5-card straight and False otherwise,\n\n16\n00:01:03,000 --> 00:01:07,000\nand flush, which should return True if all the cards in the hand have the same suit\n\n17\n00:01:07,000 --> 00:01:09,000\nand False otherwise.\n\n", "id": 36001}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiC-gEM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/32002", "type": "Nugget", "id": 32002}, {"nuggetType": "lecture", "name": "Testing Card Rank Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "adaed4b8-1cc5-4e55-b578-28f9ec823a4e", "name": "cs212_unit1_14_s_Testing-Card-Rank", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGNqzAQw", "youtube_id": "9msSH_cs9T0", "youtube_state": "done", "path": "Course/cs212/Media/23002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\n[Norvig] And here's the answer.\n\n2\n00:00:02,000 --> 00:00:07,000\nFor the straight flush the values of the card_ranks is 10, 9, 8, 7, 6.\n\n3\n00:00:07,000 --> 00:00:09,000\nHere was the straight flush, and notice what we've done\n\n4\n00:00:09,000 --> 00:00:13,000\nis we put the order with the highest cards first\n\n5\n00:00:13,000 --> 00:00:15,000\nbecause we're going to use these ranks for tiebreakers,\n\n6\n00:00:15,000 --> 00:00:18,000\nand in tiebreakers it's the highest first that counts.\n\n7\n00:00:18,000 --> 00:00:23,000\nSo we always want the result from card_ranks to be sorted highest first.\n\n8\n00:00:23,000 --> 00:00:29,000\nFor 4 of a kind, four 9s and a 7. That looks right. The 9s come before the 7.\n\n9\n00:00:29,000 --> 00:00:36,000\nFor full house, three 10s and two 7s. 10s come before the 7 and again, that looks right.\n\n", "id": 23002}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjpgQIM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/33001", "type": "Nugget", "id": 33001}, {"nuggetType": "lecture", "name": "Ace Low Straight", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "e7e96515-a25f-4930-8762-036e043a6e6b", "name": "cs212_unit1_21_p_Ace-Low-Straight", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGNuzAQw", "youtube_id": "l_8aOykv72M", "youtube_state": "done", "path": "Course/cs212/Media/23003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nSo here's the function card_ranks.\n\n2\n00:00:02,000 --> 00:00:06,000\nIt takes a hand, pulls out the ranking for each hand,\n\n3\n00:00:06,000 --> 00:00:10,000\nmakes that into a number, sorts them so that the  highest numbers are first,\n\n4\n00:00:10,000 --> 00:00:13,000\nand returns that, and now I'm claiming\n\n5\n00:00:13,000 --> 00:00:16,000\nthat we can make 1 change to card_ranks\n\n6\n00:00:16,000 --> 00:00:21,000\nso that it will handle the case of an ace-low straight\n\n7\n00:00:21,000 --> 00:00:24,000\nand come up with the right representation for that\n\n8\n00:00:24,000 --> 00:00:29,000\nin terms of ranks that will allow the rest of the program to function properly.\n\n9\n00:00:29,000 --> 00:00:31,000\nCan  you come up with that change?\n\n", "id": 23003}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjqgQIM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/33002", "type": "Nugget", "id": 33002}, {"nuggetType": "lecture", "name": "Fixing Card Rank Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "669dcd0e-e987-4ef5-9721-501fe990ff83", "name": "cs212_unit1_15_s_Fixing-Card-Rank", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGMxlDA", "youtube_id": "JX2ohZ1WMKE", "youtube_state": "done", "path": "Course/cs212/Media/13004", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\n[Norvig] Here's one way to do it.\n\n2\n00:00:02,000 --> 00:00:05,000\nWhat I've done is I only changed this line, and instead of just returning r\n\n3\n00:00:05,000 --> 00:00:14,000\nfor r, s in hand, I've taken r and used it as a lookup into this value.\n\n4\n00:00:14,000 --> 00:00:20,000\nSo I'm saying when r is the letter 2, I look up into this string and say\n\n5\n00:00:20,000 --> 00:00:24,000\nwhat index is 2 in there and where is it?\n\n6\n00:00:24,000 --> 00:00:27,000\nYou start counting at 0, so it's 0, 1, 2.\n\n7\n00:00:27,000 --> 00:00:31,000\nSo the character 2 would map to the number 2,\n\n8\n00:00:31,000 --> 00:00:36,000\nthe character T would map to the number 10, J to 11,\n\n9\n00:00:36,000 --> 00:00:41,000\nQ to 12, K to 13, and A to 14.\n\n10\n00:00:41,000 --> 00:00:47,000\nSo that gives me a correct mapping from characters to index numbers,\n\n11\n00:00:47,000 --> 00:00:50,000\nand they'll all come out right. I could have done it other ways.\n\n12\n00:00:50,000 --> 00:00:54,000\nI could have had a dictionary lookup, I could have had a long set of if-then-else statements,\n\n13\n00:00:54,000 --> 00:00:56,000\nbut this seemed the simplest way to do it.\n\n", "id": 13004}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBi5kQIM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/35001", "type": "Nugget", "id": 35001}, {"nuggetType": "lecture", "name": "Ace Low Straight Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "c7ab02a5-2302-482d-8ca2-5eb93c3131d8", "name": "cs212_unit1_21_s_Ace-Low-Straight", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGKnAAgw", "youtube_id": "qnaXho5ye0s", "youtube_state": "done", "path": "Course/cs212/Media/41001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nWell, here's what I came up with.\n\n2\n00:00:02,000 --> 00:00:05,000\nInstead of returning the ranks directly,\n\n3\n00:00:05,000 --> 00:00:09,000\nwhat I want to do is say under 1 condition,\n\n4\n00:00:09,000 --> 00:00:16,000\nif the ranks is equal to this ace-high or ace-low straight, rather,\n\n5\n00:00:16,000 --> 00:00:18,000\nthen I want to fix it.\n\n6\n00:00:18,000 --> 00:00:20,000\nOtherwise I want to leave it the same.\n\n7\n00:00:20,000 --> 00:00:24,000\nIf the ranks is equal to this ace low--and we'll fill in that later--\n\n8\n00:00:24,000 --> 00:00:29,000\nif that's the case, then what I want to return\n\n9\n00:00:29,000 --> 00:00:34,000\nis a fix, which is 5, 4, 3, 2, 1.\n\n10\n00:00:34,000 --> 00:00:38,000\nThis is the only time when I'm returning a 1 as a value.\n\n11\n00:00:38,000 --> 00:00:42,000\nUp here we had 2 and above.\n\n12\n00:00:42,000 --> 00:00:44,000\nThere was no 1 that you could return.\n\n13\n00:00:44,000 --> 00:00:46,000\nBut now an ace, instead of being 14, \n\n14\n00:00:46,000 --> 00:00:49,000\nwe're going to count the ace as a 1,\n\n15\n00:00:49,000 --> 00:00:52,000\nand we're going to do that only in the case \n\n16\n00:00:52,000 --> 00:00:57,000\nwhen the ranks that we had so far was an ace, 2, 3, 4, 5,\n\n17\n00:00:57,000 --> 00:01:01,000\nwhich according to the sorting would have come out as 14,\n\n18\n00:01:01,000 --> 00:01:07,000\n5, 4, 3, 2.\n\n19\n00:01:07,000 --> 00:01:12,000\nAnd I got the syntax backwards here when I did the insertion,\n\n20\n00:01:12,000 --> 00:01:18,000\nso what I want to say is return 5, 4, 3, 2, 1,\n\n21\n00:01:18,000 --> 00:01:21,000\nwhich would be the correct ordering for where we want to put an ace\n\n22\n00:01:21,000 --> 00:01:26,000\nif we had ace, 2, 3, 4, 5, as our hand.\n\n23\n00:01:26,000 --> 00:01:31,000\nAnd for any other hand, just return the ranks as is.\n\n24\n00:01:31,000 --> 00:01:34,000\nAnd my claim is that this will make everything work because \n\n25\n00:01:34,000 --> 00:01:38,000\nnow we've taken this one hand that was problematic,\n\n26\n00:01:38,000 --> 00:01:42,000\nand we corrected it by making an ace be a 1 instead of a 14,\n\n27\n00:01:42,000 --> 00:01:47,000\nand now all the other comparisons of ranks will work out properly.\n\n28\n00:01:47,000 --> 00:01:52,000\nThis will, in fact, be a straight because 5 - 1 is 4, and there's 5 different cards.\n\n29\n00:01:52,000 --> 00:01:57,000\nAnd the high value in here will, in fact, be a 5 and not the ace.\n\n", "id": 41001}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBi6kQIM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/35002", "type": "Nugget", "id": 35002}, {"nuggetType": "lecture", "name": "Straight And Flush Solution", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "1c1927c5-525f-4b8e-94f9-e40308887a4c", "name": "cs212_unit1_16_s_Straight-and-Flush", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGKKcAQw", "youtube_id": "IHrEE9tWS-A", "youtube_state": "done", "path": "Course/cs212/Media/20002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\n[Norvig] And here is 1 answer.\n\n2\n00:00:02,000 --> 00:00:07,000\nFor straight what I did was I said it's a straight if the difference between the max\n\n3\n00:00:07,000 --> 00:00:09,000\nand the minimum is 4--\n\n4\n00:00:09,000 --> 00:00:14,000\nsay 2, 3, 4, 5, 6; 6 minus 2 is 4--\n\n5\n00:00:14,000 --> 00:00:17,000\nand also if all the cards are different.\n\n6\n00:00:17,000 --> 00:00:22,000\nSo make a set out of the ranks, and if the length of that set is 5,\n\n7\n00:00:22,000 --> 00:00:28,000\nthat means if there's 5 different ranks that have a max versus minimum of 4,\n\n8\n00:00:28,000 --> 00:00:30,000\nthen it's a straight.\n\n9\n00:00:30,000 --> 00:00:34,000\nFor flush what I did is I extracted out the suits, \n\n10\n00:00:34,000 --> 00:00:40,000\niterated over the hand with the r and s being the 2 characters within each card,\n\n11\n00:00:40,000 --> 00:00:44,000\ncollected up all the s into this list, \n\n12\n00:00:44,000 --> 00:00:49,000\nand then I asked, is the length of that set equal to 1?\n\n", "id": 20002}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiJoQIM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/37001", "type": "Nugget", "id": 37001}, {"nuggetType": "lecture", "name": "Two Pair Function", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "dcb8d46c-0dae-4ade-8975-147f55180111", "name": "cs212_unit1_18_p_Two-Pair-Function", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGLJtDA", "youtube_id": "6BM-DxCzYDQ", "youtube_state": "done", "path": "Course/cs212/Media/14002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nNow I want you to define the function two pair,\n\n2\n00:00:02,000 --> 00:00:06,000\nwhich takes ranks as input, and if there are two pair\n\n3\n00:00:06,000 --> 00:00:09,000\nwithin the ranks, then it should return\n\n4\n00:00:09,000 --> 00:00:12,000\na 2-tuple of the highest and lowest rank,\n\n5\n00:00:12,000 --> 00:00:15,000\nand if there aren't 2 pairs, it should return none.\n\n", "id": 14002}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjxqAIM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/38001", "type": "Nugget", "id": 38001}, {"nuggetType": "lecture", "name": "Deal", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "100e904b-6690-4819-b0b8-8565c7e4d40c", "name": "cs212_unit1_24_p_Deal", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGIJ9DA", "youtube_id": "pwwl_DQU9gM", "youtube_state": "done", "path": "Course/cs212/Media/16002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nOkay, time for a quiz, and in this quiz\n\n2\n00:00:02,000 --> 00:00:05,000\nI'm going to ask you to write a function,\n\n3\n00:00:05,000 --> 00:00:09,000\nand what I'm going to ask you to do is to define the function called deal,\n\n4\n00:00:09,000 --> 00:00:13,000\nwhich will deal out some hands so that we can actually play some poker.\n\n5\n00:00:13,000 --> 00:00:16,000\nAnd you should give this deal function the number of hands\n\n6\n00:00:16,000 --> 00:00:18,000\nthat you want dealt, the number of players,\n\n7\n00:00:18,000 --> 00:00:21,000\nand we'll optionally allow you to define\n\n8\n00:00:21,000 --> 00:00:24,000\nthe number of cards in each hand.\n\n9\n00:00:24,000 --> 00:00:27,000\nFor regular poker that will be 5, but there's other games\n\n10\n00:00:27,000 --> 00:00:30,000\nwhere you deal out 7 or other numbers of cards.\n\n11\n00:00:30,000 --> 00:00:33,000\nWe want to allow for that too to make the deal function\n\n12\n00:00:33,000 --> 00:00:35,000\na little bit more general.\n\n13\n00:00:35,000 --> 00:00:38,000\nYour task is to define the function with that signature\n\n14\n00:00:38,000 --> 00:00:45,000\nthat would return a list of numhands different poker hands.\n\n15\n00:00:45,000 --> 00:00:49,000\nEach one has n cards, and I'll give you a  hint\n\n16\n00:00:49,000 --> 00:00:53,000\nthat you should look at the Python module\n\n17\n00:00:53,000 --> 00:00:56,000\ncalled \"random\" and look up to see if there's something there \n\n18\n00:00:56,000 --> 00:00:59,000\nthat can help  you shuffle the cards, so what deal will do \n\n19\n00:00:59,000 --> 00:01:04,000\nis take a deck, shuffle it, and then deal out those hands\n\n20\n00:01:04,000 --> 00:01:06,000\nand return the value of those hands.\n\n", "id": 16002}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjasAIM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/39002", "type": "Nugget", "id": 39002}, {"nuggetType": "lecture", "name": "Allmax", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "media": {"dotsub_id": "34767028-3fba-4403-8cdf-c88e8f36b093", "name": "cs212_unit1_23_p_allmax", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGJt1DA", "youtube_id": "1JJ_YvNTaTw", "youtube_state": "done", "path": "Course/cs212/Media/15003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nHere's the function poker.\n\n2\n00:00:02,000 --> 00:00:06,000\nWhat am I going to do to change this to  handle ties?\n\n3\n00:00:06,000 --> 00:00:08,000\nIt seems like it might be complicated.\n\n4\n00:00:08,000 --> 00:00:10,000\nWe didn't talk about ties here at all.\n\n5\n00:00:10,000 --> 00:00:13,000\nThe max function doesn't do anything about ties.\n\n6\n00:00:13,000 --> 00:00:15,000\nHow are we going to handle that?\n\n7\n00:00:15,000 --> 00:00:19,000\nWell, here's my suggestion for how to handle it.\n\n8\n00:00:19,000 --> 00:00:23,000\nI'm just going to say we  had the right idea here\n\n9\n00:00:23,000 --> 00:00:26,000\nthat we want to go through all the hands, and we want to \n\n10\n00:00:26,000 --> 00:00:28,000\ncompare them using hand_rank.\n\n11\n00:00:28,000 --> 00:00:31,000\nBut instead of returning the one maximum,\n\n12\n00:00:31,000 --> 00:00:36,000\nlet's invent a new function called allmax\n\n13\n00:00:36,000 --> 00:00:41,000\nthat returns a collection--it could be a set or a list--of all the maximums.\n\n14\n00:00:41,000 --> 00:00:43,000\nAnd now let's have you write the function allmax.\n\n15\n00:00:43,000 --> 00:00:48,000\nIt takes an input, which is a list or something else that you can iterate over,\n\n16\n00:00:48,000 --> 00:00:52,000\nand Python uses the word \"iterable\" to refer to that.\n\n17\n00:00:52,000 --> 00:00:57,000\nAnd it optionally takes a keyword argument just the way that max did.\n\n18\n00:00:57,000 --> 00:00:59,000\nMax can take a key or not.\n\n19\n00:00:59,000 --> 00:01:02,000\nAnd what we want to do is return, and let's make a commitment\n\n20\n00:01:02,000 --> 00:01:04,000\nand say we're going to return a list\n\n21\n00:01:04,000 --> 00:01:06,000\nof all the items in the iterable\n\n22\n00:01:06,000 --> 00:01:09,000\nthat are equal to the max of the iterable.\n\n", "id": 15003}, "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjCuAIM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/40002", "type": "Nugget", "id": 40002}, {"nuggetType": "program", "name": "Using Max", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjDuAIM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/40003", "suppliedCode": "# -----------\n# User Instructions\n# \n# Modify the poker() function to return the best hand \n# according to the hand_rank() function. Since we have\n# not yet written hand_rank(), clicking RUN won't do \n# anything, but clicking SUBMIT will let you know if you\n# have gotten the problem right. \n#\n\ndef poker(hands):\n    \"Return the best hand: poker([hand,...]) => hand\"\n    return max(#enter your code here. Your return should call max())\n\ndef hand_rank(hand):\n    return None # we will be changing this later.", "type": "Nugget", "id": 40003}, {"nuggetType": "program", "name": "Testing", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiB9wIM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/48001", "suppliedCode": "# -----------\n# User Instructions\n# \n# Modify the test() function to include two new test cases:\n# 1) four of a kind (fk) vs. full house (fh) returns fk.\n# 2) full house (fh) vs. full house (fh) returns fh.\n#\n# Since the program is still incomplete, clicking RUN won't do \n# anything, but clicking SUBMIT will let you know if you\n# have gotten the problem right. \n\ndef poker(hands):\n    \"Return the best hand: poker([hand,...]) => hand\"\n    return max(hands, key=hand_rank)\n\ndef test():\n    \"Test cases for the functions in poker program\"\n    sf = \"6C 7C 8C 9C TC\".split() # => ['6C', '7C', '8C', '9C', 'TC']\n    fk = \"9D 9H 9S 9C 7D\".split() \n    fh = \"TD TC TH 7C 7D\".split()\n    assert poker([sf, fk, fh]) == sf\n    \n    # Add 2 new assert statements here. The first \n    # should check that when fk plays fh, fk \n    # is the winner. The second should confirm that\n    # fh playing against fh returns fh.\n    \nprint test()", "type": "Nugget", "id": 48001}, {"nuggetType": "quiz", "name": "Hand Rank Attempt", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiC9wIM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/48002", "type": "Nugget", "id": 48002}, {"nuggetType": "quiz", "name": "What To Change", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiD9wIM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/48003", "type": "Nugget", "id": 48003}, {"nuggetType": "program", "name": "Extreme Values", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjr_gIM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/49003", "suppliedCode": "# -----------\n# User Instructions\n# \n# Modify the test() function to include two new test cases:\n# 1) A single hand.\n# 2) 100 hands.\n#\n# Since the program is still incomplete, clicking RUN won't do \n# anything, but clicking SUBMIT will let you know if you\n# have gotten the problem right. \n\ndef poker(hands):\n    \"Return the best hand: poker([hand,...]) => hand\"\n    return max(hands, key=hand_rank)\n\ndef test():\n    \"Test cases for the functions in poker program\"\n    sf = \"6C 7C 8C 9C TC\".split() \n    fk = \"9D 9H 9S 9C 7D\".split() \n    fh = \"TD TC TH 7C 7D\".split()\n    assert poker([sf, fk, fh]) == sf\n    assert poker([fk, fh]) == fk\n    assert poker([fh, fh]) == fh\n    # Add 2 new assert statements here. The first \n    # should assert that when poker is called with a\n    # single hand, it returns that hand. The second \n    # should check for the case of 100 hands.\n    return 'tests pass'", "type": "Nugget", "id": 49003}, {"nuggetType": "program", "name": "Testing Hand Rank", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjThgMM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/50003", "suppliedCode": "# -----------\n# User Instructions\n# \n# Modify the test() function to include three new test cases.\n# These should assert that hand_rank gives the appropriate\n# output for the given straight flush, four of a kind, and\n# full house.\n#\n# For example, calling hand_rank on sf should output (8, 10)\n#\n# Since the program is still incomplete, clicking RUN won't do \n# anything, but clicking SUBMIT will let you know if you\n# have gotten the problem right. \n\ndef poker(hands):\n    \"Return the best hand: poker([hand,...]) => hand\"\n    return max(hands, key=hand_rank)\n\ndef test():\n    \"Test cases for the functions in poker program\"\n    sf = \"6C 7C 8C 9C TC\".split() # Straight Flush\n    fk = \"9D 9H 9S 9C 7D\".split() # Four of a Kind\n    fh = \"TD TC TH 7C 7D\".split() # Full House\n    assert poker([sf, fk, fh]) == sf\n    assert poker([fk, fh]) == fk\n    assert poker([fh, fh]) == fh\n    assert poker([sf]) == sf\n    assert poker([sf] + 99*[fh]) == sf\n    #\n    # add 3 new assert statements here.\n    #\nprint test()", "type": "Nugget", "id": 50003}, {"nuggetType": "program", "name": "Testing Card Rank", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjUhgMM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/50004", "suppliedCode": "# -----------\n# User Instructions\n# \n# Modify the test() function to include three new test cases.\n# These should assert that card_ranks gives the appropriate\n# output for the given straight flush, four of a kind, and\n# full house.\n#\n# For example, calling card_ranks on sf should output  \n# [10, 9, 8, 7, 6]\n#\n# Since the program is still incomplete, clicking RUN won't do \n# anything, but clicking SUBMIT will let you know if you\n# have gotten the problem right. \n\ndef test():\n    \"Test cases for the functions in poker program\"\n    sf = \"6C 7C 8C 9C TC\".split() # Straight Flush\n    fk = \"9D 9H 9S 9C 7D\".split() # Four of a Kind\n    fh = \"TD TC TH 7C 7D\".split() # Full House\n    assert poker([sf, fk, fh]) == sf\n    assert poker([fk, fh]) == fk\n    assert poker([fh, fh]) == fh\n    assert poker([sf]) == sf\n    assert poker([sf] + 99*[fh]) == sf\n    assert hand_rank(sf) == (8, 10)\n    assert hand_rank(fk) == (7, 9, 7)\n    assert hand_rank(fh) == (6, 10, 7)\n    return 'tests pass'\n", "type": "Nugget", "id": 50004}, {"nuggetType": "quiz", "name": "Representing Rank", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBi5jgMM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/51001", "type": "Nugget", "id": 51001}, {"nuggetType": "program", "name": "Straight And Flush", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBi6jgMM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/51002", "suppliedCode": "# -----------\n# User Instructions\n# \n# Define two functions, straight(ranks) and flush(hand).\n# Keep in mind that ranks will be ordered from largest\n# to smallest.\n\ndef straight(ranks):\n    \"Return True if the ordered ranks form a 5-card straight.\"\n    # Your code here.\n\ndef flush(hand):\n    \"Return True if all the cards have the same suit.\"\n    # Your code here.\n    \ndef test():\n    \"Test cases for the functions in poker program.\"\n    sf = \"6C 7C 8C 9C TC\".split()\n    fk = \"9D 9H 9S 9C 7D\".split()\n    fh = \"TD TC TH 7C 7D\".split()\n    assert straight([9, 8, 7, 6, 5]) == True\n    assert straight([9, 8, 8, 6, 5]) == False\n    assert flush(sf) == True\n    assert flush(fk) == False\n    return 'tests pass'\n\nprint test()", "type": "Nugget", "id": 51002}, {"nuggetType": "program", "name": "Deal", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBi7jgMM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/51003", "suppliedCode": "# -----------\n# User Instructions\n# \n# Write a function, deal(numhands, n=5, deck), that \n# deals numhands hands with n cards each.\n#\n\nimport random # this will be a useful library for shuffling\n\n# This builds a deck of 52 cards. If you are unfamiliar\n# with this notation, check out Andy's supplemental video\n# on list comprehensions (you can find the link in the \n# Instructor Comments box below).\n\nmydeck = [r+s for r in '23456789TJQKA' for s in 'SHDC'] \n\ndef deal(numhands, n=5, deck=mydeck):\n    # Your code here.", "type": "Nugget", "id": 51003}, {"nuggetType": "quiz", "name": "Hand Frequencies", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiilgMM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/52002", "type": "Nugget", "id": 52002}, {"nuggetType": "program", "name": "Writing Hand Rank", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjxpQMM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/54001", "suppliedCode": "# -----------\n# User Instructions\n# \n# Modify the hand_rank function so that it returns the\n# correct output for the remaining hand types, which are:\n# full house, flush, straight, three of a kind, two pair,\n# pair, and high card hands. \n# \n# Do this by completing each return statement below.\n#\n# You may assume the following behavior of each function:\n#\n# straight(ranks): returns True if the hand is a straight.\n# flush(hand):     returns True if the hand is a flush.\n# kind(n, ranks):  returns the first rank that the hand has\n#                  exactly n of. For A hand with 4 sevens \n#                  this function would return 7.\n# two_pair(ranks): if there is a two pair, this function \n#                  returns their corresponding ranks as a \n#                  tuple. For example, a hand with 2 twos\n#                  and 2 fours would cause this function\n#                  to return (4, 2).\n# card_ranks(hand) returns an ORDERED tuple of the ranks \n#                  in a hand (where the order goes from\n#                  highest to lowest rank). \n#\n# Since we are assuming that some functions are already\n# written, this code will not RUN. Clicking SUBMIT will \n# tell you if you are correct.\n\ndef poker(hands):\n    \"Return the best hand: poker([hand,...]) => hand\"\n    return max(hands, key=hand_rank)\n\ndef hand_rank(hand):\n    ranks = card_ranks(hand)\n    if straight(ranks) and flush(hand):            # straight flush\n        return (8, max(ranks))\n    elif kind(4, ranks):                           # 4 of a kind\n        return (7, kind(4, ranks), kind(1, ranks))\n    elif kind(3, ranks) and kind(2, ranks):        # full house\n        return # your code here\n    elif flush(hand):                              # flush\n        return # your code here\n    elif straight(ranks):                          # straight\n        return # your code here\n    elif kind(3, ranks):                           # 3 of a kind\n        return # your code here\n    elif two_pair(ranks):                          # 2 pair\n        return # your code here\n    elif kind(2, ranks):                           # kind\n        return # your code here\n    else:                                          # high card\n        return # your code here\n\ndef test():\n    \"Test cases for the functions in poker program\"\n    sf = \"6C 7C 8C 9C TC\".split() # Straight Flush\n    fk = \"9D 9H 9S 9C 7D\".split() # Four of a Kind\n    fh = \"TD TC TH 7C 7D\".split() # Full House\n    assert poker([sf, fk, fh]) == sf\n    assert poker([fk, fh]) == fk\n    assert poker([fh, fh]) == fh\n    assert poker([sf]) == sf\n    assert poker([sf] + 99*[fh]) == sf\n    assert hand_rank(sf) == (8, 10)\n    assert hand_rank(fk) == (7, 9, 7)\n    assert hand_rank(fh) == (6, 10, 7)\n    return 'tests pass'\n", "type": "Nugget", "id": 54001}, {"nuggetType": "quiz", "name": "Making Changes", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjDtQMM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/56003", "type": "Nugget", "id": 56003}, {"nuggetType": "program", "name": "Fixing Card Rank", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiRxQMM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/58001", "suppliedCode": "# -----------\n# User Instructions\n# \n# Modify the card_ranks() function so that cards with\n# rank of ten, jack, queen, king, or ace (T, J, Q, K, A)\n# are handled correctly. Do this by mapping 'T' to 10, \n# 'J' to 11, etc...\n\ndef card_ranks(cards):\n    \"Return a list of the ranks, sorted with higher first.\"\n    ranks = [r for r,s in cards]\n    ranks.sort(reverse=True)\n    return ranks\n\nprint card_ranks(['AC', '3D', '4S', 'KH']) #should output [14, 13, 4, 3]", "type": "Nugget", "id": 58001}, {"nuggetType": "program", "name": "Kind Function", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBj5zAMM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/59001", "suppliedCode": "# -----------\n# User Instructions\n# \n# Define a function, kind(n, ranks).\n\ndef kind(n, ranks):\n    \"\"\"Return the first rank that this hand has exactly n of.\n    Return None if there is no n-of-a-kind in the hand.\"\"\"\n    # Your code here.\n    \ndef test():\n    \"Test cases for the functions in poker program.\"\n    sf = \"6C 7C 8C 9C TC\".split() # Straight Flush\n    fk = \"9D 9H 9S 9C 7D\".split() # Four of a Kind\n    fh = \"TD TC TH 7C 7D\".split() # Full House\n    fkranks = card_ranks(fk)\n    tpranks = card_ranks(tp)\n    assert kind(4, fkranks) == 9\n    assert kind(3, fkranks) == None\n    assert kind(2, fkranks) == None\n    assert kind(1, fkranks) == 7\n    return 'tests pass'\n    \ndef card_ranks(hand):\n    \"Return a list of the ranks, sorted with higher first.\"\n    ranks = ['--23456789TJQKA'.index(r) for r, s in hand]\n    ranks.sort(reverse = True)\n    return ranks", "type": "Nugget", "id": 59001}, {"nuggetType": "program", "name": "Two Pair Function", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBjh1AMM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/60001", "suppliedCode": "# -----------\n# User Instructions\n# \n# Define a function, two_pair(ranks).\n\ndef two_pair(ranks):\n    \"\"\"If there are two pair, return the two ranks as a\n    tuple: (highest, lowest); otherwise return None.\"\"\"\n    # Your code here.\n\ndef kind(n, ranks):\n    \"\"\"Return the first rank that this hand has exactly n of.\n    Return None if there is no n-of-a-kind in the hand.\"\"\"\n    for r in ranks:\n        if ranks.count(r) == n: return r \n    return None\n\ndef test():\n    \"Test cases for the functions in poker program.\"\n    sf = \"6C 7C 8C 9C TC\".split() # Straight Flush\n    fk = \"9D 9H 9S 9C 7D\".split() # Four of a Kind\n    fh = \"TD TC TH 7C 7D\".split() # Full House\n    fkranks = card_ranks(fk)\n    tpranks = card_ranks(tp)\n    assert kind(4, fkranks) == 9\n    assert kind(3, fkranks) == None\n    assert kind(2, fkranks) == None\n    assert kind(1, fkranks) == 7\n    return 'tests pass'\n    \ndef card_ranks(hand):\n    \"Return a list of the ranks, sorted with higher first.\"\n    ranks = ['--23456789TJQKA'.index(r) for r, s in hand]\n    ranks.sort(reverse = True)\n    return ranks", "type": "Nugget", "id": 60001}, {"nuggetType": "program", "name": "Allmax", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBji1AMM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/60002", "suppliedCode": "# -----------\n# User Instructions\n# \n# Write a function, allmax(iterable, key=None), that returns\n# a list of all items equal to the max of the iterable, \n# according to the function specified by key. \n\ndef poker(hands):\n    \"Return a list of winning hands: poker([hand,...]) => [hand,...]\"\n    return allmax(hands, key=hand_rank)\n\ndef allmax(iterable, key=None):\n    \"Return a list of all items equal to the max of the iterable.\"\n    # Your code here.\n\ndef hand_rank(hand):\n    \"Return a value indicating the ranking of a hand.\"\n    ranks = card_ranks(hand) \n    if straight(ranks) and flush(hand):\n        return (8, max(ranks))\n    elif kind(4, ranks):\n        return (7, kind(4, ranks), kind(1, ranks))\n    elif kind(3, ranks) and kind(2, ranks):\n        return (6, kind(3, ranks), kind(2, ranks))\n    elif flush(hand):\n        return (5, ranks)\n    elif straight(ranks):\n        return (4, max(ranks))\n    elif kind(3, ranks):\n        return (3, kind(3, ranks), ranks)\n    elif two_pair(ranks):\n        return (2, two_pair(ranks), ranks)\n    elif kind(2, ranks):\n        return (1, kind(2, ranks), ranks)\n    else:\n        return (0, ranks)\n\ndef card_ranks(hand):\n    \"Return a list of the ranks, sorted with higher first.\"\n    ranks = ['--23456789TJQKA'.index(r) for r, s in hand]\n    ranks.sort(reverse = True)\n    return [5, 4, 3, 2, 1] if (ranks == [14, 5, 4, 3, 2]) else ranks\n\ndef flush(hand):\n    \"Return True if all the cards have the same suit.\"\n    suits = [s for r,s in hand]\n    return len(set(suits)) == 1\n\ndef straight(ranks):\n    \"Return True if the ordered ranks form a 5-card straight.\"\n    return (max(ranks)-min(ranks) == 4) and len(set(ranks)) == 5\n\ndef kind(n, ranks):\n    \"\"\"Return the first rank that this hand has exactly n-of-a-kind of.\n    Return None if there is no n-of-a-kind in the hand.\"\"\"\n    for r in ranks:\n        if ranks.count(r) == n: return r\n    return None\n\ndef two_pair(ranks):\n    \"If there are two pair here, return the two ranks of the two pairs, else None.\"\n    pair = kind(2, ranks)\n    lowpair = kind(2, list(reversed(ranks)))\n    if pair and lowpair != pair:\n        return (pair, lowpair)\n    else:\n        return None\n\ndef test():\n    \"Test cases for the functions in poker program.\"\n    sf1 = \"6C 7C 8C 9C TC\".split() # Straight Flush\n    sf2 = \"6D 7D 8D 9D TD\".split() # Straight Flush\n    fk = \"9D 9H 9S 9C 7D\".split() # Four of a Kind\n    fh = \"TD TC TH 7C 7D\".split() # Full House\n    assert poker([sf1, sf2, fk, fh]) == [sf1, sf2] \n    return 'tests pass'\n", "type": "Nugget", "id": 60002}, {"nuggetType": "program", "name": "Ace Low Straight", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiy5AMM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/62002", "suppliedCode": "# -----------\n# User Instructions\n# \n# Modify the card_ranks(hand) function so that a \n# straight with a low ace (A, 2, 3, 4, 5) will be\n# properly identified as a straight by the \n# straight() function.\n\ndef card_ranks(hand):\n    \"Return a list of the ranks, sorted with higher first.\"\n    ranks = ['--23456789TJQKA'.index(r) for r, s in hand]\n    ranks.sort(reverse = True)\n    return ranks\n\ndef straight(ranks):\n    \"Return True if the ordered ranks form a 5-card straight.\"\n    return (max(ranks)-min(ranks) == 4) and len(set(ranks)) == 5\n\ndef test():\n    \"Test cases for the functions in poker program.\"\n    sf = \"6C 7C 8C 9C TC\".split() # Straight Flush\n    fk = \"9D 9H 9S 9C 7D\".split() # Four of a Kind\n    fh = \"TD TC TH 7C 7D\".split() # Full House\n    al = \"AC 2D 4H 3D 5S\".split() # Ace-Low Straight\n    assert straight(card_ranks(al)) == True \n    return 'tests pass'\n", "type": "Nugget", "id": 62002}, {"nuggetType": "quiz", "name": "Handling Ties", "parent": "agpzfnVkYWNpdHl1cjILEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDA", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GLkXDAsSBk51Z2dldBiB9AMM", "path": "Course/cs212/CourseRev/apr2012/Unit/3001/Nugget/64001", "type": "Nugget", "id": 64001}]}, {"name": "Bonus: Shuffling", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7AwwLEgZOdWdnZXQYhPcCDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7AwwLEgZOdWdnZXQYs-QDDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7AwwLEgZOdWdnZXQY-swDDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7AwwLEgZOdWdnZXQY6_sDDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7AwwLEgZOdWdnZXQY7PsDDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7AwwLEgZOdWdnZXQYxbUDDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7AwwLEgZOdWdnZXQYxbgCDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7AwwLEgZOdWdnZXQY8qUDDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7AwwLEgZOdWdnZXQYrL0DDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7AwwLEgZOdWdnZXQYlcUDDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7AwwLEgZOdWdnZXQY49QDDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7AwwLEgZOdWdnZXQYnewDDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7AwwLEgZOdWdnZXQYn-8CDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7AwwLEgZOdWdnZXQYhfcCDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7AwwLEgZOdWdnZXQYvY4DDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7Aww", "path": "Course/cs212/CourseRev/apr2012/Unit/65002", "open": false, "id": 65002, "nuggets": [{"nuggetType": "lecture", "name": "Good Shuffle Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7Aww", "media": {"dotsub_id": "7d749e0b-6b31-42cb-b7d3-f60a36a61d2a", "name": "cs212_unit101_02_s_Good-Shuffle", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGMzfAgw", "youtube_id": "PsJRHG-lA5E", "youtube_state": "done", "path": "Course/cs212/Media/45004", "transcript": "\ufeff", "id": 45004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7AwwLEgZOdWdnZXQYxbgCDA", "path": "Course/cs212/CourseRev/apr2012/Unit/65002/Nugget/40005", "type": "Nugget", "id": 40005}, {"nuggetType": "quiz", "name": "Comparing Shuffles", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7Aww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7AwwLEgZOdWdnZXQYn-8CDA", "path": "Course/cs212/CourseRev/apr2012/Unit/65002/Nugget/47007", "type": "Nugget", "id": 47007}, {"nuggetType": "lecture", "name": "Bad Shuffle", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7Aww", "media": {"dotsub_id": "fd8b90b7-b8a2-4771-920f-eba6ae2c5d6e", "name": "cs212_unit101_00_l_Bad-Shuffle", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGJTFAww", "youtube_id": "cx1FXMXgroU", "youtube_state": "done", "path": "Course/cs212/Media/58004", "transcript": "\ufeff", "id": 58004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7AwwLEgZOdWdnZXQYhPcCDA", "path": "Course/cs212/CourseRev/apr2012/Unit/65002/Nugget/48004", "type": "Nugget", "id": 48004}, {"nuggetType": "lecture", "name": "Comparing Shuffles Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7Aww", "media": {"dotsub_id": "a1be177f-a99d-4592-b106-d5c81100ea9a", "name": "cs212_unit101_05_s_Comparing-Shuffles", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGIueAww", "youtube_id": "C_WuEGiyXX8", "youtube_state": "done", "path": "Course/cs212/Media/53003", "transcript": "\ufeff", "id": 53003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7AwwLEgZOdWdnZXQYhfcCDA", "path": "Course/cs212/CourseRev/apr2012/Unit/65002/Nugget/48005", "type": "Nugget", "id": 48005}, {"nuggetType": "lecture", "name": "Computing Or Doing", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7Aww", "media": {"dotsub_id": "f338060a-ea7e-4368-beb8-f96f287c5e1f", "name": "cs212_unit101_06_l_Computing-or-Doing", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGLyOAww", "youtube_id": "IIUSG9O29-s", "youtube_state": "done", "path": "Course/cs212/Media/51004", "transcript": null, "id": 51004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7AwwLEgZOdWdnZXQYvY4DDA", "path": "Course/cs212/CourseRev/apr2012/Unit/65002/Nugget/51005", "type": "Nugget", "id": 51005}, {"nuggetType": "lecture", "name": "Is It Random", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7Aww", "media": {"dotsub_id": "200e6682-122f-4e3c-9a1d-a79de2c6f9c4", "name": "cs212_unit101_03_q_Is-It-Random", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGMS1Aww", "youtube_id": "wT8m7wj5Muc", "youtube_state": "done", "path": "Course/cs212/Media/56004", "transcript": "\ufeff", "id": 56004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7AwwLEgZOdWdnZXQY8qUDDA", "path": "Course/cs212/CourseRev/apr2012/Unit/65002/Nugget/54002", "type": "Nugget", "id": 54002}, {"nuggetType": "quiz", "name": "Good Shuffle", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7Aww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7AwwLEgZOdWdnZXQYxbUDDA", "path": "Course/cs212/CourseRev/apr2012/Unit/65002/Nugget/56005", "type": "Nugget", "id": 56005}, {"nuggetType": "quiz", "name": "Is It Random", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7Aww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7AwwLEgZOdWdnZXQYrL0DDA", "path": "Course/cs212/CourseRev/apr2012/Unit/65002/Nugget/57004", "type": "Nugget", "id": 57004}, {"nuggetType": "lecture", "name": "Is It Random Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7Aww", "media": {"dotsub_id": "1e0fc23b-33ab-438e-9407-767a95be4c92", "name": "cs212_unit101_03_s_Is-It-Random", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGKu9Aww", "youtube_id": "wsBEm6uZxQU", "youtube_state": "done", "path": "Course/cs212/Media/57003", "transcript": "\ufeff", "id": 57003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7AwwLEgZOdWdnZXQYlcUDDA", "path": "Course/cs212/CourseRev/apr2012/Unit/65002/Nugget/58005", "type": "Nugget", "id": 58005}, {"nuggetType": "quiz", "name": "Shuffle Runtime", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7Aww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7AwwLEgZOdWdnZXQY-swDDA", "path": "Course/cs212/CourseRev/apr2012/Unit/65002/Nugget/59002", "type": "Nugget", "id": 59002}, {"nuggetType": "lecture", "name": "Testing Shuffles", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7Aww", "media": {"dotsub_id": "b8e1c74f-1351-4f4b-b1a2-9d368e4a767f", "name": "cs212_unit101_04_l_Testing-Shuffles", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGIL0Aww", "youtube_id": "e1fG2ddyfJg", "youtube_state": "done", "path": "Course/cs212/Media/64002", "transcript": "\ufeff", "id": 64002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7AwwLEgZOdWdnZXQY49QDDA", "path": "Course/cs212/CourseRev/apr2012/Unit/65002/Nugget/60003", "type": "Nugget", "id": 60003}, {"nuggetType": "lecture", "name": "Shuffle Runtime", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7Aww", "media": {"dotsub_id": "2b3f56ec-641d-4364-9d1e-dba3d5d796fb", "name": "cs212_unit101_01_q_Shuffle-Runtime", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGJzsAww", "youtube_id": "KEVOuJ4aifk", "youtube_state": "done", "path": "Course/cs212/Media/63004", "transcript": "\ufeff", "id": 63004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7AwwLEgZOdWdnZXQYs-QDDA", "path": "Course/cs212/CourseRev/apr2012/Unit/65002/Nugget/62003", "type": "Nugget", "id": 62003}, {"nuggetType": "lecture", "name": "Comparing Shuffles", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7Aww", "media": {"dotsub_id": "a1e45be1-b278-4573-9f06-091dff635ab0", "name": "cs212_unit101_05_q_Comparing-Shuffles", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGO37Aww", "youtube_id": "pk3UlMWi6Ao", "youtube_state": "done", "path": "Course/cs212/Media/65005", "transcript": "\ufeff", "id": 65005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7AwwLEgZOdWdnZXQYnewDDA", "path": "Course/cs212/CourseRev/apr2012/Unit/65002/Nugget/63005", "type": "Nugget", "id": 63005}, {"nuggetType": "lecture", "name": "Shuffle Runtime Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7Aww", "media": {"dotsub_id": "f97e028c-204f-4666-b0b2-708cfb47f3ec", "name": "cs212_unit101_01_s_Shuffle-Runtime", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGPGEAQw", "youtube_id": "bblNAUU8wL8", "youtube_state": "done", "path": "Course/cs212/Media/17009", "transcript": "\ufeff", "id": 17009}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7AwwLEgZOdWdnZXQY6_sDDA", "path": "Course/cs212/CourseRev/apr2012/Unit/65002/Nugget/65003", "type": "Nugget", "id": 65003}, {"nuggetType": "lecture", "name": "Good Shuffle", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7Aww", "media": {"dotsub_id": "cc7d1339-5731-463d-b535-eca2ceb59b3e", "name": "cs212_unit101_02_q_Good-Shuffle", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGLTkAww", "youtube_id": "a9a1H4PmFW8", "youtube_state": "done", "path": "Course/cs212/Media/62004", "transcript": "\ufeff", "id": 62004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GOr7AwwLEgZOdWdnZXQY7PsDDA", "path": "Course/cs212/CourseRev/apr2012/Unit/65002/Nugget/65004", "type": "Nugget", "id": 65004}]}, {"name": "Andy's Corner 1", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAwLEgZOdWdnZXQYjZ4DDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAwLEgZOdWdnZXQYwbIEDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAwLEgZOdWdnZXQYopkCDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAwLEgZOdWdnZXQY96UDDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAwLEgZOdWdnZXQYz9wDDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAwLEgZOdWdnZXQY560DDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAwLEgZOdWdnZXQYyLUDDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAwLEgZOdWdnZXQYy9kEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAwLEgZOdWdnZXQYzrIEDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAwLEgZOdWdnZXQYybUDDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAw", "path": "Course/cs212/CourseRev/apr2012/Unit/71001", "open": false, "id": 71001, "nuggets": [{"nuggetType": "lecture", "name": "List Comprehensions 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAw", "media": {"dotsub_id": "aea04045-3626-47c2-9fb5-019b7d8134a0", "name": "cs212_unit102_02_q_List-Comprehensions-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGMKyBAw", "youtube_id": "gbnoOLWQEN8", "youtube_state": "done", "path": "Course/cs212/Media/72002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\n[Andy] Now, what if our data structure was a bit more complicated \n\n2\n00:00:03,000 --> 00:00:05,000\nthan a list with strings as entries?\n\n3\n00:00:05,000 --> 00:00:10,000\nHere we have a list where each entry is a tuple, as indicated by these parentheses.\n\n4\n00:00:10,000 --> 00:00:15,000\nFor now let's just think of tuples as unchangeable or immutable lists.\n\n5\n00:00:15,000 --> 00:00:21,000\nEach of these tuples contains a TA name, the country where that TA lives,\n\n6\n00:00:21,000 --> 00:00:24,000\nand the course which that TA is currently instructing.\n\n7\n00:00:24,000 --> 00:00:28,000\nThis data is interesting, but I'd rather have it presented to me as a list of sentences,\n\n8\n00:00:28,000 --> 00:00:31,000\nand we can do that with list comprehensions.\n\n9\n00:00:31,000 --> 00:00:34,000\nSo here we've turned ta_data into a list of strings,\n\n10\n00:00:34,000 --> 00:00:37,000\nand each of those strings is a sentence about a TA.\n\n11\n00:00:37,000 --> 00:00:42,000\nFor example, Peter lives in USA and is the TA for CS262.\n\n12\n00:00:42,000 --> 00:00:44,000\nHow do we do that?\n\n13\n00:00:44,000 --> 00:00:47,000\nWe use the same sort of list comprehension we used last time,\n\n14\n00:00:47,000 --> 00:00:53,000\nbut now ta_data is an iterable and its entries are tuples.\n\n15\n00:00:53,000 --> 00:01:02,000\nThese tuples each have 3 entries, and when we reference these names here, here, and here,\n\n16\n00:01:02,000 --> 00:01:04,000\nPython understands what we're talking about.\n\n17\n00:01:04,000 --> 00:01:06,000\nNow let's have a quiz.\n\n18\n00:01:06,000 --> 00:01:09,000\nUsing the same structure for ta_data that we had before,\n\n19\n00:01:09,000 --> 00:01:14,000\nI want to construct sentences but only about the country in which each TA lives.\n\n20\n00:01:14,000 --> 00:01:16,000\nFor example, Peter lives in USA,\n\n21\n00:01:16,000 --> 00:01:18,000\nor Gundega lives in Latvia.\n\n22\n00:01:18,000 --> 00:01:21,000\nI've given you 3 options for possible list comprehensions\n\n23\n00:01:21,000 --> 00:01:23,000\nthat may accomplish this task--\n\n24\n00:01:23,000 --> 00:01:28,000\nthat given ta_data will produce the correct ta_country.\n\n25\n00:01:28,000 --> 00:01:31,000\nAnd so which of the following list comprehensions will work?\n\n26\n00:01:31,000 --> 00:01:33,000\nCheck all that apply.\n\n", "id": 72002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAwLEgZOdWdnZXQYopkCDA", "path": "Course/cs212/CourseRev/apr2012/Unit/71001/Nugget/36002", "type": "Nugget", "id": 36002}, {"nuggetType": "lecture", "name": "Hello", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAw", "media": {"dotsub_id": "a03e70c5-c8bd-4654-8675-8f1614083c25", "name": "cs212_unit102_00_l_Hello", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGL-OAww", "youtube_id": "LYUKAZix0v4", "youtube_state": "done", "path": "Course/cs212/Media/51007", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nHi. I'm Andy.\n\n2\n00:00:02,000 --> 00:00:08,000\nI graduated college in 2009, and I started traveling the world, biking across the country,\n\n3\n00:00:08,000 --> 00:00:10,000\nand basically living the life of a drifter.\n\n4\n00:00:10,000 --> 00:00:13,000\nWhen I found out about Udacity, I decided this was the job for me.\n\n5\n00:00:13,000 --> 00:00:17,000\nLast semester I TA'd Sebastian's class on Programming a Robotic Car,\n\n6\n00:00:17,000 --> 00:00:21,000\nand this semester I'm going to be TAing Peter's class on the Design of Computer Programs.\n\n7\n00:00:21,000 --> 00:00:24,000\nI'm going to be available in the forums to help you with your questions,\n\n8\n00:00:24,000 --> 00:00:28,000\nI'm going to record supplementary videos when there's things that seem confusing,\n\n9\n00:00:28,000 --> 00:00:31,000\nand I'll be there for you to yell at in case the grading scripts don't work,\n\n10\n00:00:31,000 --> 00:00:34,000\nthough I think we've got most of those bugs ironed out. See you in class.\n\n", "id": 51007}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAwLEgZOdWdnZXQYjZ4DDA", "path": "Course/cs212/CourseRev/apr2012/Unit/71001/Nugget/53005", "type": "Nugget", "id": 53005}, {"nuggetType": "quiz", "name": "List Comprehensions 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAwLEgZOdWdnZXQY96UDDA", "path": "Course/cs212/CourseRev/apr2012/Unit/71001/Nugget/54007", "type": "Nugget", "id": 54007}, {"nuggetType": "lecture", "name": "List Comprehensions 3", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAw", "media": {"dotsub_id": "969dff3d-f2cf-4094-9599-3218bff21c69", "name": "cs212_unit102_03_l_List-Comprehensions-3", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGMnZBAw", "youtube_id": "RXjABY30oJ4", "youtube_state": "done", "path": "Course/cs212/Media/77001", "transcript": "\ufeff", "id": 77001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAwLEgZOdWdnZXQY560DDA", "path": "Course/cs212/CourseRev/apr2012/Unit/71001/Nugget/55015", "type": "Nugget", "id": 55015}, {"nuggetType": "lecture", "name": "List Comprehensions 4", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAw", "media": {"dotsub_id": "22c4983b-96f9-4627-8bb6-290353cf9c5b", "name": "cs212_unit102_04_p_List-Comprehensions-4", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGLfkAww", "youtube_id": "8bHXbnvMUkU", "youtube_state": "done", "path": "Course/cs212/Media/62007", "transcript": "\ufeff", "id": 62007}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAwLEgZOdWdnZXQYyLUDDA", "path": "Course/cs212/CourseRev/apr2012/Unit/71001/Nugget/56008", "type": "Nugget", "id": 56008}, {"nuggetType": "lecture", "name": "Rules Of Poker", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAw", "media": {"dotsub_id": "0aa5a8d6-293f-4895-9d5c-c0fdddd8087a", "name": "cs212_unit102_05_l_Rules-of-Poker", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGLjkAww", "youtube_id": "CWxf8Zm--cA", "youtube_state": "done", "path": "Course/cs212/Media/62008", "transcript": "\ufeff", "id": 62008}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAwLEgZOdWdnZXQYybUDDA", "path": "Course/cs212/CourseRev/apr2012/Unit/71001/Nugget/56009", "type": "Nugget", "id": 56009}, {"nuggetType": "lecture", "name": "List Comprehensions 2 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAw", "media": {"dotsub_id": "c9c28cf3-2984-421d-a057-8d395d5d9491", "name": "cs212_unit102_02_s_List-Comprehensions-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGMe1Aww", "youtube_id": "QjrKaY9DphI", "youtube_state": "done", "path": "Course/cs212/Media/56007", "transcript": "\ufeff", "id": 56007}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAwLEgZOdWdnZXQYz9wDDA", "path": "Course/cs212/CourseRev/apr2012/Unit/71001/Nugget/61007", "type": "Nugget", "id": 61007}, {"nuggetType": "lecture", "name": "List Comprehensions 1", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAw", "media": {"dotsub_id": "c2cf20bb-249e-4545-bb58-81c9c304aa4c", "name": "cs212_unit102_01_l_List-Comprehensions-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGM1lDA", "youtube_id": "c_wzUUR7peY", "youtube_state": "done", "path": "Course/cs212/Media/13005", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\n[Andy] This lesson is on list comprehensions.\n\n2\n00:00:02,000 --> 00:00:06,000\nThis is something that wasn't covered in CS101 but will be used in many future classes,\n\n3\n00:00:06,000 --> 00:00:08,000\nincluding CS212.\n\n4\n00:00:08,000 --> 00:00:12,000\nList comprehensions are a powerful tool for quickly and concisely creating lists.\n\n5\n00:00:12,000 --> 00:00:17,000\nFor example, let's say you have a list of the Udacity TAs like this,\n\n6\n00:00:17,000 --> 00:00:19,000\nand maybe we'll want to write the TA names in uppercase\n\n7\n00:00:19,000 --> 00:00:21,000\nbecause lowercase is a little bit boring.\n\n8\n00:00:21,000 --> 00:00:25,000\nOne way we can do this is with a for loop like this one. And let's see how it works.\n\n9\n00:00:25,000 --> 00:00:28,000\nThis for loop is really doing 5 different things.\n\n10\n00:00:28,000 --> 00:00:32,000\nFirst we create the empty list bad_uppercase_tas,\n\n11\n00:00:32,000 --> 00:00:34,000\nand I've called it bad_uppercase_tas\n\n12\n00:00:34,000 --> 00:00:38,000\nto emphasize that this really isn't the way we're going to want to create such a list.\n\n13\n00:00:38,000 --> 00:00:42,000\nNext it generates the indices, and it does that here.\n\n14\n00:00:42,000 --> 00:00:49,000\nThese indices will be 0, 1, 2, 3, 4, 5 because udacity_tas is a list of length 6.\n\n15\n00:00:49,000 --> 00:00:52,000\nThen we iterate over these indices.\n\n16\n00:00:52,000 --> 00:00:56,000\nNext we apply the upper function, and this is a function that just takes a string\n\n17\n00:00:56,000 --> 00:00:59,000\nand converts all of the characters to uppercase.\n\n18\n00:00:59,000 --> 00:01:03,000\nFinally, we append to the bad_uppercase_tas list.\n\n19\n00:01:03,000 --> 00:01:13,000\nAnd this code will be perfectly functional, but it is bad, it is ugly, and it is slow,\n\n20\n00:01:13,000 --> 00:01:15,000\nwhich is why we have list comprehensions.\n\n21\n00:01:15,000 --> 00:01:19,000\nAnd just to show that this code works, let's run it.\n\n22\n00:01:19,000 --> 00:01:22,000\nAnd sure enough, we get a list of the TA names, and they are printed in uppercase.\n\n23\n00:01:22,000 --> 00:01:26,000\nUsing list comprehensions we could solve this problem in 1 line of code.\n\n24\n00:01:26,000 --> 00:01:31,000\nAnd here Python recognizes that udacity_tas is an iterable.\n\n25\n00:01:31,000 --> 00:01:35,000\nIterable just means any object that can be iterated over.\n\n26\n00:01:35,000 --> 00:01:39,000\nSo for example, lists can be iterated over, strings can--and you'll see a lot of that \n\n27\n00:01:39,000 --> 00:01:45,000\nin CS212 in the first unit--tuples--and if you don't know what those are yet, don't worry.\n\n28\n00:01:45,000 --> 00:01:48,000\nThese are all iterable objects, and this notation tells Python \n\n29\n00:01:48,000 --> 00:01:55,000\nto iterate over all of the entries in udacity_tas, call each entry name,\n\n30\n00:01:55,000 --> 00:01:58,000\nand then apply this upper function to name.\n\n31\n00:01:58,000 --> 00:02:02,000\nThe brackets indicate that we want to put the results into a list,\n\n32\n00:02:02,000 --> 00:02:05,000\nand that's the list that we see down here:\n\n33\n00:02:05,000 --> 00:02:09,000\nPeter, Andy, Sarah, Gundega, Job, Sean.\n\n34\n00:02:09,000 --> 00:02:14,000\nAnd actually, I'd rather print each name on its own line, so let's do that like this.\n\n35\n00:02:17,000 --> 00:02:19,000\nThat's better.\n\n", "id": 13005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAwLEgZOdWdnZXQYwbIEDA", "path": "Course/cs212/CourseRev/apr2012/Unit/71001/Nugget/72001", "type": "Nugget", "id": 72001}, {"nuggetType": "lecture", "name": "List Comprehensions 4 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAw", "media": {"dotsub_id": "34fef384-67cd-4037-b4cf-1d1c4b5d9e6a", "name": "cs212_unit102_04_s_List-Comprehensions-4", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGLHhBAw", "youtube_id": "E7KRwibpaJ8", "youtube_state": "done", "path": "Course/cs212/Media/78001", "transcript": "\ufeff", "id": 78001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAwLEgZOdWdnZXQYzrIEDA", "path": "Course/cs212/CourseRev/apr2012/Unit/71001/Nugget/72014", "type": "Nugget", "id": 72014}, {"nuggetType": "program", "name": "List Comprehensions 4", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GNmqBAwLEgZOdWdnZXQYy9kEDA", "path": "Course/cs212/CourseRev/apr2012/Unit/71001/Nugget/77003", "suppliedCode": "#-----------------\n# User Instructions\n#\n# Use a list comprehension to identify all the TAs \n# Who are teaching a 300 level course (which would\n# be Gundega and Job). The string.find() function\n# may be helpful to you.\n#\n# Your ta_300 variable should be a list of 2 strings:\n# ta_300 = ['Gundega is the TA for CS373',\n#           'Job is the TA for CS387']\n\nta_data = [['Peter', 'USA', 'CS262'],\n           ['Andy', 'USA', 'CS212'],\n           ['Sarah', 'England', 'CS101'],\n           ['Gundega', 'Latvia', 'CS373'],\n           ['Job', 'USA', 'CS387'],\n           ['Sean', 'USA', 'CS253']]\n\nta_300 = # your code here", "type": "Nugget", "id": 77003}]}, {"name": "Homework 1", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgw", "type": "Unit", "evaluated": true, "closedAt": "04/24/2012 00:00", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKvAAgwLEgZOdWdnZXQY7P4CDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKvAAgwLEgZOdWdnZXQYytwDDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKvAAgwLEgZOdWdnZXQYppwBDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKvAAgwLEgZOdWdnZXQY4DYM"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKvAAgw", "path": "Course/cs212/CourseRev/apr2012/Unit/41003", "open": true, "id": 41003, "nuggets": [{"nuggetType": "lecture", "name": "Seven Card Stud", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKvAAgw", "media": {"dotsub_id": "297af7ef-7aad-401b-9a1d-cf9a1f75f37b", "name": "cs212_hw1_00_p_Seven-Card-Stud", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGN-tAww", "youtube_id": "NxY02bsy2iw", "youtube_state": "done", "path": "Course/cs212/Media/55007", "transcript": "\ufeff", "id": 55007}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKvAAgwLEgZOdWdnZXQY7P4CDA", "path": "Course/cs212/CourseRev/apr2012/Unit/41003/Nugget/49004", "type": "Nugget", "id": 49004}, {"nuggetType": "program", "name": "Seven Card Stud", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKvAAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKvAAgwLEgZOdWdnZXQYytwDDA", "path": "Course/cs212/CourseRev/apr2012/Unit/41003/Nugget/61002", "suppliedCode": "# CS 212, hw1-1: 7-card stud\n#\n# -----------------\n# User Instructions\n#\n# Write a function best_hand(hand) that takes a seven\n# card hand as input and returns the best possible 5\n# card hand. The itertools library has some functions\n# that may help you solve this problem.\n#\n# -----------------\n# Grading Notes\n# \n# Muliple correct answers will be accepted in cases \n# where the best hand is ambiguous (for example, if \n# you have 4 kings and 3 queens, there are three best\n# hands: 4 kings along with any of the three queens).\n\nimport itertools\n\ndef best_hand(hand):\n    \"From a 7-card hand, return the best 5 card hand.\"\n    \n    # Your code here\n    \n# ------------------\n# Provided Functions\n# \n# You may want to use some of the functions which\n# you have already defined in the unit to write \n# your best_hand function.\n\ndef hand_rank(hand):\n    \"Return a value indicating the ranking of a hand.\"\n    ranks = card_ranks(hand) \n    if straight(ranks) and flush(hand):\n        return (8, max(ranks))\n    elif kind(4, ranks):\n        return (7, kind(4, ranks), kind(1, ranks))\n    elif kind(3, ranks) and kind(2, ranks):\n        return (6, kind(3, ranks), kind(2, ranks))\n    elif flush(hand):\n        return (5, ranks)\n    elif straight(ranks):\n        return (4, max(ranks))\n    elif kind(3, ranks):\n        return (3, kind(3, ranks), ranks)\n    elif two_pair(ranks):\n        return (2, two_pair(ranks), ranks)\n    elif kind(2, ranks):\n        return (1, kind(2, ranks), ranks)\n    else:\n        return (0, ranks)\n    \ndef card_ranks(hand):\n    \"Return a list of the ranks, sorted with higher first.\"\n    ranks = ['--23456789TJQKA'.index(r) for r, s in hand]\n    ranks.sort(reverse = True)\n    return [5, 4, 3, 2, 1] if (ranks == [14, 5, 4, 3, 2]) else ranks\n\ndef flush(hand):\n    \"Return True if all the cards have the same suit.\"\n    suits = [s for r,s in hand]\n    return len(set(suits)) == 1\n\ndef straight(ranks):\n    \"\"\"Return True if the ordered \n    ranks form a 5-card straight.\"\"\"\n    return (max(ranks)-min(ranks) == 4) and len(set(ranks)) == 5\n\ndef kind(n, ranks):\n    \"\"\"Return the first rank that this hand has \n    exactly n-of-a-kind of. Return None if there \n    is no n-of-a-kind in the hand.\"\"\"\n    for r in ranks:\n        if ranks.count(r) == n: return r\n    return None\n\ndef two_pair(ranks):\n    \"\"\"If there are two pair here, return the two \n    ranks of the two pairs, else None.\"\"\"\n    pair = kind(2, ranks)\n    lowpair = kind(2, list(reversed(ranks)))\n    if pair and lowpair != pair:\n        return (pair, lowpair)\n    else:\n        return None \n    \ndef test_best_hand():\n    assert (sorted(best_hand(\"6C 7C 8C 9C TC 5C JS\".split()))\n            == ['6C', '7C', '8C', '9C', 'TC'])\n    assert (sorted(best_hand(\"TD TC TH 7C 7D 8C 8S\".split()))\n            == ['8C', '8S', 'TC', 'TD', 'TH'])\n    assert (sorted(best_hand(\"JD TC TH 7C 7D 7S 7H\".split()))\n            == ['7C', '7D', '7H', '7S', 'JD'])\n    return 'test_best_hand passes'\n\nprint test_best_hand()\n", "type": "Nugget", "id": 61002}, {"nuggetType": "lecture", "name": "Jokers Wild", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKvAAgw", "media": {"dotsub_id": "94cfb4ad-f7e8-464f-9687-4c40dabd9fa1", "name": "cs212_hw1_01_p_Jokers-Wild", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMjEyDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMjEyDAsSBU1lZGlhGN82DA", "youtube_id": "6dASZMPSZnI", "youtube_state": "done", "path": "Course/cs212/Media/7007", "transcript": null, "id": 7007}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKvAAgwLEgZOdWdnZXQYppwBDA", "path": "Course/cs212/CourseRev/apr2012/Unit/41003/Nugget/20006", "type": "Nugget", "id": 20006}, {"nuggetType": "program", "name": "Jokers Wild", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKvAAgw", "key": "agpzfnVkYWNpdHl1ckALEgZDb3Vyc2UiBWNzMjEyDAsSCUNvdXJzZVJldiIHYXByMjAxMgwLEgRVbml0GKvAAgwLEgZOdWdnZXQY4DYM", "path": "Course/cs212/CourseRev/apr2012/Unit/41003/Nugget/7008", "suppliedCode": "# CS 212, hw1-2: Jokers Wild\n#\n# -----------------\n# User Instructions\n#\n# Write a function best_wild_hand(hand) that takes as\n# input a 7-card hand and returns the best 5 card hand.\n# In this problem, it is possible for a hand to include\n# jokers. Jokers will be treated as 'wild cards' which\n# can take any rank or suit of the same color. The \n# black joker, '?B', can be used as any spade or club\n# and the red joker, '?R', can be used as any heart \n# or diamond.\n#\n# The itertools library may be helpful. Feel free to \n# define multiple functions if it helps you solve the\n# problem. \n#\n# -----------------\n# Grading Notes\n# \n# Muliple correct answers will be accepted in cases \n# where the best hand is ambiguous (for example, if \n# you have 4 kings and 3 queens, there are three best\n# hands: 4 kings along with any of the three queens).\n\nimport itertools\n\ndef best_wild_hand(hand):\n    \"Try all values for jokers in all 5-card selections.\"\n    \n    # Your code here\n\ndef test_best_wild_hand():\n    assert (sorted(best_wild_hand(\"6C 7C 8C 9C TC 5C ?B\".split()))\n            == ['7C', '8C', '9C', 'JC', 'TC'])\n    assert (sorted(best_wild_hand(\"TD TC 5H 5C 7C ?R ?B\".split()))\n            == ['7C', 'TC', 'TD', 'TH', 'TS'])\n    assert (sorted(best_wild_hand(\"JD TC TH 7C 7D 7S 7H\".split()))\n            == ['7C', '7D', '7H', '7S', 'JD'])\n    return 'test_best_wild_hand passes'\n\n# ------------------\n# Provided Functions\n# \n# You may want to use some of the functions which\n# you have already defined in the unit to write \n# your best_hand function.\n\ndef hand_rank(hand):\n    \"Return a value indicating the ranking of a hand.\"\n    ranks = card_ranks(hand) \n    if straight(ranks) and flush(hand):\n        return (8, max(ranks))\n    elif kind(4, ranks):\n        return (7, kind(4, ranks), kind(1, ranks))\n    elif kind(3, ranks) and kind(2, ranks):\n        return (6, kind(3, ranks), kind(2, ranks))\n    elif flush(hand):\n        return (5, ranks)\n    elif straight(ranks):\n        return (4, max(ranks))\n    elif kind(3, ranks):\n        return (3, kind(3, ranks), ranks)\n    elif two_pair(ranks):\n        return (2, two_pair(ranks), ranks)\n    elif kind(2, ranks):\n        return (1, kind(2, ranks), ranks)\n    else:\n        return (0, ranks)\n    \ndef card_ranks(hand):\n    \"Return a list of the ranks, sorted with higher first.\"\n    ranks = ['--23456789TJQKA'.index(r) for r, s in hand]\n    ranks.sort(reverse = True)\n    return [5, 4, 3, 2, 1] if (ranks == [14, 5, 4, 3, 2]) else ranks\n\ndef flush(hand):\n    \"Return True if all the cards have the same suit.\"\n    suits = [s for r,s in hand]\n    return len(set(suits)) == 1\n\ndef straight(ranks):\n    \"\"\"Return True if the ordered \n    ranks form a 5-card straight.\"\"\"\n    return (max(ranks)-min(ranks) == 4) and len(set(ranks)) == 5\n\ndef kind(n, ranks):\n    \"\"\"Return the first rank that this hand has \n    exactly n-of-a-kind of. Return None if there \n    is no n-of-a-kind in the hand.\"\"\"\n    for r in ranks:\n        if ranks.count(r) == n: return r\n    return None\n\ndef two_pair(ranks):\n    \"\"\"If there are two pair here, return the two \n    ranks of the two pairs, else None.\"\"\"\n    pair = kind(2, ranks)\n    lowpair = kind(2, list(reversed(ranks)))\n    if pair and lowpair != pair:\n        return (pair, lowpair)\n    else:\n        return None \n", "type": "Nugget", "id": 7008}]}], "path": "Course/cs212/CourseRev/apr2012", "type": "CourseRev", "id": "apr2012"}, "course_title": "Design of Computer Programs", "progress": {}, "rev_name": "April 2012", "magik": false, "course_edit_url": "/edit_course?id=cs212"}}