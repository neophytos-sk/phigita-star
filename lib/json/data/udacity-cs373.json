{"version": "dacity-32", "payload": {"course": {"instructors": [{"bio": "Sebastian Thrun is a Research Professor of Computer Science at\n\t\t\tStanford University, a Google Fellow, a member of the National\n\t\t\tAcademy of Engineering and the German Academy of Sciences. Thrun is\n\t\t\tbest known for his research in robotics and machine learning,\n\t\t\tspecifically his <a\n\t\t\t\thref=\"http://www.huffingtonpost.com/2011/12/06/self-driving-car_n_1130568.html\">work\n\t\t\t\twith self-driving cars</a>.", "name": "Sebastian Thrun", "parent": "None", "headshot_url": "/image/headshot/Instructor/836018", "key": "agpzfnVkYWNpdHl1chILEgpJbnN0cnVjdG9yGLKDMww", "path": "Instructor/836018", "type": "Instructor", "id": 836018}], "name": "Programming A Robotic Car", "parent": "None", "icon_url": "/icon/Course/cs373", "faq": "<p>\n<a href=\"#q1\">\nCan I really learn how to build a self-driving car in this class?\n</a>\n</p>\n<p>\n<a href=\"#q2\">\nWhy should I learn how to build a robot car?\n</a>\n</p>\n<p>\n<a href=\"#q3\">\nWhat programming language does the course use?\n</a>\n</p>\n<p>\n<a href=\"#q4\">\nWhat type of math will I be learning in this course?\n</a>\n</p>\n<p>\n<a href=\"#q5\">\nIs there a course textbook?\n</a>\n</p>\n<p>\n<a href=\"#q6\">\nAre there homework assignments?\n</a>\n</p>\n<p>\n<a href=\"#q7\">\nIs there a final exam?\n</a>\n</p>\n<p>\n<a href=\"#q8\">\nHow will my final grade be determined?\n</a>\n</p>\n<p>\n<a href=\"#q9\">\nDo I need to download Python on my computer?\n</a>\n</p>\n<p>\n<a href=\"#q10\">\nHow do I get help?\n</a>\n</p>\n<p>\n<a href=\"#q11\">\nI think one of the quizzes or homework assignments is judging my answer incorrectly, who do I contact?\n</a>\n</p>\n<p>\n<a href=\"#q12\">\nWhat are office hours?\n</a>\n</p>\n<p>\n<a href=\"#q13\">\nSomething on the site isn't working, who do I contact?\n</a>\n</p>\n<p>\n<a href=\"#q14\">\nWhat are the rules on collaboration?\n</a>\n</p>\n\n\n\n<hr/>\n\n<div><a name=\"q1\"></a>\n<p>\n<b class=\"sans\">\nCan I really learn how to build a self-driving car in this class?\n</b><br/>\nYes! You will learn the basics of all the primary systems involved in programming a robotic car.\n</p>\n</div>\n\n<div><a name=\"q2\"></a>\n<p>\n<b class=\"sans\">\nWhy should I learn how to build a robot car?\n</b><br/>\nFirst of all, this is a fascinating subject. The technologies involved are cutting edge, but the theories behind them are simpler than you might think. In addition to learning the math and science behind these technologies, you will also improve your coding probabilities as you solve the same problems that scientists at places like Google, Stanford, and MIT have been working on for years. Having these skills will not only be personally fulfilling, but could have benefits to your professional life as well. Taking this course is the first step that you can take towards creating a world where every car on the road drives itself. If you love learning or just hate traffic, this course is for you.\n</p>\n</div>\n\n<div><a name=\"q3\"></a>\n<p>\n<b class=\"sans\">\nWhat programming language does the course use?\n</b><br/>\nWe will be using Python (Version 2.6). The concepts we cover in the class are not specific to Python, but apply to computer science in general no matter what programming language you are using.\n</p>\n</div>\n\n<div><a name=\"q4\"></a>\n<p>\n<b class=\"sans\">\nWhat type of math will I be learning in this course?\n</b><br/>\nThis course will teach basic <a href=\"http://www.khanacademy.org/video/basic-probability?topic=probability\">probability</a> and <a href=\"http://www.khanacademy.org/video/introduction-to-matrices?topic=algebra-matrices\">linear algebra</a>. Feel free to browse these links and the lessons that follow them on Khan Academy if you need some review. \n</p>\n\n</div>\n\n<div><a name=\"q5\"></a>\n<p>\n<b class=\"sans\">\nIs there a course textbook?\n</b><br/>\nThere is no required textbook for the course, and the course content does not follow any textbook. There are many books available on probability, linear algebra, and Python programming that may be helpful to students.\n</p>\n</div>\n\n<div><a name=\"q6\"></a>\n<p>\n<b class=\"sans\">\nAre there homework assignments?\n</b><br/>\nYes, there are six homework assignments, one at the end of each unit. To learn anything, but especially a subject as diverse as programming a robotic car, it is necessary to solve progressively more challenging problems on your own, and the homeworks will give you an opportunity to use what you have learned and develop your programming skills. The homework assignments will be similar to the in-class quizzes and mostly cover material from that week's unit, except the homework assignments will include larger problems for you to solve on your own.  \n</p>\n</div>\n\n<div><a name=\"q7\"></a>\n<p>\n<b class=\"sans\">\nIs there a final exam?\n</b><br/>\nYes. There will be an opportunity to do a final exam, roughly every 8 weeks. The dates will be announced.\n</p>\n</div>\n\n<div><a name=\"q8\"></a>\n<p>\n<b class=\"sans\">\nHow will my final grade be determined?\n</b><br/>\nYour final grade will be the determined by your score in exam. You can study at your own pace and take the next offered exam, when you are ready!\n\n</p>\n</div>\n\n<div><a name=\"q9\"></a>\n<p>\n<b class=\"sans\">\nDo I need to download Python on my computer?\n</b><br/>\nYou do not need to download Python to take the course, as we provide all the necessary tools right in your browser. If you prefer to experiment locally you can download <a href=\"http://www.python.org/download/releases/2.6.8/\">Python</a>.\n</p>\n</div>\n\n<div><a name=\"q10\"></a>\n<p>\n<b class=\"sans\">\nHow do I get help?\n</b><br/>\nWe love to see an active academic community, so we encourage you to post your question to the <a href=\"http://forums.udacity.com/cs373-april2012\">forum</a>. Hopefully one of your peers will provide an adequate answer, but if not one of our course managers will chime in.\n\n</p>\n<p>\n\n</p>\n</div>\n\n<div><a name=\"q11\"></a>\n<p>\n<b class=\"sans\">\nI think one of the quizzes or homework assignments is judging my answer incorrectly, who do I contact?\n</b><br/>\nPost your solution to the <a href=\"http://forums.udacity.com/cs373-april2012\">forum</a> with a tag \"spoiler\" and we will look into it.\n</p>\n</div>\n\n<div><a name=\"q12\"></a>\n<p>\n<b class=\"sans\">\nWhat are office hours?\n</b><br/>\nIn the first run of the class once a week we took some of the top questions from the forum and Sebastian and Andy answered them in a recorded video. \n</p>\n</div>\n\n<div><a name=\"q13\"></a>\n<p>\n<b class=\"sans\">\nSomething on the site isn't working, who do I contact?\n</b><br/>\nFill out the Contact Us form found at the bottom of each Udacity webpage.\n</p>\n</div>\n\n<div><a name=\"q14\"></a>\n<p>\n<b class=\"sans\">\nWhat are the rules on collaboration?\n</b><br/>\nWorking with other students is often the best way to learn new things, and we hope students in the class will form vibrant communities, both on-line and in-person, to help each other learn.  The key is to use collaboration as a way to enhance learning, not as a way of sharing answers without understanding them.  \n</p>\n<p>\nYou are welcome (and encouraged) to view the lectures with others, and discuss and work together on answering the in-lecture quizzes.  For the homeworks, you may discuss the questions with other students in the on-line forums and in-person study groups, but everything you submit should be your own work.  For the final exam, you are not permitted to work with anyone else, and should only ask clarification questions on the on-line forums which will be answered by the course staff.\n</p>\n</div>", "syllabus": "<p><b>Description</b>: \n\t\tThis class, taught by one of the foremost experts in AI, will teach you basic methods in Artificial Intelligence, including: probabilistic inference, planning and search, localization, tracking and control, all with a focus on robotics. Extensive programming examples and assignments will apply these methods in the context of building self-driving cars.\n\t\t</p>\n\t\t<p><b>Prerequisites</b>: \n\t\tThe instructor will assume solid knowledge of programming, all programming will be in Python. Knowledge of probability and linear algebra will be helpful.\n\t\t</p>\n\t\t\n\t\t<p class=\"syllabus-week\">UNIT 1:</p>\n\t\t<p class=\"syllabus-desc\">\n\t\t<b>Basics of probability</b><br>\n\t\tMonte-Carlo localization\n\t\t</p>\n\t\t<br class=\"clear\"/>\n\t\t<p class=\"syllabus-week\">UNIT 2:</p>\n\t\t<p class=\"syllabus-desc\">\n\t\t<b>Gaussians and continuous probability</b><br>\n\t\tTracking other cars with Kalman filters\n\t\t</p>\n\t\t<br class=\"clear\"/>\n\t\t<p class=\"syllabus-week\">UNIT 3:</p>\n\t\t<p class=\"syllabus-desc\">\n\t\t<b>Car localization with particle filters</b><br>\n\t\t</p>\n\t\t<br class=\"clear\"/>\n\t\t<p class=\"syllabus-week\">UNIT 4:</p>\n\t\t<p class=\"syllabus-desc\">\n\t\t<b>Planning and search</b><br>\n\t\tDetermining where to drive with A* search<br/>\n\t\tFinding optimal routes with dynamic programming\n\t\t</p>\n\t\t<br class=\"clear\"/>\n\t\t<p class=\"syllabus-week\">UNIT 5:</p>\n\t\t<p class=\"syllabus-desc\">\n\t\t<b>Controls</b><br>\n\t\tControlling steering and speeds with PID\n\t\t</p>\n\t\t<br class=\"clear\"/>\n\t\t<p class=\"syllabus-week\">UNIT 6:</p>\n\t\t<p class=\"syllabus-desc\">\n\t\t<b>Putting it all together</b><br>\n\t\tProgramming a self-driving car\n\t\t</p>\n\t\t<br class=\"clear\"/>", "teaser": {"dotsub_id": null, "name": "teaser", "parent": "None", "transcript": null, "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1cg0LEgVNZWRpYRiBmTEM", "youtube_id": "bdCnb0EFAzk", "youtube_state": null, "path": "Media/806017", "type": "Media", "id": 806017}, "prereqs": "<p>You should either already know Python, or have enough experience with another language to be confident you can pick up what you need on your own.\u00a0Fortunately, Python was built to be easy to learn, read, and use. If you already know another programming language, you'll be coding in Python in less than an hour. Additionally, knowledge of probability and linear algebra will be helpful.</p>\n\t<p><b>Python Review</b></p>\n\t<p>\n\t<a target=\"_blank\" href=\"http://wiki.python.org/moin/BeginnersGuide/Programmers\">Python for Programmers</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/introduction-to-programs-data-types-and-variables?topic=new-and-noteworthy\">Introduction to Programs Data Types and Variables</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/python-lists?topic=computer-science\">Python Lists</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/for-loops-in-python?topic=computer-science\">For Loops in Python</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/while-loops-in-python?topic=computer-science\">While Loops in Python</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/writing-a-simple-factorial-program---python-2?topic=computer-science\">Writing a Simple Factorial Program</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/fun-with-strings?topic=computer-science\">Fun with Strings</a>\n\t</p>\n\t<p><b>Probability</b></p>\n\t<p>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/basic-probability\">Basic Probability</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/probability--part-6\">Probability (Part 6) [Conditional Probability]</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/probability--part-7\">Probability (Part 7) [Bayes' Rule]</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/probability--part-8\">Probability (Part 8) [More Bayes' Rule]</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/introduction-to-random-variables\">Introduction to Random Variables</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/probability-density-functions\">Probability Density Functions</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/expected-value--e-x\">Expected Value: E(X)</a>\n\t</p>\n\t<p><b>Linear Algebra</b></p>\n\t<p>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/introduction-to-matrices\">Introduction to Matrices</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/matrix-multiplication--part-1\">Matrix Multiplication (Part 1)</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/matrix-multiplication--part-2\">Matrix Multiplication (Part 2)</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/inverse-matrix--part-1\">Inverse Matrix (Part 1)</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/inverting-matrices--part-2\">Inverting Matrices (Part 2)</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/inverting-matrices--part-3\">Inverting Matrices (Part 3)</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/matrices-to-solve-a-system-of-equations\">Matrices to Solve a System of Equations</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/singular-matrices\">Singular Matrices</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/linear-algebra--introduction-to-vectors\">Introduction to Vectors</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/vector-dot-product-and-vector-length\">Vector Dot Product and Vector Length</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/defining-the-angle-between-vectors\">Defining the Angle Between Vectors</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/linear-algebra--cross-product-introduction\">Cross Product Introduction</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/matrix-vector-products\">Matrix Vector Products</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/linear-transformations-as-matrix-vector-products\">Linear Transformations as Matrix Vector Products</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/linear-transformation-examples--scaling-and-reflections\">Linear Transformation Examples: Scaling and Reflections</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/linear-transformation-examples--rotations-in-r2\">Linear Transformation Examples: Rotations in R2</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/introduction-to-projections\">Introduction to Projections</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/linear-algebra--exploring-the-solution-set-of-ax-b\">Exploring the Solution Set of Ax = b</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/linear-algebra--transpose-of-a-matrix\">Transpose of a Matrix</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/linear-algebra--3x3-determinant\">3x3 Determinant</a><br>\n\t<a target=\"_blank\" href=\"http://www.khanacademy.org/video/linear-algebra--introduction-to-eigenvalues-and-eigenvectors\">Introduction to Eigenvalues and Eigenvectors</a>\n\t</p>", "image_url": "/image/Course/cs373", "key": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "is_public": true, "course_id": "cs373", "path": "Course/cs373", "type": "Course", "id": "cs373", "description": "Learn how to program all the major systems of a robotic car from the leader of Google and Stanford's autonomous driving teams."}, "course_rev": {"unitLayout": [{"unit_key": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgw"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOHUAww"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPm3Cgw"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOnmCgw"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQw"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKuWEAw"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOetEAw"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgw"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJGVEww"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQw"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMmgFww"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJGAGgw"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHdGgw"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GInKHgw"}, {"unit_key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww"}], "name": "February 2012", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "state": 0, "key": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "units": [{"name": "Unit 1", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOoHDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOsHDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GNMPDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPEuDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GNQPDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOwHDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GO0HDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj0LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GAMM"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GLoXDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GNcPDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPMuDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GLsXDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj0LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GAQM"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GNkPDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GLwXDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPQuDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj0LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GAUM"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPEHDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GNwPDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPIHDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPYuDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj0LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GAoM"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPMHDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GN02DA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GL8XDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GMQ-DA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GJAnDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPguDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GN82DA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GJEnDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPQHDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOAPDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj0LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GAwM"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GJQnDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPUHDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOEPDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPYHDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOIPDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj0LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GA0M"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GMEXDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPgHDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOE2DA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GMIXDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GP4uDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOI2DA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOM2DA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOMPDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GJcnDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj0LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GA8M"}, {"nugget_key": "agpzfnVkYWNpdHl1cj0LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GBAM"}, {"nugget_key": "agpzfnVkYWNpdHl1cj0LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GBEM"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GJgnDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPwHDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GIEvDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GP0HDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GM4-DA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GM8-DA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GMQXDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GJonDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOcPDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GMUXDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GP8HDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOY2DA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GIAIDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GMYXDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOc2DA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GIIIDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOkPDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOg2DA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GJsnDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GIYvDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GJwnDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOwPDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GO0PDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GJ0nDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GMwXDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOk2DA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOo2DA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GIUIDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GNo-DA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GIcvDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj0LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GBgM"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GM4XDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPEPDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPIPDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPMPDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GN8-DA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj0LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GBoM"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GKAnDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GIkvDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GM8XDA"}, {"nugget_key": "agpzfnVkYWNpdHl1cj0LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GBsM"}, {"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPUPDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GNAXDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "path": "Course/cs373/CourseRev/feb2012/Unit/2", "open": false, "id": 2, "nuggets": [{"nuggetType": "program", "name": "Uniform Distribution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "key": "agpzfnVkYWNpdHl1cj0LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GAMM", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/3", "suppliedCode": "#Modify the empty list, p, so that it becomes a UNIFORM probability\n#distribution over five grid cells, as expressed in a list of \n#five probabilities.\n\np=[]\n\nprint p", "type": "Nugget", "id": 3}, {"nuggetType": "lecture", "name": "Probability After Sense", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "80a523f6-16ad-472b-b40c-53ae04dd6847", "name": "cs373_unit1_05_q_Probability-After-Sense", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGME-DA", "youtube_id": "UFcTLCttNRI", "youtube_state": "done", "path": "Course/cs373/Media/8001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:06,000\nLet's look at the measurement of this robot in its world with 5 different grid cells--\n\n2\n00:00:06,000 --> 00:00:09,000\nx1 through x5.\n\n3\n00:00:09,000 --> 00:00:16,000\nLet's assume 2 of those cells are colored red whereas the other 33 are green.\n\n4\n00:00:16,000 --> 00:00:21,000\nAs before, we assign uniform probability to each cell of 0.2,\n\n5\n00:00:21,000 --> 00:00:25,000\nand our robot is now allowed to sense.\n\n6\n00:00:25,000 --> 00:00:29,000\nWhat it sees is a red color.\n\n7\n00:00:29,000 --> 00:00:33,000\nHow will this affect my belief over different places?\n\n8\n00:00:33,000 --> 00:00:36,000\nObviously, the one's for x2 and x3 should go up,\n\n9\n00:00:36,000 --> 00:00:40,000\nand the ones for x1, x4, and x5 should go down.\n\n10\n00:00:40,000 --> 00:00:45,000\nSo I'm going to tell you how to incorporate this measurement into our belief\n\n11\n00:00:45,000 --> 00:00:49,000\nwith a very simple rule--a product.\n\n12\n00:00:49,000 --> 00:00:53,000\nAny cell where the color is correct--any of the red cells--\n\n13\n00:00:53,000 --> 00:01:00,000\nwe multiply it with a relatively large number--say, 0.6.\n\n14\n00:01:00,000 --> 00:01:05,000\nThat feels small, but as we will see later, it is actually a large number.\n\n15\n00:01:05,000 --> 00:01:10,000\nWhereas all the green cells will be multiple with 0.2.\n\n16\n00:01:10,000 --> 00:01:16,000\nIf we look at the ratio of those, then it seems about 3 times as likely\n\n17\n00:01:16,000 --> 00:01:19,000\nto be in a red cell than it is to be in a green cell,\n\n18\n00:01:19,000 --> 00:01:23,000\nbecause 0.6 is 3 times larger than 0.2.\n\n19\n00:01:23,000 --> 00:01:25,000\nNow let's do the multiplication.\n\n20\n00:01:25,000 --> 00:01:30,000\nFor each of those 5 cells, can you tell me what the result would be \n\n21\n00:01:30,000 --> 00:01:34,000\nmultiplying in the measurement in the way I've stated.\n\n22\n00:01:34,000 --> 00:01:38,000\nPlease, for these 5 boxes, fill out the number.\n\n", "id": 8001}, "key": "agpzfnVkYWNpdHl1cj0LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GAQM", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/4", "type": "Nugget", "id": 4}, {"nuggetType": "quiz", "name": "Compute Sum", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "key": "agpzfnVkYWNpdHl1cj0LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GAUM", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/5", "type": "Nugget", "id": 5}, {"nuggetType": "lecture", "name": "Phit And Pmiss", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "ef68e6c3-0fce-4275-8d25-a1ca6af1e154", "name": "cs373_unit1_08_p_pHit-and-pMiss", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1chwLEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGAkM", "youtube_id": "wOfAyDvun5w", "youtube_state": "done", "path": "Course/cs373/Media/9", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nHere's our distribution again.\n\n2\n00:00:02,000 --> 00:00:07,000\nHere's our factor for getting the color right or for getting it wrong,\n\n3\n00:00:07,000 --> 00:00:10,000\nand let's first start with a non-normalized version.\n\n4\n00:00:10,000 --> 00:00:16,000\nWrite a piece of code that outputs p after multiplying in pHit and pMiss\n\n5\n00:00:16,000 --> 00:00:19,000\nat the corresponding places.\n\n", "id": 9}, "key": "agpzfnVkYWNpdHl1cj0LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GAoM", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/10", "type": "Nugget", "id": 10}, {"nuggetType": "lecture", "name": "Normalized Sense Function Solution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "a7bcad26-bf62-4d1e-bd12-43f1d2cc6aeb", "name": "cs373_unit1_11_s_Normalized-Sense-Function", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJInDA", "youtube_id": "UX3W8TUKbJ0", "youtube_state": "done", "path": "Course/cs373/Media/5010", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nHere are the three lines of code I used to program this in.\n\n2\n00:00:05,000 --> 00:00:08,000\nFirst I computed the sum of a vector Q using the function sum,\n\n3\n00:00:08,000 --> 00:00:10,000\nwhich makes it really easy.\n\n4\n00:00:10,000 --> 00:00:13,000\nThen I go through all the elements in Q and just divide it by s,\n\n5\n00:00:13,000 --> 00:00:19,000\nwhich is the normalization, and when I run it, I get 1/9, 1/3, 1/3, 1/9, and 1/9.\n\n6\n00:00:19,000 --> 00:00:24,000\nSo I've just implemented the absolute key function of localization,\n\n7\n00:00:24,000 --> 00:00:27,000\nwhich is called the measurement update.\n\n", "id": 5010}, "key": "agpzfnVkYWNpdHl1cj0LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GAwM", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/12", "type": "Nugget", "id": 12}, {"nuggetType": "lecture", "name": "Multiple Measurements Solution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "441e133a-252f-4414-ac5d-91881b868991", "name": "cs373_unit1_13_s_Multiple-Measurements", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPsuDA", "youtube_id": "-3qTapGGa-8", "youtube_state": "done", "path": "Course/cs373/Media/6011", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nThe modification is simple. \n\n2\n00:00:02,000 --> 00:00:05,000\nWe will call the procedure sense multiple times,\n\n3\n00:00:05,000 --> 00:00:09,000\n in fact, as often as we have measurements, which is the for loop over here,\n\n4\n00:00:09,000 --> 00:00:14,000\nwe grab the kth measurement element and apply it to the current belief.\n\n5\n00:00:14,000 --> 00:00:18,000\nThen we cursively update that belief into itself.\n\n6\n00:00:18,000 --> 00:00:21,000\nIn this case, we run it twice. We print the output.\n\n7\n00:00:21,000 --> 00:00:24,000\nFor this specific example, we get back the uniform distribution.\n\n8\n00:00:24,000 --> 00:00:27,000\nThese are all 0.2s approximately.\n\n9\n00:00:27,000 --> 00:00:32,000\nThe reason is we up multiplied each field once for the 0.6 \n\n10\n00:00:32,000 --> 00:00:34,000\nand down multiplied for the 0.2.\n\n11\n00:00:34,000 --> 00:00:38,000\nThese are effects were in total the same for each cell.\n\n12\n00:00:38,000 --> 00:00:42,000\nAs a result, we get the same output over here. It's quite remarkable.\n\n", "id": 6011}, "key": "agpzfnVkYWNpdHl1cj0LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GA0M", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/13", "type": "Nugget", "id": 13}, {"nuggetType": "lecture", "name": "Inexact Motion 2", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "e80afdab-6f03-4f2b-8013-238ce4f8d48b", "name": "cs373_unit1_17_q_Inexact-Motion-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMw-DA", "youtube_id": "gZbPZLFKS68", "youtube_state": "done", "path": "Course/cs373/Media/8012", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:07,000\nLet's assume we have a 0.5 in this cell and a 0.5 in this cell.\n\n2\n00:00:07,000 --> 00:00:10,000\nRemember that this is a cyclic-motion model,\n\n3\n00:00:10,000 --> 00:00:14,000\nso whatever falls off on the right side, you'll find on the left side.\n\n4\n00:00:14,000 --> 00:00:18,000\nCan you again for U = 2 fill in the posterior distribution?\n\n", "id": 8012}, "key": "agpzfnVkYWNpdHl1cj0LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GA8M", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/15", "type": "Nugget", "id": 15}, {"nuggetType": "quiz", "name": "Inexact Motion 2", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "key": "agpzfnVkYWNpdHl1cj0LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GBAM", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/16", "type": "Nugget", "id": 16}, {"nuggetType": "lecture", "name": "Inexact Motion 2 Solution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "29d7a64d-7f2e-4e12-aa49-7a4987790759", "name": "cs373_unit1_17_s_Inexact-Motion-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOQ2DA", "youtube_id": "jR7FERpsqe4", "youtube_state": "done", "path": "Course/cs373/Media/7012", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nThis is a pretty tricky question, which I'm going to answer in two phases.\n\n2\n00:00:03,000 --> 00:00:11,000\nLet's just look at the 0.5 over here, 0.8 of that, which is 0.4, ends up over here,\n\n3\n00:00:11,000 --> 00:00:17,000\nand 0.1 of this, which is 0.05 ends up over here.\n\n4\n00:00:17,000 --> 00:00:23,000\nThe reason why I write it so small is because this is not the correct answer quite yet.\n\n5\n00:00:23,000 --> 00:00:25,000\nLet's look at the other 0.5.\n\n6\n00:00:25,000 --> 00:00:30,000\n0.4 goes two steps--1, 2--and ends up over here on the left side,\n\n7\n00:00:30,000 --> 00:00:38,000\nbut 0.1 falls short and makes the 0.5 over here 0.05 in the second grid cell.\n\n8\n00:00:38,000 --> 00:00:42,000\nAnd interestingly enough, for the cell on the right side,\n\n9\n00:00:42,000 --> 00:00:45,000\nthere's two possibly ways you could've gotten there.\n\n10\n00:00:45,000 --> 00:00:49,000\nEither by overshooting starting in the second cell,\n\n11\n00:00:49,000 --> 00:00:52,000\nor undershooting starting in the right cell.\n\n12\n00:00:52,000 --> 00:00:56,000\nSo the total is the sum of these two things--0.1.\n\n13\n00:00:56,000 --> 00:01:03,000\nThis is the final answer: 0.4, 0.05, 0.05, 0.4, and 0.1.\n\n", "id": 7012}, "key": "agpzfnVkYWNpdHl1cj0LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GBEM", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/17", "type": "Nugget", "id": 17}, {"nuggetType": "lecture", "name": "Formal Definition Of Probability 3 Solution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "e0c66644-a305-4402-a7b6-bd9f7c938b57", "name": "cs373_unit1_28_s_Formal-Definition-of-Probability-3", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPAPDA", "youtube_id": "TF6AWXSlOcY", "youtube_state": "done", "path": "Course/cs373/Media/2032", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nThe answer is 0.6. \n\n2\n00:00:02,000 --> 00:00:04,000\nThey have to add up to 1.\n\n3\n00:00:04,000 --> 00:00:11,000\nWe subtract 4 x 0.1, which is 0.4, which is 0.6.\n\n4\n00:00:11,000 --> 00:00:14,000\nThat's the valid probability.\n\n", "id": 2032}, "key": "agpzfnVkYWNpdHl1cj0LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GBgM", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/24", "type": "Nugget", "id": 24}, {"nuggetType": "lecture", "name": "Coin Flip Quiz", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "fae4d591-2d2b-4001-a046-23428ee15aa5", "name": "cs373_unit1_32_q_Coin-Flip-Quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJ8nDA", "youtube_id": "hzDsYZ61D5M", "youtube_state": "done", "path": "Course/cs373/Media/5023", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nLet me test total probability in a quiz.\n\n2\n00:00:03,000 --> 00:00:07,000\nSuppose I flip a coin, and the coin comes up tails or heads.\n\n3\n00:00:07,000 --> 00:00:09,000\nSuppose it's a fair coin.\n\n4\n00:00:09,000 --> 00:00:13,000\nThe probability of tails or of heads is both 1/2.\n\n5\n00:00:13,000 --> 00:00:19,000\nNow let's say that the coin comes up tails, and I just accept and don't do anything.\n\n6\n00:00:19,000 --> 00:00:22,000\nBut suppose it comes up heads, and I flip it again,\n\n7\n00:00:22,000 --> 00:00:25,000\nand after 1 flip, I accept the result.\n\n8\n00:00:25,000 --> 00:00:29,000\nMy quiz for you is what is the probability that the final result is heads?\n\n9\n00:00:29,000 --> 00:00:32,000\nThat's an example of total probability.\n\n", "id": 5023}, "key": "agpzfnVkYWNpdHl1cj0LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GBoM", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/26", "type": "Nugget", "id": 26}, {"nuggetType": "quiz", "name": "Two Coin Quiz", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "key": "agpzfnVkYWNpdHl1cj0LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GBsM", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/27", "type": "Nugget", "id": 27}, {"nuggetType": "lecture", "name": "Introduction", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "4c89ce26-0540-4111-849b-3d722e6e2fa2", "name": "cs373_unit1_00_l_Introduction", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOkHDA", "youtube_id": "Uqt_pRbR8rI", "youtube_state": "done", "path": "Course/cs373/Media/1001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nSo welcome to Artificial Intelligence for Robotics.\n\n2\n00:00:05,000 --> 00:00:08,000\nYou are entering at exciting 7-week class \n\n3\n00:00:08,000 --> 00:00:12,000\nin which you'll learn how to program self-driving cars.\n\n4\n00:00:12,000 --> 00:00:16,000\nAnd just to motivate what we're trying to achieve in this class,\n\n5\n00:00:16,000 --> 00:00:18,000\nlet me show you some videos.\n\n6\n00:00:18,000 --> 00:00:25,000\nMy interest in self-driving cars started with the DARPA Grand Challenge in 2004\n\n7\n00:00:25,000 --> 00:00:28,000\nin which my team at Stanford developed Stanley, \n\n8\n00:00:28,000 --> 00:00:31,000\na robot that could drive itself through the Mojave Desert.\n\n9\n00:00:31,000 --> 00:00:34,000\nThe vehicle was based on a Volkswagen Touareg \n\n10\n00:00:34,000 --> 00:00:39,000\nthat was equipped with all kinds of sensors like GPS and laser,\n\n11\n00:00:39,000 --> 00:00:43,000\nand it was able to make its own decisions without any human input whatsoever.\n\n12\n00:00:43,000 --> 00:00:46,000\nThe DARPA Grand Challenge was a government-sponsored race\n\n13\n00:00:46,000 --> 00:00:48,000\n that took place in 2005.\n\n14\n00:00:48,000 --> 00:00:52,000\nHere we see our robot Stanley moving through the desert \n\n15\n00:00:52,000 --> 00:00:55,000\ncompletely without a human on board.\n\n16\n00:00:55,000 --> 00:00:59,000\nThe task was to drive a desert trail for about 130 miles, \n\n17\n00:00:59,000 --> 00:01:02,000\nand whoever was fastest would win the race.\n\n18\n00:01:02,000 --> 00:01:05,000\nHere we're passing a different robot by Carnegie Mellon University\n\n19\n00:01:05,000 --> 00:01:08,000\nabout 110 miles into the race.\n\n20\n00:01:08,000 --> 00:01:13,000\nOur robot was able to navigate really steep mountainous roads\n\n21\n00:01:13,000 --> 00:01:18,000\nand able to avoid collisions with rocks or falling down a cliff\n\n22\n00:01:18,000 --> 00:01:23,000\nall based on its ability to use what I'm going to teach you in this class.\n\n23\n00:01:23,000 --> 00:01:29,000\nAfter almost 7 hours and 131 miles I robot returned all the way to the starting base\n\n24\n00:01:29,000 --> 00:01:33,000\nas the first robot to ever finish a DARPA Grand Challenge\n\n25\n00:01:33,000 --> 00:01:36,000\nwinning Stanford University 2 million bucks\n\n26\n00:01:36,000 --> 00:01:42,000\nand Stanley a place in the Smithsonian Museum of American History.\n\n27\n00:01:42,000 --> 00:01:47,000\nThis work led to the Urban Challenge, in which we built another robot called Junior\n\n28\n00:01:47,000 --> 00:01:49,000\nthat eventually took second place.\n\n29\n00:01:49,000 --> 00:01:52,000\nThe Urban Challenge was a followup race by DARPA\n\n30\n00:01:52,000 --> 00:01:55,000\nin which cars were asked to drive in traffic,\n\n31\n00:01:55,000 --> 00:01:59,000\nwhere as the Grand Challenge was king of a motionless desert floor,\n\n32\n00:01:59,000 --> 00:02:04,000\nthis was a mock urban city where the robot was able to interact with other traffic\n\n33\n00:02:04,000 --> 00:02:08,000\nand had to follow the traffic rules as in this left turn over here.\n\n34\n00:02:08,000 --> 00:02:11,000\nIt had to be stay on lanes with very high precision,\n\n35\n00:02:11,000 --> 00:02:16,000\naccommodate oncoming traffic and just drive confidently\n\n36\n00:02:16,000 --> 00:02:20,000\nin a situation that really resembled a small city.\n\n37\n00:02:20,000 --> 00:02:24,000\nThis led at Google to a sequence of experiments\n\n38\n00:02:24,000 --> 00:02:26,000\n known as the Google self-driving car.\n\n39\n00:02:26,000 --> 00:02:30,000\nI believe these are the best robotic cars out there today.\n\n40\n00:02:30,000 --> 00:02:34,000\nHere we see one of our Priuses on University Avenue in Palo Alto\n\n41\n00:02:34,000 --> 00:02:37,000\nkind of undetected driving just like a human driving just like a human driver,\n\n42\n00:02:37,000 --> 00:02:40,000\nbut this car was driving by itself.\n\n43\n00:02:40,000 --> 00:02:43,000\nOur cars have been able to drive hundreds of thousands of miles\n\n44\n00:02:43,000 --> 00:02:46,000\n all across California and some of Nevada,\n\n45\n00:02:46,000 --> 00:02:53,000\n in downtown areas like San Francisco, on busy highways.\n\n46\n00:02:53,000 --> 00:03:00,000\nHere in Monterrey, a small coastal city in California with lots and lots of pedestrians.\n\n47\n00:03:00,000 --> 00:03:06,000\nThese are all completely self-driving moments where the car is able to accommodate\n\n48\n00:03:06,000 --> 00:03:10,000\n things like deer in the headlights in the middle of the night\n\n49\n00:03:10,000 --> 00:03:16,000\nor even crooked Lombard Street in San Francisco as shown in this video.\n\n50\n00:03:16,000 --> 00:03:19,000\nThis is what I'm doing on my day job.\n\n51\n00:03:19,000 --> 00:03:23,000\nI really love, with my team, building self-driving cars.\n\n52\n00:03:23,000 --> 00:03:26,000\nWe believe it's going to really change the world,\n\n53\n00:03:26,000 --> 00:03:31,000\nand in this class that's what I hope to enable you to do.\n\n54\n00:03:31,000 --> 00:03:34,000\nLet's dive in.\n\n", "id": 1001}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOoHDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/1002", "type": "Nugget", "id": 1002}, {"nuggetType": "lecture", "name": "Localization", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "2705b68a-df78-4262-a4fd-88f2e56b8a8c", "name": "cs373_unit1_01_l_Localization", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLkXDA", "youtube_id": "31xZhj2uPr4", "youtube_state": "done", "path": "Course/cs373/Media/3001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nSo let's dive in and study artificial intelligence for robotics.\n\n2\n00:00:05,000 --> 00:00:09,000\nThe very first problem I'm trying to solve is called localization.\n\n3\n00:00:09,000 --> 00:00:12,000\nIt involves a robot that's lost in space.\n\n4\n00:00:12,000 --> 00:00:15,000\nIt could be a car. It could be a mobile robot.\n\n5\n00:00:15,000 --> 00:00:21,000\nSo here is the environment, and the poor robot has no clue where it is.\n\n6\n00:00:21,000 --> 00:00:25,000\nSimilarly, we might have a car driving on a highway, \n\n7\n00:00:25,000 --> 00:00:28,000\nand this car would like to know where it is.\n\n8\n00:00:28,000 --> 00:00:31,000\nIt is inside the lane or is it crossing lane markers?\n\n9\n00:00:31,000 --> 00:00:34,000\nNow the traditional way to solve this problem is by using satellites.\n\n10\n00:00:34,000 --> 00:00:39,000\nThese satellites emit signals that the car can perceive.\n\n11\n00:00:39,000 --> 00:00:43,000\nThat's known as GPS, short for \"global positioning system,\"\n\n12\n00:00:43,000 --> 00:00:47,000\nand it's what you have in your dashboard if you have a car with GPS\n\n13\n00:00:47,000 --> 00:00:49,000\nthat shows you the maps and shows you where you are.\n\n14\n00:00:49,000 --> 00:00:54,000\nNow unfortunately, the problem with GPS is its really not very accurate.\n\n15\n00:00:54,000 --> 00:00:58,000\nIt's really common for a car to believe to be here but it has\n\n16\n00:00:58,000 --> 00:01:02,000\n2 meters all the way up to 10 meters of error.\n\n17\n00:01:02,000 --> 00:01:05,000\nSo if you try to stay in the lane with 10 meters of error,\n\n18\n00:01:05,000 --> 00:01:10,000\nyou're far off, and you're driving right over here, and you crash.\n\n19\n00:01:10,000 --> 00:01:15,000\nSo for our self-driving cars, to be able to stay in lanes using localization,\n\n20\n00:01:15,000 --> 00:01:20,000\nwe need something like 2-10 centimeters of error.\n\n21\n00:01:20,000 --> 00:01:23,000\nThen we can drive with GPS in lanes.\n\n22\n00:01:23,000 --> 00:01:29,000\nThe question is, how can we know where were are with 10 cm accuracy?\n\n23\n00:01:29,000 --> 00:01:31,000\nThat's the localization question.\n\n24\n00:01:37,000 --> 00:01:42,000\nIn the Google self-driving car, localization plays a key role.\n\n25\n00:01:42,000 --> 00:01:48,000\nWe record images of the road surface and then use the techniques \n\n26\n00:01:48,000 --> 00:01:52,000\nI'm just about to teach you to find out exactly where the robot is.\n\n27\n00:01:52,000 --> 00:01:55,000\nIt does so within a few centimeters of accuracy,\n\n28\n00:01:55,000 --> 00:02:01,000\nand that makes it possible to stay inside the lane even if the lane markers are missing.\n\n29\n00:02:01,000 --> 00:02:06,000\nSo localization has a lot of math, but before I dive into mathematical detail,\n\n30\n00:02:06,000 --> 00:02:09,000\nI want to give you an intuition for the basic principles.\n\n31\n00:02:09,000 --> 00:02:12,000\nI want to tell you the story of how we will localize this,\n\n32\n00:02:12,000 --> 00:02:15,000\nand then we can go through the math together so you can understand it.\n\n33\n00:02:15,000 --> 00:02:18,000\nI also want to let you program your own localizer \n\n34\n00:02:18,000 --> 00:02:22,000\nso you can program a self-driving car.\n\n", "id": 3001}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOsHDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/1003", "type": "Nugget", "id": 1003}, {"nuggetType": "lecture", "name": "Uniform Probability Quiz Solution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "c8a31e58-abcc-4c5c-a84e-8e38b753de96", "name": "cs373_unit1_02_s_Uniform-Probability-Quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNUPDA", "youtube_id": "IZC33Tmy8Lo", "youtube_state": "done", "path": "Course/cs373/Media/2005", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:09,000\nAnd the answer is 0.2, which is the total probability, 1, divided by 5 grid cells.\n\n", "id": 2005}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOwHDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/1004", "type": "Nugget", "id": 1004}, {"nuggetType": "lecture", "name": "Uniform Distribution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "f42e19e1-c18e-4094-b6a5-6576029450f9", "name": "cs373_unit1_03_p_Uniform-Distribution", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNo2DA", "youtube_id": "ysebYA6tDZ4", "youtube_state": "done", "path": "Course/cs373/Media/7002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nSo now in our Python interface, I'd like to take this code over here,\n\n2\n00:00:04,000 --> 00:00:08,000\nwhich assigns to p an empty list and modified into code where p becomes \n\n3\n00:00:08,000 --> 00:00:19,000\na uniform distribution over 5 grid cells as expressed in a vector of 5 probabilities.\n\n", "id": 7002}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GO0HDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/1005", "type": "Nugget", "id": 1005}, {"nuggetType": "lecture", "name": "Compute Sum Solution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "85620242-b08a-47ab-a8be-5a5a6d486ae8", "name": "cs373_unit1_06_s_Compute-Sum", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNsPDA", "youtube_id": "WgX17_mmc1c", "youtube_state": "done", "path": "Course/cs373/Media/2011", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nIf you add up all these values, you get 0.36.\n\n", "id": 2011}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPEHDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/1009", "type": "Nugget", "id": 1009}, {"nuggetType": "quiz", "name": "Normalize Distribution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPIHDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/1010", "type": "Nugget", "id": 1010}, {"nuggetType": "program", "name": "Phit And Pmiss", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPMHDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/1011", "suppliedCode": "#Write a code that outputs p after multiplying each entry \n#by pHit or pMiss at the appropriate places. Remember that\n#the red cells 1 and 2 are hits and the other green cells\n#are misses\n\n\np=[0.2,0.2,0.2,0.2,0.2]\npHit = 0.6\npMiss = 0.2\n\n#Enter code here\n\nprint p", "type": "Nugget", "id": 1011}, {"nuggetType": "lecture", "name": "Normalized Sense Function", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "0a85ea8c-4fb3-4e20-b56f-6279017b9ab9", "name": "cs373_unit1_11_p_Normalized-Sense-Function", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGN4PDA", "youtube_id": "GqWszyHTYas", "youtube_state": "done", "path": "Course/cs373/Media/2014", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nLet's take that same piece of code \n\n2\n00:00:02,000 --> 00:00:05,000\nand modify it to give me a valid probability distribution.\n\n3\n00:00:05,000 --> 00:00:11,000\nPlease modify this code so it normalizes the output of the function sense\n\n4\n00:00:11,000 --> 00:00:14,000\nso it add up to 1.\n\n", "id": 2014}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPQHDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/1012", "type": "Nugget", "id": 1012}, {"nuggetType": "program", "name": "Test Sense Function", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPUHDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/1013", "suppliedCode": "#Try using your code with a measurement of 'green' and \n#make sure the resulting probability distribution is correct.\n\np=[0.2, 0.2, 0.2, 0.2, 0.2]\nworld=['green', 'red', 'red', 'green', 'green']\nZ = 'red'\npHit = 0.6\npMiss = 0.2\n\ndef sense(p, Z):\n    q=[]\n    for i in range(len(p)):\n        hit = (Z == world[i])\n        q.append(p[i] * (hit * pHit + (1-hit) * pMiss))\n    s = sum(q)\n    for i in range(len(p)):\n        q[i]=q[i]/s \n    return q\nprint sense(p, Z)\n", "type": "Nugget", "id": 1013}, {"nuggetType": "lecture", "name": "Multiple Measurements", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "575b81b7-9e1f-4476-851b-701bf183a001", "name": "cs373_unit1_13_p_Multiple-Measurements", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMAXDA", "youtube_id": "gDO4sF8gR9k", "youtube_state": "done", "path": "Course/cs373/Media/3008", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nIn fact, I'd like you to modify this code a little bit more\n\n2\n00:00:04,000 --> 00:00:06,000\nin a way that we have multiple measurements.\n\n3\n00:00:06,000 --> 00:00:10,000\nInstead of Z, we're going to make a measurement vector called \"measurements.\"\n\n4\n00:00:10,000 --> 00:00:14,000\nWe're going to assume that we're going to first sense red and then green.\n\n5\n00:00:14,000 --> 00:00:17,000\nCan you modify the code that so it updates the probability twice \n\n6\n00:00:17,000 --> 00:00:21,000\nand gives me the posterior after both of these measurements are incorporated?\n\n7\n00:00:21,000 --> 00:00:23,000\nIn fact, can you modify it in a way \n\n8\n00:00:23,000 --> 00:00:27,000\nthat any sequence of measurements of any length can be processed?\n\n", "id": 3008}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPYHDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/1014", "type": "Nugget", "id": 1014}, {"nuggetType": "quiz", "name": "Exact Motion", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPgHDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/1016", "type": "Nugget", "id": 1016}, {"nuggetType": "quiz", "name": "Inexact Motion 3", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPwHDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/1020", "type": "Nugget", "id": 1020}, {"nuggetType": "lecture", "name": "Inexact Move Function", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "8477fdda-360e-4e18-be68-68341a538d32", "name": "cs373_unit1_19_p_Inexact-Move-Function", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1chwLEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGBMM", "youtube_id": "68Kao9dkIKA", "youtube_state": "done", "path": "Course/cs373/Media/19", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:09,000\nI'm going to give us a pExact of 0.8, pOvershoot of 0.1, and pUndershoot of 0.1.\n\n2\n00:00:09,000 --> 00:00:14,000\nI'd like you to modify the move procedure to accommodate these extra probabilities.\n\n", "id": 19}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GP0HDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/1021", "type": "Nugget", "id": 1021}, {"nuggetType": "program", "name": "Move Twice", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GP8HDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/1023", "suppliedCode": "#Write code that makes the robot move twice and then prints \n#out the resulting distribution, starting with the initial \n#distribution p = [0, 1, 0, 0, 0]\n\np=[0, 1, 0, 0, 0]\nworld=['green', 'red', 'red', 'green', 'green']\nmeasurements = ['red', 'green']\npHit = 0.6\npMiss = 0.2\npExact = 0.8\npOvershoot = 0.1\npUndershoot = 0.1\n\ndef sense(p, Z):\n    q=[]\n    for i in range(len(p)):\n        hit = (Z == world[i])\n        q.append(p[i] * (hit * pHit + (1-hit) * pMiss))\n    s = sum(q)\n    for i in range(len(q)):\n        q[i] = q[i] / s\n    return q\n\ndef move(p, U):\n    q = []\n    for i in range(len(p)):\n        s = pExact * p[(i-U) % len(p)]\n        s = s + pOvershoot * p[(i-U-1) % len(p)]\n        s = s + pUndershoot * p[(i-U+1) % len(p)]\n        q.append(s)\n    return q\n#\n# ADD CODE HERE\n#\nprint move(p,1)\n", "type": "Nugget", "id": 1023}, {"nuggetType": "lecture", "name": "Move 1000", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "24458555-5231-49a9-b194-f6e252bfe779", "name": "cs373_unit1_22_p_Move-1000", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIUvDA", "youtube_id": "x2o1g3J-1nw", "youtube_state": "done", "path": "Course/cs373/Media/6021", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nLet's move 1,000 times. \n\n2\n00:00:02,000 --> 00:00:07,000\nWrite a piece of code that moves 1,000 steps and give me the final distribution.\n\n", "id": 6021}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GIAIDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/1024", "type": "Nugget", "id": 1024}, {"nuggetType": "lecture", "name": "Sense And Move", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "bd83feb0-9c5f-408d-bce5-7c73dd9210d3", "name": "cs373_unit1_23_p_Sense-and-Move", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNU-DA", "youtube_id": "K8g3Hss8Q1A", "youtube_state": "done", "path": "Course/cs373/Media/8021", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nWow, you've basically programmed the Google self-driving car localization\n\n2\n00:00:05,000 --> 00:00:08,000\neven though you might not quite known it yet.\n\n3\n00:00:08,000 --> 00:00:10,000\nLet me tell you where we are.\n\n4\n00:00:10,000 --> 00:00:13,000\nWe talked about measurement updates, and we talked about motion.\n\n5\n00:00:13,000 --> 00:00:16,000\nWe called these two routines \"sense\" and \"move.\"\n\n6\n00:00:16,000 --> 00:00:20,000\nNow, localization is nothing else but the iteration of \"sense\" and \"move.\"\n\n7\n00:00:20,000 --> 00:00:24,000\nThere is an initial belief that is tossed into this loop if you.\n\n8\n00:00:24,000 --> 00:00:27,000\nIf you sense first, if comes to the left side.\n\n9\n00:00:27,000 --> 00:00:33,000\nThen localization cycles through these--move, sense, move, sense, move, sense.\n\n10\n00:00:33,000 --> 00:00:36,000\nmove, sense, move, sense cycle.\n\n11\n00:00:36,000 --> 00:00:40,000\nEvery time the robot moves, it loses information as to where it is.\n\n12\n00:00:40,000 --> 00:00:42,000\nThat's because robot motion is inaccurate.\n\n13\n00:00:42,000 --> 00:00:45,000\nEvery time it senses it gains information.\n\n14\n00:00:45,000 --> 00:00:47,000\nThat is manifest by the fact that after motion, \n\n15\n00:00:47,000 --> 00:00:51,000\nthe probability distribution is a little bit flatter and a bit more spread out.\n\n16\n00:00:51,000 --> 00:00:55,000\nand after sensing, it's focused a little bit more.\n\n17\n00:00:55,000 --> 00:01:00,000\nIn fact, as a foot note, there is a measure of information called \"entropy.\"\n\n18\n00:01:00,000 --> 00:01:02,000\nHere is one of the many ways you can write it:\n\n19\n00:01:02,000 --> 00:01:04,000\n[-\u01a9p(xi)log p(xi)]\n\n20\n00:01:04,000 --> 00:01:07,000\nas the expected local likelihood of the probability of each grid cell.\n\n21\n00:01:07,000 --> 00:01:12,000\nWithout going into detail, this is a measure of information that the distribution has,\n\n22\n00:01:12,000 --> 00:01:18,000\nand it can be shown that the update step, the motion step, makes the entropy go down,\n\n23\n00:01:18,000 --> 00:01:20,000\nand the measurement step makes it go up.\n\n24\n00:01:20,000 --> 00:01:23,000\nYou really losing and gaining information.\n\n25\n00:01:23,000 --> 00:01:26,000\nI would no love to implement this in our code.\n\n26\n00:01:26,000 --> 00:01:29,000\nIn addition to the 2 measurements we had before, red and green,\n\n27\n00:01:29,000 --> 00:01:32,000\nI'm going to give you 2 motions--1 and 1, \n\n28\n00:01:32,000 --> 00:01:34,000\nwhich means the robot moves right and right again.\n\n29\n00:01:34,000 --> 00:01:40,000\nCan you compute the posterior distribution if the robot first senses red,\n\n30\n00:01:40,000 --> 00:01:45,000\nthen moves right by 1, then senses green, then moves right again?\n\n31\n00:01:45,000 --> 00:01:48,000\nLet's start with a uniform prior distribution.\n\n", "id": 8021}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GIIIDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/1026", "type": "Nugget", "id": 1026}, {"nuggetType": "lecture", "name": "Formal Definition Of Probability 2 Solution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "84b6fbc8-061f-46cc-a1a6-88eb383e5e87", "name": "cs373_unit1_27_s_Formal-Definition-of-Probability-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIQIDA", "youtube_id": "uw51WQDqXAI", "youtube_state": "done", "path": "Course/cs373/Media/1028", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nThe answer is 1. You got it.\n\n", "id": 1028}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GIUIDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/1029", "type": "Nugget", "id": 1029}, {"nuggetType": "lecture", "name": "Total Probability", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "e99f3696-eceb-4683-a394-4fd35ba3e4db", "name": "cs373_unit1_01_l_Total-Probability", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNIPDA", "youtube_id": "n1EacrqyCs8", "youtube_state": "done", "path": "Course/cs373/Media/2002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nSo let me tell you my story in a world where our robot resides. \n\n2\n00:00:05,000 --> 00:00:09,000\nLet's assume the robot has no clue where it is.\n\n3\n00:00:09,000 --> 00:00:14,000\nThen we remodel this with a function--I'm going to draw into this diagram over here\n\n4\n00:00:14,000 --> 00:00:20,000\nwhere the vertical axis is the probability for any location in this world,\n\n5\n00:00:20,000 --> 00:00:25,000\nand the horizontal axis corresponds to all the places in this 1-dimensional world.\n\n6\n00:00:25,000 --> 00:00:29,000\nThe way I'm going to model the robot's current belief about where it might be,\n\n7\n00:00:29,000 --> 00:00:33,000\nit's confusion is by a uniform function that assigns equal weight\n\n8\n00:00:33,000 --> 00:00:36,000\n to every possible place in this world.\n\n9\n00:00:36,000 --> 00:00:39,000\nThat is the state of maximum confusion\n\n10\n00:00:39,000 --> 00:00:42,000\nNow, to localize the world has to have some distinctive features.\n\n11\n00:00:42,000 --> 00:00:46,000\nLet's assume there are 3 different landmarks in the world.\n\n12\n00:00:46,000 --> 00:00:55,000\nThere is a door over here, there's a door over here, and a 3rd one way back here.\n\n13\n00:00:55,000 --> 00:00:57,000\nFor the sake of the argument, \n\n14\n00:00:57,000 --> 00:00:59,000\nlet's assume they all look alike, so they're not distinguishable,\n\n15\n00:00:59,000 --> 00:01:04,000\nbut you can distinguish the door from the non-door area--from the wall.\n\n16\n00:01:04,000 --> 00:01:09,000\nNow let's see how the robot can localize itself by assuming it senses,\n\n17\n00:01:09,000 --> 00:01:12,000\nand it senses that it's standing right next to a door.\n\n18\n00:01:12,000 --> 00:01:17,000\nSo all it knows now is that it is located, likely, next to a door.\n\n19\n00:01:17,000 --> 00:01:20,000\nHowever would this affect our belief?\n\n20\n00:01:20,000 --> 00:01:23,000\nHere is the critical step for localization.\n\n21\n00:01:23,000 --> 00:01:26,000\nIf you understand this step, you understand localization.\n\n22\n00:01:26,000 --> 00:01:30,000\nThe measurement of a door transforms our belief function,\n\n23\n00:01:30,000 --> 00:01:35,000\ndefined over possible locations, to a new function that looks pretty much like this.\n\n24\n00:01:35,000 --> 00:01:42,000\nFor the 3 locations adjacent to doors, we now have an increased belief of being there\n\n25\n00:01:42,000 --> 00:01:46,000\nwhereas all the other locations have a decreased belief.\n\n26\n00:01:46,000 --> 00:01:51,000\nThis is a probability distribution that assigns higher probability for being next to a door,\n\n27\n00:01:51,000 --> 00:02:00,000\nand it's called the posterior belief where the word \"posterior\" means it's after a measurement has been taken.\n\n28\n00:02:00,000 --> 00:02:04,000\nNow, the key aspect of this belief is that we still don't know where we are.\n\n29\n00:02:04,000 --> 00:02:07,000\nThere are 3 possible door locations, and in fact, it might be\n\n30\n00:02:07,000 --> 00:02:11,000\nthat the sensors were erroneous, and we accidentally saw a door where there's none.\n\n31\n00:02:11,000 --> 00:02:16,000\nSo there is still a residual probability of being in these places over here, \n\n32\n00:02:16,000 --> 00:02:22,000\nbut these three bumps together really express our current best belief of where we are.\n\n33\n00:02:22,000 --> 00:02:29,000\nThis representation is absolutely core to probability and to more world localization. \n\n34\n00:02:29,000 --> 00:02:32,000\nNow let's assume the robot moves.\n\n35\n00:02:32,000 --> 00:02:35,000\nSay it moves to the right by a certain distance.\n\n36\n00:02:35,000 --> 00:02:40,000\nThen we can shift the belief according to the motion.\n\n37\n00:02:40,000 --> 00:02:43,000\nAnd the way this might look like is about like this.\n\n38\n00:02:43,000 --> 00:02:46,000\nSo this bump over here made it to here.\n\n39\n00:02:46,000 --> 00:02:50,000\nThis guy went over here, and this guy over here.\n\n40\n00:02:50,000 --> 00:02:53,000\nObviously, this robot knows its heading direction.\n\n41\n00:02:53,000 --> 00:02:56,000\nIt's moving to the right in this example,\n\n42\n00:02:56,000 --> 00:02:58,000\nand it knows roughly how far it moved.\n\n43\n00:02:58,000 --> 00:03:00,000\nNow, robot motion is somewhat uncertain.\n\n44\n00:03:00,000 --> 00:03:02,000\nWe can never be certain where the robot moved.\n\n45\n00:03:02,000 --> 00:03:06,000\nSo these things are a little bit flatter than these guys over here.\n\n46\n00:03:06,000 --> 00:03:11,000\nThe process of moving those bleeps to the right side is technically called a convolution.\n\n47\n00:03:11,000 --> 00:03:15,000\nLet's now assume the robot senses again, and for the sake of the argument,\n\n48\n00:03:15,000 --> 00:03:19,000\nlet's assume it sees itself right next to a door again,\n\n49\n00:03:19,000 --> 00:03:21,000\nso the measurement is the same as before.\n\n50\n00:03:21,000 --> 00:03:24,000\nNow the most amazing thing happens.\n\n51\n00:03:24,000 --> 00:03:29,000\nWe end up multiplying our belief, which is now prior to the second measurement,\n\n52\n00:03:29,000 --> 00:03:32,000\nwith a function that looks very much like this one over here,\n\n53\n00:03:32,000 --> 00:03:37,000\nwhich has a peak at each door and out comes a belief that looks like the following.\n\n54\n00:03:37,000 --> 00:03:42,000\nThere are a couple of minor bumps, but the only really big bump is this one over here.\n\n55\n00:03:42,000 --> 00:03:48,000\nThis one corresponds to this guy over there in the prior, \n\n56\n00:03:48,000 --> 00:03:53,000\nand it's the only place in this prior that really corresponds to the measurement of a door,\n\n57\n00:03:53,000 --> 00:03:57,000\nwhereas all the other places of doors have a low prior belief.\n\n58\n00:03:57,000 --> 00:04:01,000\nAs a result, this function is really interesting.\n\n59\n00:04:01,000 --> 00:04:04,000\nIt's a distribution that focuses most of its weight \n\n60\n00:04:04,000 --> 00:04:07,000\nonto the correct hypothesis of the world being in the second door,\n\n61\n00:04:07,000 --> 00:04:12,000\nand it provides very little belief to places far away from doors.\n\n62\n00:04:12,000 --> 00:04:16,000\nAt this point, our robot has localized itself.\n\n63\n00:04:16,000 --> 00:04:21,000\nIf you understood this, you understand probability, and you understand localization.\n\n64\n00:04:21,000 --> 00:04:26,000\nSo congratulations. You understand probability and localization.\n\n65\n00:04:26,000 --> 00:04:30,000\nYou might not know yet, but that's really a core aspect of understanding\n\n66\n00:04:30,000 --> 00:04:33,000\n a whole bunch of things I'm going to teach you in the class today.\n\n", "id": 2002}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GNMPDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/2003", "type": "Nugget", "id": 2003}, {"nuggetType": "quiz", "name": "Uniform Probability Quiz", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GNQPDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/2004", "type": "Nugget", "id": 2004}, {"nuggetType": "lecture", "name": "Generalized Uniform Distribution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "ca29cc0b-5e2c-498b-93e1-37475806b14d", "name": "cs373_unit1_04_p_Generalized-Uniform-Distribution", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPIuDA", "youtube_id": "e21oU80gwWc", "youtube_state": "done", "path": "Course/cs373/Media/6002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nLet's see if we can modify this to make a vector of length n\n\n2\n00:00:05,000 --> 00:00:11,000\nwhere it can vary the value of n and get a resulting vector with n elements.\n\n3\n00:00:11,000 --> 00:00:14,000\nSo for any with 5, we'd get the same result as before,\n\n4\n00:00:14,000 --> 00:00:18,000\nbut for any with 10, I should get a vector of length 10,\n\n", "id": 6002}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GNcPDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/2007", "type": "Nugget", "id": 2007}, {"nuggetType": "quiz", "name": "Probability After Sense", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GNkPDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/2009", "type": "Nugget", "id": 2009}, {"nuggetType": "lecture", "name": "Normalize Distribution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "5ae4502b-1593-4562-8a2b-c8c314d84bb4", "name": "cs373_unit1_07_q_Normalize-Distribution", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1chwLEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGAYM", "youtube_id": "Uc_rHR6U70U", "youtube_state": "done", "path": "Course/cs373/Media/6", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nTo turn this back into a probability distribution,\n\n2\n00:00:03,000 --> 00:00:06,000\nwe will now divide each of these numbers by 0.36.\n\n3\n00:00:06,000 --> 00:00:09,000\nPut differently, we normalize.\n\n4\n00:00:09,000 --> 00:00:17,000\nPlease, in these 5 fields enter your result for dividing 0.04 or 0.12 by 0.36.\n\n5\n00:00:17,000 --> 00:00:21,000\nPlease check that the sum of those truly adds up to 1.\n\n", "id": 6}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GNwPDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/2012", "type": "Nugget", "id": 2012}, {"nuggetType": "program", "name": "Normalized Sense Function", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOAPDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/2016", "suppliedCode": "#Modify your code so that it normalizes the output for \n#the function sense. This means that the entries in q \n#should sum to one.\n\n\np=[0.2, 0.2, 0.2, 0.2, 0.2]\nworld=['green', 'red', 'red', 'green', 'green']\nZ = 'red'\npHit = 0.6\npMiss = 0.2\n\ndef sense(p, Z):\n    q=[]\n    for i in range(len(p)):\n        hit = (Z == world[i])\n        q.append(p[i] * (hit * pHit + (1-hit) * pMiss))\n    return q\nprint sense(p,Z)\n", "type": "Nugget", "id": 2016}, {"nuggetType": "lecture", "name": "Test Sense Function Solution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "679e81c6-50a7-4468-b353-7e2e61c7ddca", "name": "cs373_unit1_12_s_Test-Sense-Function", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMY-DA", "youtube_id": "F8AHaaJVmkw", "youtube_state": "done", "path": "Course/cs373/Media/8006", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nI'm now replacing the red by green over here,\n\n2\n00:00:04,000 --> 00:00:08,000\nand I rerun my code and out come these funny numbers.\n\n3\n00:00:08,000 --> 00:00:11,000\nSomewhere in there is the division by 44,\n\n4\n00:00:11,000 --> 00:00:16,000\nbut you can see that the 1st, the 4th, and the 5th grid cell have a much larger value\n\n5\n00:00:16,000 --> 00:00:20,000\nthan the grid cells in the middle.\n\n6\n00:00:20,000 --> 00:00:22,000\nSo let's dive in.\n\n", "id": 8006}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOEPDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/2017", "type": "Nugget", "id": 2017}, {"nuggetType": "program", "name": "Multiple Measurements", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOIPDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/2018", "suppliedCode": "#Modify the code so that it updates the probability twice\n#and gives the posterior distribution after both \n#measurements are incorporated. Make sure that your code \n#allows for any sequence of measurement of any length.\n\np=[0.2, 0.2, 0.2, 0.2, 0.2]\nworld=['green', 'red', 'red', 'green', 'green']\nmeasurements = ['red', 'green']\npHit = 0.6\npMiss = 0.2\n\ndef sense(p, Z):\n    q=[]\n    for i in range(len(p)):\n        hit = (Z == world[i])\n        q.append(p[i] * (hit * pHit + (1-hit) * pMiss))\n    s = sum(q)\n    for i in range(len(q)):\n        q[i] = q[i] / s\n    return q\n#\n#ADD YOUR CODE HERE\n#\nprint p\n", "type": "Nugget", "id": 2018}, {"nuggetType": "quiz", "name": "Inexact Motion 1", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOMPDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/2019", "type": "Nugget", "id": 2019}, {"nuggetType": "lecture", "name": "Limit Distribution Quiz Solution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "6c104734-79ef-40d4-a3d9-6a528fe65259", "name": "cs373_unit1_20_s_Limit-Distribution-Quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNA-DA", "youtube_id": "SXSafquSoW8", "youtube_state": "done", "path": "Course/cs373/Media/8016", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nYou might have guess it correctly. It's the uniform distribution.\n\n2\n00:00:03,000 --> 00:00:06,000\nThere's an intuitive reasoning behind this.\n\n3\n00:00:06,000 --> 00:00:09,000\nEvery time we move, we lose information.\n\n4\n00:00:09,000 --> 00:00:12,000\nThat is, in the initial distribution we know exactly where we are.\n\n5\n00:00:12,000 --> 00:00:17,000\nOne step in we have a 0.8 chance, but the 0.8 will fall to something smaller\n\n6\n00:00:17,000 --> 00:00:20,000\nas we move on--0.64 and so on.\n\n7\n00:00:20,000 --> 00:00:25,000\nThe distribution of the absolute least information is the uniform distribution.\n\n8\n00:00:25,000 --> 00:00:27,000\nIt has no preference whatsoever.\n\n9\n00:00:27,000 --> 00:00:32,000\nThat is really the result of moving many, many times.\n\n10\n00:00:32,000 --> 00:00:34,000\nThere is a way to derive this mathematically,\n\n11\n00:00:34,000 --> 00:00:41,000\nand I can prove a property that's highly related, which is a balance property.\n\n12\n00:00:41,000 --> 00:00:47,000\nSay we take x4, and we'd like to understand how x4 at some time sub t\n\n13\n00:00:47,000 --> 00:00:52,000\ncorresponds to the previous time distribution over all these variables.\n\n14\n00:00:52,000 --> 00:00:55,000\nFor this to be stationary, it has to be the same.\n\n15\n00:00:55,000 --> 00:01:08,000\nPut differently, the probability of x4 must be the same as 0.8p(x2) + 0.1p(x1) + 0.1p(x3).\n\n16\n00:01:08,000 --> 00:01:12,000\nThis is exactly the same calculation we did before where we asked \n\n17\n00:01:12,000 --> 00:01:14,000\nwhat's the chance of being x4.\n\n18\n00:01:14,000 --> 00:01:17,000\nWell, you might be coming from x2, x1, or x3,\n\n19\n00:01:17,000 --> 00:01:20,000\nand as these probabilities are 0.8, 0.1, and 0.1, \n\n20\n00:01:20,000 --> 00:01:22,000\nthey govern the likelihood you might have been coming from there.\n\n21\n00:01:22,000 --> 00:01:30,000\nThose together must hold true in the limit when things don't move anymore.\n\n22\n00:01:30,000 --> 00:01:33,000\nNow, you might think there are many different ways to solve this\n\n23\n00:01:33,000 --> 00:01:35,000\nand the 0.2 is just one solution,\n\n24\n00:01:35,000 --> 00:01:38,000\nbut it turns out 0.2 is the only solution.\n\n25\n00:01:38,000 --> 00:01:42,000\nIf you plug in 0.2 over here and 0.2 over here and 0.2 over here,\n\n26\n00:01:42,000 --> 00:01:47,000\nyou get 1 x 0.2, and that's 0.2 on the right side.\n\n27\n00:01:47,000 --> 00:01:52,000\nClearly, those 0.2s over here meet the balance that is necessary\n\n28\n00:01:52,000 --> 00:01:55,000\nto define a valid solution in the limit.\n\n", "id": 8016}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOcPDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/2023", "type": "Nugget", "id": 2023}, {"nuggetType": "program", "name": "Sense And Move", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOkPDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/2025", "suppliedCode": "#Given the list motions=[1,1] which means the robot \n#moves right and then right again, compute the posterior \n#distribution if the robot first senses red, then moves \n#right one, then senses green, then moves right again, \n#starting with a uniform prior distribution.\n\np=[0.2, 0.2, 0.2, 0.2, 0.2]\nworld=['green', 'red', 'red', 'green', 'green']\nmeasurements = ['red', 'green']\nmotions = [1,1]\npHit = 0.6\npMiss = 0.2\npExact = 0.8\npOvershoot = 0.1\npUndershoot = 0.1\n\ndef sense(p, Z):\n    q=[]\n    for i in range(len(p)):\n        hit = (Z == world[i])\n        q.append(p[i] * (hit * pHit + (1-hit) * pMiss))\n    s = sum(q)\n    for i in range(len(q)):\n        q[i] = q[i] / s\n    return q\n\ndef move(p, U):\n    q = []\n    for i in range(len(p)):\n        s = pExact * p[(i-U) % len(p)]\n        s = s + pOvershoot * p[(i-U-1) % len(p)]\n        s = s + pUndershoot * p[(i-U+1) % len(p)]\n        q.append(s)\n    return q\n#\n# ADD CODE HERE\n#\nprint p         \n", "type": "Nugget", "id": 2025}, {"nuggetType": "lecture", "name": "Localization Summary", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "f68a7025-4921-433a-844e-56c712ed43ae", "name": "cs373_unit1_25_l_Localization-Summary", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNg-DA", "youtube_id": "MVbo4OAgQCc", "youtube_state": "done", "path": "Course/cs373/Media/8024", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nWe learned that localization maintains a function over all \n\n2\n00:00:04,000 --> 00:00:07,000\npossible places where a road might be, \n\n3\n00:00:07,000 --> 00:00:10,000\nwhere each cell has an associated probability value.\n\n4\n00:00:10,000 --> 00:00:16,000\nThe measurement update function, or \"sense,\" is nothing else but a product\n\n5\n00:00:16,000 --> 00:00:19,000\nin which we take those probability values and multiply them up or down\n\n6\n00:00:19,000 --> 00:00:22,000\ndepending on the exact measurement.\n\n7\n00:00:22,000 --> 00:00:26,000\nBecause the product might violate the fact that probabilities add up to 1,\n\n8\n00:00:26,000 --> 00:00:29,000\nthere was a product followed by normalization.\n\n9\n00:00:29,000 --> 00:00:32,000\nMotion was a convolution.\n\n10\n00:00:32,000 --> 00:00:35,000\nThis word itself might sound cryptic, but what it really means is \n\n11\n00:00:35,000 --> 00:00:41,000\nfor each possible location after the motion, we reverse engineered the situation\n\n12\n00:00:41,000 --> 00:00:44,000\nand guessed where the world might have come from\n\n13\n00:00:44,000 --> 00:00:48,000\nand then collected, we added, the corresponding probabilities.\n\n14\n00:00:48,000 --> 00:00:54,000\nSomething as simple as multiplication and addition solves all of localization\n\n15\n00:00:54,000 --> 00:00:57,000\nand is the foundation for autonomous driving.\n\n16\n00:00:57,000 --> 00:01:03,000\nI want to spend a few minutes and go over the formal definition of localization.\n\n17\n00:01:03,000 --> 00:01:06,000\nI'm going to introduce probability and ask you lots of questions.\n\n", "id": 8024}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOwPDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/2028", "type": "Nugget", "id": 2028}, {"nuggetType": "lecture", "name": "Formal Definition Of Probability 1", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "c4031f9a-9cdd-4419-9571-f0197e85377b", "name": "cs373_unit1_26_q_Formal-Definition-of-Probability-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMoXDA", "youtube_id": "-F2gJXWbN6s", "youtube_state": "done", "path": "Course/cs373/Media/3018", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nFormally, we define a probability function to be P(X),\n\n2\n00:00:05,000 --> 00:00:09,000\nand it's a value that is bounded below and above by 0 and 1.\n\n3\n00:00:09,000 --> 00:00:11,000\nX often can take multiple values.\n\n4\n00:00:11,000 --> 00:00:13,000\nWe had the case of 5 grid cells.\n\n5\n00:00:13,000 --> 00:00:18,000\nSuppose it can only take 2 values--there's only 2 grid cells, x1 and x2.\n\n6\n00:00:18,000 --> 00:00:23,000\nIf the probability for x1 is 0.2, what would be the probability for x2?\n\n7\n00:00:23,000 --> 00:00:26,000\nPlease enter the number. It's a quiz, obviously.\n\n", "id": 3018}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GO0PDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/2029", "type": "Nugget", "id": 2029}, {"nuggetType": "lecture", "name": "Cancer Test", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "87162ff2-d4f5-42cd-b128-0ae43db0073b", "name": "cs373_unit1_30_q_Cancer-Test", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1chwLEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGBkM", "youtube_id": "SZ6Jg1wS604", "youtube_state": "done", "path": "Course/cs373/Media/25", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:06,000\nLet me ask you Bayes Rule in the context of a completely different example\n\n2\n00:00:06,000 --> 00:00:09,000\nto see if you understand how to apply Bayes Rule.\n\n3\n00:00:09,000 --> 00:00:12,000\nThis time it's about cancer testing.\n\n4\n00:00:12,000 --> 00:00:15,000\nIt is an example that is commonly studied in statistics classes.\n\n5\n00:00:15,000 --> 00:00:18,000\nSuppose there exists a certain type of cancer,\n\n6\n00:00:18,000 --> 00:00:22,000\nbut the cancer is rare--only 1 in a 1000 people has the cancer--\n\n7\n00:00:22,000 --> 00:00:26,000\nwhere as 999 in 1000 people don't have it, \n\n8\n00:00:26,000 --> 00:00:29,000\nillustrated by the probability of cancer and the probability of not cancer.\n\n9\n00:00:29,000 --> 00:00:33,000\nSupper we have a test, and the test can come out positive or negative.\n\n10\n00:00:33,000 --> 00:00:38,000\nThe probability that the test triggers positive if you have cancer is 0.8,\n\n11\n00:00:38,000 --> 00:00:44,000\nand the probability that the test comes out positive given that I'm cancer free is only 0.1.\n\n12\n00:00:44,000 --> 00:00:47,000\nClearly the test has a strong correlation to whether I have cancer.\n\n13\n00:00:47,000 --> 00:00:50,000\nHere's a really difficult question. \n\n14\n00:00:50,000 --> 00:00:56,000\nCan you compute for me the probability of cancer given that I just received a positive test.\n\n15\n00:00:56,000 --> 00:01:00,000\nLet me emphasize this is not an easy question, but you should be able,\n\n16\n00:01:00,000 --> 00:01:03,000\nbased on what I've taught you, to calculate this result.\n\n17\n00:01:03,000 --> 00:01:07,000\nThink of the cancer/non cancer as the robot position\n\n18\n00:01:07,000 --> 00:01:13,000\nand think of the positive as whether the colored door observed is the correct one.\n\n", "id": 25}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPEPDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/2033", "type": "Nugget", "id": 2033}, {"nuggetType": "quiz", "name": "Cancer Test", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPIPDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/2034", "type": "Nugget", "id": 2034}, {"nuggetType": "lecture", "name": "Cancer Test Solution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "1086d2f6-3ba4-45c3-b601-19e96fc18f02", "name": "cs373_unit1_30_s_Cancer-Test", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIcIDA", "youtube_id": "OgC5M2XdIac", "youtube_state": "done", "path": "Course/cs373/Media/1031", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:06,000\nThe answer is 0.0079.\n\n2\n00:00:06,000 --> 00:00:13,000\nIn other words, there is only a 7.9 percent chance--7.9 out of 100--\n\n3\n00:00:13,000 --> 00:00:17,000\nthat despite the positive test results, that you have cancer.\n\n4\n00:00:17,000 --> 00:00:20,000\nYou're going to apply the exact same mechanics as we did before.\n\n5\n00:00:20,000 --> 00:00:27,000\nThe result of Bayes Rule, non-normalized, of C given pos is simply the product\n\n6\n00:00:27,000 --> 00:00:33,000\nof my prior probability, 0.001, times 0.8, \n\n7\n00:00:33,000 --> 00:00:37,000\nwhich is the probability of a positive result in the cancer state.\n\n8\n00:00:37,000 --> 00:00:41,000\nThat ends up to be 0.0008.\n\n9\n00:00:41,000 --> 00:00:45,000\nThe non-normalized probability for the opposite event, the non-cancerous event,\n\n10\n00:00:45,000 --> 00:00:50,000\ngiven the positive test, is 0.999 times 0.1.\n\n11\n00:00:50,000 --> 00:00:55,000\nThat is obviously 0.0999.\n\n12\n00:00:55,000 --> 00:01:03,000\nOur normalizer is the sum of both of those, which is 0.1007.\n\n13\n00:01:03,000 --> 00:01:05,000\nJust add these two values up over here.\n\n14\n00:01:05,000 --> 00:01:12,000\nDividing 0.0008, the non-normalized probability, by 0.1007\n\n15\n00:01:12,000 --> 00:01:15,000\ngives us 0.079.\n\n16\n00:01:15,000 --> 00:01:19,000\nWe just applied Bayes Rules to compute a really involved probability \n\n17\n00:01:19,000 --> 00:01:22,000\nof having cancer after seeing a test result.\n\n", "id": 1031}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPMPDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/2035", "type": "Nugget", "id": 2035}, {"nuggetType": "lecture", "name": "Two Coin Quiz Solution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "446a7de8-a7a0-431f-acd4-3741de608f3a", "name": "cs373_unit1_33_s_Two-Coin-Quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGO02DA", "youtube_id": "_AhoOd8YUK0", "youtube_state": "done", "path": "Course/cs373/Media/7021", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nLet's work this out. \n\n2\n00:00:02,000 --> 00:00:08,000\nWhat I'm really asking you is the probability of a fair coin \"f\" given that I observed H.\n\n3\n00:00:08,000 --> 00:00:11,000\nThis has nothing to do with total probability\n\n4\n00:00:11,000 --> 00:00:15,000\nand all with Bayes Rules, because I'm talking about observations.\n\n5\n00:00:15,000 --> 00:00:20,000\nThe non-normalized probability according to Bayes Rule is obtained as follows:\n\n6\n00:00:20,000 --> 00:00:25,000\nthe probability of observing H for the fair coin is 0.5,\n\n7\n00:00:25,000 --> 00:00:28,000\nand the probability of having grabbed the fair coin is 0.5 as well.\n\n8\n00:00:28,000 --> 00:00:34,000\nThe non-normalized probability of not F given H, which is the loaded coin,\n\n9\n00:00:34,000 --> 00:00:37,000\nis probability of H given not f,\n\n10\n00:00:37,000 --> 00:00:40,000\nwhich we know to be 0.1--that's the one over here--\n\n11\n00:00:40,000 --> 00:00:44,000\ntimes the probability of not picking the fair coin, which is 0.5,\n\n12\n00:00:44,000 --> 00:00:47,000\nends up to be 0.05.\n\n13\n00:00:47,000 --> 00:00:55,000\nWhen we now normalize, we \u03b1 = 0.25 + 0.05, which is 0.3.\n\n14\n00:00:55,000 --> 00:01:05,000\nIf we now normalize the 0.25 over here with the 0.3, we get 0.833,\n\n15\n00:01:05,000 --> 00:01:07,000\nwhich is the same as 5/6.\n\n16\n00:01:07,000 --> 00:01:11,000\nThat's our posterior probability we hold the fair coin after we observed H.\n\n", "id": 7021}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPUPDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/2037", "type": "Nugget", "id": 2037}, {"nuggetType": "lecture", "name": "Uniform Distribution Solution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "4ab80518-3870-4678-a11e-ec83bbb5ed4c", "name": "cs373_unit1_03_s_Uniform-Distribution", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIsnDA", "youtube_id": "_sAkAALHyEg", "youtube_state": "done", "path": "Course/cs373/Media/5003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nHere's an easy solution. \n\n2\n00:00:02,000 --> 00:00:06,000\nYou just initialize the vector with five 0.2s.\n\n", "id": 5003}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GLoXDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/3002", "type": "Nugget", "id": 3002}, {"nuggetType": "lecture", "name": "Generalized Uniform Distribution Solution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "093ad796-9c2b-4f3c-852d-a4de6a5e8211", "name": "cs373_unit1_04_s_Generalized-Uniform-Distribution", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNs2DA", "youtube_id": "nsSvTTA0p8E", "youtube_state": "done", "path": "Course/cs373/Media/7003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nThe answer is simple.\n\n2\n00:00:02,000 --> 00:00:05,000\nUse a for loop as shown here,\n\n3\n00:00:05,000 --> 00:00:10,000\nand you append to the list n elements, each the size of 1/n.\n\n4\n00:00:10,000 --> 00:00:12,000\nThe dot over here is really important.\n\n5\n00:00:12,000 --> 00:00:15,000\nIt gives you the full point version.\n\n6\n00:00:15,000 --> 00:00:18,000\nUnfortunately, if we leave it out, the result will just be zeros,\n\n7\n00:00:18,000 --> 00:00:20,000\nwhich is not what you want.\n\n8\n00:00:20,000 --> 00:00:26,000\nNow we are able to initialize the initial belief of the robot in the world over here.\n\n", "id": 7003}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GLsXDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/3003", "type": "Nugget", "id": 3003}, {"nuggetType": "lecture", "name": "Probability After Sense Solution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "efcd54ce-9b62-47cc-8193-353317be3af0", "name": "cs373_unit1_05_s_Probability-After-Sense", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGI0nDA", "youtube_id": "dEiQObhi2J4", "youtube_state": "done", "path": "Course/cs373/Media/5005", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nThe answer is obviously for the red cells we get a 0.12\n\n2\n00:00:05,000 --> 00:00:08,000\nwhereas for the green cells we get a 0.04,\n\n3\n00:00:08,000 --> 00:00:14,000\nwhich is the product of 0.2 x 0.6 versus                     0.2 x 0.2.\n\n", "id": 5005}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GLwXDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/3004", "type": "Nugget", "id": 3004}, {"nuggetType": "lecture", "name": "Sum Of Probabilities", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "ff4c33ae-42ad-4576-a25a-6b0da3421fd7", "name": "cs373_unit1_09_p_Sum-of-Probabilities", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGL4XDA", "youtube_id": "z0oijOqN8K8", "youtube_state": "done", "path": "Course/cs373/Media/3006", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:06,000\nMy next question is can you print out the sum of those to normalize them?\n\n2\n00:00:06,000 --> 00:00:10,000\nModify the program so you get the sum of all the p's.\n\n", "id": 3006}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GL8XDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/3007", "type": "Nugget", "id": 3007}, {"nuggetType": "lecture", "name": "Exact Motion", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "ede0450a-0050-4e26-884d-7fa8f1dcefcb", "name": "cs373_unit1_14_q_Exact-Motion", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPcHDA", "youtube_id": "1mL6CtD3rAM", "youtube_state": "done", "path": "Course/cs373/Media/1015", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nBefore we're done with localization, I'd like to talk about robot motion.\n\n2\n00:00:04,000 --> 00:00:07,000\nSuppose we have a distribution over those cells--\n\n3\n00:00:07,000 --> 00:00:10,000\nsuch as this one: 1/9, 1/3, 1/3, 1/9, and 1/9--\n\n4\n00:00:10,000 --> 00:00:13,000\nand even though we don't know where the robot is,\n\n5\n00:00:13,000 --> 00:00:16,000\nthe robot moves, and it moves to the right.\n\n6\n00:00:16,000 --> 00:00:19,000\nIn fact, the way we're going to program is we will assume the world is cyclic,\n\n7\n00:00:19,000 --> 00:00:25,000\nso it drops off the right-most cell and finds itself on the left-most cell.\n\n8\n00:00:25,000 --> 00:00:29,000\nSuppose we know for a fact the world moved exactly 1 grid cell to the right,\n\n9\n00:00:29,000 --> 00:00:31,000\nincluding the cyclic motion.\n\n10\n00:00:31,000 --> 00:00:37,000\nCan you tell me for all these 5 values, what the posterior probability is after that motion?\n\n", "id": 1015}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GMEXDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/3009", "type": "Nugget", "id": 3009}, {"nuggetType": "lecture", "name": "Move Function", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "3ce25ce3-bd9e-4317-82a5-5cc999d6cf4c", "name": "cs373_unit1_15_p_Move-Function", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1chwLEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGA4M", "youtube_id": "wfjE0mVADIk", "youtube_state": "done", "path": "Course/cs373/Media/14", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:08,000\nI define a function \"move\" with a distribution p and a motion number \"U,\"\n\n2\n00:00:08,000 --> 00:00:12,000\nwhere U is the number of grid cells that the robot is moving to the right or to the left.\n\n3\n00:00:12,000 --> 00:00:17,000\nI want you to program a function that returns the new distribution Q after the move\n\n4\n00:00:17,000 --> 00:00:22,000\nwhere if U equals zero, Q is the same as p.\n\n5\n00:00:22,000 --> 00:00:27,000\nIf U equals 1, all the values are cyclically shifted to the right by 1.\n\n6\n00:00:27,000 --> 00:00:30,000\nIf U equals 3, they are cyclically shifted to the right by 3.\n\n7\n00:00:30,000 --> 00:00:35,000\nIf U equals -1, they're cyclically shifted to the left.\n\n8\n00:00:35,000 --> 00:00:40,000\nPlease call the function with argument p and a shift to the right by 1.\n\n9\n00:00:40,000 --> 00:00:43,000\nI've commented out my measurement part because for now \n\n10\n00:00:43,000 --> 00:00:45,000\nI don't want to do measurement updates.\n\n11\n00:00:45,000 --> 00:00:48,000\nIn addition to this, I will use a very simple p,\n\n12\n00:00:48,000 --> 00:00:52,000\nthat has a 1 at the second position and zeros elsewhere.\n\n13\n00:00:52,000 --> 00:00:54,000\nOtherwise, if we were to use the uniform p,\n\n14\n00:00:54,000 --> 00:00:56,000\n we couldn't even see the effect of  the motion\n\n15\n00:00:56,000 --> 00:00:59,000\nwhether that's programmed correctly or not.\n\n", "id": 14}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GMIXDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/3010", "type": "Nugget", "id": 3010}, {"nuggetType": "lecture", "name": "Limit Distribution Quiz", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "0d92e9bc-1af6-4f6f-a3e0-2547ddfab74b", "name": "cs373_unit1_20_q_Limit-Distribution-Quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOYPDA", "youtube_id": "kfPWiMsnWFI", "youtube_state": "done", "path": "Course/cs373/Media/2022", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nHere's a question for you that is somewhat involved,\n\n2\n00:00:03,000 --> 00:00:06,000\nand I really want to check your intuition.\n\n3\n00:00:06,000 --> 00:00:08,000\nSuppose we have 5 grid cells as before\n\n4\n00:00:08,000 --> 00:00:14,000\nwith an initial distribution that assigns 1 to the first grid cell and 0 to all the other ones.\n\n5\n00:00:14,000 --> 00:00:18,000\nLet's assume we do U = 1, which means with 0.8 chance \n\n6\n00:00:18,000 --> 00:00:21,000\nin each action we transition 1 to the right.\n\n7\n00:00:21,000 --> 00:00:24,000\nWith 0.1 chance we don't move at all,\n\n8\n00:00:24,000 --> 00:00:27,000\nand with 0.1 chance again we skip and move 2 steps.\n\n9\n00:00:27,000 --> 00:00:29,000\nAgain, let's assume the world is cyclic,\n\n10\n00:00:29,000 --> 00:00:33,000\nso every time I fall off on the right side, I find myself back on the left side.\n\n11\n00:00:33,000 --> 00:00:38,000\nThe question is suppose I run infinitely many motion steps.\n\n12\n00:00:38,000 --> 00:00:42,000\nThen I actually get a what's called a \"limit distribution\"\n\n13\n00:00:42,000 --> 00:00:47,000\nWhat's going to happen to my robot if it never senses but executes the action\n\n14\n00:00:47,000 --> 00:00:53,000\nof going 1 to the right on our little cyclic environment forever.?\n\n15\n00:00:53,000 --> 00:01:00,000\nWhat will be the so-called limit or stationary distribution be in the very end?\n\n", "id": 2022}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GMQXDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/3012", "type": "Nugget", "id": 3012}, {"nuggetType": "lecture", "name": "Move Twice", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "80b195b5-ee95-47d8-8537-c6e0ef972716", "name": "cs373_unit1_21_p_Move-Twice", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGP4HDA", "youtube_id": "sKiumVTdpgY", "youtube_state": "done", "path": "Course/cs373/Media/1022", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nNow let's go back to our code and move many times.\n\n2\n00:00:04,000 --> 00:00:08,000\nLet's move twice, so please write a piece of code that makes the robot move twice,\n\n3\n00:00:08,000 --> 00:00:14,000\nstarting with the initial distribution as shown over here--0, 1, 0, 0, 0.\n\n", "id": 1022}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GMUXDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/3013", "type": "Nugget", "id": 3013}, {"nuggetType": "program", "name": "Move 1000", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GMYXDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/3014", "suppliedCode": "#write code that moves 1000 times and then prints the \n#resulting probability distribution.\n\np=[0, 1, 0, 0, 0]\nworld=['green', 'red', 'red', 'green', 'green']\nmeasurements = ['red', 'green']\npHit = 0.6\npMiss = 0.2\npExact = 0.8\npOvershoot = 0.1\npUndershoot = 0.1\n\ndef sense(p, Z):\n    q=[]\n    for i in range(len(p)):\n        hit = (Z == world[i])\n        q.append(p[i] * (hit * pHit + (1-hit) * pMiss))\n    s = sum(q)\n    for i in range(len(q)):\n        q[i] = q[i] / s\n    return q\n\ndef move(p, U):\n    q = []\n    for i in range(len(p)):\n        s = pExact * p[(i-U) % len(p)]\n        s = s + pOvershoot * p[(i-U-1) % len(p)]\n        s = s + pUndershoot * p[(i-U+1) % len(p)]\n        q.append(s)\n    return q\n#\n# ADD CODE HERE\n#\nprint p\n", "type": "Nugget", "id": 3014}, {"nuggetType": "lecture", "name": "Formal Definition Of Probability 1 Solution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "d5910369-6440-4597-850b-4cedecaf9bc0", "name": "cs373_unit1_26_s_Formal-Definition-of-Probability-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNk-DA", "youtube_id": "OQ2JS2wQzrs", "youtube_state": "done", "path": "Course/cs373/Media/8025", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nThe answer is 0.8. The reason being that probabilities always add up to 1.\n\n", "id": 8025}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GMwXDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/3020", "type": "Nugget", "id": 3020}, {"nuggetType": "lecture", "name": "Bayes Rule", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "17233cee-5de4-4b7e-893f-d635fa9d0eb8", "name": "cs373_unit1_29_l_Bayes-Rule", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOs2DA", "youtube_id": "sA5wv56qYc0", "youtube_state": "done", "path": "Course/cs373/Media/7019", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nLet's look into measurements, and they will lead to something called \"Bayes Rule.\"\n\n2\n00:00:05,000 --> 00:00:07,000\nYou might have heard about Bayes Rule before.\n\n3\n00:00:07,000 --> 00:00:12,000\nIt's the most fundamental consideration in probabilistic inference,\n\n4\n00:00:12,000 --> 00:00:17,000\nbut the basic rule is really, really simple.\n\n5\n00:00:17,000 --> 00:00:22,000\nSuppose x is my grid cell and Z is my measurement.\n\n6\n00:00:22,000 --> 00:00:27,000\nThen the measurement update seeks to calculate a belief over my location\n\n7\n00:00:27,000 --> 00:00:29,000\nafter seeing the measurement.\n\n8\n00:00:29,000 --> 00:00:31,000\nHow is this computed?\n\n9\n00:00:31,000 --> 00:00:34,000\nWell, it was really easy to compute in our localization example.\n\n10\n00:00:34,000 --> 00:00:36,000\nNow I'm going to make it a little bit more formal.\n\n11\n00:00:36,000 --> 00:00:38,000\nIt turns out that Bayes Rule looks like this.\n\n12\n00:00:38,000 --> 00:00:41,000\nThat will likely be a little bit confusing,\n\n13\n00:00:41,000 --> 00:00:45,000\nbut what it does is it takes my prior distribution, P(X),\n\n14\n00:00:45,000 --> 00:00:53,000\nand multiplies in the chances of seeing a red or green tile for every possible location \n\n15\n00:00:53,000 --> 00:00:56,000\nand out comes, if you just look at the denominator here,\n\n16\n00:00:56,000 --> 00:01:00,000\nthe non-normalized posterior distribution we had before.\n\n17\n00:01:00,000 --> 00:01:04,000\nRecognize this? This was our prior. This was our measurement probability.\n\n18\n00:01:04,000 --> 00:01:08,000\nIf we do this for all the grid cells, so we put a little index \"i\" over here,\n\n19\n00:01:08,000 --> 00:01:16,000\nthen just the product of the prior of the grid cell times the measurement probability,\n\n20\n00:01:16,000 --> 00:01:19,000\nwhich was large if the measurement corresponded to the correct color\n\n21\n00:01:19,000 --> 00:01:23,000\nand small if it corresponded to a false color.\n\n22\n00:01:23,000 --> 00:01:29,000\nThat product gave us the non-normalized posterior distribution for the grid cell.\n\n23\n00:01:29,000 --> 00:01:32,000\nYou remember this because that's what you programmed.\n\n24\n00:01:32,000 --> 00:01:37,000\nYou programmed a product between the prior probability distribution and a number.\n\n25\n00:01:37,000 --> 00:01:42,000\nThe normalization is now the constant over here--p(Z).\n\n26\n00:01:42,000 --> 00:01:49,000\nTechnically, that is the probability of seeing a measurement devoid of any location information.\n\n27\n00:01:49,000 --> 00:01:51,000\nBut let's not confuse ourselves.\n\n28\n00:01:51,000 --> 00:01:54,000\nThe easiest way to understand what's going on is to realize that\n\n29\n00:01:54,000 --> 00:01:59,000\nthis is a function here that assigns to each grid cell a number, \n\n30\n00:01:59,000 --> 00:02:03,000\nand the p(Z) doesn't have the grid cell as an index.\n\n31\n00:02:03,000 --> 00:02:07,000\nNo matter what grid cell we consider, the p(Z) is the same.\n\n32\n00:02:07,000 --> 00:02:09,000\nHere's the trick.\n\n33\n00:02:09,000 --> 00:02:15,000\nNo matter what p(Z) is, because the final posterior has to be a probability distribution,\n\n34\n00:02:15,000 --> 00:02:19,000\nby normalizing these non-normalized products over here,\n\n35\n00:02:19,000 --> 00:02:22,000\nwe will exactly calculate p(Z).\n\n36\n00:02:22,000 --> 00:02:28,000\nPut differently, p(Z) is the sum over all i of just this product over here.\n\n37\n00:02:28,000 --> 00:02:30,000\nThis makes Bayes Rule really simple.\n\n38\n00:02:30,000 --> 00:02:34,000\nIt's a product of our prior distribution with a measurement probability,\n\n39\n00:02:34,000 --> 00:02:38,000\nwhich we know to be large if the color is correct and small otherwise.\n\n40\n00:02:38,000 --> 00:02:43,000\nWe do this and assign it to a so-called non-normalized probability,\n\n41\n00:02:43,000 --> 00:02:46,000\nwhich I'll do with a little bar over the p.\n\n42\n00:02:46,000 --> 00:02:51,000\nThen I compute the normalizer, which I'LL call \"\u03b1,\" is the sum of all these guys over here.\n\n43\n00:02:51,000 --> 00:02:53,000\nThen I just normalize.\n\n44\n00:02:53,000 --> 00:02:58,000\nMy resulting probability will be 1/\u03b1 of the known normalized probability.\n\n45\n00:02:58,000 --> 00:03:03,000\nThis is exactly what we did, and this is exactly Bayes Rule.\n\n", "id": 7019}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GM4XDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/3022", "type": "Nugget", "id": 3022}, {"nuggetType": "lecture", "name": "Two Coin Quiz", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "d9310b1f-8167-47fe-8eaa-04be3be323f9", "name": "cs373_unit1_33_q_Two-Coin-Quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOw2DA", "youtube_id": "2PZHPjyYnMg", "youtube_state": "done", "path": "Course/cs373/Media/7020", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nLet me make a final quiz in which I have a coin which probability I don't know.\n\n2\n00:00:04,000 --> 00:00:08,000\nThere are multiple coins. One is fair and one is loaded.\n\n3\n00:00:08,000 --> 00:00:11,000\nThe fair coin has a probability of heads of 0.5.\n\n4\n00:00:11,000 --> 00:00:15,000\nThe loaded coin has a probability of heads of 0.1.\n\n5\n00:00:15,000 --> 00:00:20,000\nHere's what I'm going to do. I'm going to grab a random coin with 50% chance.\n\n6\n00:00:20,000 --> 00:00:23,000\nThe fair coin will be chosen with 50% chance, \n\n7\n00:00:23,000 --> 00:00:25,000\nand the loaded coin will be chosen with 50% chance, \n\n8\n00:00:25,000 --> 00:00:27,000\nbut I don't know which one it is.\n\n9\n00:00:27,000 --> 00:00:30,000\nI flip it and I observe heads.\n\n10\n00:00:30,000 --> 00:00:33,000\nWhat's the probability that the coin I hold in my hand is fair?\n\n11\n00:00:33,000 --> 00:00:36,000\nApply anything you've learned before--\n\n12\n00:00:36,000 --> 00:00:40,000\none of the rules you've learned before is exactly the right one to apply here.\n\n", "id": 7020}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GM8XDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/3023", "type": "Nugget", "id": 3023}, {"nuggetType": "lecture", "name": "Conclusion", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "fa42713b-ce84-4a29-b222-39ea96826ee7", "name": "cs373_unit1_34_l_Conclusion", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPYPDA", "youtube_id": "lN-jNSf_CCw", "youtube_state": "done", "path": "Course/cs373/Media/2038", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nAll right. With this I'd like to finish this class. \n\n2\n00:00:03,000 --> 00:00:07,000\nI just want to tell you what you've learned, because you did amazingly well.\n\n3\n00:00:07,000 --> 00:00:09,000\nYou learned about localization.\n\n4\n00:00:09,000 --> 00:00:12,000\nYou wrote an algorithm that implements what's called Markov localization.\n\n5\n00:00:12,000 --> 00:00:16,000\nYou learned about probabilities, Bayes Rule, and total probability.\n\n6\n00:00:16,000 --> 00:00:21,000\nYou implemented all of this, and you solved interesting quiz questions.\n\n7\n00:00:21,000 --> 00:00:23,000\nThis is an enormous amount of work.\n\n8\n00:00:23,000 --> 00:00:26,000\nYou are now able to make a robot localize, \n\n9\n00:00:26,000 --> 00:00:31,000\nbut you also have a very intuitive understanding of some very interesting\n\n10\n00:00:31,000 --> 00:00:37,000\n and important probabilistic methods that are commonly called \"filters.\"\n\n11\n00:00:37,000 --> 00:00:39,000\nNext class, we're going to see new filters,\n\n12\n00:00:39,000 --> 00:00:43,000\nand particularly, we're going to talk about particle filters and Kalman filters.\n\n13\n00:00:43,000 --> 00:00:49,000\nWe will apply both of those to really interesting problems in the Google self-driving car,\n\n14\n00:00:49,000 --> 00:00:55,000\nIn particular, to the problem of finding and predicting other cars.\n\n15\n00:00:55,000 --> 00:00:58,000\nI'll see you in the next class.\n\n", "id": 2038}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GNAXDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/3024", "type": "Nugget", "id": 3024}, {"nuggetType": "lecture", "name": "Sum Of Probabilities Solution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "d5d3de32-a61e-49b5-a9a2-21edeb152474", "name": "cs373_unit1_09_s_Sum-of-Probabilities", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGN42DA", "youtube_id": "6c0XvswnGm0", "youtube_state": "done", "path": "Course/cs373/Media/7006", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nWell, it turns out Python gives you a function called \"sum,\"\n\n2\n00:00:05,000 --> 00:00:09,000\nand if you now hit the run button, you get the correct answer.\n\n", "id": 7006}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GJAnDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/5008", "type": "Nugget", "id": 5008}, {"nuggetType": "lecture", "name": "Sense Function Solution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "07fe6902-42b8-4629-a768-900592250886", "name": "cs373_unit1_10_s_Sense-Function", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPouDA", "youtube_id": "Y5iFxWRTw1c", "youtube_state": "done", "path": "Course/cs373/Media/6010", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nHere's my solution.\n\n2\n00:00:02,000 --> 00:00:04,000\nI start with an empty list over here, and I build it up\n\n3\n00:00:04,000 --> 00:00:06,000\n using the append command over time.\n\n4\n00:00:06,000 --> 00:00:11,000\nI do so by iterating over all the elements in my probability p,\n\n5\n00:00:11,000 --> 00:00:16,000\nand I set a binary flag whether my measurement that I received is the same \n\n6\n00:00:16,000 --> 00:00:21,000\nI would expect at the ith grid cell over here from this list over there.\n\n7\n00:00:21,000 --> 00:00:28,000\nIf the case hit is positive, it's true, so we're going to multiply p with pHit.\n\n8\n00:00:28,000 --> 00:00:35,000\nIf it's false, then the flag hit will valuate to zero, 1 - hit will be 1.\n\n9\n00:00:35,000 --> 00:00:38,000\nYou're going to multiply pi with pMiss.\n\n10\n00:00:38,000 --> 00:00:42,000\nI build up the list, return it, and run it, and out comes \n\n11\n00:00:42,000 --> 00:00:47,000\n0.04, 0.12, 0.12, 0.04, and 0.04 as expected.\n\n", "id": 6010}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GJEnDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/5009", "type": "Nugget", "id": 5009}, {"nuggetType": "lecture", "name": "Test Sense Function", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "2f70471e-01e7-4709-8137-2755a0d09714", "name": "cs373_unit1_12_p_Test-Sense-Function", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOA2DA", "youtube_id": "Lf2DYUCsUH4", "youtube_state": "done", "path": "Course/cs373/Media/7008", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nLet's just go back to our example and see what an amazing thing you've just programmed.\n\n2\n00:00:04,000 --> 00:00:07,000\nWe had a uniform distribution over places.\n\n3\n00:00:07,000 --> 00:00:10,000\nEach place had a probability of 0.2.\n\n4\n00:00:10,000 --> 00:00:14,000\nThen you wrote a piece of code that used the measurement to turn this prior\n\n5\n00:00:14,000 --> 00:00:20,000\ninto a posterior, in which the probability of the 2 red cells was \n\n6\n00:00:20,000 --> 00:00:25,000\na factor of 3 larger than the posterior of the green cells.\n\n7\n00:00:25,000 --> 00:00:29,000\nYou've done exactly what I gave you intuitively in the beginning as the secret of localization.\n\n8\n00:00:29,000 --> 00:00:33,000\nYou manipulated a probability distribution over places into a new one\n\n9\n00:00:33,000 --> 00:00:36,000\nby incorporating the measurement.\n\n10\n00:00:36,000 --> 00:00:41,000\nIn fact, let's go back to our code and test in your code whether we get a good result\n\n11\n00:00:41,000 --> 00:00:45,000\nwhen we replace our measurement red by green.\n\n12\n00:00:45,000 --> 00:00:49,000\nPlease type green into your measurement variable and rerun your code\n\n13\n00:00:49,000 --> 00:00:52,000\nto see if you get the correct result.\n\n", "id": 7008}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GJQnDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/5012", "type": "Nugget", "id": 5012}, {"nuggetType": "lecture", "name": "Inexact Motion 1 Solution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "b8c86896-8eae-4ffc-bbae-503944afe4c4", "name": "cs373_unit1_16_s_Inexact-Motion-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJYnDA", "youtube_id": "mGWGhgZG_jM", "youtube_state": "done", "path": "Course/cs373/Media/5014", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nThe answer is for our intended field over here 0.8,\n\n2\n00:00:04,000 --> 00:00:09,000\nthe 2 neighbors 0.1 and a zero and zero over here.\n\n3\n00:00:09,000 --> 00:00:12,000\nWell done. Let's do this again for a different initial distribution.\n\n", "id": 5014}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GJcnDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/5015", "type": "Nugget", "id": 5015}, {"nuggetType": "lecture", "name": "Inexact Motion 3", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "6fe806bc-4aa4-4538-9116-0387ceaf9f82", "name": "cs373_unit1_18_q_Inexact-Motion-3", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOQPDA", "youtube_id": "BldUOLB2U1Y", "youtube_state": "done", "path": "Course/cs373/Media/2020", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nLet me give you a final example in which I assume a uniform distribution,\n\n2\n00:00:04,000 --> 00:00:09,000\nand I want you to fill in for me the distribution after motion.\n\n", "id": 2020}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GJgnDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/5016", "type": "Nugget", "id": 5016}, {"nuggetType": "quiz", "name": "Limit Distribution Quiz", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GJonDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/5018", "type": "Nugget", "id": 5018}, {"nuggetType": "lecture", "name": "Sense And Move 2", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "62f094ed-4027-4d2c-ae84-66b4e8928501", "name": "cs373_unit1_24_p_Sense-and-Move-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMgXDA", "youtube_id": "-wT7h9Gdm_8", "youtube_state": "done", "path": "Course/cs373/Media/3016", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nLet's pick a different base.\n\n2\n00:00:02,000 --> 00:00:06,000\nLet's assume the robot saw red twice.\n\n3\n00:00:06,000 --> 00:00:10,000\nIt senses red, it moves, it senses red, it moves again.\n\n4\n00:00:10,000 --> 00:00:13,000\nWhat is the most likely cell?\n\n", "id": 3016}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GJsnDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/5019", "type": "Nugget", "id": 5019}, {"nuggetType": "lecture", "name": "Sense And Move 2 Solution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "d2580dfe-9926-4c5f-90be-155e61e05a9d", "name": "cs373_unit1_24_s_Sense-and-Move-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOsPDA", "youtube_id": "rmWL_3r8MKo", "youtube_state": "done", "path": "Course/cs373/Media/2027", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:06,000\nLet's run the program, and we find that the most likely cell is the 4th cell.\n\n2\n00:00:06,000 --> 00:00:09,000\nThat makes sense, because the best match of red, red to the world \n\n3\n00:00:09,000 --> 00:00:12,000\nis red over here and red over here.\n\n4\n00:00:12,000 --> 00:00:15,000\nAfter seeing the 2nd red, the robot still moved 1 to the right \n\n5\n00:00:15,000 --> 00:00:19,000\nand finds itself in the 4th cell as shown over here.\n\n6\n00:00:19,000 --> 00:00:23,000\nNow I want to celebrate with you the code that you just wrote,\n\n7\n00:00:23,000 --> 00:00:26,000\nwhich is a piece of software that implements \n\n8\n00:00:26,000 --> 00:00:31,000\nthe essence of Google's self-driving car's localization approach.\n\n9\n00:00:31,000 --> 00:00:36,000\nAs I said in the beginning, it's absolutely crucial that the car knows\n\n10\n00:00:36,000 --> 00:00:39,000\n exactly where it is relative to the map of its road.\n\n11\n00:00:39,000 --> 00:00:45,000\nWhile the road isn't painted green and red, the road has lane markers.\n\n12\n00:00:45,000 --> 00:00:49,000\nInstead of those green and red cells over here,\n\n13\n00:00:49,000 --> 00:00:54,000\nwe plug in the color of the lane markings relative to the color of the pavement.\n\n14\n00:00:54,000 --> 00:00:58,000\nIt isn't just one observation per time step, it's an entire field of observations,\n\n15\n00:00:58,000 --> 00:01:00,000\nan entire camera image,\n\n16\n00:01:00,000 --> 00:01:02,000\nbut you can do the same with a camera image\n\n17\n00:01:02,000 --> 00:01:05,000\nas long as you can correspond a camera image in your model\n\n18\n00:01:05,000 --> 00:01:08,000\nwith a camera image in your measurements.\n\n19\n00:01:08,000 --> 00:01:13,000\nThen a piece of code not much more difficult than what you coded yourself\n\n20\n00:01:13,000 --> 00:01:18,000\nis responsible for localizing the Google self-driving car.\n\n21\n00:01:18,000 --> 00:01:26,000\nYou just implemented a major, major function that makes Google's car drive itself.\n\n22\n00:01:26,000 --> 00:01:31,000\nI think you should be really happy and proud of yourself.\n\n23\n00:01:31,000 --> 00:01:35,000\nYou should say to yourself, I just implemented localization.\n\n24\n00:01:35,000 --> 00:01:39,000\nNow why on earth did it take Google that long to build a product that drives itself.\n\n25\n00:01:39,000 --> 00:01:44,000\nWell, the truth is the situation is a little more difficult.\n\n26\n00:01:44,000 --> 00:01:48,000\nSometimes road get paved over and changed, and we're working on this.\n\n27\n00:01:48,000 --> 00:01:54,000\nBut what you've implemented is the core of Google's self-driving car localization idea.\n\n28\n00:01:54,000 --> 00:01:57,000\nLet me just summarize the essential things we've learned.\n\n", "id": 2027}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GJwnDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/5020", "type": "Nugget", "id": 5020}, {"nuggetType": "quiz", "name": "Formal Definition Of Probability 1", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GJ0nDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/5021", "type": "Nugget", "id": 5021}, {"nuggetType": "quiz", "name": "Coin Flip Quiz", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GKAnDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/5024", "type": "Nugget", "id": 5024}, {"nuggetType": "lecture", "name": "Uniform Probability Quiz", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "5cbc4c34-3492-4dff-8967-0f0310f9d84f", "name": "cs373_unit1_02_q_Uniform-Probability-Quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIonDA", "youtube_id": "6tV5NY1HoNA", "youtube_state": "done", "path": "Course/cs373/Media/5002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nSo let's move into our first programming exercise,\n\n2\n00:00:03,000 --> 00:00:08,000\nand let's program together the very first version of robot localization.\n\n3\n00:00:08,000 --> 00:00:11,000\nHere's a bit of program code--an empty list.\n\n4\n00:00:11,000 --> 00:00:16,000\nAnd what I'd like you to program is a world with 5 different cells or places\n\n5\n00:00:16,000 --> 00:00:21,000\nwhere each cell has the same probability that the robot might be in that cell.\n\n6\n00:00:21,000 --> 00:00:25,000\nSo probabilities add up to 1.\n\n7\n00:00:25,000 --> 00:00:30,000\nHere's a simple quiz for the cells x1 all the way to x5.\n\n8\n00:00:30,000 --> 00:00:33,000\nWhat is the probability of any of those x's?\n\n9\n00:00:33,000 --> 00:00:36,000\nIndex i goes from 1 to 5.\n\n", "id": 5002}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPEuDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/6001", "type": "Nugget", "id": 6001}, {"nuggetType": "program", "name": "Generalized Uniform Distribution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPMuDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/6003", "suppliedCode": "#  Modify your code to create probability vectors, p, of arbitrary \n#  size, n. Use n=5 to verify that your new solution matches \n#  the previous one.\n\np=[]\nn=5\n\nprint p", "type": "Nugget", "id": 6003}, {"nuggetType": "lecture", "name": "Compute Sum", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "dcf7b68f-4e23-4f79-b0da-bde2c27fb5b1", "name": "cs373_unit1_06_q_Compute-Sum", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGI4nDA", "youtube_id": "qa9B4r5m8wM", "youtube_state": "done", "path": "Course/cs373/Media/5006", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nThis is in principle our next belief.\n\n2\n00:00:03,000 --> 00:00:07,000\nIt only has one problem, which is it isn't a valid probability distribution.\n\n3\n00:00:07,000 --> 00:00:14,000\nThe reason why is probability distributions always have to add up to 1.\n\n4\n00:00:14,000 --> 00:00:17,000\nIf I ask you what the sum of all these values,\n\n5\n00:00:17,000 --> 00:00:19,000\nthen we find out it doesn't add up to 1.\n\n6\n00:00:19,000 --> 00:00:23,000\nPlease type in the sum of all these values.\n\n", "id": 5006}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPQuDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/6004", "type": "Nugget", "id": 6004}, {"nuggetType": "lecture", "name": "Normalize Distribution Solution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "6338d3a4-43e0-45f0-8e1b-4fe753bf3417", "name": "cs373_unit1_07_s_Normalize-Distribution", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1chwLEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGAcM", "youtube_id": "SW_wvez0izo", "youtube_state": "done", "path": "Course/cs373/Media/7", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:09,000\nSo 0.12 divided by 0.36 is the same as 12 divided by 36 is the same as 1/3 or 0.333.\n\n2\n00:00:09,000 --> 00:00:14,000\nAnd 0.04 divided by 0.36 is the same as 4 divided by 36,\n\n3\n00:00:14,000 --> 00:00:16,000\nthat is 1/9.\n\n4\n00:00:16,000 --> 00:00:25,000\nIf you look at that numbers, 1/3, there's 1/3 plus 3/9 is another 1/3 gives exactly 1.\n\n5\n00:00:25,000 --> 00:00:29,000\nSo this is a probability distribution, which is often written in the following way.\n\n6\n00:00:29,000 --> 00:00:34,000\nThe probability of each cell, i where i could range from 1-5,\n\n7\n00:00:34,000 --> 00:00:40,000\nafter we've seen our measurement Z.\n\n8\n00:00:40,000 --> 00:00:48,000\nThe probabilist would also call it posterior distribution of place xi given measurement Z.\n\n9\n00:00:48,000 --> 00:00:51,000\nLet's implement all this.\n\n", "id": 7}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPYuDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/6006", "type": "Nugget", "id": 6006}, {"nuggetType": "lecture", "name": "Sense Function", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "3bfe0512-5d13-4ed2-88ef-02cf8e2fcefa", "name": "cs373_unit1_10_p_Sense-Function", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMU-DA", "youtube_id": "eIjyrQpDogg", "youtube_state": "done", "path": "Course/cs373/Media/8005", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nI want to make this a little bit more beautiful.\n\n2\n00:00:02,000 --> 00:00:05,000\nI will introduce a variable called \"world,\"\n\n3\n00:00:05,000 --> 00:00:09,000\nand for each of the 5 grid cells, world specifies the color of the cell--\n\n4\n00:00:09,000 --> 00:00:13,000\ngreen, red, red, green, green.\n\n5\n00:00:13,000 --> 00:00:17,000\nFurther, I define the measurement Z to be red.\n\n6\n00:00:17,000 --> 00:00:21,000\nCan you define a function, called \"sense,\" which is the measurement update,\n\n7\n00:00:21,000 --> 00:00:26,000\nwhich takes as input the initial distribution p\n\n8\n00:00:26,000 --> 00:00:30,000\nand the measurement Z and all the other global variables\n\n9\n00:00:30,000 --> 00:00:33,000\nand outputs a normalized distribution called \"Q\" in which Q reflects\n\n10\n00:00:33,000 --> 00:00:37,000\nthe non-normalized product of our input probability,\n\n11\n00:00:37,000 --> 00:00:40,000\nwhich will be 0.2 and so on,\n\n12\n00:00:40,000 --> 00:00:45,000\nand the corresponding pHit or pMiss in accordance\n\n13\n00:00:45,000 --> 00:00:49,000\n to whether these colors over here agree or disagree?\n\n14\n00:00:49,000 --> 00:00:55,000\nWhen I call sense(p, Z), I expect to get the vector as output as before,\n\n15\n00:00:55,000 --> 00:00:57,000\nbut now in the form of a function.\n\n16\n00:00:57,000 --> 00:01:02,000\nThe reason I'd like to have a function here is because later on as we build our localizer\n\n17\n00:01:02,000 --> 00:01:04,000\nwe will apply this to every single measurement over and over again.\n\n18\n00:01:04,000 --> 00:01:09,000\nThis function should really respond to any arbitrary p and arbitrary Z, \n\n19\n00:01:09,000 --> 00:01:13,000\neither red or green, and give me the non-normalized Q,\n\n20\n00:01:13,000 --> 00:01:20,000\nwhich gives me the vector 0.04 or 0.12 and so on and so on.\n\n", "id": 8005}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GPguDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/6008", "type": "Nugget", "id": 6008}, {"nuggetType": "program", "name": "Move Function", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GP4uDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/6014", "suppliedCode": "#Program a function that returns a new distribution \n#q, shifted to the right by U units. If U=0, q should \n#be the same as p.\n\np=[0, 1, 0, 0, 0]\nworld=['green', 'red', 'red', 'green', 'green']\nmeasurements = ['red', 'green']\npHit = 0.6\npMiss = 0.2\n\ndef sense(p, Z):\n    q=[]\n    for i in range(len(p)):\n        hit = (Z == world[i])\n        q.append(p[i] * (hit * pHit + (1-hit) * pMiss))\n    s = sum(q)\n    for i in range(len(q)):\n        q[i] = q[i] / s\n    return q\n\ndef move(p, U):\n    #\n    #ADD CODE HERE\n    #\n    return q\n\nprint move(p, 1)\n", "type": "Nugget", "id": 6014}, {"nuggetType": "lecture", "name": "Inexact Motion 3 Solution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "3693d5fe-e0a1-40d7-8863-1fbfe33450f8", "name": "cs373_unit1_18_s_Inexact-Motion-3", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJknDA", "youtube_id": "7T1Rr7KLgdM", "youtube_state": "done", "path": "Course/cs373/Media/5017", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nThe answer as it turns out will be just 0.2 everywhere, \n\n2\n00:00:04,000 --> 00:00:07,000\nand the reason is with every grid cell being equally likely,\n\n3\n00:00:07,000 --> 00:00:11,000\napplying this motion model will still made each grid cell likely.\n\n4\n00:00:11,000 --> 00:00:13,000\nLet's pick one of them--say this one over here.\n\n5\n00:00:13,000 --> 00:00:16,000\nWe could have arrived here in 3 different ways.\n\n6\n00:00:16,000 --> 00:00:22,000\nPerhaps we started in x2 and our motion went well.\n\n7\n00:00:22,000 --> 00:00:28,000\nThis gives us a 0.2 x 0.8.\n\n8\n00:00:28,000 --> 00:00:31,000\nPerhaps we started in x1 and we overshot,\n\n9\n00:00:31,000 --> 00:00:39,000\nwhich gives us a 0.2, for the cell x1, times a 0.1 for overshooting.\n\n10\n00:00:39,000 --> 00:00:46,000\nOr perhaps we started in x3 and we undershot, which gives us 0.2 x 0.1.\n\n11\n00:00:46,000 --> 00:00:51,000\nIf we add those up, then we find it is the same as 0.2 x 1,\n\n12\n00:00:51,000 --> 00:00:56,000\nbecause the factors over here add up exactly to 1, which makes 0.2.\n\n13\n00:00:56,000 --> 00:00:59,000\nThe result is 0.2.\n\n14\n00:00:59,000 --> 00:01:01,000\nYou can apply this same logic to all the other cells.\n\n15\n00:01:01,000 --> 00:01:05,000\nThis guy over here could have come from this guy, this guy, this guy,\n\n16\n00:01:05,000 --> 00:01:10,000\nwhere this one is weighted with 0.8 and the other two with 0.1.\n\n17\n00:01:10,000 --> 00:01:12,000\nThat's called a convolution, \n\n18\n00:01:12,000 --> 00:01:15,000\nand as well see later, there's a very nice way to write this mathematically\n\n19\n00:01:15,000 --> 00:01:18,000\nas something called Theorem of Total Probability.\n\n20\n00:01:18,000 --> 00:01:21,000\nBut for the time being, I'd like to program this in.\n\n", "id": 5017}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GIEvDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/6017", "type": "Nugget", "id": 6017}, {"nuggetType": "program", "name": "Sense And Move 2", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GIYvDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/6022", "suppliedCode": "#Modify the previous code so that the robot senses red twice.\n\np=[0.2, 0.2, 0.2, 0.2, 0.2]\nworld=['green', 'red', 'red', 'green', 'green']\nmeasurements = ['red', 'green']\nmotions = [1,1]\npHit = 0.6\npMiss = 0.2\npExact = 0.8\npOvershoot = 0.1\npUndershoot = 0.1\n\ndef sense(p, Z):\n    q=[]\n    for i in range(len(p)):\n        hit = (Z == world[i])\n        q.append(p[i] * (hit * pHit + (1-hit) * pMiss))\n    s = sum(q)\n    for i in range(len(q)):\n        q[i] = q[i] / s\n    return q\n\ndef move(p, U):\n    q = []\n    for i in range(len(p)):\n        s = pExact * p[(i-U) % len(p)]\n        s = s + pOvershoot * p[(i-U-1) % len(p)]\n        s = s + pUndershoot * p[(i-U+1) % len(p)]\n        q.append(s)\n    return q\n\nfor k in range(len(measurements)):\n    p = sense(p, measurements[k])\n    p = move(p, motions[k])\n    \nprint p         \n", "type": "Nugget", "id": 6022}, {"nuggetType": "quiz", "name": "Formal Definition Of Probability 3", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GIcvDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/6023", "type": "Nugget", "id": 6023}, {"nuggetType": "lecture", "name": "Coin Flip Quiz Solution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "d16fab58-e8f0-41d6-b1cc-adb7245790d1", "name": "cs373_unit1_32_s_Coin-Flip-Quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPQPDA", "youtube_id": "ASUXN9Ay35M", "youtube_state": "done", "path": "Course/cs373/Media/2036", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:07,000\nThe answer is 1/4. It's easy to see that the probability of heads in step 2\n\n2\n00:00:07,000 --> 00:00:13,000\nis the probability of heads in step 2 conditioned on heads in step 1\n\n3\n00:00:13,000 --> 00:00:16,000\ntimes probability of heads in 1\n\n4\n00:00:16,000 --> 00:00:22,000\nplus, that's the sum, probability of heads in step 2\n\n5\n00:00:22,000 --> 00:00:28,000\ngiven we had tails in step 1 times probability of tails in step 1.\n\n6\n00:00:28,000 --> 00:00:32,000\nNow, the way I set it up, those things here are equally likely.\n\n7\n00:00:32,000 --> 00:00:35,000\nHowever, if we did have tails in step 1, \n\n8\n00:00:35,000 --> 00:00:38,000\nwe would never toss the coin again and just accept it.\n\n9\n00:00:38,000 --> 00:00:44,000\nIt's impossible that in step 2 I flip over the heads. It's probability zero.\n\n10\n00:00:44,000 --> 00:00:50,000\nWhereas if I found heads, I would flip again and then the 0.5 chance I arrive at heads.\n\n11\n00:00:50,000 --> 00:00:54,000\nIf I look at this, then this all becomes zero,\n\n12\n00:00:54,000 --> 00:00:58,000\nand these guys multiply to 1/4, and the final answer is 1/4.\n\n", "id": 2036}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GIkvDA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/6025", "type": "Nugget", "id": 6025}, {"nuggetType": "lecture", "name": "Phit And Pmiss Solution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "14a2facf-5d1d-4fd1-a337-43a9dedee30c", "name": "cs373_unit1_08_s_pHit-and-pMiss", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGI8nDA", "youtube_id": "FnhHQht4vDo", "youtube_state": "done", "path": "Course/cs373/Media/5007", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nOne way to do this is to go explicitly through all these 5 different cases from 0 to 4\n\n2\n00:00:05,000 --> 00:00:09,000\nand multiply in manually the miss or hit case.\n\n3\n00:00:09,000 --> 00:00:12,000\nThis is not particularly elegant, but it does the job,\n\n4\n00:00:12,000 --> 00:00:16,000\nand as I hit the \"Run\" button, we get the correct answer that is not normalized.\n\n", "id": 5007}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GN02DA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/7005", "type": "Nugget", "id": 7005}, {"nuggetType": "program", "name": "Sense Function", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GN82DA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/7007", "suppliedCode": "#Modify the code below so that the function sense, which \n#takes p and Z as inputs, will output the NON-normalized \n#probability distribution, q, after multiplying the entries \n#in p by pHit or pMiss according to the color in the \n#corresponding cell in world.\n\n\np=[0.2, 0.2, 0.2, 0.2, 0.2]\nworld=['green', 'red', 'red', 'green', 'green']\nZ = 'red'\npHit = 0.6\npMiss = 0.2\n\ndef sense(p, Z):\n    #\n    #ADD YOUR CODE HERE\n\t#\n    return q\n\nprint sense(p,Z)", "type": "Nugget", "id": 7007}, {"nuggetType": "lecture", "name": "Exact Motion Solution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "03573c1e-e4a2-48b2-86cf-ab2eea1e8514", "name": "cs373_unit1_14_s_Exact-Motion", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGP0uDA", "youtube_id": "Iky7rJXQU_4", "youtube_state": "done", "path": "Course/cs373/Media/6013", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nThe answer is all of these are shifted to the right.\n\n2\n00:00:04,000 --> 00:00:09,000\nThe 1/9 in the left-most cell goes over here, the 1/3 over here,\n\n3\n00:00:09,000 --> 00:00:13,000\nand finally the right-most 1/9 finds itself on the left side.\n\n4\n00:00:13,000 --> 00:00:17,000\nIn the case of exact motion, we have a perfect robot.\n\n5\n00:00:17,000 --> 00:00:21,000\nWe just shift the probabilities by the actual robot motion.\n\n6\n00:00:21,000 --> 00:00:25,000\nNow, that's a degenerate case. Let's program this one.\n\n", "id": 6013}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOE2DA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/7009", "type": "Nugget", "id": 7009}, {"nuggetType": "lecture", "name": "Move Function Solution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "cd8c9fec-5dc2-48d5-ba74-ca8dd1b97ea0", "name": "cs373_unit1_15_s_Move-Function", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMs-DA", "youtube_id": "TnFq6hufsYs", "youtube_state": "done", "path": "Course/cs373/Media/8011", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nHere is the solution.\n\n2\n00:00:02,000 --> 00:00:06,000\nWe start with the empty list. We go through all the elements in p.\n\n3\n00:00:06,000 --> 00:00:08,000\nThis is the tricky line.\n\n4\n00:00:08,000 --> 00:00:14,000\nWe will construct Q element-by-element by accessing the corresponding p,\n\n5\n00:00:14,000 --> 00:00:21,000\nand p is shifted by U and if this shift exceeds the range of p on the left,\n\n6\n00:00:21,000 --> 00:00:26,000\nwe apply the modal operator with the number of states as an argument.\n\n7\n00:00:26,000 --> 00:00:28,000\nIn this case, it'll be 5.\n\n8\n00:00:28,000 --> 00:00:31,000\nNow, the reason why there is a minus sign is tricky.\n\n9\n00:00:31,000 --> 00:00:35,000\nTo shift the distribution to the right, U = 1, \n\n10\n00:00:35,000 --> 00:00:40,000\nwe need to find in p the element 1 place to the left.\n\n11\n00:00:40,000 --> 00:00:44,000\nRather than shifting p to the right directly,\n\n12\n00:00:44,000 --> 00:00:48,000\nwhat I've done is I've constructed q by searching for \n\n13\n00:00:48,000 --> 00:00:51,000\nwhere the robot might have come from.\n\n14\n00:00:51,000 --> 00:00:54,000\nThat's of course, in hindsight, from the left.\n\n15\n00:00:54,000 --> 00:00:56,000\nTherefore, there is a minus sign over here.\n\n16\n00:00:56,000 --> 00:00:59,000\nThis about this as a little bit nontrivial, \n\n17\n00:00:59,000 --> 00:01:01,000\nbut it's going to be important as we go forward and define \n\n18\n00:01:01,000 --> 00:01:04,000\nprobabilistic convolution and generalize this to the noisy case.\n\n", "id": 8011}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOI2DA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/7010", "type": "Nugget", "id": 7010}, {"nuggetType": "lecture", "name": "Inexact Motion 1", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "79f8fdba-058e-4801-8f2f-f25dcbd169a4", "name": "cs373_unit1_16_q_Inexact-Motion-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPsHDA", "youtube_id": "C3f-T9_GTpw", "youtube_state": "done", "path": "Course/cs373/Media/1019", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nLet's talk about inaccurate robot motion.\n\n2\n00:00:03,000 --> 00:00:05,000\nWe are again given 5 grid cells.\n\n3\n00:00:05,000 --> 00:00:12,000\nLet's assume a robot executes its action with high probability correctly, say 0.8,\n\n4\n00:00:12,000 --> 00:00:16,000\nbut with 0.1 chance it finds itself short of the intended action,\n\n5\n00:00:16,000 --> 00:00:21,000\nand yet another 0.1 probability it finds itself overshooting its target.\n\n6\n00:00:21,000 --> 00:00:26,000\nYou can define the same for other U values. Say U = 1.\n\n7\n00:00:26,000 --> 00:00:29,000\nThen with 0.8 chance it would end up over here,\n\n8\n00:00:29,000 --> 00:00:32,000\n 0.1 it stays in the same element,\n\n9\n00:00:32,000 --> 00:00:36,000\nand 0.1 it hops 2 elements ahead.\n\n10\n00:00:36,000 --> 00:00:39,000\nNow this is a model of inaccurate robot motion.\n\n11\n00:00:39,000 --> 00:00:42,000\nThis robot attempts to go U grid cells, \n\n12\n00:00:42,000 --> 00:00:46,000\nbut occasionally falls short of its goal or overshoots.\n\n13\n00:00:46,000 --> 00:00:50,000\nIt's a more common case robots as they move accrue uncertainty,\n\n14\n00:00:50,000 --> 00:00:54,000\nand it's really important to model this, because this is the primary reason\n\n15\n00:00:54,000 --> 00:00:59,000\nwhy localization is hard, because robots are not very accurate\n\n16\n00:00:59,000 --> 00:01:03,000\nWe're not going to look into this first from the mathematical side.\n\n17\n00:01:03,000 --> 00:01:06,000\nI will be giving you a prior distribution,\n\n18\n00:01:06,000 --> 00:01:08,000\nand we're going to be using the value of U = 2,\n\n19\n00:01:08,000 --> 00:01:13,000\nand for the motion model that shifts the robot exactly 2 steps,\n\n20\n00:01:13,000 --> 00:01:16,000\nwe believe there is a 0.8 chance.\n\n21\n00:01:16,000 --> 00:01:22,000\nWe assign a 0.1 to the cases where the robot over or under shoots but exactly 1.\n\n22\n00:01:22,000 --> 00:01:28,000\nThat's kind of written by this formula over here where the two gets a 0.8 probability,\n\n23\n00:01:28,000 --> 00:01:32,000\nthe 1 and the 3 end up with a 0.1 probability.\n\n24\n00:01:32,000 --> 00:01:36,000\nI'm going to ask you now for the initial distribution that I'm writing up here,\n\n25\n00:01:36,000 --> 00:01:40,000\ncan you give me the distribution after the motion?\n\n", "id": 1019}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOM2DA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/7011", "type": "Nugget", "id": 7011}, {"nuggetType": "lecture", "name": "Move Twice Solution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "4ea567cd-7373-4e14-9f8b-62ee19921761", "name": "cs373_unit1_21_s_Move-Twice", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNM-DA", "youtube_id": "oqlgQa1IdcY", "youtube_state": "done", "path": "Course/cs373/Media/8019", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nHere's a piece of code that moves twice by the same amount as before,\n\n2\n00:00:04,000 --> 00:00:10,000\nand the output now is a vector that assigns 0.66 as the largest value \n\n3\n00:00:10,000 --> 00:00:12,000\nand not 0.8 anymore.\n\n", "id": 8019}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOY2DA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/7014", "type": "Nugget", "id": 7014}, {"nuggetType": "lecture", "name": "Move 1000 Solution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "e833138e-35eb-4ae7-af1a-cf8e848c245a", "name": "cs373_unit1_22_s_Move-1000", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIEIDA", "youtube_id": "nYt9b_pNvEE", "youtube_state": "done", "path": "Course/cs373/Media/1025", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nHere's my code. We have a loop for 1,000 steps.\n\n2\n00:00:04,000 --> 00:00:09,000\nWe move 1,000 times, and we print the corresponding distribution over here.\n\n3\n00:00:09,000 --> 00:00:12,000\nIt's 0.2 in each case as expected.\n\n", "id": 1025}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOc2DA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/7015", "type": "Nugget", "id": 7015}, {"nuggetType": "lecture", "name": "Sense And Move Solution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "1fa6147f-bcc4-4a80-8966-b86417042139", "name": "cs373_unit1_23_s_Sense-and-Move", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNY-DA", "youtube_id": "1s2dRczcu1A", "youtube_state": "done", "path": "Course/cs373/Media/8022", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nHere's the routine. It's very short.\n\n2\n00:00:03,000 --> 00:00:06,000\nIt goes through the measurements. It assumes it has as many motions as measurements.\n\n3\n00:00:06,000 --> 00:00:10,000\nIt first applies the measurement as before. Then it applies the motion.\n\n4\n00:00:10,000 --> 00:00:14,000\nWhen it's done with it, it prints the output, and the output is interesting.\n\n5\n00:00:14,000 --> 00:00:19,000\nThe world has a green, a red, a red, and a green, and a green field.\n\n6\n00:00:19,000 --> 00:00:25,000\nThe robot saw red, followed by a right motion, and green.\n\n7\n00:00:25,000 --> 00:00:28,000\nThat suggests that it probably started \n\n8\n00:00:28,000 --> 00:00:31,000\nwith with the highest likelihood in grid cell number 3,\n\n9\n00:00:31,000 --> 00:00:35,000\nwhich is the right-most of the two red cells.\n\n10\n00:00:35,000 --> 00:00:40,000\nIt saw red correctly. It then moved to the right by 1.\n\n11\n00:00:40,000 --> 00:00:43,000\nIt saw green correctly, moved right again.\n\n12\n00:00:43,000 --> 00:00:46,000\nIt now finds itself most likely in the right-most cell.\n\n13\n00:00:46,000 --> 00:00:50,000\nThis is just looking at these values over here without any probabilistic math\n\n14\n00:00:50,000 --> 00:00:52,000\nand any code limitation.\n\n15\n00:00:52,000 --> 00:00:59,000\nLet's look at the output--0.2, 0.1, 0.08, 0.16, 0.38.\n\n16\n00:00:59,000 --> 00:01:04,000\nVery correctly, then it would most likely assign this position to the right-most cell\n\n17\n00:01:04,000 --> 00:01:08,000\nas should be, given the sequence of observations over here.\n\n", "id": 8022}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOg2DA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/7016", "type": "Nugget", "id": 7016}, {"nuggetType": "lecture", "name": "Formal Definition Of Probability 2", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "c10a7619-f06c-4f69-8ee4-47684a422a7e", "name": "cs373_unit1_27_q_Formal-Definition-of-Probability-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGO4PDA", "youtube_id": "PE-k3PGXeLY", "youtube_state": "done", "path": "Course/cs373/Media/2030", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nLet me ask a second question, and I know that's not particularly difficult.\n\n2\n00:00:04,000 --> 00:00:07,000\nWhat if P(X1) = 0?\n\n", "id": 2030}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOk2DA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/7017", "type": "Nugget", "id": 7017}, {"nuggetType": "quiz", "name": "Formal Definition Of Probability 2", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GOo2DA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/7018", "type": "Nugget", "id": 7018}, {"nuggetType": "program", "name": "Sum Of Probabilities", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GMQ-DA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/8004", "suppliedCode": "#Modify the program to find and print the sum of all \n#the entries in the list p.\n\np=[0.2, 0.2, 0.2, 0.2, 0.2]\npHit = 0.6\npMiss = 0.2\n\np[0]=p[0]*pMiss\np[1]=p[1]*pHit\np[2]=p[2]*pHit\np[3]=p[3]*pMiss\np[4]=p[4]*pMiss\n\nprint p\n", "type": "Nugget", "id": 8004}, {"nuggetType": "program", "name": "Inexact Move Function", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GM4-DA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/8014", "suppliedCode": "#Modify the move function to accommodate the added \n#probabilities of overshooting or undershooting \n#the intended destination.\n\np=[0, 1, 0, 0, 0]\nworld=['green', 'red', 'red', 'green', 'green']\nmeasurements = ['red', 'green']\npHit = 0.6\npMiss = 0.2\npExact = 0.8\npOvershoot = 0.1\npUndershoot = 0.1\n\ndef sense(p, Z):\n    q=[]\n    for i in range(len(p)):\n        hit = (Z == world[i])\n        q.append(p[i] * (hit * pHit + (1-hit) * pMiss))\n    s = sum(q)\n    for i in range(len(q)):\n        q[i] = q[i] / s\n    return q\n\ndef move(p, U):\n    q = []\n    for i in range(len(p)):\n        q.append(p[(i-U)%len(p)])\n    return q\n    \n\nprint move(p, 1)\n", "type": "Nugget", "id": 8014}, {"nuggetType": "lecture", "name": "Inexact Move Function Solution", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "7d073a07-cd8d-4800-b021-10b5ce7c0feb", "name": "cs373_unit1_19_s_Inexact-Move-Function", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMMXDA", "youtube_id": "QCnPJcNprEU", "youtube_state": "done", "path": "Course/cs373/Media/3011", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nHere's one way to implement this.\n\n2\n00:00:02,000 --> 00:00:05,000\nWe're going to introduce the auxiliary variable \"s,\"  \n\n3\n00:00:05,000 --> 00:00:07,000\nwhich we build up in three different steps.\n\n4\n00:00:07,000 --> 00:00:15,000\nWe multiply the p value as before for the exact set off by pExact.\n\n5\n00:00:15,000 --> 00:00:21,000\nThen we add to it two more multiplied by pOvershoot or pUndershoot\n\n6\n00:00:21,000 --> 00:00:25,000\nwhere we are overshooting by going yet 1 step further than U\n\n7\n00:00:25,000 --> 00:00:28,000\nor undershooting by cutting it short by 1.\n\n8\n00:00:28,000 --> 00:00:32,000\nThen we add these things up and finally append the sum of  those \n\n9\n00:00:32,000 --> 00:00:35,000\n to our probability q.\n\n10\n00:00:35,000 --> 00:00:42,000\nWhen we run this, we get for our example prior of 0, 1, 0, 0, 0,\n\n11\n00:00:42,000 --> 00:00:47,000\nthe answer 0, 0.1, 0.8, 0.8, 0.1, and 0.\n\n", "id": 3011}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GM8-DA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/8015", "type": "Nugget", "id": 8015}, {"nuggetType": "lecture", "name": "Formal Definition Of Probability 3", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "27bda51d-e33f-4f5a-920c-312728d83478", "name": "cs373_unit1_28_q_Formal-Definition-of-Probability-3", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1chwLEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGBcM", "youtube_id": "oDPbdGXH5nE", "youtube_state": "done", "path": "Course/cs373/Media/23", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nFor our world with 5 different grid cells,\n\n2\n00:00:02,000 --> 00:00:07,000\n suppose we know that the first 4 of them have a 0.1 probability. \n\n3\n00:00:07,000 --> 00:00:12,000\nWhat would be the probability of the 5th and final grid cell?\n\n", "id": 23}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GNo-DA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/8026", "type": "Nugget", "id": 8026}, {"nuggetType": "lecture", "name": "Theorem Of Total Probability", "parent": "agpzfnVkYWNpdHl1cjELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIM", "media": {"dotsub_id": "d9243dd8-0e5c-43fe-ae32-a45717955ef6", "name": "cs373_unit1_31_l_Theorem-of-Total-Probability", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch0LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGN4-DA", "youtube_id": "byZ-BzbQA5M", "youtube_state": "done", "path": "Course/cs373/Media/8030", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nLet's look at motion, which will turn out to be something we will call total probability.\n\n2\n00:00:05,000 --> 00:00:08,000\nYou remember that we cared about a grid cell \"xi,\"\n\n3\n00:00:08,000 --> 00:00:13,000\nand we asked what is the chance of being xi after robot motion?\n\n4\n00:00:13,000 --> 00:00:17,000\nNow, to indicate the after and before, let me add a time index.\n\n5\n00:00:17,000 --> 00:00:20,000\nT up here, is an index for time.\n\n6\n00:00:20,000 --> 00:00:25,000\nI write it superscript so there is no confusion with the index i, which is the grid cell.\n\n7\n00:00:25,000 --> 00:00:28,000\nYou might remember the way we computed this \n\n8\n00:00:28,000 --> 00:00:33,000\nwas by looking at all the grid cells the world could have come from on time step earlier--\n\n9\n00:00:33,000 --> 00:00:35,000\nindexed here by j.\n\n10\n00:00:35,000 --> 00:00:39,000\nWe looked at the prior probability of those grid cells at time t - 1.\n\n11\n00:00:39,000 --> 00:00:47,000\nWe multiply with the probability that our motion command would carry us from xj to xi.\n\n12\n00:00:47,000 --> 00:00:50,000\nThis is written as a condition distribution as follows.\n\n13\n00:00:50,000 --> 00:00:53,000\nThis was exactly what we implemented.\n\n14\n00:00:53,000 --> 00:00:56,000\nIf there was our grid cells over here \n\n15\n00:00:56,000 --> 00:00:59,000\nand we asked one time step later about a specific grid cell over here,\n\n16\n00:00:59,000 --> 00:01:05,000\nwe would combine 0.8 from over here, 0.1 from over here, and 0.1 from over here\n\n17\n00:01:05,000 --> 00:01:07,000\ninto the probability of this grid cell.\n\n18\n00:01:07,000 --> 00:01:09,000\nIt's the same formula as here. \n\n19\n00:01:09,000 --> 00:01:14,000\nThis is now xi, and the way we find the posterior probability for xi is to go through\n\n20\n00:01:14,000 --> 00:01:18,000\n all possible places from which we could have come, all the different j's.\n\n21\n00:01:18,000 --> 00:01:25,000\nLook at the prior probabilities, multiply it by the probability that I transition from j to i\n\n22\n00:01:25,000 --> 00:01:29,000\ngiven my motion command, which in this case is go 1 to the right side.\n\n23\n00:01:29,000 --> 00:01:32,000\nNow in probability terms, people often write it as follows: \n\n24\n00:01:32,000 --> 00:01:36,000\nP(A) = \u01a9 p(A\u2502B) p(B).\n\n25\n00:01:36,000 --> 00:01:39,000\nThis is just the way you'd find it in text books, \n\n26\n00:01:39,000 --> 00:01:45,000\nand you can see directly the correspondence of A as a place i of time t\n\n27\n00:01:45,000 --> 00:01:49,000\nand all the different Bs as the possible prior locations.\n\n28\n00:01:49,000 --> 00:01:53,000\nThat is often called the Theorem of Total Probability.\n\n29\n00:01:53,000 --> 00:02:01,000\nThe operation of a weighted sum over other variables is often called a \"convolution.\"\n\n", "id": 8030}, "key": "agpzfnVkYWNpdHl1cj4LEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GAIMCxIGTnVnZ2V0GN8-DA", "path": "Course/cs373/CourseRev/feb2012/Unit/2/Nugget/8031", "type": "Nugget", "id": 8031}]}, {"name": "Homework 1", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": true, "closedAt": "03/01/2012 00:00", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgwLEgZOdWdnZXQY2rACDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgwLEgZOdWdnZXQYwrgCDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgwLEgZOdWdnZXQY4toBDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgwLEgZOdWdnZXQY4tcCDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgwLEgZOdWdnZXQY5NoBDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgwLEgZOdWdnZXQYuY4DDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgwLEgZOdWdnZXQYzeIBDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgwLEgZOdWdnZXQYlcgCDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgwLEgZOdWdnZXQY0okCDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgwLEgZOdWdnZXQYoZYDDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgwLEgZOdWdnZXQY3LACDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgwLEgZOdWdnZXQYsuoBDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgwLEgZOdWdnZXQYopYDDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgw", "path": "Course/cs373/CourseRev/feb2012/Unit/41002", "open": false, "id": 41002, "nuggets": [{"nuggetType": "lecture", "name": "Probability Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgw", "media": {"dotsub_id": "1a0d1e85-7d25-470b-a8cf-ea050f340012", "name": "cs373_hw1_00_s_Probability", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMviAQw", "youtube_id": "M3Oenckl7qE", "youtube_state": "done", "path": "Course/cs373/Media/29003", "transcript": null, "id": 29003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgwLEgZOdWdnZXQY4toBDA", "path": "Course/cs373/CourseRev/feb2012/Unit/41002/Nugget/28002", "type": "Nugget", "id": 28002}, {"nuggetType": "quiz", "name": "Localization", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgwLEgZOdWdnZXQY5NoBDA", "path": "Course/cs373/CourseRev/feb2012/Unit/41002/Nugget/28004", "type": "Nugget", "id": 28004}, {"nuggetType": "lecture", "name": "Bayes Rule", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgw", "media": {"dotsub_id": "200fa8fd-2837-4282-9da0-5a97f9beb5dc", "name": "cs373_hw1_02_q_Bayes-Rule", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMziAQw", "youtube_id": "c0oLY7hdOAA", "youtube_state": "done", "path": "Course/cs373/Media/29004", "transcript": null, "id": 29004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgwLEgZOdWdnZXQYzeIBDA", "path": "Course/cs373/CourseRev/feb2012/Unit/41002/Nugget/29005", "type": "Nugget", "id": 29005}, {"nuggetType": "lecture", "name": "Localization Program Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgw", "media": {"dotsub_id": "ac2482c3-c7ce-454c-bd70-999467ec521f", "name": "cs373_hw1_03_s_Localization-Program", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGKKZAgw", "youtube_id": "37McU8k7FN8", "youtube_state": "done", "path": "Course/cs373/Media/36002", "transcript": null, "id": 36002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgwLEgZOdWdnZXQYsuoBDA", "path": "Course/cs373/CourseRev/feb2012/Unit/41002/Nugget/30002", "type": "Nugget", "id": 30002}, {"nuggetType": "lecture", "name": "Bayes Rule Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgw", "media": {"dotsub_id": "c2698d00-1838-4a76-8102-fcf2b3d861d4", "name": "cs373_hw1_02_s_Bayes-Rule", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLqRAgw", "youtube_id": "GPsuPh6VRjE", "youtube_state": "done", "path": "Course/cs373/Media/35002", "transcript": null, "id": 35002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgwLEgZOdWdnZXQY0okCDA", "path": "Course/cs373/CourseRev/feb2012/Unit/41002/Nugget/34002", "type": "Nugget", "id": 34002}, {"nuggetType": "lecture", "name": "Probability", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgw", "media": {"dotsub_id": "6a31bf74-b231-468d-bf4f-67542d0b066f", "name": "cs373_hw1_00_q_Probability", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOn-Agw", "youtube_id": "5jJ395sOhK4", "youtube_state": "done", "path": "Course/cs373/Media/49001", "transcript": null, "id": 49001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgwLEgZOdWdnZXQY2rACDA", "path": "Course/cs373/CourseRev/feb2012/Unit/41002/Nugget/39002", "type": "Nugget", "id": 39002}, {"nuggetType": "program", "name": "Localization Program", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgwLEgZOdWdnZXQY3LACDA", "path": "Course/cs373/CourseRev/feb2012/Unit/41002/Nugget/39004", "suppliedCode": "colors = [['red', 'green', 'green', 'red' , 'red'],\n          ['red', 'red', 'green', 'red', 'red'],\n          ['red', 'red', 'green', 'green', 'red'],\n          ['red', 'red', 'red', 'red', 'red']]\n\nmeasurements = ['green', 'green', 'green' ,'green', 'green']\n\n\nmotions = [[0,0],[0,1],[1,0],[1,0],[0,1]]\n\nsensor_right = 0.7\n\np_move = 0.8\n\ndef show(p):\n    for i in range(len(p)):\n        print p[i]\n\n#DO NOT USE IMPORT\n#ENTER CODE BELOW HERE\n#ANY CODE ABOVE WILL CAUSE\n#HOMEWORK TO BE GRADED\n#INCORRECT\n\np = []\n\n\n\n\n\n#Your probability array must be printed \n#with the following code.\n\nshow(p)\n\n\n\n\n", "type": "Nugget", "id": 39004}, {"nuggetType": "quiz", "name": "Probability", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgwLEgZOdWdnZXQYwrgCDA", "path": "Course/cs373/CourseRev/feb2012/Unit/41002/Nugget/40002", "type": "Nugget", "id": 40002}, {"nuggetType": "quiz", "name": "Bayes Rule", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgwLEgZOdWdnZXQYlcgCDA", "path": "Course/cs373/CourseRev/feb2012/Unit/41002/Nugget/42005", "type": "Nugget", "id": 42005}, {"nuggetType": "lecture", "name": "Localization", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgw", "media": {"dotsub_id": "e5ced056-1ab5-43da-9d09-acb119b6a1c9", "name": "cs373_hw1_01_q_Localization", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJTIAgw", "youtube_id": "JA96HYle9Ck", "youtube_state": "done", "path": "Course/cs373/Media/42004", "transcript": null, "id": 42004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgwLEgZOdWdnZXQY4tcCDA", "path": "Course/cs373/CourseRev/feb2012/Unit/41002/Nugget/44002", "type": "Nugget", "id": 44002}, {"nuggetType": "lecture", "name": "Localization Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgw", "media": {"dotsub_id": "9f65f9f2-6618-4dc9-bf8c-44757699ab3d", "name": "cs373_hw1_01_s_Localization", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPrPAgw", "youtube_id": "16GQZ0DkDXA", "youtube_state": "done", "path": "Course/cs373/Media/43002", "transcript": null, "id": 43002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgwLEgZOdWdnZXQYuY4DDA", "path": "Course/cs373/CourseRev/feb2012/Unit/41002/Nugget/51001", "type": "Nugget", "id": 51001}, {"nuggetType": "lecture", "name": "Localization Program", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgw", "media": {"dotsub_id": "aa41c81b-f8ea-410e-bf4c-b2856326cefb", "name": "cs373_hw1_03_p_Localization-Program", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMO4Agw", "youtube_id": "9a42_zEeeA0", "youtube_state": "done", "path": "Course/cs373/Media/40003", "transcript": null, "id": 40003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgwLEgZOdWdnZXQYoZYDDA", "path": "Course/cs373/CourseRev/feb2012/Unit/41002/Nugget/52001", "type": "Nugget", "id": 52001}, {"nuggetType": "lecture", "name": "Congratulations", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgw", "media": {"dotsub_id": "d67a6b2c-e1d8-428c-ab88-d06bf03d9410", "name": "cs373_hw1_04_l_Congratulations", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLPqAQw", "youtube_id": "SSSHnbhIF8M", "youtube_state": "done", "path": "Course/cs373/Media/30003", "transcript": null, "id": 30003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKrAAgwLEgZOdWdnZXQYopYDDA", "path": "Course/cs373/CourseRev/feb2012/Unit/41002/Nugget/52002", "type": "Nugget", "id": 52002}]}, {"name": "Office Hours 1", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOHUAwwLEgZOdWdnZXQYseQDDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOHUAww", "path": "Course/cs373/CourseRev/feb2012/Unit/60001", "open": false, "id": 60001, "nuggets": [{"nuggetType": "lecture", "name": "Office Hours Week 1", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOHUAww", "media": {"dotsub_id": "668989a9-c97b-4df1-ad22-d4173312e77d", "name": "cs373_oo1_00_l_Office-Hours-Week-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMncAww", "youtube_id": "QkYFIhJ3rnY", "youtube_state": "done", "path": "Course/cs373/Media/61001", "transcript": null, "id": 61001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOHUAwwLEgZOdWdnZXQYseQDDA", "path": "Course/cs373/CourseRev/feb2012/Unit/60001/Nugget/62001", "type": "Nugget", "id": 62001}]}, {"name": "Unit 2", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYl8gCDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY8aIEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYwbIEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYkcIEDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYydkEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY8qIEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYseEEDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYgfEEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY0YAFDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYoZAFDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYiZgFDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYsucCDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY2acFDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY0oAFDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYkb8FDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY04kCDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYst4FDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYs-cCDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYipgFDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYwrIEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYgu4FDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY-8YFDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYqroEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYhfEEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYopAFDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYsdsGDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYgesGDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYgusGDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY0foGDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYlMIEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYq7oEDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY_cYFDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY6vIGDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY0v0FDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY6_IGDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYoYoHDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY9J8FDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYlsIEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY6_UFDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYmsgCDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYi5gFDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYs94FDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYoPIBDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYk7wGDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYvYUGDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYzNMGDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYnMgCDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY6vsDDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY7PIGDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYw68FDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY_ckEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYjJsEDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY7PUFDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYzNwDDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY8ZkHDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYmu8CDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYwakHDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYvoUGDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYoooHDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY6vgEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYo40GDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY_8kEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY4s4FDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYq7cFDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYm-YFDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY7fUFDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYpIoHDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYz9kEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYiPEEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY_88CDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYqbEHDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYlLwGDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYmukEDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYjZgFDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYkbkHDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY-sAHDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY3bACDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYhu4FDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYsdgHDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYzdwDDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY26QGDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYi5IHDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYpI0GDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY6e8HDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY1IAFDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYnOkEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYrboEDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYk7kHDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY7_UFDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYytAHDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "path": "Course/cs373/CourseRev/feb2012/Unit/42006", "open": false, "id": 42006, "nuggets": [{"nuggetType": "lecture", "name": "Measurement And Motion 2 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_14_s_Measurement-and-Motion-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLyFBgw", "youtube_id": "1X8Tu6TmKhY", "youtube_state": "done", "path": "Course/cs373/Media/99004", "transcript": null, "id": 99004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYoPIBDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/31008", "type": "Nugget", "id": 31008}, {"nuggetType": "lecture", "name": "Coconuts 5 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_05_s_Coconuts-5", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOHOBQw", "youtube_id": "8B4U1hkCIoQ", "youtube_state": "done", "path": "Course/cs373/Media/92001", "transcript": null, "id": 92001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY04kCDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/34003", "type": "Nugget", "id": 34003}, {"nuggetType": "lecture", "name": "Kalman Filter Land", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_26_l_Kalman-Filter-Land", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIX3Agw", "youtube_id": "LXJ5jrvDuEk", "youtube_state": "done", "path": "Course/cs373/Media/48005", "transcript": null, "id": 48005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY3bACDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/39005", "type": "Nugget", "id": 39005}, {"nuggetType": "lecture", "name": "Introduction", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_00_l_introduction", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLmLBAw", "youtube_id": "XZL934YQ-FQ", "youtube_state": "done", "path": "Course/cs373/Media/67001", "transcript": null, "id": 67001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYl8gCDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/42007", "type": "Nugget", "id": 42007}, {"nuggetType": "lecture", "name": "Measurement And Motion 1 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_13_s_Measurement-and-Motion-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMKvBQw", "youtube_id": "EyE5vOSxPdI", "youtube_state": "done", "path": "Course/cs373/Media/88002", "transcript": null, "id": 88002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYmsgCDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/42010", "type": "Nugget", "id": 42010}, {"nuggetType": "lecture", "name": "Predicting The Peak", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_16_q_Predicting-the-Peak", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMS4Agw", "youtube_id": "zc_GQiISQ3E", "youtube_state": "done", "path": "Course/cs373/Media/40004", "transcript": null, "id": 40004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYnMgCDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/42012", "type": "Nugget", "id": 42012}, {"nuggetType": "lecture", "name": "Predict Funtion Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_23_s_Predict-Funtion", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGP7PAgw", "youtube_id": "AMFig-sYGfM", "youtube_state": "done", "path": "Course/cs373/Media/43006", "transcript": null, "id": 43006}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY_88CDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/43007", "type": "Nugget", "id": 43007}, {"nuggetType": "program", "name": "Coconuts 4", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYsucCDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/46002", "suppliedCode": "#Write a program that will find the initial number\n#of coconuts. \n\ndef f(n):\n    return (n-1) / 5.0 * 4\n\ndef f6(n):\n    for i in range(6):\n        n = f(n)\n    return n \n\ndef is_int(n):\n    return abs(n-int(n)) < 0.0000001\n   \n# Enter code here.\n\nprint n\n", "type": "Nugget", "id": 46002}, {"nuggetType": "program", "name": "Coconuts 6", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYs-cCDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/46003", "suppliedCode": "#Write a program that outputs the number \n#of coconuts we started with. Do not\n#overthink this one! You should be able\n#to answer this with one line of code!\n\nprint #enter code here", "type": "Nugget", "id": 46003}, {"nuggetType": "lecture", "name": "Separated Gaussians", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_19_q_Separated-Gaussians", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNmhBww", "youtube_id": "QAqsIWVVX0Y", "youtube_state": "done", "path": "Course/cs373/Media/119001", "transcript": null, "id": 119001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYmu8CDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/47002", "type": "Nugget", "id": 47002}, {"nuggetType": "lecture", "name": "Predicting The Peak", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_16_l_Predicting-the-Peak", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMrcAww", "youtube_id": "UeBfYbdaois", "youtube_state": "done", "path": "Course/cs373/Media/61002", "transcript": null, "id": 61002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYy9wDDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/61003", "type": "Nugget", "id": 61003}, {"nuggetType": "quiz", "name": "Parameter Update 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYzNwDDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/61004", "type": "Nugget", "id": 61004}, {"nuggetType": "lecture", "name": "Kalman Filter Prediction Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_27_s_Kalman-Filter-Prediction", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJngBww", "youtube_id": "SK3cnmu8BYU", "youtube_state": "done", "path": "Course/cs373/Media/127001", "transcript": null, "id": 127001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYzdwDDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/61005", "type": "Nugget", "id": 61005}, {"nuggetType": "quiz", "name": "Predicting The Peak", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY6vsDDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/65002", "type": "Nugget", "id": 65002}, {"nuggetType": "lecture", "name": "Parameter Update Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_17_s_Parameter-Update", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPSiBAw", "youtube_id": "Lwn6FJgyyYI", "youtube_state": "done", "path": "Course/cs373/Media/70004", "transcript": null, "id": 70004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYjJsEDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/69004", "type": "Nugget", "id": 69004}, {"nuggetType": "lecture", "name": "Bonus Question: Coconuts 1", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_01_q_Coconuts-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGImbBAw", "youtube_id": "CvOTrtQjvKE", "youtube_state": "done", "path": "Course/cs373/Media/69001", "transcript": null, "id": 69001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY8aIEDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/70001", "type": "Nugget", "id": 70001}, {"nuggetType": "program", "name": "Coconuts 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY8qIEDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/70002", "suppliedCode": "#Write a function that takes the number of \n#coconuts, n, as an argument and returns the\n#number of coconuts after one is given to\n#the monkey and one fifth are taken away.\n\n\ndef f(n):\n    #\n    # Insert code here\n    #\n    return\n\nprint f(96.)\n", "type": "Nugget", "id": 70002}, {"nuggetType": "quiz", "name": "Coconuts 1", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYwbIEDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/72001", "type": "Nugget", "id": 72001}, {"nuggetType": "lecture", "name": "Tracking Intro", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_07_q_Tracking-Intro", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNqqBAw", "youtube_id": "8O9GV4SUToA", "youtube_state": "done", "path": "Course/cs373/Media/71002", "transcript": null, "id": 71002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYwrIEDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/72002", "type": "Nugget", "id": 72002}, {"nuggetType": "lecture", "name": "Gaussian Intro", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_08_q_Gaussian-Intro", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNODBAw", "youtube_id": "GHKKUR6tZE0", "youtube_state": "done", "path": "Course/cs373/Media/66003", "transcript": null, "id": 66003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYqroEDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/73002", "type": "Nugget", "id": 73002}, {"nuggetType": "lecture", "name": "Preferred Gaussian Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_10_s_Preferred-Gaussian", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJrmBQw", "youtube_id": "-9AVZ-N_gbM", "youtube_state": "done", "path": "Course/cs373/Media/95002", "transcript": null, "id": 95002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYq7oEDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/73003", "type": "Nugget", "id": 73003}, {"nuggetType": "program", "name": "Kalman Matrices", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYrboEDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/73005", "suppliedCode": "# Write a function 'filter' that implements a multi-\n# dimensional Kalman Filter for the example given\n\nfrom math import *\n\nclass matrix:\n    \n    # implements basic operations of a matrix class\n    \n    def __init__(self, value):\n        self.value = value\n        self.dimx = len(value)\n        self.dimy = len(value[0])\n        if value == [[]]:\n            self.dimx = 0\n    \n    def zero(self, dimx, dimy):\n        # check if valid dimensions\n        if dimx < 1 or dimy < 1:\n            raise ValueError, \"Invalid size of matrix\"\n        else:\n            self.dimx = dimx\n            self.dimy = dimy\n            self.value = [[0 for row in range(dimy)] for col in range(dimx)]\n    \n    def identity(self, dim):\n        # check if valid dimension\n        if dim < 1:\n            raise ValueError, \"Invalid size of matrix\"\n        else:\n            self.dimx = dim\n            self.dimy = dim\n            self.value = [[0 for row in range(dim)] for col in range(dim)]\n            for i in range(dim):\n                self.value[i][i] = 1\n    \n    def show(self):\n        for i in range(self.dimx):\n            print self.value[i]\n        print ' '\n    \n    def __add__(self, other):\n        # check if correct dimensions\n        if self.dimx != other.dimx or self.dimy != other.dimy:\n            raise ValueError, \"Matrices must be of equal dimensions to add\"\n        else:\n            # add if correct dimensions\n            res = matrix([[]])\n            res.zero(self.dimx, self.dimy)\n            for i in range(self.dimx):\n                for j in range(self.dimy):\n                    res.value[i][j] = self.value[i][j] + other.value[i][j]\n            return res\n    \n    def __sub__(self, other):\n        # check if correct dimensions\n        if self.dimx != other.dimx or self.dimy != other.dimy:\n            raise ValueError, \"Matrices must be of equal dimensions to subtract\"\n        else:\n            # subtract if correct dimensions\n            res = matrix([[]])\n            res.zero(self.dimx, self.dimy)\n            for i in range(self.dimx):\n                for j in range(self.dimy):\n                    res.value[i][j] = self.value[i][j] - other.value[i][j]\n            return res\n    \n    def __mul__(self, other):\n        # check if correct dimensions\n        if self.dimy != other.dimx:\n            raise ValueError, \"Matrices must be m*n and n*p to multiply\"\n        else:\n            # subtract if correct dimensions\n            res = matrix([[]])\n            res.zero(self.dimx, other.dimy)\n            for i in range(self.dimx):\n                for j in range(other.dimy):\n                    for k in range(self.dimy):\n                        res.value[i][j] += self.value[i][k] * other.value[k][j]\n            return res\n    \n    def transpose(self):\n        # compute transpose\n        res = matrix([[]])\n        res.zero(self.dimy, self.dimx)\n        for i in range(self.dimx):\n            for j in range(self.dimy):\n                res.value[j][i] = self.value[i][j]\n        return res\n    \n    # Thanks to Ernesto P. Adorio for use of Cholesky and CholeskyInverse functions\n    \n    def Cholesky(self, ztol=1.0e-5):\n        # Computes the upper triangular Cholesky factorization of\n        # a positive definite matrix.\n        res = matrix([[]])\n        res.zero(self.dimx, self.dimx)\n        \n        for i in range(self.dimx):\n            S = sum([(res.value[k][i])**2 for k in range(i)])\n            d = self.value[i][i] - S\n            if abs(d) < ztol:\n                res.value[i][i] = 0.0\n            else:\n                if d < 0.0:\n                    raise ValueError, \"Matrix not positive-definite\"\n                res.value[i][i] = sqrt(d)\n            for j in range(i+1, self.dimx):\n                S = sum([res.value[k][i] * res.value[k][j] for k in range(self.dimx)])\n                if abs(S) < ztol:\n                    S = 0.0\n                res.value[i][j] = (self.value[i][j] - S)/res.value[i][i]\n        return res\n    \n    def CholeskyInverse(self):\n        # Computes inverse of matrix given its Cholesky upper Triangular\n        # decomposition of matrix.\n        res = matrix([[]])\n        res.zero(self.dimx, self.dimx)\n        \n        # Backward step for inverse.\n        for j in reversed(range(self.dimx)):\n            tjj = self.value[j][j]\n            S = sum([self.value[j][k]*res.value[j][k] for k in range(j+1, self.dimx)])\n            res.value[j][j] = 1.0/tjj**2 - S/tjj\n            for i in reversed(range(j)):\n                res.value[j][i] = res.value[i][j] = -sum([self.value[i][k]*res.value[k][j] for k in range(i+1, self.dimx)])/self.value[i][i]\n        return res\n    \n    def inverse(self):\n        aux = self.Cholesky()\n        res = aux.CholeskyInverse()\n        return res\n    \n    def __repr__(self):\n        return repr(self.value)\n\n\n########################################\n\n# Implement the filter function below\n\ndef filter(x, P):\n    for n in range(len(measurements)):\n        \n        # measurement update\n        \n        # prediction\n        \n        print 'x= '\n        x.show()\n        print 'P= '\n        P.show()\n\n\n\n########################################\n\nmeasurements = [1, 2, 3]\n\nx = matrix([[0.], [0.]]) # initial state (location and velocity)\nP = matrix([[1000., 0.], [0., 1000.]]) # initial uncertainty\nu = matrix([[0.], [0.]]) # external motion\nF = matrix([[1., 1.], [0, 1.]]) # next state function\nH = matrix([[1., 0.]]) # measurement function\nR = matrix([[1.]]) # measurement uncertainty\nI = matrix([[1., 0.], [0., 1.]]) # identity matrix\n\nfilter(x, P)\n", "type": "Nugget", "id": 73005}, {"nuggetType": "lecture", "name": "Coconuts 1 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_01_s_Coconuts-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGKm6BAw", "youtube_id": "_BuYowODzoQ", "youtube_state": "done", "path": "Course/cs373/Media/73001", "transcript": null, "id": 73001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYkcIEDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/74001", "type": "Nugget", "id": 74001}, {"nuggetType": "quiz", "name": "Preferred Gaussian", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYlMIEDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/74004", "type": "Nugget", "id": 74004}, {"nuggetType": "lecture", "name": "Measurement And Motion 1", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_13_q_Measurement-and-Motion-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNSDBAw", "youtube_id": "Y7Mr_5Hfe24", "youtube_state": "done", "path": "Course/cs373/Media/66004", "transcript": null, "id": 66004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYlsIEDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/74006", "type": "Nugget", "id": 74006}, {"nuggetType": "quiz", "name": "Parameter Update", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY_ckEDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/75005", "type": "Nugget", "id": 75005}, {"nuggetType": "lecture", "name": "New Mean Variance", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_21_p_New-Mean-Variance", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGP7JBAw", "youtube_id": "yo8jf0U4hlc", "youtube_state": "done", "path": "Course/cs373/Media/75006", "transcript": null, "id": 75006}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY_8kEDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/75007", "type": "Nugget", "id": 75007}, {"nuggetType": "lecture", "name": "Bonus Question: Coconuts 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_02_p_Coconuts-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOHRBAw", "youtube_id": "zpDq3mASejI", "youtube_state": "done", "path": "Course/cs373/Media/76001", "transcript": null, "id": 76001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYydkEDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/77001", "type": "Nugget", "id": 77001}, {"nuggetType": "lecture", "name": "Predict Function", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_23_p_Predict-Function", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGM7ZBAw", "youtube_id": "DV2cX9W0tT8", "youtube_state": "done", "path": "Course/cs373/Media/77006", "transcript": null, "id": 77006}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYz9kEDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/77007", "type": "Nugget", "id": 77007}, {"nuggetType": "lecture", "name": "Coconuts 2 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_02_s_Coconuts-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": "rejected: Video is too long", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMrZBAw", "youtube_id": "cAAOfsGh_vQ", "youtube_state": "failed", "path": "Course/cs373/Media/77002", "transcript": null, "id": 77002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYseEEDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/78001", "type": "Nugget", "id": 78001}, {"nuggetType": "lecture", "name": "Kalman Filter Code Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_24_s_Kalman-Filter-Code", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGKy6BAw", "youtube_id": "X7cixvcogl8", "youtube_state": "done", "path": "Course/cs373/Media/73004", "transcript": null, "id": 73004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYmukEDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/79002", "type": "Nugget", "id": 79002}, {"nuggetType": "lecture", "name": "Kalman Matrices", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_31_p_Kalman-Matrices", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNH3Bww", "youtube_id": "ade97UKqSIc", "youtube_state": "done", "path": "Course/cs373/Media/130001", "transcript": null, "id": 130001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYnOkEDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/79004", "type": "Nugget", "id": 79004}, {"nuggetType": "lecture", "name": "Bonus Question: Coconuts 3", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_03_p_Coconuts-3", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJnpBAw", "youtube_id": "KPeNLTTZlJk", "youtube_state": "done", "path": "Course/cs373/Media/79001", "transcript": null, "id": 79001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYgfEEDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/80001", "type": "Nugget", "id": 80001}, {"nuggetType": "quiz", "name": "Gaussian Intro", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYhfEEDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/80005", "type": "Nugget", "id": 80005}, {"nuggetType": "program", "name": "Predict Function", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYiPEEDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/80008", "suppliedCode": "# Write a program that will predict your new mean\n# and variance given the mean and variance of your \n# prior belief and the mean and variance of your \n# motion. \n\ndef update(mean1, var1, mean2, var2):\n    new_mean = (var2 * mean1 + var1 * mean2) / (var1 + var2)\n    new_var = 1/(1/var1 + 1/var2)\n    return [new_mean, new_var]\n\ndef predict(mean1, var1, mean2, var2):\n    new_mean =\n    new_var =\n    return [new_mean, new_var]\n\nprint predict(10., 4., 12., 4.)", "type": "Nugget", "id": 80008}, {"nuggetType": "quiz", "name": "Separated Gaussians 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY6vgEDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/81002", "type": "Nugget", "id": 81002}, {"nuggetType": "program", "name": "Coconuts 3", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY0YAFDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/82001", "suppliedCode": "#Write a function that repeats the process of\n#giving a coconut away and then taking one \n#fifth of the remaining coconuts away.\n\n\ndef f(n):\n    return (n-1) / 5 * 4\n\ndef f6(n):\n    \n    # Enter code here\n    \n    return \n    \n\nprint f6(96.)\n", "type": "Nugget", "id": 82001}, {"nuggetType": "lecture", "name": "Bonus Question: Coconuts 5", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_05_q_Coconuts-5", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMvZBAw", "youtube_id": "s01XYpP5r7A", "youtube_state": "done", "path": "Course/cs373/Media/77003", "transcript": null, "id": 77003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY0oAFDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/82002", "type": "Nugget", "id": 82002}, {"nuggetType": "lecture", "name": "Kalman Filter Design", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_30_l_Kalman-Filter-Design", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIb3Agw", "youtube_id": "KYEr4BXhD_E", "youtube_state": "done", "path": "Course/cs373/Media/48006", "transcript": null, "id": 48006}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY1IAFDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/82004", "type": "Nugget", "id": 82004}, {"nuggetType": "lecture", "name": "Coconuts 3 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_03_s_Coconuts-3", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLmIBQw", "youtube_id": "nUaWAmX32hY", "youtube_state": "done", "path": "Course/cs373/Media/83001", "transcript": null, "id": 83001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYoZAFDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/84001", "type": "Nugget", "id": 84001}, {"nuggetType": "lecture", "name": "Gaussian Intro Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_08_s_Gaussian-Intro", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOHLBgw", "youtube_id": "oFpvcWEllBs", "youtube_state": "done", "path": "Course/cs373/Media/108001", "transcript": null, "id": 108001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYopAFDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/84002", "type": "Nugget", "id": 84002}, {"nuggetType": "lecture", "name": "Bonus Question: Coconuts 4", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_04_p_Coconuts-4", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJLCBAw", "youtube_id": "v_ZhhkrlfnI", "youtube_state": "done", "path": "Course/cs373/Media/74002", "transcript": null, "id": 74002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYiZgFDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/85001", "type": "Nugget", "id": 85001}, {"nuggetType": "lecture", "name": "Coconuts 6 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_06_s_Coconuts-6", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJnmBQw", "youtube_id": "hUL5mbxUNnQ", "youtube_state": "done", "path": "Course/cs373/Media/95001", "transcript": null, "id": 95001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYipgFDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/85002", "type": "Nugget", "id": 85002}, {"nuggetType": "lecture", "name": "Measurement And Motion 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_14_q_Measurement-and-Motion-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJfCBAw", "youtube_id": "dwVwSZuJDBQ", "youtube_state": "done", "path": "Course/cs373/Media/74007", "transcript": null, "id": 74007}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYi5gFDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/85003", "type": "Nugget", "id": 85003}, {"nuggetType": "lecture", "name": "Kalman Prediction", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_25_q_Kalman-Prediction", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGKy3BQw", "youtube_id": "doyrdLJ6rJ4", "youtube_state": "done", "path": "Course/cs373/Media/89004", "transcript": null, "id": 89004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYjZgFDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/85005", "type": "Nugget", "id": 85005}, {"nuggetType": "lecture", "name": "Maximize Gaussian Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_12_s_Maximize-Gaussian", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNqkBgw", "youtube_id": "2cD8T65E-jM", "youtube_state": "done", "path": "Course/cs373/Media/103002", "transcript": null, "id": 103002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY9J8FDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/86004", "type": "Nugget", "id": 86004}, {"nuggetType": "lecture", "name": "Coconuts 4 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_04_s_Coconuts-4", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPrJBAw", "youtube_id": "JzABrLV3v3U", "youtube_state": "done", "path": "Course/cs373/Media/75002", "transcript": null, "id": 75002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY2acFDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/87001", "type": "Nugget", "id": 87001}, {"nuggetType": "lecture", "name": "Parameter Update", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_17_q_Parameter-Update", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJ3IAgw", "youtube_id": "d8UrbKKlGxI", "youtube_state": "done", "path": "Course/cs373/Media/42013", "transcript": null, "id": 42013}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYw68FDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/88003", "type": "Nugget", "id": 88003}, {"nuggetType": "lecture", "name": "New Mean Variance Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_21_s_New-Mean-Variance", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPrDBgw", "youtube_id": "SwxRWZaC1FM", "youtube_state": "done", "path": "Course/cs373/Media/107002", "transcript": null, "id": 107002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYq7cFDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/89003", "type": "Nugget", "id": 89003}, {"nuggetType": "quiz", "name": "Coconuts 5", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYkb8FDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/90001", "type": "Nugget", "id": 90001}, {"nuggetType": "lecture", "name": "Tracking Intro Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_07_s_Tracking-Intro", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOr1BQw", "youtube_id": "lDykH1UHq38", "youtube_state": "done", "path": "Course/cs373/Media/97002", "transcript": null, "id": 97002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY-8YFDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/91003", "type": "Nugget", "id": 91003}, {"nuggetType": "lecture", "name": "Evaluate Gaussian", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_11_q_Evaluate-Gaussian", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMrTBgw", "youtube_id": "4-0nBfsD4jo", "youtube_state": "done", "path": "Course/cs373/Media/109002", "transcript": null, "id": 109002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY_cYFDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/91005", "type": "Nugget", "id": 91005}, {"nuggetType": "program", "name": "New Mean Variance", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY4s4FDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/92002", "suppliedCode": "# Write a program to update your mean and variance\n# when given the mean and variance of your belief\n# and the mean and variance of your measurement.\n# This program will update the parameters of your\n# belief function.\n\ndef update(mean1, var1, mean2, var2):\n    new_mean =\n    new_var =\n    return [new_mean, new_var]\n\nprint update(10.,8.,13., 2.)", "type": "Nugget", "id": 92002}, {"nuggetType": "lecture", "name": "Bonus Question: Coconuts 6", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_06_p_Coconuts-6", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLHeBQw", "youtube_id": "3jr8sdq99dI", "youtube_state": "done", "path": "Course/cs373/Media/94001", "transcript": null, "id": 94001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYst4FDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/94002", "type": "Nugget", "id": 94002}, {"nuggetType": "quiz", "name": "Measurement And Motion 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYs94FDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/94003", "type": "Nugget", "id": 94003}, {"nuggetType": "lecture", "name": "Gaussian Motion", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_22_q_Gaussian-Motion", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJjCBAw", "youtube_id": "X7YggdDnLaw", "youtube_state": "done", "path": "Course/cs373/Media/74008", "transcript": null, "id": 74008}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYm-YFDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/95003", "type": "Nugget", "id": 95003}, {"nuggetType": "quiz", "name": "Tracking Intro", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYgu4FDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/96002", "type": "Nugget", "id": 96002}, {"nuggetType": "lecture", "name": "Kalman Filter Prediciton", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_27_q_Kalman-Filter-Prediciton", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOv7Aww", "youtube_id": "HTL5-0DDqE4", "youtube_state": "done", "path": "Course/cs373/Media/65003", "transcript": null, "id": 65003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYhu4FDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/96006", "type": "Nugget", "id": 96006}, {"nuggetType": "quiz", "name": "Measurement And Motion 1", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY6_UFDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/97003", "type": "Nugget", "id": 97003}, {"nuggetType": "lecture", "name": "Parameter Update 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_18_q_Parameter-Update-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGP_GBQw", "youtube_id": "2BfisMbu86o", "youtube_state": "done", "path": "Course/cs373/Media/91007", "transcript": null, "id": 91007}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY7PUFDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/97004", "type": "Nugget", "id": 97004}, {"nuggetType": "quiz", "name": "Gaussian Motion", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY7fUFDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/97005", "type": "Nugget", "id": 97005}, {"nuggetType": "lecture", "name": "The Next Class", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_32_l_The-Next-Class", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGKKHCAw", "youtube_id": "8Wp5Edcx0Vw", "youtube_state": "done", "path": "Course/cs373/Media/132002", "transcript": null, "id": 132002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY7_UFDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/97007", "type": "Nugget", "id": 97007}, {"nuggetType": "lecture", "name": "Evaluate Gaussian Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_11_s_Evaluate-Gaussian", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGKu0Bgw", "youtube_id": "mQtjczyAxQs", "youtube_state": "done", "path": "Course/cs373/Media/105003", "transcript": null, "id": 105003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY0v0FDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/98002", "type": "Nugget", "id": 98002}, {"nuggetType": "quiz", "name": "Shifting The Mean", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYvYUGDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/99005", "type": "Nugget", "id": 99005}, {"nuggetType": "lecture", "name": "Separated Gaussians Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_19_s_Separated-Gaussians", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGKHyAQw", "youtube_id": "fGcozDEwnwY", "youtube_state": "done", "path": "Course/cs373/Media/31009", "transcript": null, "id": 31009}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYvoUGDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/99006", "type": "Nugget", "id": 99006}, {"nuggetType": "lecture", "name": "Separated Gaussians 2 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_20_s_Separated-Gaussians-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMW4Agw", "youtube_id": "edcfMK_bKXw", "youtube_state": "done", "path": "Course/cs373/Media/40005", "transcript": null, "id": 40005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYo40GDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/100003", "type": "Nugget", "id": 100003}, {"nuggetType": "lecture", "name": "Another Prediction Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_28_s_Another-Prediction", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOLIBww", "youtube_id": "JNDsm_Gzxi0", "youtube_state": "done", "path": "Course/cs373/Media/124002", "transcript": null, "id": 124002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYpI0GDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/100004", "type": "Nugget", "id": 100004}, {"nuggetType": "lecture", "name": "Another Prediction", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_28_q_Another-Prediction", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJK5Bww", "youtube_id": "cUKlYjQEQGY", "youtube_state": "done", "path": "Course/cs373/Media/122002", "transcript": null, "id": 122002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY26QGDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/103003", "type": "Nugget", "id": 103003}, {"nuggetType": "lecture", "name": "Shifting The Mean", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_15_q_Shifting-the-Mean", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJK8Bgw", "youtube_id": "8c479K2UCZo", "youtube_state": "done", "path": "Course/cs373/Media/106002", "transcript": null, "id": 106002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYk7wGDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/106003", "type": "Nugget", "id": 106003}, {"nuggetType": "program", "name": "Kalman Filter Code", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYlLwGDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/106004", "suppliedCode": "# Write a program that will iteratively update and\n# predict based on the location measurements \n# and inferred motions shown below. \n\ndef update(mean1, var1, mean2, var2):\n    new_mean = (var2 * mean1 + var1 * mean2) / (var1 + var2)\n    new_var = 1/(1/var1 + 1/var2)\n    return [new_mean, new_var]\n\ndef predict(mean1, var1, mean2, var2):\n    new_mean = mean1 + mean2\n    new_var = var1 + var2\n    return [new_mean, new_var]\n\nmeasurements = [5., 6., 7., 9., 10.]\nmotion = [1., 1., 2., 1., 1.]\nmeasurement_sig = 4.\nmotion_sig = 2.\nmu = 0\nsig = 10000\n\n#Please print out ONLY the final values of the mean\n#and the variance in a list [mu, sig]. \n\n# Insert code here\n\nprint [mu, sig]\n", "type": "Nugget", "id": 106004}, {"nuggetType": "lecture", "name": "Shifting The Mean Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_15_s_Shifting-the-Mean", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMvTBgw", "youtube_id": "HmcurWkA0fQ", "youtube_state": "done", "path": "Course/cs373/Media/109003", "transcript": null, "id": 109003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYzNMGDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/109004", "type": "Nugget", "id": 109004}, {"nuggetType": "lecture", "name": "Variance Comparison", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_09_q_Variance-Comparison", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMnTBgw", "youtube_id": "TGdMG81hXc8", "youtube_state": "done", "path": "Course/cs373/Media/109001", "transcript": null, "id": 109001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYsdsGDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/110001", "type": "Nugget", "id": 110001}, {"nuggetType": "quiz", "name": "Variance Comparison", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYgesGDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/112001", "type": "Nugget", "id": 112001}, {"nuggetType": "lecture", "name": "Variance Comparison Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_09_s_Variance-Comparison", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGKq0Bgw", "youtube_id": "rczAG7meAY4", "youtube_state": "done", "path": "Course/cs373/Media/105002", "transcript": null, "id": 105002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYgusGDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/112002", "type": "Nugget", "id": 112002}, {"nuggetType": "quiz", "name": "Evaluate Gaussian", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY6vIGDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/113002", "type": "Nugget", "id": 113002}, {"nuggetType": "lecture", "name": "Maximize Gaussian", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_12_p_Maximize-Gaussian", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJXCBAw", "youtube_id": "fRYtUP0P4Lg", "youtube_state": "done", "path": "Course/cs373/Media/74005", "transcript": null, "id": 74005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY6_IGDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/113003", "type": "Nugget", "id": 113003}, {"nuggetType": "lecture", "name": "Predicting The Peak Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_16_s_Predicting-the-Peak", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIubBAw", "youtube_id": "PsyqM704q2Y", "youtube_state": "done", "path": "Course/cs373/Media/69003", "transcript": null, "id": 69003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY7PIGDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/113004", "type": "Nugget", "id": 113004}, {"nuggetType": "lecture", "name": "Preferred Gaussian", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_10_q_Preferred-Gaussian", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJPCBAw", "youtube_id": "sBsju-6nQWI", "youtube_state": "done", "path": "Course/cs373/Media/74003", "transcript": null, "id": 74003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY0foGDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/114001", "type": "Nugget", "id": 114001}, {"nuggetType": "program", "name": "Maximize Gaussian", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYoYoHDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/116001", "suppliedCode": "#For this problem, you aren't writing any code.\n#Instead, please just change the last argument \n#in f() to maximize the output.\n\nfrom math import *\n\ndef f(mu, sigma2, x):\n    return 1/sqrt(2.*pi*sigma2) * exp(-.5*(x-mu)**2 / sigma2)\n\nprint f(10.,4.,8.) #Change the 8. to something else!\n", "type": "Nugget", "id": 116001}, {"nuggetType": "lecture", "name": "Separated Gaussians 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_20_q_Separated-Gaussians-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMzZBAw", "youtube_id": "0FmTokjoRgo", "youtube_state": "done", "path": "Course/cs373/Media/77004", "transcript": null, "id": 77004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYoooHDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/116002", "type": "Nugget", "id": 116002}, {"nuggetType": "lecture", "name": "Gaussian Motion Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_22_s_Gaussian-Motion", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGKOKBww", "youtube_id": "xNPEjY4dsds", "youtube_state": "done", "path": "Course/cs373/Media/116003", "transcript": null, "id": 116003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYpIoHDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/116004", "type": "Nugget", "id": 116004}, {"nuggetType": "quiz", "name": "Another Prediction", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYi5IHDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/117003", "type": "Nugget", "id": 117003}, {"nuggetType": "lecture", "name": "Parameter Update 2 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_18_s_Parameter-Update-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNL6Bgw", "youtube_id": "_AAkw_fynwc", "youtube_state": "done", "path": "Course/cs373/Media/114002", "transcript": null, "id": 114002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY8ZkHDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/118001", "type": "Nugget", "id": 118001}, {"nuggetType": "quiz", "name": "Separated Gaussians", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYwakHDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/120001", "type": "Nugget", "id": 120001}, {"nuggetType": "lecture", "name": "Kalman Filter Code", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_24_p_Kalman-Filter-Code", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMrfAgw", "youtube_id": "3xBycKfnCOQ", "youtube_state": "done", "path": "Course/cs373/Media/45002", "transcript": null, "id": 45002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYqbEHDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/121001", "type": "Nugget", "id": 121001}, {"nuggetType": "quiz", "name": "Kalman Prediction", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYkbkHDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/122001", "type": "Nugget", "id": 122001}, {"nuggetType": "lecture", "name": "Kalman Matrices Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_31_s_Kalman-Matrices", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLLYBww", "youtube_id": "LEuzK9X7_hM", "youtube_state": "done", "path": "Course/cs373/Media/126002", "transcript": null, "id": 126002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYk7kHDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/122003", "type": "Nugget", "id": 122003}, {"nuggetType": "lecture", "name": "Kalman Prediction Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_25_s_Kalman-Prediction", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPnABww", "youtube_id": "tSfmiuB9s2c", "youtube_state": "done", "path": "Course/cs373/Media/123001", "transcript": null, "id": 123001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY-sAHDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/123002", "type": "Nugget", "id": 123002}, {"nuggetType": "lecture", "name": "Conclusion", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_33_l_Conclusion", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGKWKBww", "youtube_id": "6kFMxhlfHuI", "youtube_state": "done", "path": "Course/cs373/Media/116005", "transcript": null, "id": 116005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYytAHDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/125002", "type": "Nugget", "id": 125002}, {"nuggetType": "quiz", "name": "Kalman Filter Prediciton", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQYsdgHDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/126001", "type": "Nugget", "id": 126001}, {"nuggetType": "lecture", "name": "More Kalman Filters", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgw", "media": {"dotsub_id": null, "name": "cs373_unit2_29_l_More-Kalman-Filters", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIHoBww", "youtube_id": "hUnTg5v4tDU", "youtube_state": "done", "path": "Course/cs373/Media/128001", "transcript": null, "id": 128001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJbIAgwLEgZOdWdnZXQY6e8HDA", "path": "Course/cs373/CourseRev/feb2012/Unit/42006/Nugget/129001", "type": "Nugget", "id": 129001}]}, {"name": "Homework 2", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": true, "closedAt": "03/07/2012 00:00", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYmd0IDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYw6YIDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQY6ewIDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYufwIDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYiYwJDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQY6uwIDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYs9UIDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYkbMJDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQY4cIJDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYmdoJDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYgeIJDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYkrYIDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYoYEKDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQY254IDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYuvkJDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQY8ZYIDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQY2p4IDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYqa4IDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQY4cUIDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "path": "Course/cs373/CourseRev/feb2012/Unit/91001", "open": false, "id": 91001, "nuggets": [{"nuggetType": "lecture", "name": "Programming Exercise Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "media": {"dotsub_id": null, "name": "cs373_hw2_05_s_programming-exercise", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLn_Bww", "youtube_id": "CsbaD32VIw8", "youtube_state": "done", "path": "Course/cs373/Media/131001", "transcript": null, "id": 131001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYtOoBDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/30004", "type": "Nugget", "id": 30004}, {"nuggetType": "program", "name": "Programming Exercise", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYgNACDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/43008", "suppliedCode": "", "type": "Nugget", "id": 43008}, {"nuggetType": "lecture", "name": "End Good", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "media": {"dotsub_id": null, "name": "cs373_hw2_06_l_end-good", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGL-FBgw", "youtube_id": "IJyrSbZf0Ng", "youtube_state": "done", "path": "Course/cs373/Media/99007", "transcript": null, "id": 99007}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYy98CDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/45003", "type": "Nugget", "id": 45003}, {"nuggetType": "quiz", "name": "State Transition Matrix", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYs-QDDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/62003", "type": "Nugget", "id": 62003}, {"nuggetType": "quiz", "name": "How Many Dimensions ", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQY858FDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/86003", "type": "Nugget", "id": 86003}, {"nuggetType": "lecture", "name": "Programming Exercise", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "media": {"dotsub_id": null, "name": "cs373_hw2_05_p_programming-exercise", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJvpBAw", "youtube_id": "4DMuBp1vNn4", "youtube_state": "done", "path": "Course/cs373/Media/79003", "transcript": null, "id": 79003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYrbcFDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/89005", "type": "Nugget", "id": 89005}, {"nuggetType": "quiz", "name": "Measurement Update", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYytYFDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/93002", "type": "Nugget", "id": 93002}, {"nuggetType": "lecture", "name": "How Many Dimensions  Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "media": {"dotsub_id": null, "name": "cs373_hw2_03_s_how-many-dimensions-", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGKq3BQw", "youtube_id": "1F97ehyuLCg", "youtube_state": "done", "path": "Course/cs373/Media/89002", "transcript": null, "id": 89002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYg-4FDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/96003", "type": "Nugget", "id": 96003}, {"nuggetType": "lecture", "name": "State Transition Matrix Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "media": {"dotsub_id": null, "name": "cs373_hw2_04_s_state-transition-matrix", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGITuBQw", "youtube_id": "DYdS6DWYXuo", "youtube_state": "done", "path": "Course/cs373/Media/96004", "transcript": null, "id": 96004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYhe4FDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/96005", "type": "Nugget", "id": 96005}, {"nuggetType": "lecture", "name": "Measurement Update", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "media": {"dotsub_id": null, "name": "cs373_hw2_00_q_measurement-update", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPKfBQw", "youtube_id": "Wg1jhodXCxE", "youtube_state": "done", "path": "Course/cs373/Media/86002", "transcript": null, "id": 86002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQY6fUFDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/97001", "type": "Nugget", "id": 97001}, {"nuggetType": "quiz", "name": "Heavytail Guassian", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYuoUGDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/99002", "type": "Nugget", "id": 99002}, {"nuggetType": "lecture", "name": "Measurement Update Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "media": {"dotsub_id": null, "name": "cs373_hw2_00_s_measurement-update", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLmFBgw", "youtube_id": "Spg6gvFY9Uk", "youtube_state": "done", "path": "Course/cs373/Media/99001", "transcript": null, "id": 99001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYoY0GDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/100001", "type": "Nugget", "id": 100001}, {"nuggetType": "lecture", "name": "New Variance", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "media": {"dotsub_id": null, "name": "cs373_hw2_01_q_new-variance", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPvJBAw", "youtube_id": "zgHLss8qNSU", "youtube_state": "done", "path": "Course/cs373/Media/75003", "transcript": null, "id": 75003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYiZUGDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/101001", "type": "Nugget", "id": 101001}, {"nuggetType": "lecture", "name": "Heavytail Guassian Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "media": {"dotsub_id": null, "name": "cs373_hw2_02_s_heavytail-guassian", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIPxBAw", "youtube_id": "fHL2jtZKFDs", "youtube_state": "done", "path": "Course/cs373/Media/80003", "transcript": null, "id": 80003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYipUGDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/101002", "type": "Nugget", "id": 101002}, {"nuggetType": "quiz", "name": "New Variance", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQY8ZwGDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/102001", "type": "Nugget", "id": 102001}, {"nuggetType": "lecture", "name": "New Variance Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "media": {"dotsub_id": null, "name": "cs373_hw2_01_s_new-variance", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPrGBQw", "youtube_id": "Jltl6Prqcfo", "youtube_state": "done", "path": "Course/cs373/Media/91002", "transcript": null, "id": 91002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQY2aQGDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/103001", "type": "Nugget", "id": 103001}, {"nuggetType": "lecture", "name": "Heavytail Guassian", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "media": {"dotsub_id": null, "name": "cs373_hw2_02_q_heavytail-guassian", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJjIAgw", "youtube_id": "OfAX5h3ziOo", "youtube_state": "done", "path": "Course/cs373/Media/42008", "transcript": null, "id": 42008}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYwawGDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/104001", "type": "Nugget", "id": 104001}, {"nuggetType": "lecture", "name": "How Many Dimensions ", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "media": {"dotsub_id": null, "name": "cs373_hw2_03_q_how-many-dimensions-", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNKDBAw", "youtube_id": "17CVjtBZ0-c", "youtube_state": "done", "path": "Course/cs373/Media/66002", "transcript": null, "id": 66002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYkbwGDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/106001", "type": "Nugget", "id": 106001}, {"nuggetType": "lecture", "name": "State Transition Matrix", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "media": {"dotsub_id": null, "name": "cs373_hw2_04_q_state-transition-matrix", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJO_BQw", "youtube_id": "0OyB17l_Nj4", "youtube_state": "done", "path": "Course/cs373/Media/90003", "transcript": null, "id": 90003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQY-cMGDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/107001", "type": "Nugget", "id": 107001}, {"nuggetType": "lecture", "name": "Programming Exercise", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "media": {"dotsub_id": "92d3b1d8-fbea-42e2-a48a-3e0e33ca5ff1", "name": "cs373_hw2_05_p_programming-exercise", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGImPCAw", "youtube_id": "4DMuBp1vNn4", "youtube_state": "failed", "path": "Course/cs373/Media/133001", "transcript": null, "id": 133001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQY8ZYIDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/134001", "type": "Nugget", "id": 134001}, {"nuggetType": "program", "name": "Programming Exercise", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQY2p4IDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/135002", "suppliedCode": "# Fill in the matrices P, F, H, R and I at the bottom\n#\n# This question requires NO CODING, just fill in the \n# matrices where indicated. Please do not delete or modify\n# any provided code OR comments. Good luck!\n\nfrom math import *\n\nclass matrix:\n    \n    # implements basic operations of a matrix class\n    \n    def __init__(self, value):\n        self.value = value\n        self.dimx = len(value)\n        self.dimy = len(value[0])\n        if value == [[]]:\n            self.dimx = 0\n    \n    def zero(self, dimx, dimy):\n        # check if valid dimensions\n        if dimx < 1 or dimy < 1:\n            raise ValueError, \"Invalid size of matrix\"\n        else:\n            self.dimx = dimx\n            self.dimy = dimy\n            self.value = [[0 for row in range(dimy)] for col in range(dimx)]\n    \n    def identity(self, dim):\n        # check if valid dimension\n        if dim < 1:\n            raise ValueError, \"Invalid size of matrix\"\n        else:\n            self.dimx = dim\n            self.dimy = dim\n            self.value = [[0 for row in range(dim)] for col in range(dim)]\n            for i in range(dim):\n                self.value[i][i] = 1\n    \n    def show(self):\n        for i in range(self.dimx):\n            print self.value[i]\n        print ' '\n    \n    def __add__(self, other):\n        # check if correct dimensions\n        if self.dimx != other.dimx or self.dimy != other.dimy:\n            raise ValueError, \"Matrices must be of equal dimensions to add\"\n        else:\n            # add if correct dimensions\n            res = matrix([[]])\n            res.zero(self.dimx, self.dimy)\n            for i in range(self.dimx):\n                for j in range(self.dimy):\n                    res.value[i][j] = self.value[i][j] + other.value[i][j]\n            return res\n    \n    def __sub__(self, other):\n        # check if correct dimensions\n        if self.dimx != other.dimx or self.dimy != other.dimy:\n            raise ValueError, \"Matrices must be of equal dimensions to subtract\"\n        else:\n            # subtract if correct dimensions\n            res = matrix([[]])\n            res.zero(self.dimx, self.dimy)\n            for i in range(self.dimx):\n                for j in range(self.dimy):\n                    res.value[i][j] = self.value[i][j] - other.value[i][j]\n            return res\n    \n    def __mul__(self, other):\n        # check if correct dimensions\n        if self.dimy != other.dimx:\n            raise ValueError, \"Matrices must be m*n and n*p to multiply\"\n        else:\n            # subtract if correct dimensions\n            res = matrix([[]])\n            res.zero(self.dimx, other.dimy)\n            for i in range(self.dimx):\n                for j in range(other.dimy):\n                    for k in range(self.dimy):\n                        res.value[i][j] += self.value[i][k] * other.value[k][j]\n            return res\n    \n    def transpose(self):\n        # compute transpose\n        res = matrix([[]])\n        res.zero(self.dimy, self.dimx)\n        for i in range(self.dimx):\n            for j in range(self.dimy):\n                res.value[j][i] = self.value[i][j]\n        return res\n    \n    # Thanks to Ernesto P. Adorio for use of Cholesky and CholeskyInverse functions\n    \n    def Cholesky(self, ztol=1.0e-5):\n        # Computes the upper triangular Cholesky factorization of\n        # a positive definite matrix.\n        res = matrix([[]])\n        res.zero(self.dimx, self.dimx)\n        \n        for i in range(self.dimx):\n            S = sum([(res.value[k][i])**2 for k in range(i)])\n            d = self.value[i][i] - S\n            if abs(d) < ztol:\n                res.value[i][i] = 0.0\n            else:\n                if d < 0.0:\n                    raise ValueError, \"Matrix not positive-definite\"\n                res.value[i][i] = sqrt(d)\n            for j in range(i+1, self.dimx):\n                S = sum([res.value[k][i] * res.value[k][j] for k in range(self.dimx)])\n                if abs(S) < ztol:\n                    S = 0.0\n                res.value[i][j] = (self.value[i][j] - S)/res.value[i][i]\n        return res\n    \n    def CholeskyInverse(self):\n        # Computes inverse of matrix given its Cholesky upper Triangular\n        # decomposition of matrix.\n        res = matrix([[]])\n        res.zero(self.dimx, self.dimx)\n        \n        # Backward step for inverse.\n        for j in reversed(range(self.dimx)):\n            tjj = self.value[j][j]\n            S = sum([self.value[j][k]*res.value[j][k] for k in range(j+1, self.dimx)])\n            res.value[j][j] = 1.0/tjj**2 - S/tjj\n            for i in reversed(range(j)):\n                res.value[j][i] = res.value[i][j] = -sum([self.value[i][k]*res.value[k][j] for k in range(i+1, self.dimx)])/self.value[i][i]\n        return res\n    \n    def inverse(self):\n        aux = self.Cholesky()\n        res = aux.CholeskyInverse()\n        return res\n    \n    def __repr__(self):\n        return repr(self.value)\n\n\n########################################\n\ndef filter(x, P):\n    for n in range(len(measurements)):\n        \n        # prediction\n        x = (F * x) + u\n        P = F * P * F.transpose()\n        \n        # measurement update\n        Z = matrix([measurements[n]])\n        y = Z.transpose() - (H * x)\n        S = H * P * H.transpose() + R\n        K = P * H.transpose() * S.inverse()\n        x = x + (K * y)\n        P = (I - (K * H)) * P\n    \n    print 'x= '\n    x.show()\n    print 'P= '\n    P.show()\n\n########################################\n\nprint \"### 4-dimensional example ###\"\n\nmeasurements = [[5., 10.], [6., 8.], [7., 6.], [8., 4.], [9., 2.], [10., 0.]]\ninitial_xy = [4., 12.]\n\n# measurements = [[1., 4.], [6., 0.], [11., -4.], [16., -8.]]\n# initial_xy = [-4., 8.]\n\n# measurements = [[1., 17.], [1., 15.], [1., 13.], [1., 11.]]\n# initial_xy = [1., 19.]\n\ndt = 0.1\n\nx = matrix([[initial_xy[0]], [initial_xy[1]], [0.], [0.]]) # initial state (location and velocity)\nu = matrix([[0.], [0.], [0.], [0.]]) # external motion\n\n#### DO NOT MODIFY ANYTHING ABOVE HERE ####\n#### fill this in, remember to use the matrix() function!: ####\n\nP =  # initial uncertainty\nF =  # next state function\nH =  # measurement function\nR =  # measurement uncertainty\nI =  # identity matrix\n\n###### DO NOT MODIFY ANYTHING HERE #######\n\nfilter(x, P)\n", "type": "Nugget", "id": 135002}, {"nuggetType": "quiz", "name": "State Transition Matrix", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQY254IDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/135003", "type": "Nugget", "id": 135003}, {"nuggetType": "quiz", "name": "Measurement Update", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYw6YIDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/136003", "type": "Nugget", "id": 136003}, {"nuggetType": "lecture", "name": "Programming Exercise Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "media": {"dotsub_id": "88e166ed-8527-4a44-b6b3-b187714730c1", "name": "cs373_hw2_05_s_programming-exercise", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMGmCAw", "youtube_id": "CsbaD32VIw8", "youtube_state": "failed", "path": "Course/cs373/Media/136001", "transcript": null, "id": 136001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYqa4IDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/137001", "type": "Nugget", "id": 137001}, {"nuggetType": "lecture", "name": "How Many Dimensions  Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "media": {"dotsub_id": "cad8c668-1336-4f67-a705-cfe381f07237", "name": "cs373_hw2_03_s_how-many-dimensions-", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOnpCQw", "youtube_id": "1F97ehyuLCg", "youtube_state": "failed", "path": "Course/cs373/Media/161001", "transcript": null, "id": 161001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYkrYIDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/138002", "type": "Nugget", "id": 138002}, {"nuggetType": "lecture", "name": "End Good", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "media": {"dotsub_id": "e3095556-c201-48f1-ae08-93333b95a339", "name": "cs373_hw2_06_l_end-good", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPm9CAw", "youtube_id": "IJyrSbZf0Ng", "youtube_state": "failed", "path": "Course/cs373/Media/139001", "transcript": null, "id": 139001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQY4cUIDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/140001", "type": "Nugget", "id": 140001}, {"nuggetType": "lecture", "name": "Heavytail Guassian", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "media": {"dotsub_id": "edc09443-6e39-4d13-8f23-da06e103bad8", "name": "cs373_hw2_02_q_heavytail-guassian", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMGjCQw", "youtube_id": "OfAX5h3ziOo", "youtube_state": "failed", "path": "Course/cs373/Media/152001", "transcript": null, "id": 152001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYs9UIDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/142003", "type": "Nugget", "id": 142003}, {"nuggetType": "lecture", "name": "Measurement Update", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "media": {"dotsub_id": "3b591aec-1b3b-40a6-8263-c8bea07e6da0", "name": "cs373_hw2_00_q_measurement-update", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLHVCAw", "youtube_id": "Wg1jhodXCxE", "youtube_state": "failed", "path": "Course/cs373/Media/142001", "transcript": null, "id": 142001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYmd0IDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/143001", "type": "Nugget", "id": 143001}, {"nuggetType": "lecture", "name": "Measurement Update Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "media": {"dotsub_id": "43bf0733-c5c0-4402-992c-aef90be793ed", "name": "cs373_hw2_00_s_measurement-update", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIHlCAw", "youtube_id": "Spg6gvFY9Uk", "youtube_state": "failed", "path": "Course/cs373/Media/144001", "transcript": null, "id": 144001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQY6ewIDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/145001", "type": "Nugget", "id": 145001}, {"nuggetType": "lecture", "name": "New Variance Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "media": {"dotsub_id": "3aa1195f-1475-4417-80df-0efb38679327", "name": "cs373_hw2_01_s_new-variance", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPGTCQw", "youtube_id": "Jltl6Prqcfo", "youtube_state": "failed", "path": "Course/cs373/Media/150001", "transcript": null, "id": 150001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQY6uwIDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/145002", "type": "Nugget", "id": 145002}, {"nuggetType": "lecture", "name": "New Variance", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "media": {"dotsub_id": "040e3f46-ada4-4468-b8f8-9dfabf71992a", "name": "cs373_hw2_01_q_new-variance", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLLVCAw", "youtube_id": "zgHLss8qNSU", "youtube_state": "failed", "path": "Course/cs373/Media/142002", "transcript": null, "id": 142002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYufwIDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/147001", "type": "Nugget", "id": 147001}, {"nuggetType": "quiz", "name": "New Variance", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYiYwJDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/149001", "type": "Nugget", "id": 149001}, {"nuggetType": "quiz", "name": "Heavytail Guassian", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYkbMJDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/154001", "type": "Nugget", "id": 154001}, {"nuggetType": "lecture", "name": "Heavytail Guassian Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "media": {"dotsub_id": "cbb50b99-c297-4b48-b0d8-b4b1ef4d42cf", "name": "cs373_hw2_02_s_heavytail-guassian", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPm6CQw", "youtube_id": "fHL2jtZKFDs", "youtube_state": "failed", "path": "Course/cs373/Media/155001", "transcript": null, "id": 155001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQY4cIJDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/156001", "type": "Nugget", "id": 156001}, {"nuggetType": "lecture", "name": "How Many Dimensions ", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "media": {"dotsub_id": "9d6a56ee-82a2-49e4-8853-56798aaf7e87", "name": "cs373_hw2_03_q_how-many-dimensions-", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLHSCQw", "youtube_id": "17CVjtBZ0-c", "youtube_state": "failed", "path": "Course/cs373/Media/158001", "transcript": null, "id": 158001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYmdoJDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/159001", "type": "Nugget", "id": 159001}, {"nuggetType": "quiz", "name": "How Many Dimensions ", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYgeIJDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/160001", "type": "Nugget", "id": 160001}, {"nuggetType": "lecture", "name": "State Transition Matrix Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "media": {"dotsub_id": "da0b39b9-7aa1-4dc1-809d-2e070abcbb08", "name": "cs373_hw2_04_s_state-transition-matrix", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIqMCQw", "youtube_id": "DYdS6DWYXuo", "youtube_state": "failed", "path": "Course/cs373/Media/149002", "transcript": null, "id": 149002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYuvkJDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/163002", "type": "Nugget", "id": 163002}, {"nuggetType": "lecture", "name": "State Transition Matrix", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQw", "media": {"dotsub_id": "75952860-f279-48ec-83bc-18f4bc044902", "name": "cs373_hw2_04_q_state-transition-matrix", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLn5CQw", "youtube_id": "0OyB17l_Nj4", "youtube_state": "failed", "path": "Course/cs373/Media/163001", "transcript": null, "id": 163001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPnGBQwLEgZOdWdnZXQYoYEKDA", "path": "Course/cs373/CourseRev/feb2012/Unit/91001/Nugget/164001", "type": "Nugget", "id": 164001}]}, {"name": "Homework 2 Help", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPm3CgwLEgZOdWdnZXQYyccKDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPm3CgwLEgZOdWdnZXQYmtcKDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPm3Cgw", "path": "Course/cs373/CourseRev/feb2012/Unit/171001", "open": false, "id": 171001, "nuggets": [{"nuggetType": "lecture", "name": "Question 5 Help", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPm3Cgw", "media": {"dotsub_id": "375046cc-4e09-4982-8375-25178a243368", "name": "cs373_hh2_00_l_Question-5-help", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOG_Cgw", "youtube_id": "aSKMFM1VsAw", "youtube_state": "done", "path": "Course/cs373/Media/172001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:06,000\n[Andy:] On the forums, we saw a lot of confusion about homeworks 2.5 and 2.6.\n\n2\n00:00:06,000 --> 00:00:10,000\nSpecifically, questions about what was going on with the linear algebra.\n\n3\n00:00:10,000 --> 00:00:15,000\nI want to talk about some of that today, and I want to do it by comparing the 2D case --\n\n4\n00:00:15,000 --> 00:00:18,000\nand that's the case we talked about in lecture--\n\n5\n00:00:18,000 --> 00:00:22,000\nwith the 4D case, which is what you're asked about on the homework.\n\n6\n00:00:22,000 --> 00:00:26,000\nSo in the 2-dimensional case, I want to first talk about this f matrix\n\n7\n00:00:26,000 --> 00:00:30,000\nthat Sebastian was calling the \"state transition matrix.\"\n\n8\n00:00:30,000 --> 00:00:34,000\nThe idea behind this matrix was that we wanted to take some old beliefs,\n\n9\n00:00:34,000 --> 00:00:39,000\nsome old state, which in the 2-dimensional case was represented by x and \u1e8b\n\n10\n00:00:39,000 --> 00:00:42,000\nwhere \u1e8b is our velocity and x is our position,\n\n11\n00:00:42,000 --> 00:00:46,000\nand from that we want to extract our predict some new state, \n\n12\n00:00:46,000 --> 00:00:50,000\nwhich was called x-prime and \u1e8b-prime.\n\n13\n00:00:50,000 --> 00:00:57,000\nThe question was what do we fill in here to get the proper values for x-prime and \u1e8b-prime.\n\n14\n00:00:57,000 --> 00:00:59,000\nLet's think.\n\n15\n00:00:59,000 --> 00:01:04,000\nWhat should our position be--our predicted position after some time has elapsed?\n\n16\n00:01:04,000 --> 00:01:07,000\nWell, we want to include our old position, right?\n\n17\n00:01:07,000 --> 00:01:10,000\nLets first write out these formulas.\n\n18\n00:01:10,000 --> 00:01:15,000\nWe expect that x-prime will be composed of our old position \n\n19\n00:01:15,000 --> 00:01:19,000\nplus whatever motion was occurring due to the velocity.\n\n20\n00:01:19,000 --> 00:01:24,000\nThat is going to be dt--the time elapsed--times our velocity.\n\n21\n00:01:24,000 --> 00:01:28,000\nThis is just velocity times time, which tells us how much our position has changed.\n\n22\n00:01:28,000 --> 00:01:31,000\nNow, in matrix terms how do we express that?\n\n23\n00:01:31,000 --> 00:01:36,000\nWe're talking about x-prime, so that means we're going to think about this top row here.\n\n24\n00:01:36,000 --> 00:01:39,000\nWe want to keep x, which means a 1 goes here.\n\n25\n00:01:39,000 --> 00:01:44,000\nWe want to multiply \u1e8b by dt, so that means dt goes here.\n\n26\n00:01:44,000 --> 00:01:47,000\nJust like that we figured out the first row of our F matrix.\n\n27\n00:01:47,000 --> 00:01:50,000\nI'll label it here--F. Now what about the second row? \n\n28\n00:01:50,000 --> 00:01:55,000\nLet's do a similar thing for \u1e8b prime to figure out where we should go in the second row.\n\n29\n00:01:55,000 --> 00:01:58,000\nAfter our prediction, we said that we're just \n\n30\n00:01:58,000 --> 00:02:01,000\ngoing to assume that the velocity hasn't changed.\n\n31\n00:02:01,000 --> 00:02:04,000\nVelocity after equals velocity before.\n\n32\n00:02:04,000 --> 00:02:07,000\nThat means we don't want to have anything to do with this x, meaning a 0 goes here.\n\n33\n00:02:07,000 --> 00:02:12,000\nWe want everything to do with this \u1e8b--we want to keep this--so we put a 1 here.\n\n34\n00:02:12,000 --> 00:02:18,000\nOkay. This kind of gives us some intuition for how this works in 2 dimensions.\n\n35\n00:02:18,000 --> 00:02:21,000\nLet's see if we can generalize to 4.\n\n36\n00:02:21,000 --> 00:02:26,000\nNow, again, we're going to some new state, \n\n37\n00:02:26,000 --> 00:02:33,000\nand we're doing that by multiplying a state-transition matrix by some old belief.\n\n38\n00:02:33,000 --> 00:02:36,000\nBut now instead of x and \u1e8b, we also have y coordinates.\n\n39\n00:02:36,000 --> 00:02:40,000\nSo we have x, y, \u1e8b, and \u1e8f.\n\n40\n00:02:40,000 --> 00:02:47,000\nHere we're going to, of course, get x, y, \u1e8b, \u1e8f, and all of those are prime,\n\n41\n00:02:47,000 --> 00:02:49,000\nbecause they indicate after our prediction.\n\n42\n00:02:49,000 --> 00:02:52,000\nNow, I'm not going to fill in this 4 x 4 matrix for you, \n\n43\n00:02:52,000 --> 00:02:56,000\nbut I think using similar reasoning to what we did in the 2-dimensional case,\n\n44\n00:02:56,000 --> 00:02:59,000\nyou can come up with what these formulas should be,\n\n45\n00:02:59,000 --> 00:03:02,000\nand from that fill in this matrix appropriately,\n\n46\n00:03:02,000 --> 00:03:05,000\nremembering that this entry corresponds to the first row,\n\n47\n00:03:05,000 --> 00:03:10,000\nthis entry the second, and so on. Good luck.\n\n", "id": 172001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPm3CgwLEgZOdWdnZXQYyccKDA", "path": "Course/cs373/CourseRev/feb2012/Unit/171001/Nugget/173001", "type": "Nugget", "id": 173001}, {"nuggetType": "lecture", "name": "Question 6 Help", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPm3Cgw", "media": {"dotsub_id": "437aa2d1-bd30-4629-b15b-dd55ae54ca44", "name": "cs373_hh2_01_l_Question-6-help", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJnXCgw", "youtube_id": "Jol9mCTIE48", "youtube_state": "done", "path": "Course/cs373/Media/175001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nNow I want to talk about the H matrix. \n\n2\n00:00:02,000 --> 00:00:05,000\nThis is a matrix that takes a state, and when it multiplies\n\n3\n00:00:05,000 --> 00:00:08,000\n by that state, spits out a measurement.\n\n4\n00:00:08,000 --> 00:00:11,000\nRemember, we can only directly measure position and velocity, \n\n5\n00:00:11,000 --> 00:00:14,000\nso that's all we want the H matrix to keep.\n\n6\n00:00:14,000 --> 00:00:19,000\nAgain, I want to talk about the 2D lecture case and the 4D homework case.\n\n7\n00:00:19,000 --> 00:00:21,000\nHopefully, by comparing them, we'll be able to build some intuition, \n\n8\n00:00:21,000 --> 00:00:24,000\nand you'll be able to answer the homework.\n\n9\n00:00:24,000 --> 00:00:26,000\nWhat was the goal of the H matrix?\n\n10\n00:00:26,000 --> 00:00:31,000\nThe goal of the H matrix was to take some state--\n\n11\n00:00:31,000 --> 00:00:35,000\nin the 2D case, our state was represented as an x and an \u1e8b--\n\n12\n00:00:35,000 --> 00:00:41,000\nmultiply some matrix by that state in such a way that we extract a measurement.\n\n13\n00:00:41,000 --> 00:00:48,000\nIn the 2D case the measurement was just x--just the x coordinate.\n\n14\n00:00:48,000 --> 00:00:52,000\nWe can think of this as a 1 x 1 vector or a 1 x 1 matrix.\n\n15\n00:00:52,000 --> 00:00:56,000\nThe matrix we use to do that was this one. \n\n16\n00:00:56,000 --> 00:01:01,000\nThat was our H matrix--1, 0--because 1 times x gives us the x, \n\n17\n00:01:01,000 --> 00:01:05,000\nand 0 times \u1e8b gives us the nothing--exactly what we want.\n\n18\n00:01:05,000 --> 00:01:08,000\nBut now let's talk about the dimensionality of these matrices\n\n19\n00:01:08,000 --> 00:01:13,000\nand how this multiplication yielded just this number x.\n\n20\n00:01:13,000 --> 00:01:20,000\nSo we can think of x here as a 1 x 1 matrix.\n\n21\n00:01:20,000 --> 00:01:24,000\nWe got that matrix by multiplying this one, which is a 1 x 2--\n\n22\n00:01:24,000 --> 00:01:31,000\none row by two columns--with this, which is two rows by one column.\n\n23\n00:01:31,000 --> 00:01:36,000\nWhat we see here is that this 1 actually came from right here,\n\n24\n00:01:36,000 --> 00:01:40,000\nand this 1 came from right here.\n\n25\n00:01:40,000 --> 00:01:43,000\nThese 2s we can think of as canceling out, in a way,\n\n26\n00:01:43,000 --> 00:01:46,000\ngiving us this 1 x 1 matrix.\n\n27\n00:01:46,000 --> 00:01:50,000\nNow, let's see if we can generalize that to the 4-dimensional case as presented in the homework.\n\n28\n00:01:50,000 --> 00:01:58,000\nIn the 4-dimensional case our state is now given by x, y, \u1e8b, \u1e8f. \n\n29\n00:01:58,000 --> 00:02:00,000\nWe're going to have some H matrix.\n\n30\n00:02:00,000 --> 00:02:05,000\nI don't know anything about it yet, but I'm just going to put this there for now as a placeholder.\n\n31\n00:02:05,000 --> 00:02:09,000\nWe want to get a measurement from that. What should this measurement be?\n\n32\n00:02:09,000 --> 00:02:13,000\nIt's not just going to be x, because now our position includes both x and y.\n\n33\n00:02:13,000 --> 00:02:19,000\nSo it's going to be a column vector--x and y.\n\n34\n00:02:19,000 --> 00:02:23,000\nAgain, let's think. What's going on with the dimensionality here?\n\n35\n00:02:23,000 --> 00:02:26,000\nHere we have a 2 x 1 matrix,\n\n36\n00:02:26,000 --> 00:02:32,000\nand that came from this matrix, which I said we don't know anything about yet--\n\n37\n00:02:32,000 --> 00:02:35,000\nI'll just say a question mark by question mark--\n\n38\n00:02:35,000 --> 00:02:40,000\nand this matrix, which is four rows by one column.\n\n39\n00:02:40,000 --> 00:02:44,000\nNow, can you use the intuition we built up here \n\n40\n00:02:44,000 --> 00:02:51,000\nfor how the dimensionality of matrices works with this to fill in the question marks?\n\n41\n00:02:51,000 --> 00:02:56,000\nOnce you figure out the number of rows and the number of columns in this H matrix,\n\n42\n00:02:56,000 --> 00:02:59,000\nfiguring out where to put your 1s and 0s will be a little bit easier.\n\n43\n00:02:59,000 --> 00:03:02,000\nI wish you luck.\n\n", "id": 175001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPm3CgwLEgZOdWdnZXQYmtcKDA", "path": "Course/cs373/CourseRev/feb2012/Unit/171001/Nugget/175002", "type": "Nugget", "id": 175002}]}, {"name": "Office Hours 2", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOnmCgwLEgZOdWdnZXQYufYKDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOnmCgw", "path": "Course/cs373/CourseRev/feb2012/Unit/177001", "open": false, "id": 177001, "nuggets": [{"nuggetType": "lecture", "name": "Office Hours Week 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOnmCgw", "media": {"dotsub_id": "c123dd68-1d98-4d72-90ba-bdfe6553762b", "name": "cs373_oo2_00_l_Office-Hours-Week-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNHuCgw", "youtube_id": "QFDBs7kJLhM", "youtube_state": "done", "path": "Course/cs373/Media/178001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nWelcome to the second office hours. I have Sebastian here and myself.\n\n2\n00:00:04,000 --> 00:00:06,000\nWe're going to do this the same way we did last time.\n\n3\n00:00:06,000 --> 00:00:08,000\nFirst we're going to talk about some content, \n\n4\n00:00:08,000 --> 00:00:10,000\nand then we're going to go into some applications,\n\n5\n00:00:10,000 --> 00:00:14,000\nreferring mostly to Kalman filters but also talking a little bit about Stanley and Junior.\n\n6\n00:00:14,000 --> 00:00:16,000\nOkay, what's the first question?\n\n7\n00:00:16,000 --> 00:00:20,000\nThe first question--both of the content questions actually have to do with linear algebra.\n\n8\n00:00:20,000 --> 00:00:25,000\nWhen we were talking about this state transition matrix f,\n\n9\n00:00:25,000 --> 00:00:29,000\nwe have this equation x' equals f times x plus U.\n\n10\n00:00:29,000 --> 00:00:32,000\nYou said that this U is the motion,\n\n11\n00:00:32,000 --> 00:00:35,000\nbut the motion seemed to be embedded in this f matrix in that \n\n12\n00:00:35,000 --> 00:00:40,000\nthe velocity was taken from the state with the f matrix.\n\n13\n00:00:40,000 --> 00:00:42,000\nWhat exactly is going on with U?\n\n14\n00:00:42,000 --> 00:00:48,000\nU allows you to apply a choice like when we just said \n\n15\n00:00:48,000 --> 00:00:51,000\nthe position is a function of velocity that's describing physics \n\n16\n00:00:51,000 --> 00:00:53,000\nbut doesn't give you a choice.\n\n17\n00:00:53,000 --> 00:00:56,000\nWhen you want to insert a choice into the system, like for example, \n\n18\n00:00:56,000 --> 00:01:01,000\nyou might want to change accelerations and that affects velocity and affects state.\n\n19\n00:01:01,000 --> 00:01:04,000\nThat choice is expressed with the vector U\n\n20\n00:01:04,000 --> 00:01:07,000\nWe didn't really use it because we were tracking things.\n\n21\n00:01:07,000 --> 00:01:10,000\nWe didn't know how they were being actuated, so we set U to zero in our example.\n\n22\n00:01:10,000 --> 00:01:13,000\nBut if you have control over the system you're trying to track\n\n23\n00:01:13,000 --> 00:01:17,000\nand you can insert like a motion yourself, then you use the vector U.\n\n24\n00:01:17,000 --> 00:01:23,000\nInteresting--just one other piece of intuition we're hoping to get is\n\n25\n00:01:23,000 --> 00:01:28,000\na lot of the matrices we talked about either didn't have off-diagonal elements \n\n26\n00:01:28,000 --> 00:01:31,000\nor we at least didn't initialize any off-diagonal elements.\n\n27\n00:01:31,000 --> 00:01:35,000\nSpecifically, in the covariance matrix and the r matrix,\n\n28\n00:01:35,000 --> 00:01:39,000\ncan you give us some intuition about what those off-diagonal elements would represent?\n\n29\n00:01:39,000 --> 00:01:42,000\nWe actually ran into an example that did have off-diagonal elements.\n\n30\n00:01:42,000 --> 00:01:46,000\nWe didn't initialize it, but then the velocity became correlated with the position,\n\n31\n00:01:46,000 --> 00:01:50,000\nand we realized the faster we moved the further we are to the right.\n\n32\n00:01:50,000 --> 00:01:54,000\nThat was expressed by an off-diagonal element.\n\n33\n00:01:54,000 --> 00:01:57,000\nThey turn into correlations, so the largest these elements are, \n\n34\n00:01:57,000 --> 00:01:59,000\nthe more 2 variables are actually correlated.\n\n35\n00:01:59,000 --> 00:02:03,000\nThe more knowledge about one variable correlates itself with another variable.\n\n36\n00:02:03,000 --> 00:02:09,000\nNow, let's get into some of the applications that the students seem especially interested in.\n\n37\n00:02:09,000 --> 00:02:13,000\nSpecifically, this r matrix. Where does it come from? How do we get it in real life?\n\n38\n00:02:13,000 --> 00:02:16,000\nWhat are we doing with our sensors?\n\n39\n00:02:16,000 --> 00:02:22,000\nSo the noise matrices express how noisy your sensor is,\n\n40\n00:02:22,000 --> 00:02:25,000\nand at first approximation you'd say let's just measure\n\n41\n00:02:25,000 --> 00:02:28,000\n what the variation of the measurement is and then plug it in.\n\n42\n00:02:28,000 --> 00:02:33,000\nBut because these filters, a very subtle thing, assume conditional independence,\n\n43\n00:02:33,000 --> 00:02:39,000\nthey assume that noise is independent from one type to the next whereas in reality it isn't.\n\n44\n00:02:39,000 --> 00:02:43,000\nTypically you start with a very large value, and you look a the result,\n\n45\n00:02:43,000 --> 00:02:46,000\nand if the result looks good to you, you leave it that way.\n\n46\n00:02:46,000 --> 00:02:49,000\nUnfortunately, there is no good science for it.\n\n47\n00:02:49,000 --> 00:02:52,000\nAwhile back, together with Andrew Ng, I published a paper \n\n48\n00:02:52,000 --> 00:02:56,000\non how to learn the noise matrix, but that goes way beyond this class.\n\n49\n00:02:56,000 --> 00:03:02,000\nYou mentioned that Stanley and Junior both use laser and radar.\n\n50\n00:03:02,000 --> 00:03:07,000\nDoes each one offer something unique or are the both just doing the same thing?\n\n51\n00:03:07,000 --> 00:03:11,000\nEither way, how do we incorporate measurements from 2 sources into our Kalman filter?\n\n52\n00:03:11,000 --> 00:03:13,000\nThese are two questions.\n\n53\n00:03:13,000 --> 00:03:15,000\nFirst of all, laser and radar at first approximation do the same thing.\n\n54\n00:03:15,000 --> 00:03:17,000\nThey measure how far things are away.\n\n55\n00:03:17,000 --> 00:03:20,000\nRadar also measures how fast they're moving for the Doppler effect,\n\n56\n00:03:20,000 --> 00:03:23,000\nbut their characteristics are very different. They measure different things.\n\n57\n00:03:23,000 --> 00:03:26,000\nThere are certain things that can only be measured by laser, others just by radar.\n\n58\n00:03:26,000 --> 00:03:30,000\nIn fact, laser tends to have much higher spatial resolution,\n\n59\n00:03:30,000 --> 00:03:32,000\nbut events become foggy. \n\n60\n00:03:32,000 --> 00:03:36,000\nThe wavelength of light tends not to be as good as a radar wavelength.\n\n61\n00:03:36,000 --> 00:03:38,000\nSo they're somewhat complementary. \n\n62\n00:03:38,000 --> 00:03:42,000\nTo incorporate both, Bayes rule allows you to incorporate sensor measurements one after another.\n\n63\n00:03:42,000 --> 00:03:47,000\nIf you have a laser and a radar, you just multiply both of them in, and that's just fine.\n\n64\n00:03:47,000 --> 00:03:49,000\nOkay, great.\n\n65\n00:03:49,000 --> 00:03:52,000\nThe top-rated question, actually, was about \n\n66\n00:03:52,000 --> 00:03:56,000\nthe programming languages used in Stanley and Junior.\n\n67\n00:03:56,000 --> 00:04:00,000\nWas it Python? Was it something else? >>It was not Python, honestly. >>Okay.\n\n68\n00:04:00,000 --> 00:04:05,000\nAt the time, we started out with C, but then C++ became very popular. I was popular.\n\n69\n00:04:05,000 --> 00:04:09,000\nAnd it was the better choice, so almost all the code is written in C++/\n\n70\n00:04:09,000 --> 00:04:13,000\nHow do you make that decision when you're starting a project this big? Is there debate?\n\n71\n00:04:13,000 --> 00:04:15,000\nThere is always debate.\n\n72\n00:04:15,000 --> 00:04:19,000\nThe beauty of C++ is it is very efficient in execution,\n\n73\n00:04:19,000 --> 00:04:23,000\nand when you use it right it can be very powerful. If you don't abuse it.\n\n74\n00:04:23,000 --> 00:04:28,000\nIt has way too many things built in, but some of the things like the classes are just really, really good.\n\n75\n00:04:28,000 --> 00:04:31,000\nThen you hire people, and you work with students, and some of them like Java,\n\n76\n00:04:31,000 --> 00:04:36,000\nso they write their code in Java, and others like C++ or Python or Ruby on Rails.\n\n77\n00:04:36,000 --> 00:04:39,000\nThen you just bring all the stuff together.\n\n78\n00:04:39,000 --> 00:04:42,000\nOkay--thinking of Stanley and Junior, \n\n79\n00:04:42,000 --> 00:04:46,000\nwhat were the major hardware and software differences between the two vehicles?\n\n80\n00:04:46,000 --> 00:04:52,000\nStanley had about 6 embedded processors.\n\n81\n00:04:52,000 --> 00:04:58,000\nJunior had 2 PCs with quad cores so there was a more integrated system.\n\n82\n00:04:58,000 --> 00:05:01,000\nThe biggest difference in the hardware was really the sensors.\n\n83\n00:05:01,000 --> 00:05:06,000\nStanley had very, very cheap and simple laser-range finders as the main sensor.\n\n84\n00:05:06,000 --> 00:05:09,000\nWe did have radars. We didn't use them much.\n\n85\n00:05:09,000 --> 00:05:11,000\nWhereas Junior had a much more ranging sensor suite. \n\n86\n00:05:11,000 --> 00:05:14,000\nJunior could look in all directions--we call this \"surround sensing\"--\n\n87\n00:05:14,000 --> 00:05:17,000\nwhereas Stanley could only look straight ahead.\n\n88\n00:05:17,000 --> 00:05:21,000\nSo that thing we saw spinning on the top of Stanley, that was the laser-range finder?\n\n89\n00:05:21,000 --> 00:05:24,000\nWhat you saw spinning on the top of Stanley was actually on Junior.\n\n90\n00:05:24,000 --> 00:05:26,000\nThat was on Junior--okay.\n\n91\n00:05:26,000 --> 00:05:29,000\nYeah, you never saw anything on Stanley, because there's nothing spinning there.\n\n92\n00:05:29,000 --> 00:05:31,000\nThat was on Junior, and that was a laser-range finder.\n\n93\n00:05:31,000 --> 00:05:33,000\nRight, and that one spins because it looks in all directions.\n\n94\n00:05:33,000 --> 00:05:37,000\nThat was important for city driving because what's behind you actually matters in cities\n\n95\n00:05:37,000 --> 00:05:41,000\nwhereas if you drive in desert terrain there is no traffic. You don't have to look back.\n\n96\n00:05:41,000 --> 00:05:45,000\nThat's a good segue into the next question, which is what's the next big challenge?\n\n97\n00:05:45,000 --> 00:05:47,000\nWe've done deserts. We've done urban driving.\n\n98\n00:05:47,000 --> 00:05:49,000\nThe next challenge is it'll take over our cars.\n\n99\n00:05:49,000 --> 00:05:53,000\nBasically get this technology into every single car and make sure driving is safe.\n\n100\n00:05:53,000 --> 00:05:57,000\nEvery person has a special button that says, like I explained, my little chauffeur button.\n\n101\n00:05:57,000 --> 00:06:00,000\nI want to just drive automatically, \n\n102\n00:06:00,000 --> 00:06:03,000\nand then I'm just going to get home without having to pay attention.\n\n103\n00:06:03,000 --> 00:06:06,000\nFinally, how comfortable is it? \n\n104\n00:06:06,000 --> 00:06:10,000\nDo these cars drive similar to the way you or I would drive?\n\n105\n00:06:10,000 --> 00:06:16,000\nWhen we first started out, I would say the driving is effective but not elegant.\n\n106\n00:06:16,000 --> 00:06:18,000\nYou would get in the car, and you'd know exactly what I mean.\n\n107\n00:06:18,000 --> 00:06:22,000\nThe steering wheel would go like this all the time, and it would make a lot of noise.\n\n108\n00:06:22,000 --> 00:06:24,000\nIt was pretty clear you were inside a robot.\n\n109\n00:06:24,000 --> 00:06:28,000\nOn the outside it looked pretty great, but on the inside it didn't.\n\n110\n00:06:28,000 --> 00:06:32,000\nBut as things moved on, if you get into a Google car right now, \n\n111\n00:06:32,000 --> 00:06:35,000\nyou won't be able to distinguish from a human driver. It's really rock solid.\n\n112\n00:06:35,000 --> 00:06:41,000\nThe steering wheel stays like this, but it turns it confidentally drags it around, \n\n113\n00:06:41,000 --> 00:06:44,000\nmoves the right direction, comes back. It's actually come a long way.\n\n114\n00:06:44,000 --> 00:06:47,000\nTo get from what you said to where we are now--was it low-pass filtering?\n\n115\n00:06:47,000 --> 00:06:51,000\nWe will have a class on control, \n\n116\n00:06:51,000 --> 00:06:57,000\nand the control techniques ended up to be very sophisticated but also very, very good.\n\n117\n00:06:57,000 --> 00:07:02,000\nAll the motion of the steering wheel are all related to inaccuracies.\n\n118\n00:07:02,000 --> 00:07:04,000\nThey came from multiple sources.\n\n119\n00:07:04,000 --> 00:07:09,000\nSome of it was that we weren't processing our GPS date good enough yet and our map data.\n\n120\n00:07:09,000 --> 00:07:12,000\nSome of it was the map resolution--like if you have a 10-15 cm grid cell\n\n121\n00:07:12,000 --> 00:07:17,000\nand your estimate jumps from 1 grid cell to the next or your particle filter jumps a little bit around.\n\n122\n00:07:17,000 --> 00:07:21,000\nThey might not look dramatic on a screen, but if you turned to steering motion\n\n123\n00:07:21,000 --> 00:07:24,000\nin your steering wheel, it goes by 2 or 3 or 4 degrees. That's really bad.\n\n124\n00:07:24,000 --> 00:07:30,000\nWe had a sensor that tracks that angle of the steering wheel and the spatial resolution was about a degree.\n\n125\n00:07:30,000 --> 00:07:33,000\nThat means you couldn't quite know what the angle was, \n\n126\n00:07:33,000 --> 00:07:35,000\nso you would drive a little blind--like up to a degree.\n\n127\n00:07:35,000 --> 00:07:38,000\nA degree of steering wheel doesn't sound like much, but it's actually a lot.\n\n128\n00:07:38,000 --> 00:07:40,000\nYou can try this out. \n\n129\n00:07:40,000 --> 00:07:43,000\nIf you drive a car and you only move it by a degree, you feel a noticeable effect.\n\n130\n00:07:43,000 --> 00:07:47,000\nYou'd find out after a while we'll actually pulling in this direction. Let's drag it back.\n\n131\n00:07:47,000 --> 00:07:49,000\nAnd all that stuff we kind of fixed.\n\n132\n00:07:49,000 --> 00:07:52,000\nSo we'll learn about that in, I think, Unit 5? PIT controllers? >>Yep.\n\n133\n00:07:52,000 --> 00:07:57,000\nExcellent. I can't wait. >> All right. >>Thanks a lot. >>All right. Take care.\n\n", "id": 178001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOnmCgwLEgZOdWdnZXQYufYKDA", "path": "Course/cs373/CourseRev/feb2012/Unit/177001/Nugget/179001", "type": "Nugget", "id": 179001}]}, {"name": "Unit 3", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYss8KDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYqaULDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYka0LDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYov4KDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY4r8KDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYmdQLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYmtQLDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYufMLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYofsLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYiYMMDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY2ZIMDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYqaIMDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY2pIMDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYuvMLDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY4bkMDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYkqoMDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYmdEMDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY6uMLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYzMQLDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYgdkMDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYkq0LDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYhNwLDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYpPsLDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY840LDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYysEMDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYsswLDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY0ugMDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYvPYKDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYofgMDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYi4MMDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYqqIMDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYvfYKDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY9I0LDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY1OsLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY8ocNDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY5b8KDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYk60LDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYzsQLDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYpfsLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYs8kMDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY5r8KDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYvvYKDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYvvMLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY8ooMDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYz8QLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYwpcNDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYs8wLDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY248NDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYw5cNDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYs88KDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY6-MLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYxJcNDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYjYMMDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYlqoMDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY-rQLDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY-7QLDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYxJoMDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYxZoMDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYp_sLDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY0cQLDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY_LEMDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYy8EMDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYpP4KDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYrKIMDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYraULDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "path": "Course/cs373/CourseRev/feb2012/Unit/182001", "open": false, "id": 182001, "nuggets": [{"nuggetType": "lecture", "name": "Belief Modality", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "b9a0508e-2675-4efe-af0a-e5ce85a5a6c2", "name": "cs373_unit3_02_q_Belief-Modality", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMnECww", "youtube_id": "5vdbYPc7tWw", "youtube_state": "done", "path": "Course/cs373/Media/189001", "transcript": null, "id": 189001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY4r8KDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/172002", "type": "Nugget", "id": 172002}, {"nuggetType": "lecture", "name": "Never Sampled 1", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "698599c7-87c9-469b-8c35-ae394243eeb1", "name": "cs373_unit3_15_q_Never-Sampled-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOS_Cgw", "youtube_id": "8ffPkDiDioI", "youtube_state": "done", "path": "Course/cs373/Media/172004", "transcript": null, "id": 172004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY5b8KDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/172005", "type": "Nugget", "id": 172005}, {"nuggetType": "lecture", "name": "Never Sampled 2 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "f99a8018-f863-48d0-8e26-4c457cf41486", "name": "cs373_unit3_16_s_Never-Sampled-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNuSDAw", "youtube_id": "i457B5Iyg-8", "youtube_state": "done", "path": "Course/cs373/Media/199003", "transcript": null, "id": 199003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY5r8KDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/172006", "type": "Nugget", "id": 172006}, {"nuggetType": "lecture", "name": "Field Trip", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "267c54ed-13c5-4b85-986c-596e6bd10186", "name": "cs373_unit3_00_l_Field-Trip", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNmVCww", "youtube_id": "2ocy_7PJtfA", "youtube_state": "done", "path": "Course/cs373/Media/183001", "transcript": null, "id": 183001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYss8KDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/174002", "type": "Nugget", "id": 174002}, {"nuggetType": "lecture", "name": "Resampling Wheel Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "2eb984b7-45fc-4b74-9d00-12a5f32810b2", "name": "cs373_unit3_19_s_Resampling-Wheel", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGKmfDQw", "youtube_id": "aHLslaWO-AQ", "youtube_state": "done", "path": "Course/cs373/Media/217001", "transcript": null, "id": 217001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYs88KDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/174003", "type": "Nugget", "id": 174003}, {"nuggetType": "program", "name": "Robot Particles", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYvPYKDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/179004", "suppliedCode": "\n# Now we want to simulate robot\n# motion with our particles.\n# Each particle should turn by 0.1\n# and then move by 5. \n#\n#\n# Don't modify the code below. Please enter\n# your code at the bottom.\n\nfrom math import *\nimport random\n\n\n\nlandmarks  = [[20.0, 20.0], [80.0, 80.0], [20.0, 80.0], [80.0, 20.0]]\nworld_size = 100.0\n\n\nclass robot:\n    def __init__(self):\n        self.x = random.random() * world_size\n        self.y = random.random() * world_size\n        self.orientation = random.random() * 2.0 * pi\n        self.forward_noise = 0.0;\n        self.turn_noise    = 0.0;\n        self.sense_noise   = 0.0;\n    \n    def set(self, new_x, new_y, new_orientation):\n        if new_x < 0 or new_x >= world_size:\n            raise ValueError, 'X coordinate out of bound'\n        if new_y < 0 or new_y >= world_size:\n            raise ValueError, 'Y coordinate out of bound'\n        if new_orientation < 0 or new_orientation >= 2 * pi:\n            raise ValueError, 'Orientation must be in [0..2pi]'\n        self.x = float(new_x)\n        self.y = float(new_y)\n        self.orientation = float(new_orientation)\n    \n    \n    def set_noise(self, new_f_noise, new_t_noise, new_s_noise):\n        # makes it possible to change the noise parameters\n        # this is often useful in particle filters\n        self.forward_noise = float(new_f_noise);\n        self.turn_noise    = float(new_t_noise);\n        self.sense_noise   = float(new_s_noise);\n    \n    \n    def sense(self):\n        Z = []\n        for i in range(len(landmarks)):\n            dist = sqrt((self.x - landmarks[i][0]) ** 2 + (self.y - landmarks[i][1]) ** 2)\n            dist += random.gauss(0.0, self.sense_noise)\n            Z.append(dist)\n        return Z\n    \n    \n    def move(self, turn, forward):\n        if forward < 0:\n            raise ValueError, 'Robot cant move backwards'         \n        \n        # turn, and add randomness to the turning command\n        orientation = self.orientation + float(turn) + random.gauss(0.0, self.turn_noise)\n        orientation %= 2 * pi\n        \n        # move, and add randomness to the motion command\n        dist = float(forward) + random.gauss(0.0, self.forward_noise)\n        x = self.x + (cos(orientation) * dist)\n        y = self.y + (sin(orientation) * dist)\n        x %= world_size    # cyclic truncate\n        y %= world_size\n        \n        # set particle\n        res = robot()\n        res.set(x, y, orientation)\n        res.set_noise(self.forward_noise, self.turn_noise, self.sense_noise)\n        return res\n    \n    def Gaussian(self, mu, sigma, x):\n        \n        # calculates the probability of x for 1-dim Gaussian with mean mu and var. sigma\n        return exp(- ((mu - x) ** 2) / (sigma ** 2) / 2.0) / sqrt(2.0 * pi * (sigma ** 2))\n    \n    \n    def measurement_prob(self, measurement):\n        \n        # calculates how likely a measurement should be\n        \n        prob = 1.0;\n        for i in range(len(landmarks)):\n            dist = sqrt((self.x - landmarks[i][0]) ** 2 + (self.y - landmarks[i][1]) ** 2)\n            prob *= self.Gaussian(dist, self.sense_noise, measurement[i])\n        return prob\n    \n    \n    \n    def __repr__(self):\n        return '[x=%.6s y=%.6s orient=%.6s]' % (str(self.x), str(self.y), str(self.orientation))\n\n\n\ndef eval(r, p):\n    sum = 0.0;\n    for i in range(len(p)): # calculate mean error\n        dx = (p[i].x - r.x + (world_size/2.0)) % world_size - (world_size/2.0)\n        dy = (p[i].y - r.y + (world_size/2.0)) % world_size - (world_size/2.0)\n        err = sqrt(dx * dx + dy * dy)\n        sum += err\n    return sum / float(len(p))\n\n#myrobot = robot()\n#myrobot.set_noise(5.0, 0.1, 5.0)\n#myrobot.set(30.0, 50.0, pi/2)\n#myrobot = myrobot.move(-pi/2, 15.0)\n#print myrobot.sense()\n#myrobot = myrobot.move(-pi/2, 10.0)\n#print myrobot.sense()\n\n####   DON'T MODIFY ANYTHING ABOVE HERE! ENTER CODE BELOW ####\n\nN = 1000\np = []\nfor i in range(N):\n    x = robot()\n    p.append(x)\n\nprint p #PLEASE LEAVE THIS HERE FOR GRADING PURPOSES\n\n\n", "type": "Nugget", "id": 179004}, {"nuggetType": "lecture", "name": "Importance Weight Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "7d9fc9ef-50ba-4ad9-bb91-127fa6a766bb", "name": "cs373_unit3_13_s_Importance-Weight", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOrgDAw", "youtube_id": "VJvBzdTPlAQ", "youtube_state": "done", "path": "Course/cs373/Media/209002", "transcript": null, "id": 209002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYvfYKDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/179005", "type": "Nugget", "id": 179005}, {"nuggetType": "lecture", "name": "Never Sampled 3", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "3025ab81-42dd-4abd-aa04-a24d774d0221", "name": "cs373_unit3_17_q_Never-Sampled-3", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGKP-Cgw", "youtube_id": "Z1oQl-1cUeE", "youtube_state": "done", "path": "Course/cs373/Media/180003", "transcript": null, "id": 180003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYvvYKDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/179006", "type": "Nugget", "id": 179006}, {"nuggetType": "lecture", "name": "State Space Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "c923d58a-ae5f-423a-852d-607e99cbb665", "name": "cs373_unit3_01_s_State-Space", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPm0Cww", "youtube_id": "oyw7WEHMvVY", "youtube_state": "done", "path": "Course/cs373/Media/187001", "transcript": null, "id": 187001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYov4KDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/180002", "type": "Nugget", "id": 180002}, {"nuggetType": "lecture", "name": "Filters Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "08e98ea9-3ca0-491a-bd2c-96697adf3719", "name": "cs373_unit3_24_s_Filters", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOK8Cww", "youtube_id": "d_DXbkU7iPY", "youtube_state": "done", "path": "Course/cs373/Media/188002", "transcript": null, "id": 188002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYpP4KDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/180004", "type": "Nugget", "id": 180004}, {"nuggetType": "lecture", "name": "Creating Particles", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "285db813-7d44-4d56-a984-151a66cfbf1b", "name": "cs373_unit3_11_p_Creating-Particles", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNHoDAw", "youtube_id": "dH6uzx78lBA", "youtube_state": "done", "path": "Course/cs373/Media/210001", "transcript": null, "id": 210001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY840LDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/182003", "type": "Nugget", "id": 182003}, {"nuggetType": "lecture", "name": "Resampling", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "c17325bb-c36e-469c-b691-912e6a788cc3", "name": "cs373_unit3_14_q_Resampling", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIyDDAw", "youtube_id": "zlCJQmxvrkE", "youtube_state": "done", "path": "Course/cs373/Media/197004", "transcript": null, "id": 197004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY9I0LDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/182004", "type": "Nugget", "id": 182004}, {"nuggetType": "lecture", "name": "State Space", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "b1b6bc64-1d8a-41a0-a445-fa79c2cb445b", "name": "cs373_unit3_01_q_State-Space", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMGdCww", "youtube_id": "G7nvigL0aDw", "youtube_state": "done", "path": "Course/cs373/Media/184001", "transcript": null, "id": 184001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYqaULDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/185001", "type": "Nugget", "id": 185001}, {"nuggetType": "lecture", "name": "Preview", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "6cde25fe-2ec8-4e9d-85f0-2fb9ee2b3bbc", "name": "cs373_unit3_26_l_Preview", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMSdCww", "youtube_id": "Ut0plKzMV0Q", "youtube_state": "done", "path": "Course/cs373/Media/184004", "transcript": null, "id": 184004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYraULDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/185005", "type": "Nugget", "id": 185005}, {"nuggetType": "quiz", "name": "State Space", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYka0LDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/186001", "type": "Nugget", "id": 186001}, {"nuggetType": "program", "name": "Add Noise", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYkq0LDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/186002", "suppliedCode": "\n# Now add noise to your robot as follows:\n# forward_noise = 5.0, turn_noise = 0.1,\n# sense_noise = 5.0.\n#\n# Once again, your robot starts at 30, 50,\n# heading north (pi/2), then turns clockwise\n# by pi/2, moves 15 meters, senses,\n# then turns clockwise by pi/2 again, moves\n# 10 m, then senses again.\n#\n# Your program should print out the result of\n# your two sense measurements.\n#\n# Don't modify the code below. Please enter\n# your code at the bottom.\n\nfrom math import *\nimport random\n\n\n\nlandmarks  = [[20.0, 20.0], [80.0, 80.0], [20.0, 80.0], [80.0, 20.0]]\nworld_size = 100.0\n\n\nclass robot:\n    def __init__(self):\n        self.x = random.random() * world_size\n        self.y = random.random() * world_size\n        self.orientation = random.random() * 2.0 * pi\n        self.forward_noise = 0.0;\n        self.turn_noise    = 0.0;\n        self.sense_noise   = 0.0;\n    \n    def set(self, new_x, new_y, new_orientation):\n        if new_x < 0 or new_x >= world_size:\n            raise ValueError, 'X coordinate out of bound'\n        if new_y < 0 or new_y >= world_size:\n            raise ValueError, 'Y coordinate out of bound'\n        if new_orientation < 0 or new_orientation >= 2 * pi:\n            raise ValueError, 'Orientation must be in [0..2pi]'\n        self.x = float(new_x)\n        self.y = float(new_y)\n        self.orientation = float(new_orientation)\n    \n    \n    def set_noise(self, new_f_noise, new_t_noise, new_s_noise):\n        # makes it possible to change the noise parameters\n        # this is often useful in particle filters\n        self.forward_noise = float(new_f_noise);\n        self.turn_noise    = float(new_t_noise);\n        self.sense_noise   = float(new_s_noise);\n    \n    \n    def sense(self):\n        Z = []\n        for i in range(len(landmarks)):\n            dist = sqrt((self.x - landmarks[i][0]) ** 2 + (self.y - landmarks[i][1]) ** 2)\n            dist += random.gauss(0.0, self.sense_noise)\n            Z.append(dist)\n        return Z\n    \n    \n    def move(self, turn, forward):\n        if forward < 0:\n            raise ValueError, 'Robot cant move backwards'         \n        \n        # turn, and add randomness to the turning command\n        orientation = self.orientation + float(turn) + random.gauss(0.0, self.turn_noise)\n        orientation %= 2 * pi\n        \n        # move, and add randomness to the motion command\n        dist = float(forward) + random.gauss(0.0, self.forward_noise)\n        x = self.x + (cos(orientation) * dist)\n        y = self.y + (sin(orientation) * dist)\n        x %= world_size    # cyclic truncate\n        y %= world_size\n        \n        # set particle\n        res = robot()\n        res.set(x, y, orientation)\n        res.set_noise(self.forward_noise, self.turn_noise, self.sense_noise)\n        return res\n    \n    def Gaussian(self, mu, sigma, x):\n        \n        # calculates the probability of x for 1-dim Gaussian with mean mu and var. sigma\n        return exp(- ((mu - x) ** 2) / (sigma ** 2) / 2.0) / sqrt(2.0 * pi * (sigma ** 2))\n    \n    \n    def measurement_prob(self, measurement):\n        \n        # calculates how likely a measurement should be\n        \n        prob = 1.0;\n        for i in range(len(landmarks)):\n            dist = sqrt((self.x - landmarks[i][0]) ** 2 + (self.y - landmarks[i][1]) ** 2)\n            prob *= self.Gaussian(dist, self.sense_noise, measurement[i])\n        return prob\n    \n    \n    \n    def __repr__(self):\n        return '[x=%.6s y=%.6s orient=%.6s]' % (str(self.x), str(self.y), str(self.orientation))\n\n\n\ndef eval(r, p):\n    sum = 0.0;\n    for i in range(len(p)): # calculate mean error\n        dx = (p[i].x - r.x + (world_size/2.0)) % world_size - (world_size/2.0)\n        dy = (p[i].y - r.y + (world_size/2.0)) % world_size - (world_size/2.0)\n        err = sqrt(dx * dx + dy * dy)\n        sum += err\n    return sum / float(len(p))\n\n\n\n####   DON'T MODIFY ANYTHING ABOVE HERE! ENTER CODE BELOW ####\n\nmyrobot = robot()\n# enter code here\nmyrobot.set(30.0, 50.0, pi/2)\nmyrobot = myrobot.move(-pi/2, 15.0)\nprint myrobot.sense()\nmyrobot = myrobot.move(-pi/2, 10.0)\nprint myrobot.sense()\n", "type": "Nugget", "id": 186002}, {"nuggetType": "quiz", "name": "Never Sampled 1", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYk60LDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/186003", "type": "Nugget", "id": 186003}, {"nuggetType": "program", "name": "Orientation 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY-rQLDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/187002", "suppliedCode": "# In this exercise, write a program that will\n# run your previous code twice.\n# Please only modify the indicated area below!\n\nfrom math import *\nimport random\n\n\n\nlandmarks  = [[20.0, 20.0], [80.0, 80.0], [20.0, 80.0], [80.0, 20.0]]\nworld_size = 100.0\n\nclass robot:\n    def __init__(self):\n        self.x = random.random() * world_size\n        self.y = random.random() * world_size\n        self.orientation = random.random() * 2.0 * pi\n        self.forward_noise = 0.0;\n        self.turn_noise    = 0.0;\n        self.sense_noise   = 0.0;\n    \n    def set(self, new_x, new_y, new_orientation):\n        if new_x < 0 or new_x >= world_size:\n            raise ValueError, 'X coordinate out of bound'\n        if new_y < 0 or new_y >= world_size:\n            raise ValueError, 'Y coordinate out of bound'\n        if new_orientation < 0 or new_orientation >= 2 * pi:\n            raise ValueError, 'Orientation must be in [0..2pi]'\n        self.x = float(new_x)\n        self.y = float(new_y)\n        self.orientation = float(new_orientation)\n    \n    \n    def set_noise(self, new_f_noise, new_t_noise, new_s_noise):\n        # makes it possible to change the noise parameters\n        # this is often useful in particle filters\n        self.forward_noise = float(new_f_noise);\n        self.turn_noise    = float(new_t_noise);\n        self.sense_noise   = float(new_s_noise);\n    \n    \n    def sense(self):\n        Z = []\n        for i in range(len(landmarks)):\n            dist = sqrt((self.x - landmarks[i][0]) ** 2 + (self.y - landmarks[i][1]) ** 2)\n            dist += random.gauss(0.0, self.sense_noise)\n            Z.append(dist)\n        return Z\n    \n    \n    def move(self, turn, forward):\n        if forward < 0:\n            raise ValueError, 'Robot cant move backwards'         \n        \n        # turn, and add randomness to the turning command\n        orientation = self.orientation + float(turn) + random.gauss(0.0, self.turn_noise)\n        orientation %= 2 * pi\n        \n        # move, and add randomness to the motion command\n        dist = float(forward) + random.gauss(0.0, self.forward_noise)\n        x = self.x + (cos(orientation) * dist)\n        y = self.y + (sin(orientation) * dist)\n        x %= world_size    # cyclic truncate\n        y %= world_size\n        \n        # set particle\n        res = robot()\n        res.set(x, y, orientation)\n        res.set_noise(self.forward_noise, self.turn_noise, self.sense_noise)\n        return res\n    \n    def Gaussian(self, mu, sigma, x):\n        \n        # calculates the probability of x for 1-dim Gaussian with mean mu and var. sigma\n        return exp(- ((mu - x) ** 2) / (sigma ** 2) / 2.0) / sqrt(2.0 * pi * (sigma ** 2))\n    \n    \n    def measurement_prob(self, measurement):\n        \n        # calculates how likely a measurement should be\n        \n        prob = 1.0;\n        for i in range(len(landmarks)):\n            dist = sqrt((self.x - landmarks[i][0]) ** 2 + (self.y - landmarks[i][1]) ** 2)\n            prob *= self.Gaussian(dist, self.sense_noise, measurement[i])\n        return prob\n    \n    \n    \n    def __repr__(self):\n        return '[x=%.6s y=%.6s orient=%.6s]' % (str(self.x), str(self.y), str(self.orientation))\n\n\n\ndef eval(r, p):\n    sum = 0.0;\n    for i in range(len(p)): # calculate mean error\n        dx = (p[i].x - r.x + (world_size/2.0)) % world_size - (world_size/2.0)\n        dy = (p[i].y - r.y + (world_size/2.0)) % world_size - (world_size/2.0)\n        err = sqrt(dx * dx + dy * dy)\n        sum += err\n    return sum / float(len(p))\n\n#myrobot = robot()\n#myrobot.set_noise(5.0, 0.1, 5.0)\n#myrobot.set(30.0, 50.0, pi/2)\n#myrobot = myrobot.move(-pi/2, 15.0)\n#print myrobot.sense()\n#myrobot = myrobot.move(-pi/2, 10.0)\n#print myrobot.sense()\n\n####   DON'T MODIFY ANYTHING ABOVE HERE! ENTER/MODIFY CODE BELOW ####\nmyrobot = robot()\nmyrobot = myrobot.move(0.1, 5.0)\nZ = myrobot.sense()\n\nN = 1000\np = []\nfor i in range(N):\n    x = robot()\n    x.set_noise(0.05, 0.05, 5.0)\n    p.append(x)\n\np2 = []\nfor i in range(N):\n    p2.append(p[i].move(0.1, 5.0))\np = p2\n\nw = []\nfor i in range(N):\n    w.append(p[i].measurement_prob(Z))\n\np3 = []\nindex = int(random.random() * N)\nbeta = 0.0\nmw = max(w)\nfor i in range(N):\n    beta += random.random() * 2.0 * mw\n    while beta > w[index]:\n        beta -= w[index]\n        index = (index + 1) % N\n    p3.append(p[index])\np = p3\n\nprint p #Leave this print statement for grading purposes!\n\n\n", "type": "Nugget", "id": 187002}, {"nuggetType": "lecture", "name": "Orientation 2 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "96c71afd-f04c-4bb8-8625-43ca1befec0d", "name": "cs373_unit3_21_s_Orientation-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJzRDAw", "youtube_id": "Ex0su1DnIuw", "youtube_state": "done", "path": "Course/cs373/Media/207004", "transcript": null, "id": 207004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY-7QLDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/187003", "type": "Nugget", "id": 187003}, {"nuggetType": "lecture", "name": "Moving Robot Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "d802fe41-c371-4ffa-8d02-f1f5b495ac75", "name": "cs373_unit3_08_s_Moving-Robot", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNLrCww", "youtube_id": "_37pf6lV15s", "youtube_state": "done", "path": "Course/cs373/Media/194002", "transcript": null, "id": 194002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYzMQLDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/189004", "type": "Nugget", "id": 189004}, {"nuggetType": "lecture", "name": "Never Sampled 1 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "5e40c2e1-45b6-4a55-a7c6-875c81d51bc2", "name": "cs373_unit3_15_s_Never-Sampled-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLzzCww", "youtube_id": "MhhM1uh0-3w", "youtube_state": "done", "path": "Course/cs373/Media/195004", "transcript": null, "id": 195004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYzsQLDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/189006", "type": "Nugget", "id": 189006}, {"nuggetType": "lecture", "name": "New Particle", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "01d924c6-168e-49f0-8584-c4e4a49afd2f", "name": "cs373_unit3_18_p_New-Particle_Set", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMGXDQw", "youtube_id": "AROtzVxDDx4", "youtube_state": "done", "path": "Course/cs373/Media/216001", "transcript": null, "id": 216001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYz8QLDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/189007", "type": "Nugget", "id": 189007}, {"nuggetType": "lecture", "name": "You And Sebastian", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "5686529e-a8fd-4b66-9fc2-ad9afaa82f0f", "name": "cs373_unit3_23_l_You-and-Sebastian", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNySDAw", "youtube_id": "gTMe0E6SM_M", "youtube_state": "done", "path": "Course/cs373/Media/199004", "transcript": null, "id": 199004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY0cQLDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/189009", "type": "Nugget", "id": 189009}, {"nuggetType": "lecture", "name": "Creating Particles Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "e37c2dc7-3bbe-4c1e-9396-e681c6153317", "name": "cs373_unit3_11_s_Creating-Particles", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLLJDAw", "youtube_id": "JNI9O9FjfDQ", "youtube_state": "done", "path": "Course/cs373/Media/206002", "transcript": null, "id": 206002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYsswLDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/190002", "type": "Nugget", "id": 190002}, {"nuggetType": "lecture", "name": "New Particle Set Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "3a28ecf5-b280-43ea-83b0-5011cfd1c795", "name": "cs373_unit3_18_s_New-Particle-Set", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNqPDQw", "youtube_id": "LJXbHoq5EZk", "youtube_state": "done", "path": "Course/cs373/Media/215002", "transcript": null, "id": 215002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYs8wLDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/190003", "type": "Nugget", "id": 190003}, {"nuggetType": "quiz", "name": "Belief Modality", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYmdQLDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/191001", "type": "Nugget", "id": 191001}, {"nuggetType": "lecture", "name": "Belief Modality Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "48e8ddf5-b131-4fef-bec9-20ef2d61c906", "name": "cs373_unit3_02_s_Belief-Modality", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIHcCww", "youtube_id": "NhKyyhNl70A", "youtube_state": "done", "path": "Course/cs373/Media/192001", "transcript": null, "id": 192001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYmtQLDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/191002", "type": "Nugget", "id": 191002}, {"nuggetType": "lecture", "name": "Add Noise Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "a2462e07-749c-4468-adb9-e3e3c56a7c24", "name": "cs373_unit3_09_s_Add-Noise", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIPcCww", "youtube_id": "FQEeI3qzaOM", "youtube_state": "done", "path": "Course/cs373/Media/192003", "transcript": null, "id": 192003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYhNwLDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/192004", "type": "Nugget", "id": 192004}, {"nuggetType": "program", "name": "Moving Robot", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY6uMLDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/193002", "suppliedCode": "# Make a robot called myrobot that starts at\n# coordinates 30, 50 heading north (pi/2).\n# Have your robot turn clockwise by pi/2, move\n# 15 m, and sense. Then have it turn clockwise\n# by pi/2 again, move 10 m, and sense again.\n#\n# Your program should print out the result of\n# your two sense measurements.\n#\n# Don't modify the code below. Please enter\n# your code at the bottom.\n\nfrom math import *\nimport random\n\n\n\nlandmarks  = [[20.0, 20.0], [80.0, 80.0], [20.0, 80.0], [80.0, 20.0]]\nworld_size = 100.0\n\n\nclass robot:\n    def __init__(self):\n        self.x = random.random() * world_size\n        self.y = random.random() * world_size\n        self.orientation = random.random() * 2.0 * pi\n        self.forward_noise = 0.0;\n        self.turn_noise    = 0.0;\n        self.sense_noise   = 0.0;\n    \n    def set(self, new_x, new_y, new_orientation):\n        if new_x < 0 or new_x >= world_size:\n            raise ValueError, 'X coordinate out of bound'\n        if new_y < 0 or new_y >= world_size:\n            raise ValueError, 'Y coordinate out of bound'\n        if new_orientation < 0 or new_orientation >= 2 * pi:\n            raise ValueError, 'Orientation must be in [0..2pi]'\n        self.x = float(new_x)\n        self.y = float(new_y)\n        self.orientation = float(new_orientation)\n    \n    \n    def set_noise(self, new_f_noise, new_t_noise, new_s_noise):\n        # makes it possible to change the noise parameters\n        # this is often useful in particle filters\n        self.forward_noise = float(new_f_noise);\n        self.turn_noise    = float(new_t_noise);\n        self.sense_noise   = float(new_s_noise);\n    \n    \n    def sense(self):\n        Z = []\n        for i in range(len(landmarks)):\n            dist = sqrt((self.x - landmarks[i][0]) ** 2 + (self.y - landmarks[i][1]) ** 2)\n            dist += random.gauss(0.0, self.sense_noise)\n            Z.append(dist)\n        return Z\n    \n    \n    def move(self, turn, forward):\n        if forward < 0:\n            raise ValueError, 'Robot cant move backwards'         \n        \n        # turn, and add randomness to the turning command\n        orientation = self.orientation + float(turn) + random.gauss(0.0, self.turn_noise)\n        orientation %= 2 * pi\n        \n        # move, and add randomness to the motion command\n        dist = float(forward) + random.gauss(0.0, self.forward_noise)\n        x = self.x + (cos(orientation) * dist)\n        y = self.y + (sin(orientation) * dist)\n        x %= world_size    # cyclic truncate\n        y %= world_size\n        \n        # set particle\n        res = robot()\n        res.set(x, y, orientation)\n        res.set_noise(self.forward_noise, self.turn_noise, self.sense_noise)\n        return res\n    \n    def Gaussian(self, mu, sigma, x):\n        \n        # calculates the probability of x for 1-dim Gaussian with mean mu and var. sigma\n        return exp(- ((mu - x) ** 2) / (sigma ** 2) / 2.0) / sqrt(2.0 * pi * (sigma ** 2))\n    \n    \n    def measurement_prob(self, measurement):\n        \n        # calculates how likely a measurement should be\n        \n        prob = 1.0;\n        for i in range(len(landmarks)):\n            dist = sqrt((self.x - landmarks[i][0]) ** 2 + (self.y - landmarks[i][1]) ** 2)\n            prob *= self.Gaussian(dist, self.sense_noise, measurement[i])\n        return prob\n    \n    \n    \n    def __repr__(self):\n        return '[x=%.6s y=%.6s orient=%.6s]' % (str(self.x), str(self.y), str(self.orientation))\n\n\n\ndef eval(r, p):\n    sum = 0.0;\n    for i in range(len(p)): # calculate mean error\n        dx = (p[i].x - r.x + (world_size/2.0)) % world_size - (world_size/2.0)\n        dy = (p[i].y - r.y + (world_size/2.0)) % world_size - (world_size/2.0)\n        err = sqrt(dx * dx + dy * dy)\n        sum += err\n    return sum / float(len(p))\n\n\n\n####   DON'T MODIFY ANYTHING ABOVE HERE! ENTER CODE BELOW ####\n\nmyrobot = robot()\n\n", "type": "Nugget", "id": 193002}, {"nuggetType": "lecture", "name": "Orientation 1", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "aa53058e-9ad8-409d-b1f9-6e8386e2543f", "name": "cs373_unit3_20_q_Orientation-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIjcCww", "youtube_id": "cupiUHaKvdI", "youtube_state": "done", "path": "Course/cs373/Media/192008", "transcript": null, "id": 192008}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY6-MLDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/193003", "type": "Nugget", "id": 193003}, {"nuggetType": "quiz", "name": "Resampling", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY1OsLDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/194004", "type": "Nugget", "id": 194004}, {"nuggetType": "lecture", "name": "Efficiency", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "8c645a64-83f1-48ca-8851-5f69948c79a1", "name": "cs373_unit3_03_q_Efficiency", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNHrCww", "youtube_id": "7CNEY8lRrGE", "youtube_state": "done", "path": "Course/cs373/Media/194001", "transcript": null, "id": 194001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYufMLDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/195001", "type": "Nugget", "id": 195001}, {"nuggetType": "lecture", "name": "Particle Filters", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "91759a59-db07-456a-81f7-d3e451ee54bc", "name": "cs373_unit3_05_l_Particle-Filters", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJGqDAw", "youtube_id": "4S-sx5_cmLU", "youtube_state": "done", "path": "Course/cs373/Media/202001", "transcript": null, "id": 202001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYuvMLDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/195002", "type": "Nugget", "id": 195002}, {"nuggetType": "quiz", "name": "Never Sampled 3", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYvvMLDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/195006", "type": "Nugget", "id": 195006}, {"nuggetType": "quiz", "name": "Efficiency", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYofsLDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/196001", "type": "Nugget", "id": 196001}, {"nuggetType": "lecture", "name": "Robot World", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "77813a4f-555c-46e6-aa5b-4de0c9df0186", "name": "cs373_unit3_10_l_Robot-World", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNPrCww", "youtube_id": "qq5h-Xw4DGg", "youtube_state": "done", "path": "Course/cs373/Media/194003", "transcript": null, "id": 194003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYpPsLDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/196004", "type": "Nugget", "id": 196004}, {"nuggetType": "lecture", "name": "Never Sampled 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "e0f48b37-60d9-4cdc-8c02-54cbdf080695", "name": "cs373_unit3_16_q_Never-Sampled-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOO5DAw", "youtube_id": "q95KMAIqDDY", "youtube_state": "done", "path": "Course/cs373/Media/204003", "transcript": null, "id": 204003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYpfsLDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/196005", "type": "Nugget", "id": 196005}, {"nuggetType": "lecture", "name": "Error Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "1e79afe1-c9ee-4388-9bb6-efc9f3069021", "name": "cs373_unit3_22_s_Error", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPuxDAw", "youtube_id": "3kOrzhYCXz8", "youtube_state": "done", "path": "Course/cs373/Media/203003", "transcript": null, "id": 203003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYp_sLDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/196007", "type": "Nugget", "id": 196007}, {"nuggetType": "lecture", "name": "Efficiency Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "246a1a3d-d889-4fc4-b6e2-3a67e02ccf96", "name": "cs373_unit3_03_s_Efficiency", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMKdCww", "youtube_id": "rA8ZpMR6yXM", "youtube_state": "done", "path": "Course/cs373/Media/184002", "transcript": null, "id": 184002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYiYMMDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/197001", "type": "Nugget", "id": 197001}, {"nuggetType": "lecture", "name": "Importance Weight", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "ea7438fe-e017-4bf9-8a8d-1c239cd076f5", "name": "cs373_unit3_13_p_Importance-Weight", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLrwDAw", "youtube_id": "xP9PrSTJPz0", "youtube_state": "done", "path": "Course/cs373/Media/211002", "transcript": null, "id": 211002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYi4MMDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/197003", "type": "Nugget", "id": 197003}, {"nuggetType": "lecture", "name": "Orientation 1 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "6ad8581b-e1c5-4f7c-aefd-7d9efa99d122", "name": "cs373_unit3_20_s_Orientation-1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNPoDAw", "youtube_id": "-lq0uzHd9T0", "youtube_state": "done", "path": "Course/cs373/Media/210003", "transcript": null, "id": 210003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYjYMMDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/197005", "type": "Nugget", "id": 197005}, {"nuggetType": "lecture", "name": "Never Sampled 3 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "9bad8c47-b5c3-4e33-be49-9b3b7adbcabf", "name": "cs373_unit3_17_s_Never-Sampled-3", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNmPDQw", "youtube_id": "hcoKwWBvB6Y", "youtube_state": "done", "path": "Course/cs373/Media/215001", "transcript": null, "id": 215001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY8ooMDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/198002", "type": "Nugget", "id": 198002}, {"nuggetType": "lecture", "name": "Exact Or Approximate", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "5f4a07fc-801b-457f-a4ea-0e1894def506", "name": "cs373_unit3_04_q_Exact-or-Approximate", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMrECww", "youtube_id": "WKlm2aO2QGY", "youtube_state": "done", "path": "Course/cs373/Media/189002", "transcript": null, "id": 189002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY2ZIMDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/199001", "type": "Nugget", "id": 199001}, {"nuggetType": "lecture", "name": "Exact Or Approximate Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "dfa09919-efce-4149-9782-3ecf72eeb0ce", "name": "cs373_unit3_04_s_Exact-or-Approximate", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGILcCww", "youtube_id": "1N3_RnTDFqU", "youtube_state": "done", "path": "Course/cs373/Media/192002", "transcript": null, "id": 192002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY2pIMDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/199002", "type": "Nugget", "id": 199002}, {"nuggetType": "lecture", "name": "Error", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "69c2ff3d-da9b-485b-9e7b-4cb1a6ab3f5f", "name": "cs373_unit3_22_p_Error", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJGnDQw", "youtube_id": "UAdcKWLi9G8", "youtube_state": "done", "path": "Course/cs373/Media/218001", "transcript": null, "id": 218001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYxJoMDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/200004", "type": "Nugget", "id": 200004}, {"nuggetType": "program", "name": "Error", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYxZoMDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/200005", "suppliedCode": "# In this exercise, please run your previous code twice.\n# Please only modify the indicated area below!\n\nfrom math import *\nimport random\n\n\n\nlandmarks  = [[20.0, 20.0], [80.0, 80.0], [20.0, 80.0], [80.0, 20.0]]\nworld_size = 100.0\n\nclass robot:\n    def __init__(self):\n        self.x = random.random() * world_size\n        self.y = random.random() * world_size\n        self.orientation = random.random() * 2.0 * pi\n        self.forward_noise = 0.0;\n        self.turn_noise    = 0.0;\n        self.sense_noise   = 0.0;\n    \n    def set(self, new_x, new_y, new_orientation):\n        if new_x < 0 or new_x >= world_size:\n            raise ValueError, 'X coordinate out of bound'\n        if new_y < 0 or new_y >= world_size:\n            raise ValueError, 'Y coordinate out of bound'\n        if new_orientation < 0 or new_orientation >= 2 * pi:\n            raise ValueError, 'Orientation must be in [0..2pi]'\n        self.x = float(new_x)\n        self.y = float(new_y)\n        self.orientation = float(new_orientation)\n    \n    \n    def set_noise(self, new_f_noise, new_t_noise, new_s_noise):\n        # makes it possible to change the noise parameters\n        # this is often useful in particle filters\n        self.forward_noise = float(new_f_noise);\n        self.turn_noise    = float(new_t_noise);\n        self.sense_noise   = float(new_s_noise);\n    \n    \n    def sense(self):\n        Z = []\n        for i in range(len(landmarks)):\n            dist = sqrt((self.x - landmarks[i][0]) ** 2 + (self.y - landmarks[i][1]) ** 2)\n            dist += random.gauss(0.0, self.sense_noise)\n            Z.append(dist)\n        return Z\n    \n    \n    def move(self, turn, forward):\n        if forward < 0:\n            raise ValueError, 'Robot cant move backwards'         \n        \n        # turn, and add randomness to the turning command\n        orientation = self.orientation + float(turn) + random.gauss(0.0, self.turn_noise)\n        orientation %= 2 * pi\n        \n        # move, and add randomness to the motion command\n        dist = float(forward) + random.gauss(0.0, self.forward_noise)\n        x = self.x + (cos(orientation) * dist)\n        y = self.y + (sin(orientation) * dist)\n        x %= world_size    # cyclic truncate\n        y %= world_size\n        \n        # set particle\n        res = robot()\n        res.set(x, y, orientation)\n        res.set_noise(self.forward_noise, self.turn_noise, self.sense_noise)\n        return res\n    \n    def Gaussian(self, mu, sigma, x):\n        \n        # calculates the probability of x for 1-dim Gaussian with mean mu and var. sigma\n        return exp(- ((mu - x) ** 2) / (sigma ** 2) / 2.0) / sqrt(2.0 * pi * (sigma ** 2))\n    \n    \n    def measurement_prob(self, measurement):\n        \n        # calculates how likely a measurement should be\n        \n        prob = 1.0;\n        for i in range(len(landmarks)):\n            dist = sqrt((self.x - landmarks[i][0]) ** 2 + (self.y - landmarks[i][1]) ** 2)\n            prob *= self.Gaussian(dist, self.sense_noise, measurement[i])\n        return prob\n    \n    \n    \n    def __repr__(self):\n        return '[x=%.6s y=%.6s orient=%.6s]' % (str(self.x), str(self.y), str(self.orientation))\n\n\n\ndef eval(r, p):\n    sum = 0.0;\n    for i in range(len(p)): # calculate mean error\n        dx = (p[i].x - r.x + (world_size/2.0)) % world_size - (world_size/2.0)\n        dy = (p[i].y - r.y + (world_size/2.0)) % world_size - (world_size/2.0)\n        err = sqrt(dx * dx + dy * dy)\n        sum += err\n    return sum / float(len(p))\n\n#myrobot = robot()\n#myrobot.set_noise(5.0, 0.1, 5.0)\n#myrobot.set(30.0, 50.0, pi/2)\n#myrobot = myrobot.move(-pi/2, 15.0)\n#print myrobot.sense()\n#myrobot = myrobot.move(-pi/2, 10.0)\n#print myrobot.sense()\n\n####   DON'T MODIFY ANYTHING ABOVE HERE! ENTER/MODIFY CODE BELOW ####\nmyrobot = robot()\nmyrobot = myrobot.move(0.1, 5.0)\nZ = myrobot.sense()\nN = 1000\nT = 10 #Leave this as 10 for grading purposes.\n\np = []\nfor i in range(N):\n    r = robot()\n    r.set_noise(0.05, 0.05, 5.0)\n    p.append(r)\n\nfor t in range(T):\n    myrobot = myrobot.move(0.1, 5.0)\n    Z = myrobot.sense()\n\n    p2 = []\n    for i in range(N):\n        p2.append(p[i].move(0.1, 5.0))\n    p = p2\n\n    w = []\n    for i in range(N):\n        w.append(p[i].measurement_prob(Z))\n\n    p3 = []\n    index = int(random.random() * N)\n    beta = 0.0\n    mw = max(w)\n    for i in range(N):\n        beta += random.random() * 2.0 * mw\n        while beta > w[index]:\n            beta -= w[index]\n            index = (index + 1) % N\n        p3.append(p[index])\n    p = p3\n    #enter code here, make sure that you output 10 print statements.\n \n\n\n", "type": "Nugget", "id": 200005}, {"nuggetType": "quiz", "name": "Exact Or Approximate", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYqaIMDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/201001", "type": "Nugget", "id": 201001}, {"nuggetType": "program", "name": "Importance Weight", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYqqIMDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/201002", "suppliedCode": "\n# Now we want to give weight to our \n# particles. This program will print a\n# list of 1000 particle weights.\n#\n# Don't modify the code below. Please enter\n# your code at the bottom.\n\nfrom math import *\nimport random\n\n\n\nlandmarks  = [[20.0, 20.0], [80.0, 80.0], [20.0, 80.0], [80.0, 20.0]]\nworld_size = 100.0\n\n\nclass robot:\n    def __init__(self):\n        self.x = random.random() * world_size\n        self.y = random.random() * world_size\n        self.orientation = random.random() * 2.0 * pi\n        self.forward_noise = 0.0;\n        self.turn_noise    = 0.0;\n        self.sense_noise   = 0.0;\n    \n    def set(self, new_x, new_y, new_orientation):\n        if new_x < 0 or new_x >= world_size:\n            raise ValueError, 'X coordinate out of bound'\n        if new_y < 0 or new_y >= world_size:\n            raise ValueError, 'Y coordinate out of bound'\n        if new_orientation < 0 or new_orientation >= 2 * pi:\n            raise ValueError, 'Orientation must be in [0..2pi]'\n        self.x = float(new_x)\n        self.y = float(new_y)\n        self.orientation = float(new_orientation)\n    \n    \n    def set_noise(self, new_f_noise, new_t_noise, new_s_noise):\n        # makes it possible to change the noise parameters\n        # this is often useful in particle filters\n        self.forward_noise = float(new_f_noise);\n        self.turn_noise    = float(new_t_noise);\n        self.sense_noise   = float(new_s_noise);\n    \n    \n    def sense(self):\n        Z = []\n        for i in range(len(landmarks)):\n            dist = sqrt((self.x - landmarks[i][0]) ** 2 + (self.y - landmarks[i][1]) ** 2)\n            dist += random.gauss(0.0, self.sense_noise)\n            Z.append(dist)\n        return Z\n    \n    \n    def move(self, turn, forward):\n        if forward < 0:\n            raise ValueError, 'Robot cant move backwards'         \n        \n        # turn, and add randomness to the turning command\n        orientation = self.orientation + float(turn) + random.gauss(0.0, self.turn_noise)\n        orientation %= 2 * pi\n        \n        # move, and add randomness to the motion command\n        dist = float(forward) + random.gauss(0.0, self.forward_noise)\n        x = self.x + (cos(orientation) * dist)\n        y = self.y + (sin(orientation) * dist)\n        x %= world_size    # cyclic truncate\n        y %= world_size\n        \n        # set particle\n        res = robot()\n        res.set(x, y, orientation)\n        res.set_noise(self.forward_noise, self.turn_noise, self.sense_noise)\n        return res\n    \n    def Gaussian(self, mu, sigma, x):\n        \n        # calculates the probability of x for 1-dim Gaussian with mean mu and var. sigma\n        return exp(- ((mu - x) ** 2) / (sigma ** 2) / 2.0) / sqrt(2.0 * pi * (sigma ** 2))\n    \n    \n    def measurement_prob(self, measurement):\n        \n        # calculates how likely a measurement should be\n        \n        prob = 1.0;\n        for i in range(len(landmarks)):\n            dist = sqrt((self.x - landmarks[i][0]) ** 2 + (self.y - landmarks[i][1]) ** 2)\n            prob *= self.Gaussian(dist, self.sense_noise, measurement[i])\n        return prob\n    \n    \n    \n    def __repr__(self):\n        return '[x=%.6s y=%.6s orient=%.6s]' % (str(self.x), str(self.y), str(self.orientation))\n\n\n\ndef eval(r, p):\n    sum = 0.0;\n    for i in range(len(p)): # calculate mean error\n        dx = (p[i].x - r.x + (world_size/2.0)) % world_size - (world_size/2.0)\n        dy = (p[i].y - r.y + (world_size/2.0)) % world_size - (world_size/2.0)\n        err = sqrt(dx * dx + dy * dy)\n        sum += err\n    return sum / float(len(p))\n\n#myrobot = robot()\n#myrobot.set_noise(5.0, 0.1, 5.0)\n#myrobot.set(30.0, 50.0, pi/2)\n#myrobot = myrobot.move(-pi/2, 15.0)\n#print myrobot.sense()\n#myrobot = myrobot.move(-pi/2, 10.0)\n#print myrobot.sense()\n\n####   DON'T MODIFY ANYTHING ABOVE HERE! ENTER CODE BELOW ####\nmyrobot = robot()\nmyrobot = myrobot.move(0.1, 5.0)\nZ = myrobot.sense()\n\nN = 1000\np = []\nfor i in range(N):\n    x = robot()\n    x.set_noise(0.05, 0.05, 5.0)\n    p.append(x)\n\np2 = []\nfor i in range(N):\n    p2.append(p[i].move(0.1, 5.0))\np = p2\n\nw = []\n#insert code here!\nprint w #Please print w for grading purposes.\n\n\n\n", "type": "Nugget", "id": 201002}, {"nuggetType": "lecture", "name": "2012", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "ac65dafd-8bbe-4baf-abf0-acc900322a30", "name": "cs373_unit3_25_l_2012", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLTPCgw", "youtube_id": "QgOUu2sUDzg", "youtube_state": "done", "path": "Course/cs373/Media/174004", "transcript": null, "id": 174004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYrKIMDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/201004", "type": "Nugget", "id": 201004}, {"nuggetType": "lecture", "name": "Robot Class Details", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "dd17ae96-5497-4b8e-b4d4-6f07fcb86c3c", "name": "cs373_unit3_07_l_Robot-Class-Details", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGKP7Cww", "youtube_id": "ZFqEh8JylvI", "youtube_state": "done", "path": "Course/cs373/Media/196003", "transcript": null, "id": 196003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYkqoMDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/202002", "type": "Nugget", "id": 202002}, {"nuggetType": "lecture", "name": "Orientation 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "58f1d92c-494d-4159-9c77-300804ca139f", "name": "cs373_unit3_21_p_Orientation-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNXrCww", "youtube_id": "17FoJwLiQkg", "youtube_state": "done", "path": "Course/cs373/Media/194005", "transcript": null, "id": 194005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYlqoMDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/202006", "type": "Nugget", "id": 202006}, {"nuggetType": "lecture", "name": "Filters", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "c3cb10e6-1251-40a6-aa5b-e62c83bbc5c6", "name": "cs373_unit3_24_q_Filters", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGL_zCww", "youtube_id": "bjZy-RVms_8", "youtube_state": "done", "path": "Course/cs373/Media/195007", "transcript": null, "id": 195007}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY_LEMDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/203004", "type": "Nugget", "id": 203004}, {"nuggetType": "lecture", "name": "Using Robot Class", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "cd54d657-9bb3-461a-b2cd-aa21c5227387", "name": "cs373_unit3_06_l_Using-Robot-Class", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGKL7Cww", "youtube_id": "1hgVZtRIjFU", "youtube_state": "done", "path": "Course/cs373/Media/196002", "transcript": null, "id": 196002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY4bkMDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/204001", "type": "Nugget", "id": 204001}, {"nuggetType": "program", "name": "Creating Particles", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYysEMDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/205002", "suppliedCode": "\n# Now we want to create particles,\n# p[i] = robot(). In this assignment, write\n# code that will assign 1000 such particles\n# to a list.\n#\n# Your program should print out the length\n# of your list (don't cheat by making an\n# arbitrary list of 1000 elements!)\n#\n# Don't modify the code below. Please enter\n# your code at the bottom.\n\nfrom math import *\nimport random\n\n\n\nlandmarks  = [[20.0, 20.0], [80.0, 80.0], [20.0, 80.0], [80.0, 20.0]]\nworld_size = 100.0\n\n\nclass robot:\n    def __init__(self):\n        self.x = random.random() * world_size\n        self.y = random.random() * world_size\n        self.orientation = random.random() * 2.0 * pi\n        self.forward_noise = 0.0;\n        self.turn_noise    = 0.0;\n        self.sense_noise   = 0.0;\n    \n    def set(self, new_x, new_y, new_orientation):\n        if new_x < 0 or new_x >= world_size:\n            raise ValueError, 'X coordinate out of bound'\n        if new_y < 0 or new_y >= world_size:\n            raise ValueError, 'Y coordinate out of bound'\n        if new_orientation < 0 or new_orientation >= 2 * pi:\n            raise ValueError, 'Orientation must be in [0..2pi]'\n        self.x = float(new_x)\n        self.y = float(new_y)\n        self.orientation = float(new_orientation)\n    \n    \n    def set_noise(self, new_f_noise, new_t_noise, new_s_noise):\n        # makes it possible to change the noise parameters\n        # this is often useful in particle filters\n        self.forward_noise = float(new_f_noise);\n        self.turn_noise    = float(new_t_noise);\n        self.sense_noise   = float(new_s_noise);\n    \n    \n    def sense(self):\n        Z = []\n        for i in range(len(landmarks)):\n            dist = sqrt((self.x - landmarks[i][0]) ** 2 + (self.y - landmarks[i][1]) ** 2)\n            dist += random.gauss(0.0, self.sense_noise)\n            Z.append(dist)\n        return Z\n    \n    \n    def move(self, turn, forward):\n        if forward < 0:\n            raise ValueError, 'Robot cant move backwards'         \n        \n        # turn, and add randomness to the turning command\n        orientation = self.orientation + float(turn) + random.gauss(0.0, self.turn_noise)\n        orientation %= 2 * pi\n        \n        # move, and add randomness to the motion command\n        dist = float(forward) + random.gauss(0.0, self.forward_noise)\n        x = self.x + (cos(orientation) * dist)\n        y = self.y + (sin(orientation) * dist)\n        x %= world_size    # cyclic truncate\n        y %= world_size\n        \n        # set particle\n        res = robot()\n        res.set(x, y, orientation)\n        res.set_noise(self.forward_noise, self.turn_noise, self.sense_noise)\n        return res\n    \n    def Gaussian(self, mu, sigma, x):\n        \n        # calculates the probability of x for 1-dim Gaussian with mean mu and var. sigma\n        return exp(- ((mu - x) ** 2) / (sigma ** 2) / 2.0) / sqrt(2.0 * pi * (sigma ** 2))\n    \n    \n    def measurement_prob(self, measurement):\n        \n        # calculates how likely a measurement should be\n        \n        prob = 1.0;\n        for i in range(len(landmarks)):\n            dist = sqrt((self.x - landmarks[i][0]) ** 2 + (self.y - landmarks[i][1]) ** 2)\n            prob *= self.Gaussian(dist, self.sense_noise, measurement[i])\n        return prob\n    \n    \n    \n    def __repr__(self):\n        return '[x=%.6s y=%.6s orient=%.6s]' % (str(self.x), str(self.y), str(self.orientation))\n\n\n\ndef eval(r, p):\n    sum = 0.0;\n    for i in range(len(p)): # calculate mean error\n        dx = (p[i].x - r.x + (world_size/2.0)) % world_size - (world_size/2.0)\n        dy = (p[i].y - r.y + (world_size/2.0)) % world_size - (world_size/2.0)\n        err = sqrt(dx * dx + dy * dy)\n        sum += err\n    return sum / float(len(p))\n\n#myrobot = robot()\n#myrobot.set_noise(5.0, 0.1, 5.0)\n#myrobot.set(30.0, 50.0, pi/2)\n#myrobot = myrobot.move(-pi/2, 15.0)\n#print myrobot.sense()\n#myrobot = myrobot.move(-pi/2, 10.0)\n#print myrobot.sense()\n\n####   DON'T MODIFY ANYTHING ABOVE HERE! ENTER CODE BELOW ####\n\nN = 1000\np = []\n\n#enter code here\n\nprint len(p)\n", "type": "Nugget", "id": 205002}, {"nuggetType": "quiz", "name": "Filters", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYy8EMDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/205003", "type": "Nugget", "id": 205003}, {"nuggetType": "quiz", "name": "Never Sampled 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYs8kMDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/206003", "type": "Nugget", "id": 206003}, {"nuggetType": "lecture", "name": "Moving Robot", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "ecbf4fe0-5e3e-45be-9c90-c59a0956084c", "name": "cs373_unit3_08_p_Moving-Robot", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJOqDAw", "youtube_id": "SFcHsK2SWrI", "youtube_state": "done", "path": "Course/cs373/Media/202003", "transcript": null, "id": 202003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYmdEMDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/207001", "type": "Nugget", "id": 207001}, {"nuggetType": "lecture", "name": "Add Noise", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "7951ef30-94e1-46c4-9932-cd24c45a8b59", "name": "cs373_unit3_09_p_Add-Noise", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNqVCww", "youtube_id": "ajOKsQLxoJI", "youtube_state": "done", "path": "Course/cs373/Media/183002", "transcript": null, "id": 183002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYgdkMDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/208001", "type": "Nugget", "id": 208001}, {"nuggetType": "lecture", "name": "Robot Particles", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "fea4f782-3151-4f62-ad56-8bb9be34843a", "name": "cs373_unit3_12_p_Robot-Particles", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLnwDAw", "youtube_id": "-HQf6pkcebQ", "youtube_state": "done", "path": "Course/cs373/Media/211001", "transcript": null, "id": 211001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY0ugMDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/210002", "type": "Nugget", "id": 210002}, {"nuggetType": "lecture", "name": "Robot Particles Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "2967da73-2682-4543-a0b6-b9ddb529e230", "name": "cs373_unit3_12_s_Robot-Particles", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIqDDAw", "youtube_id": "-gNoDMlRwyc", "youtube_state": "done", "path": "Course/cs373/Media/197002", "transcript": null, "id": 197002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYofgMDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/212001", "type": "Nugget", "id": 212001}, {"nuggetType": "lecture", "name": "Resampling Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "c23f7451-97fd-4291-9724-672732b30291", "name": "cs373_unit3_14_s_Resampling", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPGHDQw", "youtube_id": "FjRX_i3SsJA", "youtube_state": "done", "path": "Course/cs373/Media/214001", "transcript": null, "id": 214001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY8ocNDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/214002", "type": "Nugget", "id": 214002}, {"nuggetType": "lecture", "name": "Resampling Wheel", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "media": {"dotsub_id": "c74120b5-0dd1-4c7f-8a01-72d7d8c7c77c", "name": "cs373_unit3_19_p_Resampling-Wheel", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLTJDAw", "youtube_id": "wNQVo6uOgYA", "youtube_state": "done", "path": "Course/cs373/Media/206004", "transcript": null, "id": 206004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQY248NDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/215003", "type": "Nugget", "id": 215003}, {"nuggetType": "program", "name": "New Particle", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYwpcNDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/216002", "suppliedCode": "# In this exercise, try to write a program that\n# will resample particles according to their weights.\n# Particles with higher weights should be sampled\n# more frequently (in proportion to their weight).\n\n# Don't modify anything below. Please scroll to the \n# bottom to enter your code.\n\nfrom math import *\nimport random\n\nlandmarks  = [[20.0, 20.0], [80.0, 80.0], [20.0, 80.0], [80.0, 20.0]]\nworld_size = 100.0\n\nclass robot:\n    def __init__(self):\n        self.x = random.random() * world_size\n        self.y = random.random() * world_size\n        self.orientation = random.random() * 2.0 * pi\n        self.forward_noise = 0.0;\n        self.turn_noise    = 0.0;\n        self.sense_noise   = 0.0;\n    \n    def set(self, new_x, new_y, new_orientation):\n        if new_x < 0 or new_x >= world_size:\n            raise ValueError, 'X coordinate out of bound'\n        if new_y < 0 or new_y >= world_size:\n            raise ValueError, 'Y coordinate out of bound'\n        if new_orientation < 0 or new_orientation >= 2 * pi:\n            raise ValueError, 'Orientation must be in [0..2pi]'\n        self.x = float(new_x)\n        self.y = float(new_y)\n        self.orientation = float(new_orientation)\n    \n    \n    def set_noise(self, new_f_noise, new_t_noise, new_s_noise):\n        # makes it possible to change the noise parameters\n        # this is often useful in particle filters\n        self.forward_noise = float(new_f_noise);\n        self.turn_noise    = float(new_t_noise);\n        self.sense_noise   = float(new_s_noise);\n    \n    \n    def sense(self):\n        Z = []\n        for i in range(len(landmarks)):\n            dist = sqrt((self.x - landmarks[i][0]) ** 2 + (self.y - landmarks[i][1]) ** 2)\n            dist += random.gauss(0.0, self.sense_noise)\n            Z.append(dist)\n        return Z\n    \n    \n    def move(self, turn, forward):\n        if forward < 0:\n            raise ValueError, 'Robot cant move backwards'         \n        \n        # turn, and add randomness to the turning command\n        orientation = self.orientation + float(turn) + random.gauss(0.0, self.turn_noise)\n        orientation %= 2 * pi\n        \n        # move, and add randomness to the motion command\n        dist = float(forward) + random.gauss(0.0, self.forward_noise)\n        x = self.x + (cos(orientation) * dist)\n        y = self.y + (sin(orientation) * dist)\n        x %= world_size    # cyclic truncate\n        y %= world_size\n        \n        # set particle\n        res = robot()\n        res.set(x, y, orientation)\n        res.set_noise(self.forward_noise, self.turn_noise, self.sense_noise)\n        return res\n    \n    def Gaussian(self, mu, sigma, x):\n        \n        # calculates the probability of x for 1-dim Gaussian with mean mu and var. sigma\n        return exp(- ((mu - x) ** 2) / (sigma ** 2) / 2.0) / sqrt(2.0 * pi * (sigma ** 2))\n    \n    \n    def measurement_prob(self, measurement):\n        \n        # calculates how likely a measurement should be\n        \n        prob = 1.0;\n        for i in range(len(landmarks)):\n            dist = sqrt((self.x - landmarks[i][0]) ** 2 + (self.y - landmarks[i][1]) ** 2)\n            prob *= self.Gaussian(dist, self.sense_noise, measurement[i])\n        return prob\n    \n    def __repr__(self):\n        return '[x=%.6s y=%.6s orient=%.6s]' % (str(self.x), str(self.y), str(self.orientation))\n\n\n\ndef eval(r, p):\n    sum = 0.0;\n    for i in range(len(p)): # calculate mean error\n        dx = (p[i].x - r.x + (world_size/2.0)) % world_size - (world_size/2.0)\n        dy = (p[i].y - r.y + (world_size/2.0)) % world_size - (world_size/2.0)\n        err = sqrt(dx * dx + dy * dy)\n        sum += err\n    return sum / float(len(p))\n\n#myrobot = robot()\n#myrobot.set_noise(5.0, 0.1, 5.0)\n#myrobot.set(30.0, 50.0, pi/2)\n#myrobot = myrobot.move(-pi/2, 15.0)\n#print myrobot.sense()\n#myrobot = myrobot.move(-pi/2, 10.0)\n#print myrobot.sense()\n\nmyrobot = robot()\nmyrobot = myrobot.move(0.1, 5.0)\nZ = myrobot.sense()\n\nN = 1000\np = []\nfor i in range(N):\n    x = robot()\n    x.set_noise(0.05, 0.05, 5.0)\n    p.append(x)\n\np2 = []\nfor i in range(N):\n    p2.append(p[i].move(0.1, 5.0))\np = p2\n\nw = []\nfor i in range(N):\n    w.append(p[i].measurement_prob(Z))\n\n\n#### DON'T MODIFY ANYTHING ABOVE HERE! ENTER CODE BELOW ####\n# You should make sure that p3 contains a list with particles\n# resampled according to their weights.\n# Also, DO NOT MODIFY p.\n\np3 = []\n\n\n", "type": "Nugget", "id": 216002}, {"nuggetType": "program", "name": "Resampling Wheel", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYw5cNDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/216003", "suppliedCode": "# In this exercise, you should implement the\n# resampler shown in the previous video.\n\nfrom math import *\nimport random\n\n\n\nlandmarks  = [[20.0, 20.0], [80.0, 80.0], [20.0, 80.0], [80.0, 20.0]]\nworld_size = 100.0\n\nclass robot:\n    def __init__(self):\n        self.x = random.random() * world_size\n        self.y = random.random() * world_size\n        self.orientation = random.random() * 2.0 * pi\n        self.forward_noise = 0.0;\n        self.turn_noise    = 0.0;\n        self.sense_noise   = 0.0;\n    \n    def set(self, new_x, new_y, new_orientation):\n        if new_x < 0 or new_x >= world_size:\n            raise ValueError, 'X coordinate out of bound'\n        if new_y < 0 or new_y >= world_size:\n            raise ValueError, 'Y coordinate out of bound'\n        if new_orientation < 0 or new_orientation >= 2 * pi:\n            raise ValueError, 'Orientation must be in [0..2pi]'\n        self.x = float(new_x)\n        self.y = float(new_y)\n        self.orientation = float(new_orientation)\n    \n    \n    def set_noise(self, new_f_noise, new_t_noise, new_s_noise):\n        # makes it possible to change the noise parameters\n        # this is often useful in particle filters\n        self.forward_noise = float(new_f_noise);\n        self.turn_noise    = float(new_t_noise);\n        self.sense_noise   = float(new_s_noise);\n    \n    \n    def sense(self):\n        Z = []\n        for i in range(len(landmarks)):\n            dist = sqrt((self.x - landmarks[i][0]) ** 2 + (self.y - landmarks[i][1]) ** 2)\n            dist += random.gauss(0.0, self.sense_noise)\n            Z.append(dist)\n        return Z\n    \n    \n    def move(self, turn, forward):\n        if forward < 0:\n            raise ValueError, 'Robot cant move backwards'         \n        \n        # turn, and add randomness to the turning command\n        orientation = self.orientation + float(turn) + random.gauss(0.0, self.turn_noise)\n        orientation %= 2 * pi\n        \n        # move, and add randomness to the motion command\n        dist = float(forward) + random.gauss(0.0, self.forward_noise)\n        x = self.x + (cos(orientation) * dist)\n        y = self.y + (sin(orientation) * dist)\n        x %= world_size    # cyclic truncate\n        y %= world_size\n        \n        # set particle\n        res = robot()\n        res.set(x, y, orientation)\n        res.set_noise(self.forward_noise, self.turn_noise, self.sense_noise)\n        return res\n    \n    def Gaussian(self, mu, sigma, x):\n        \n        # calculates the probability of x for 1-dim Gaussian with mean mu and var. sigma\n        return exp(- ((mu - x) ** 2) / (sigma ** 2) / 2.0) / sqrt(2.0 * pi * (sigma ** 2))\n    \n    \n    def measurement_prob(self, measurement):\n        \n        # calculates how likely a measurement should be\n        \n        prob = 1.0;\n        for i in range(len(landmarks)):\n            dist = sqrt((self.x - landmarks[i][0]) ** 2 + (self.y - landmarks[i][1]) ** 2)\n            prob *= self.Gaussian(dist, self.sense_noise, measurement[i])\n        return prob\n    \n    \n    \n    def __repr__(self):\n        return '[x=%.6s y=%.6s orient=%.6s]' % (str(self.x), str(self.y), str(self.orientation))\n\n\n\ndef eval(r, p):\n    sum = 0.0;\n    for i in range(len(p)): # calculate mean error\n        dx = (p[i].x - r.x + (world_size/2.0)) % world_size - (world_size/2.0)\n        dy = (p[i].y - r.y + (world_size/2.0)) % world_size - (world_size/2.0)\n        err = sqrt(dx * dx + dy * dy)\n        sum += err\n    return sum / float(len(p))\n\n#myrobot = robot()\n#myrobot.set_noise(5.0, 0.1, 5.0)\n#myrobot.set(30.0, 50.0, pi/2)\n#myrobot = myrobot.move(-pi/2, 15.0)\n#print myrobot.sense()\n#myrobot = myrobot.move(-pi/2, 10.0)\n#print myrobot.sense()\n\n####   DON'T MODIFY ANYTHING ABOVE HERE! ENTER CODE BELOW ####\nmyrobot = robot()\nmyrobot = myrobot.move(0.1, 5.0)\nZ = myrobot.sense()\n\nN = 1000\np = []\nfor i in range(N):\n    x = robot()\n    x.set_noise(0.05, 0.05, 5.0)\n    p.append(x)\n\np2 = []\nfor i in range(N):\n    p2.append(p[i].move(0.1, 5.0))\np = p2\n\nw = []\nfor i in range(N):\n    w.append(p[i].measurement_prob(Z))\n\np3 = []\n\np = p3\nprint p #please leave this print statement here for grading!\n\n", "type": "Nugget", "id": 216003}, {"nuggetType": "quiz", "name": "Orientation 1", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPGNCwwLEgZOdWdnZXQYxJcNDA", "path": "Course/cs373/CourseRev/feb2012/Unit/182001/Nugget/216004", "type": "Nugget", "id": 216004}]}, {"name": "Homework 3", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": true, "closedAt": "03/12/2012 23:59", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQY0eUNDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQYue0NDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQYif0NDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQYwZQODA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQY690NDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQYkqQODA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQY4bMODA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQYgtYNDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQYmcsODA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQY0eIODA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQYofIODA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQYivoODA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQY8oQODA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQYwZEPDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQYgtMODA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQYi_oODA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQY8oEPDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQYybgPDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQw", "path": "Course/cs373/CourseRev/feb2012/Unit/224001", "open": false, "id": 224001, "nuggets": [{"nuggetType": "quiz", "name": "Single Particle", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQYgtYNDA", "path": "Course/cs373/CourseRev/feb2012/Unit/224001/Nugget/224002", "type": "Nugget", "id": 224002}, {"nuggetType": "quiz", "name": "Motion Question", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQY690NDA", "path": "Course/cs373/CourseRev/feb2012/Unit/224001/Nugget/225003", "type": "Nugget", "id": 225003}, {"nuggetType": "lecture", "name": "Empty Cell", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQw", "media": {"dotsub_id": "46547307-1258-4d66-a3fa-43950aa37b73", "name": "cs373_hw3_00_q_Empty-Cell", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOndDQw", "youtube_id": "YV0ATCvSLJw", "youtube_state": "done", "path": "Course/cs373/Media/225001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nWelcome to homework assignment number 3.\n\n2\n00:00:03,000 --> 00:00:07,000\nThis is all about particle filters. All ask you three questions.\n\n3\n00:00:07,000 --> 00:00:11,000\nThen we have a fairly involved programming assignment.\n\n4\n00:00:11,000 --> 00:00:13,000\nHere is my first question.\n\n5\n00:00:13,000 --> 00:00:18,000\nConsider the following world with 4 states--A, B, C, and D.\n\n6\n00:00:18,000 --> 00:00:22,000\nSuppose we wish to initialize our estimate with uniformly drawn particles.\n\n7\n00:00:22,000 --> 00:00:27,000\nMy question is what is the probability that cell A is empty?\n\n8\n00:00:27,000 --> 00:00:30,000\nI'm asking this for different values of N--\n\n9\n00:00:30,000 --> 00:00:35,000\nN equals 1, 4, and 10.\n\n", "id": 225001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQY0eUNDA", "path": "Course/cs373/CourseRev/feb2012/Unit/224001/Nugget/226001", "type": "Nugget", "id": 226001}, {"nuggetType": "quiz", "name": "Empty Cell", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQYue0NDA", "path": "Course/cs373/CourseRev/feb2012/Unit/224001/Nugget/227001", "type": "Nugget", "id": 227001}, {"nuggetType": "lecture", "name": "Empty Cell Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQw", "media": {"dotsub_id": "6dbfa349-bb93-4e11-829f-2d6d3f842096", "name": "cs373_hw3_00_s_Empty-Cell", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGKH1DQw", "youtube_id": "7U-uvorsmg0", "youtube_state": "done", "path": "Course/cs373/Media/228001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:07,000\nFor N equals 1 it is 0.75 with 3/4 chance that particles will find themselves in B, D, or C,\n\n2\n00:00:07,000 --> 00:00:10,000\nand there's only a 1/4 chance that a particle is in A.\n\n3\n00:00:10,000 --> 00:00:18,000\nFor N equals 4, it's 0.316, which is the same as 0.75^4.\n\n4\n00:00:18,000 --> 00:00:21,000\nFor each particle we have a 75% chance to be outside A,\n\n5\n00:00:21,000 --> 00:00:26,000\nand 0.75^4 are the chances of 4 particles are outside A.\n\n6\n00:00:26,000 --> 00:00:34,000\nAs we move on, we get 0.75^10 with a 0.0563.\n\n", "id": 228001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQYif0NDA", "path": "Course/cs373/CourseRev/feb2012/Unit/224001/Nugget/229001", "type": "Nugget", "id": 229001}, {"nuggetType": "lecture", "name": "Sensing", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQw", "media": {"dotsub_id": "1ccc38e7-3caa-4115-bcae-3e43a10bd2c0", "name": "cs373_hw3_04_p_Sensing", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPGBDww", "youtube_id": "NIKU0S1kxP8", "youtube_state": "done", "path": "Course/cs373/Media/246001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nNow I want you to implement a measurement model,\n\n2\n00:00:04,000 --> 00:00:08,000\nusing the function sense, that is more characteristic \n\n3\n00:00:08,000 --> 00:00:11,000\nof what's often in the literature on robotics.\n\n4\n00:00:11,000 --> 00:00:14,000\nSay we have a robot\n\n5\n00:00:14,000 --> 00:00:19,000\nand we have a landmark, then the robot can measure their bearing or angle \n\n6\n00:00:19,000 --> 00:00:24,000\nto this landmark relative to its own local coordinate system.\n\n7\n00:00:24,000 --> 00:00:27,000\nWhereas before we measured ranges or distances,\n\n8\n00:00:27,000 --> 00:00:30,000\nnow we measure bearings or angles.\n\n9\n00:00:30,000 --> 00:00:33,000\nWe assume in the world there are 4 landmarks--\n\n10\n00:00:33,000 --> 00:00:41,000\nL1, L2, L3, and L4. All of those are distinguishable.\n\n11\n00:00:41,000 --> 00:00:44,000\nThe measurement vector is a set of 4 bearings \n\n12\n00:00:44,000 --> 00:00:47,000\nthat correspond to those four different landmarks.\n\n13\n00:00:47,000 --> 00:00:50,000\nWhen you implement this, I recommend you use the function \n\n14\n00:00:50,000 --> 00:00:53,000\narctan2, which is the generalization of arctangent \n\n15\n00:00:53,000 --> 00:00:58,000\nthat takes as input delta y and then delta x.\n\n16\n00:00:58,000 --> 00:01:03,000\nArctan 2 would give you the orientation of a vector in global coordinates.\n\n17\n00:01:03,000 --> 00:01:07,000\nWe then have to adjust for the fact that it's relative to the robot's local coordinates, \n\n18\n00:01:07,000 --> 00:01:12,000\nwhich is done by subtracting the orientation of the robot.\n\n19\n00:01:12,000 --> 00:01:19,000\nThis should give you the implementation of a bearing to a landmark.\n\n20\n00:01:19,000 --> 00:01:23,000\nWith this implementation I add a variable called \"bearing_noise,\"\n\n21\n00:01:23,000 --> 00:01:26,000\nwhich you probably already used because it was already referenced before.\n\n22\n00:01:26,000 --> 00:01:31,000\nI set it to 0 just so that we have no noise, and you can just your code.\n\n23\n00:01:31,000 --> 00:01:34,000\nWe initialize the robot coordinates as 30 and 20. \n\n24\n00:01:34,000 --> 00:01:38,000\nMotions are now irrelevant.\n\n25\n00:01:38,000 --> 00:01:44,000\nBut as I go down, I now give the following two lines of code.\n\n26\n00:01:44,000 --> 00:01:49,000\nI print the coordinates as before, and I print the measurements.\n\n27\n00:01:49,000 --> 00:01:52,000\nThe robot is at 30/20, and the bearings for these landmarks will be \n\n28\n00:01:52,000 --> 00:01:59,000\n6.00, 3.72, 1.92, and 0.85.\n\n29\n00:01:59,000 --> 00:02:04,000\nMy question for you is can you implement the software the measures those bearings.\n\n30\n00:02:04,000 --> 00:02:08,000\nIf I changed the initial orientation of the robot to be pi over 5,\n\n31\n00:02:08,000 --> 00:02:11,000\nI now get my new robot coordinates over here,\n\n32\n00:02:11,000 --> 00:02:16,000\nand my measurement vector outputs me very different values.\n\n33\n00:02:16,000 --> 00:02:18,000\nThat's because this robot is now rotated \n\n34\n00:02:18,000 --> 00:02:21,000\nand therefore all the bearings to the landmarks do change.\n\n35\n00:02:21,000 --> 00:02:24,000\nIt's 5.3, 3.1, 1.3, and 0.22.\n\n36\n00:02:24,000 --> 00:02:28,000\nImplement a measurement function that gives me exactly those values.\n\n", "id": 246001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQY8oQODA", "path": "Course/cs373/CourseRev/feb2012/Unit/224001/Nugget/230002", "type": "Nugget", "id": 230002}, {"nuggetType": "lecture", "name": "Motion Question", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQw", "media": {"dotsub_id": "58e11c56-848e-4fe0-9b4b-6f3a51035bde", "name": "cs373_hw3_01_q_Motion-Question", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNmMDgw", "youtube_id": "KmGAxPpghjw", "youtube_state": "done", "path": "Course/cs373/Media/231001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nQuestion 2--consider the same world as before with 4 states.\n\n2\n00:00:04,000 --> 00:00:12,000\nNow we're facing a situation in which there are 5 particles in A, 3 in B, 3 in C, and 1 in D.\n\n3\n00:00:12,000 --> 00:00:16,000\nWe will now take a motion step. This is not about measurements, just motion.\n\n4\n00:00:16,000 --> 00:00:20,000\nOur robot moves with a 50% probability horizontally.\n\n5\n00:00:20,000 --> 00:00:23,000\nFor example, if it was in D, it would move to C.\n\n6\n00:00:23,000 --> 00:00:27,000\nIt moves with a 50% chance vertically but never diagonally,\n\n7\n00:00:27,000 --> 00:00:31,000\nand it never stays in the same cell.\n\n8\n00:00:31,000 --> 00:00:38,000\nAfter 1 motion step, how many particles do we expect in cell A, B, C, and D?\n\n9\n00:00:38,000 --> 00:00:40,000\nAnswer the same for the asymptote. \n\n10\n00:00:40,000 --> 00:00:47,000\nIf we move infinitely often, what is the distribution that we expect this to converge to?\n\n11\n00:00:47,000 --> 00:00:50,000\nI somewhat sloppily wrote \"after infinite steps.\"\n\n12\n00:00:50,000 --> 00:00:54,000\n This is really what does it converge to in the end.\n\n", "id": 231001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQYwZQODA", "path": "Course/cs373/CourseRev/feb2012/Unit/224001/Nugget/232001", "type": "Nugget", "id": 232001}, {"nuggetType": "lecture", "name": "Motion Question Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQw", "media": {"dotsub_id": "ed61f892-c934-49b9-b449-54e8437ddf69", "name": "cs373_hw3_01_s_Motion-Question", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJGkDgw", "youtube_id": "dOXFNVW120A", "youtube_state": "done", "path": "Course/cs373/Media/234001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nThe correct answer of the 1 step is 3, 3, 3, and 3.\n\n2\n00:00:05,000 --> 00:00:09,000\nFor example, for cell A we can only get particles from B or C.\n\n3\n00:00:09,000 --> 00:00:12,000\nThose will come to A with a 50% chance each.\n\n4\n00:00:12,000 --> 00:00:16,000\nSo 6 times 0.5 is 3 for A. \n\n5\n00:00:16,000 --> 00:00:19,000\nEach cell has exactly 6 particles in its total neighbors,\n\n6\n00:00:19,000 --> 00:00:22,000\nso therefore, each of those cells gets a 3.\n\n7\n00:00:22,000 --> 00:00:26,000\nAsymptotically, this won't change. It's again 3, 3, 3, and 3.\n\n8\n00:00:26,000 --> 00:00:31,000\nI apologize it is a little bit misleading here that all these answers are the same number,\n\n9\n00:00:31,000 --> 00:00:35,000\nbut that's what this example gives us.\n\n", "id": 234001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQYkqQODA", "path": "Course/cs373/CourseRev/feb2012/Unit/224001/Nugget/234002", "type": "Nugget", "id": 234002}, {"nuggetType": "lecture", "name": "Single Particle", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQw", "media": {"dotsub_id": "fc3605f6-aa52-47a6-aa1d-b0b064de5b0e", "name": "cs373_hw3_02_q_Single-Particle", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPqrDgw", "youtube_id": "6kStxWm-nqI", "youtube_state": "done", "path": "Course/cs373/Media/235002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nIn question 3 I'd like to quiz your intuition.\n\n2\n00:00:04,000 --> 00:00:07,000\nSuppose we run a particle filter with N equals 1 particle.\n\n3\n00:00:07,000 --> 00:00:09,000\nWhat will happen?\n\n4\n00:00:09,000 --> 00:00:13,000\nIt'll work just fine, perhaps with a slightly larger error.\n\n5\n00:00:13,000 --> 00:00:15,000\nIt ignores robot measurements.\n\n6\n00:00:15,000 --> 00:00:17,000\nIt ignores robot motion.\n\n7\n00:00:17,000 --> 00:00:19,000\nIt likely fails.\n\n8\n00:00:19,000 --> 00:00:21,000\nOr none of the above.\n\n9\n00:00:21,000 --> 00:00:28,000\nYou can check multiple boxes on the left.\n\n", "id": 235002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQY4bMODA", "path": "Course/cs373/CourseRev/feb2012/Unit/224001/Nugget/236001", "type": "Nugget", "id": 236001}, {"nuggetType": "lecture", "name": "Single Particle Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQw", "media": {"dotsub_id": "554370ba-f1ec-4153-b68b-f8c371f3f31a", "name": "cs373_hw3_02_s_Single-Particle", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLHDDgw", "youtube_id": "OBElUEhrySY", "youtube_state": "done", "path": "Course/cs373/Media/238001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nThe correct answer are it ignores measurements and will likely fail.\n\n2\n00:00:05,000 --> 00:00:09,000\nIt ignores measurements, because the measurement sets the weighting factor \n\n3\n00:00:09,000 --> 00:00:12,000\nin this resampling process, but with only 1 particle \n\n4\n00:00:12,000 --> 00:00:15,000\nthe same particle will be resampled no matter what.\n\n5\n00:00:15,000 --> 00:00:19,000\nSo the chances of the particle to be resampled is 1.\n\n6\n00:00:19,000 --> 00:00:22,000\nTherefore, it's independent of the actual measurement.\n\n7\n00:00:22,000 --> 00:00:25,000\nThe robot truly ignores the measurements.\n\n8\n00:00:25,000 --> 00:00:30,000\nBecause it ignores the measurements, it'll likely fail, so works fine is incorrect.\n\n9\n00:00:30,000 --> 00:00:33,000\nFor ignoring robot motion--that's not the case.\n\n10\n00:00:33,000 --> 00:00:36,000\nEven a single particle can be sampled forward.\n\n11\n00:00:36,000 --> 00:00:40,000\nSo these are the two correct answers over here.\n\n", "id": 238001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQYmcsODA", "path": "Course/cs373/CourseRev/feb2012/Unit/224001/Nugget/239001", "type": "Nugget", "id": 239001}, {"nuggetType": "lecture", "name": "Sensing Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQw", "media": {"dotsub_id": "1de433d2-cf9d-44ff-8929-1496bba63d75", "name": "cs373_hw3_04_s_Sensing", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGKmZDww", "youtube_id": "fiuQ4zm10NQ", "youtube_state": "done", "path": "Course/cs373/Media/249001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nHere's my implementation of sense, the measurement model, \n\n2\n00:00:03,000 --> 00:00:06,000\nas a function in the class robot.\n\n3\n00:00:06,000 --> 00:00:11,000\nI produce a vector called Z, which I return in the end, which has 4 bearings.\n\n4\n00:00:11,000 --> 00:00:14,000\nThen I go through all my landmarks, and you already have the landmarks in your code--\n\n5\n00:00:14,000 --> 00:00:18,000\n--there's 4 of them--and I use the atan2 function, \n\n6\n00:00:18,000 --> 00:00:22,000\nwhich is the mathematical function for computing the angle.\n\n7\n00:00:22,000 --> 00:00:27,000\nIt takes the y value as the first argument, and the x value as the second argument.\n\n8\n00:00:27,000 --> 00:00:32,000\nThis is the local angle of a landmark relative to the robot coordinate.\n\n9\n00:00:32,000 --> 00:00:35,000\nBecause the robot has a global heading direction,\n\n10\n00:00:35,000 --> 00:00:38,000\n I need to subtract this to get my bearing value.\n\n11\n00:00:38,000 --> 00:00:42,000\nIf I were to add noise, which is a flag over here, \n\n12\n00:00:42,000 --> 00:00:47,000\nthen I just produce a random noise adding variable.\n\n13\n00:00:47,000 --> 00:00:49,000\nThis is something you shouldn't have implemented,\n\n14\n00:00:49,000 --> 00:00:52,000\nbut you need later as you implement the noise.\n\n15\n00:00:52,000 --> 00:00:56,000\nOf course, I make sure that the bearing is normalized between 0 and 2\u03c0.\n\n16\n00:00:56,000 --> 00:01:00,000\nI append them to the list and return it.\n\n", "id": 249001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQYgtMODA", "path": "Course/cs373/CourseRev/feb2012/Unit/224001/Nugget/240002", "type": "Nugget", "id": 240002}, {"nuggetType": "lecture", "name": "Circular Motion", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQw", "media": {"dotsub_id": "f83f5e61-0d88-45e9-9dc5-36321b128380", "name": "cs373_hw3_03_p_Circular-Motion", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOnaDgw", "youtube_id": "5lWj1FMkq5I", "youtube_state": "done", "path": "Course/cs373/Media/241001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nHere's our programming assignment.\n\n2\n00:00:02,000 --> 00:00:07,000\nIn class you already programmed a particle filter for a really simplistic robot\n\n3\n00:00:07,000 --> 00:00:14,000\nthat was able to measure ranges to landmarks and moved pretty much like a trashbin.\n\n4\n00:00:14,000 --> 00:00:17,000\nNow I'd like replace it with a more interesting robot that's more realistic.\n\n5\n00:00:17,000 --> 00:00:22,000\nIn particular, I'd like you to use a car. Here's a car.\n\n6\n00:00:22,000 --> 00:00:29,000\nA car tends to have fixed tires and two steerable in the front.\n\n7\n00:00:29,000 --> 00:00:33,000\nSuppose the location of our car in a coordinate system \n\n8\n00:00:33,000 --> 00:00:36,000\nis given by its x-coordinate and its y-coordinate--\n\n9\n00:00:36,000 --> 00:00:40,000\nI'm picking the halfway point on the rear axle as the reference point--\n\n10\n00:00:40,000 --> 00:00:44,000\nand by its heading dire theta.\n\n11\n00:00:44,000 --> 00:00:47,000\nThe state will be x, y, and the orientation theta.\n\n12\n00:00:47,000 --> 00:00:52,000\nThen this car also has a steering angle that is called the alpha.\n\n13\n00:00:52,000 --> 00:00:57,000\nThe question is how is the state effected by driving a certain distance d\n\n14\n00:00:57,000 --> 00:01:02,000\nwith a fixed steering angle, assuming the initial state is x, y, and theta.\n\n15\n00:01:02,000 --> 00:01:05,000\nIt turns out to answer this, I also need to know the length of the vehicle,\n\n16\n00:01:05,000 --> 00:01:12,000\nwhich I will just call L for length that is a constant throughout out consideration.\n\n17\n00:01:12,000 --> 00:01:14,000\nThis is usually called a bicycle model.\n\n18\n00:01:14,000 --> 00:01:18,000\nObviously, it suffices to look at one pair of tires because the other one--\n\n19\n00:01:18,000 --> 00:01:23,000\nat least in approximation--runs pretty much parallel.\n\n20\n00:01:23,000 --> 00:01:28,000\nIf we look at the robot locally where we have a steering angle, alpha,\n\n21\n00:01:28,000 --> 00:01:33,000\nrobot length L, and we're driving the rear tire forward by distance D,\n\n22\n00:01:33,000 --> 00:01:39,000\nthen the robot will turn to the left, and it's turning angle, beta, is proportional\n\n23\n00:01:39,000 --> 00:01:45,000\n to the distance that the rear tire moves forward divided by the length of the vehicle\n\n24\n00:01:45,000 --> 00:01:48,000\ntimes the tangent of the steering angle.\n\n25\n00:01:48,000 --> 00:01:53,000\nLet's now compute the changes of x, y, and theta in the local coordinate system.\n\n26\n00:01:53,000 --> 00:01:56,000\nRealize the turning radius R of this robot \n\n27\n00:01:56,000 --> 00:02:00,000\nis simply the distance that we drive forward divided by beta.\n\n28\n00:02:00,000 --> 00:02:03,000\nIt's relatively simple math, which I don't want to explain in detail.\n\n29\n00:02:03,000 --> 00:02:09,000\nThis means that the robot is turning around a point over here at cx and cy.\n\n30\n00:02:09,000 --> 00:02:12,000\nAfter the turn, the vehicle is located somewhere over here.\n\n31\n00:02:12,000 --> 00:02:15,000\nIn global coordinates, here is the way we describe this.\n\n32\n00:02:15,000 --> 00:02:19,000\nCx is the x coordinate of the robot x minus--now we go to the left--\n\n33\n00:02:19,000 --> 00:02:25,000\nthe sine of the robot orientation before motion times radius R.\n\n34\n00:02:25,000 --> 00:02:33,000\nSimilarly, cy is this expression over here--y plus cosine of the orientation times R.\n\n35\n00:02:33,000 --> 00:02:38,000\nThen after motion, we can go back from cx to cy to a new state over here\n\n36\n00:02:38,000 --> 00:02:42,000\nsimply by adding in the turning radius beta.\n\n37\n00:02:42,000 --> 00:02:49,000\nThat is, our new x is cx plus sine of theta plus beta times radius.\n\n38\n00:02:49,000 --> 00:02:54,000\nNotice how this parallels this guy over here, except for two changes.\n\n39\n00:02:54,000 --> 00:02:56,000\nWhat we previously subtracted we're now adding,\n\n40\n00:02:56,000 --> 00:03:01,000\nand we're adding beta to the argument of the sine.\n\n41\n00:03:01,000 --> 00:03:07,000\nThe same with y, and the orientation is just increased by beta--modulo 2\u03c0.\n\n42\n00:03:07,000 --> 00:03:10,000\nThis all works if the robot is actually turning.\n\n43\n00:03:10,000 --> 00:03:16,000\nIf the robot were to go straight, then R would become infinity by this division over here.\n\n44\n00:03:16,000 --> 00:03:25,000\nFor small betas--that's smaller than 0.001--we can approximate this all as straight motion.\n\n45\n00:03:25,000 --> 00:03:32,000\nOur new x is the old x times our driven distance pointed in the cosine of the heading direction.\n\n46\n00:03:32,000 --> 00:03:37,000\nSimilarly for y we go in sine of heading direction, and the heading direction stays the same.\n\n47\n00:03:37,000 --> 00:03:41,000\nYou could add beta, which is basically zero, to be slight more precise\n\n48\n00:03:41,000 --> 00:03:44,000\nor you could just use theta. It doesn't really matter.\n\n49\n00:03:44,000 --> 00:03:47,000\nIn this programming assignment, I'd like you to implement this piece \n\n50\n00:03:47,000 --> 00:03:50,000\nof math over here in our particle filter.\n\n51\n00:03:50,000 --> 00:03:57,000\nTo make sure we increment it correctly, I will give you some example data that you can check.\n\n52\n00:03:57,000 --> 00:04:00,000\nIn our first part, I've prepared a lot of software for you,\n\n53\n00:04:00,000 --> 00:04:04,000\nbasically copying the old particle filter software over, \n\n54\n00:04:04,000 --> 00:04:08,000\nand removing the motion and the measurement model for now.\n\n55\n00:04:08,000 --> 00:04:10,000\nIn this I just want you to practice the motion model.\n\n56\n00:04:10,000 --> 00:04:13,000\nWe assume a length of the road of 20.\n\n57\n00:04:13,000 --> 00:04:15,000\nWe initialize the road with this length parameter, \n\n58\n00:04:15,000 --> 00:04:19,000\nand for this first iteration we assume no steering noise and no distance noise.\n\n59\n00:04:19,000 --> 00:04:22,000\nI set the robot to (0.0, 0.0, 0.0) in the beginning, \n\n60\n00:04:22,000 --> 00:04:26,000\nand then I cache away a number of motions, \n\n61\n00:04:26,000 --> 00:04:32,000\nThe way to read those is this robot is moving by 10 total with the steering angle of zero.\n\n62\n00:04:32,000 --> 00:04:37,000\nThen it moves another 10 with a steering angle of pi divided by 6.\n\n63\n00:04:37,000 --> 00:04:41,000\nThen it moves 20, again with a steering angle of zero.\n\n64\n00:04:41,000 --> 00:04:44,000\nA pi over 6 is a left steering,\n\n65\n00:04:44,000 --> 00:04:47,000\nso the robot should change its coordinates in the beginning just in the x direction, \n\n66\n00:04:47,000 --> 00:04:50,000\nbecause it's facing an x direction over here.\n\n67\n00:04:50,000 --> 00:04:54,000\nThen turn left a little bit, go forward, and go straight again.\n\n68\n00:04:54,000 --> 00:04:58,000\nScrolling down a little bit, I also give you the code to run the robot.\n\n69\n00:04:58,000 --> 00:05:01,000\nWe've created the robot here. You print the initial coordinate.\n\n70\n00:05:01,000 --> 00:05:05,000\nThen for each of the motions in this list over here,\n\n71\n00:05:05,000 --> 00:05:09,000\nwe apply the myrobot equals myrobot.move command,\n\n72\n00:05:09,000 --> 00:05:11,000\nand we print out the successive command.\n\n73\n00:05:11,000 --> 00:05:15,000\nIf you get this right, these are the numbers I would like to see.\n\n74\n00:05:15,000 --> 00:05:18,000\nInitially, the robot position is 0, 0, 0, 0. That's just the one over here.\n\n75\n00:05:18,000 --> 00:05:22,000\nIt's out first print command. It then moves forward in the x direction by 10.\n\n76\n00:05:22,000 --> 00:05:26,000\nThe orientation stays 0 and so does y, because there's no steering.\n\n77\n00:05:26,000 --> 00:05:32,000\nNow we steer. This affects x. It doesn't quite move 10. It only moves 9.86. \n\n78\n00:05:32,000 --> 00:05:39,000\nIn the y direction it only moves 1.433, and its new orientation is 0.2886.\n\n79\n00:05:39,000 --> 00:05:44,000\nThen we move straight again, and now the x coordinate becomes 0.3903,\n\n80\n00:05:44,000 --> 00:05:49,000\ny coordinate becomes 7.12, orientation 0.28.\n\n81\n00:05:49,000 --> 00:05:53,000\nYour code should output exactly the same values also over here.\n\n82\n00:05:53,000 --> 00:05:58,000\nJust to give you a second test--this is a sequence of 10 motions\n\n83\n00:05:58,000 --> 00:06:06,000\nwhere the robot moves 10 forward and always turns right but an angle of 0.2 in radians.\n\n84\n00:06:06,000 --> 00:06:09,000\nWe look at the outputs we get the following array.\n\n85\n00:06:09,000 --> 00:06:13,000\nYou can see that the orientation starting at zero, which is the same as 2\u03c0,\n\n86\n00:06:13,000 --> 00:06:17,000\ndecreases all the way to 5.26, \n\n87\n00:06:17,000 --> 00:06:20,000\nand you can also see that the robot starts running in a circle\n\n88\n00:06:20,000 --> 00:06:25,000\nwhereas initially we add almost 10 to the x direction and almost nothing in the y direction.\n\n89\n00:06:25,000 --> 00:06:28,000\nAs you come down here, we subtract quite a bit in the y direction,\n\n90\n00:06:28,000 --> 00:06:31,000\nbecause now the robot is going in a circle.\n\n91\n00:06:31,000 --> 00:06:34,000\nYou should look at these numbers over here and see if your code matches\n\n92\n00:06:34,000 --> 00:06:38,000\n these exact numbers that my code outputs.\n\n", "id": 241001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQY0eIODA", "path": "Course/cs373/CourseRev/feb2012/Unit/224001/Nugget/242001", "type": "Nugget", "id": 242001}, {"nuggetType": "program", "name": "Circular Motion", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQYofIODA", "path": "Course/cs373/CourseRev/feb2012/Unit/224001/Nugget/244001", "suppliedCode": "\n# -----------------\n# USER INSTRUCTIONS\n#\n# Write a function in the class robot called move()\n#\n# that takes self and a motion vector (this\n# motion vector contains a steering* angle and a\n# distance) as input and returns an instance of the class\n# robot with the appropriate x, y, and orientation\n# for the given motion.\n#\n# *steering is defined in the video\n# which accompanies this problem.\n#\n# For now, please do NOT add noise to your move function.\n#\n# Please do not modify anything except where indicated\n# below.\n#\n# There are test cases which you are free to use at the\n# bottom. If you uncomment them for testing, make sure you\n# re-comment them before you submit.\n\nfrom math import *\nimport random\n# --------\n# \n# the \"world\" has 4 landmarks.\n# the robot's initial coordinates are somewhere in the square\n# represented by the landmarks.\n#\n# NOTE: Landmark coordinates are given in (y, x) form and NOT\n# in the traditional (x, y) format!\n\nlandmarks  = [[0.0, 100.0], [0.0, 0.0], [100.0, 0.0], [100.0, 100.0]] # position of 4 landmarks\nworld_size = 100.0 # world is NOT cyclic. Robot is allowed to travel \"out of bounds\"\nmax_steering_angle = pi/4 # You don't need to use this value, but it is good to keep in mind the limitations of a real car.\n\n# ------------------------------------------------\n# \n# this is the robot class\n#\n\nclass robot:\n\n    # --------\n\n    # init: \n    #\tcreates robot and initializes location/orientation \n    #\n\n    def __init__(self, length = 10.0):\n        self.x = random.random() * world_size # initial x position\n        self.y = random.random() * world_size # initial y position\n        self.orientation = random.random() * 2.0 * pi # initial orientation\n        self.length = length # length of robot\n        self.bearing_noise  = 0.0 # initialize bearing noise to zero\n        self.steering_noise = 0.0 # initialize steering noise to zero\n        self.distance_noise = 0.0 # initialize distance noise to zero\n    \n    def __repr__(self):\n        return '[x=%.6s y=%.6s orient=%.6s]' % (str(self.x), str(self.y), str(self.orientation))\n    # --------\n    # set: \n    #\tsets a robot coordinate\n    #\n\n    def set(self, new_x, new_y, new_orientation):\n\n        if new_orientation < 0 or new_orientation >= 2 * pi:\n            raise ValueError, 'Orientation must be in [0..2pi]'\n        self.x = float(new_x)\n        self.y = float(new_y)\n        self.orientation = float(new_orientation)\n\n\n    # --------\n    # set_noise: \n    #\tsets the noise parameters\n    #\n\n    def set_noise(self, new_b_noise, new_s_noise, new_d_noise):\n        # makes it possible to change the noise parameters\n        # this is often useful in particle filters\n        self.bearing_noise  = float(new_b_noise)\n        self.steering_noise = float(new_s_noise)\n        self.distance_noise = float(new_d_noise)\n    \n    ############# ONLY ADD/MODIFY CODE BELOW HERE ###################\n\n    # --------\n    # move:\n    #   move along a section of a circular path according to motion\n    #\n    \n    def move(self, motion): # Do not change the name of this function\n\n        # ADD CODE HERE\n        \n        return result # make sure your move function returns an instance\n                      # of the robot class with the correct coordinates.\n                      \n    ############## ONLY ADD/MODIFY CODE ABOVE HERE ####################\n        \n\n## IMPORTANT: You may uncomment the test cases below to test your code.\n## But when you submit this code, your test cases MUST be commented\n## out. Our testing program provides its own code for testing your\n## move function with randomized motion data.\n\n## --------\n## TEST CASE:\n## \n## 1) The following code should print:\n##       Robot:     [x=0.0 y=0.0 orient=0.0]\n##       Robot:     [x=10.0 y=0.0 orient=0.0]\n##       Robot:     [x=19.861 y=1.4333 orient=0.2886]\n##       Robot:     [x=39.034 y=7.1270 orient=0.2886]\n##\n##\n##length = 20.\n##bearing_noise  = 0.0\n##steering_noise = 0.0\n##distance_noise = 0.0\n##\n##myrobot = robot(length)\n##myrobot.set(0.0, 0.0, 0.0)\n##myrobot.set_noise(bearing_noise, steering_noise, distance_noise)\n##\n##motions = [[0.0, 10.0], [pi / 6.0, 10], [0.0, 20.0]]\n##\n##T = len(motions)\n##\n##print 'Robot:    ', myrobot\n##for t in range(T):\n##    myrobot = myrobot.move(motions[t])\n##    print 'Robot:    ', myrobot\n##\n##\n\n## IMPORTANT: You may uncomment the test cases below to test your code.\n## But when you submit this code, your test cases MUST be commented\n## out. Our testing program provides its own code for testing your\n## move function with randomized motion data.\n\n    \n## 2) The following code should print:\n##      Robot:     [x=0.0 y=0.0 orient=0.0]\n##      Robot:     [x=9.9828 y=0.5063 orient=0.1013]\n##      Robot:     [x=19.863 y=2.0201 orient=0.2027]\n##      Robot:     [x=29.539 y=4.5259 orient=0.3040]\n##      Robot:     [x=38.913 y=7.9979 orient=0.4054]\n##      Robot:     [x=47.887 y=12.400 orient=0.5067]\n##      Robot:     [x=56.369 y=17.688 orient=0.6081]\n##      Robot:     [x=64.273 y=23.807 orient=0.7094]\n##      Robot:     [x=71.517 y=30.695 orient=0.8108]\n##      Robot:     [x=78.027 y=38.280 orient=0.9121]\n##      Robot:     [x=83.736 y=46.485 orient=1.0135]\n##\n##\n##length = 20.\n##bearing_noise  = 0.0\n##steering_noise = 0.0\n##distance_noise = 0.0\n##\n##myrobot = robot(length)\n##myrobot.set(0.0, 0.0, 0.0)\n##myrobot.set_noise(bearing_noise, steering_noise, distance_noise)\n##\n##motions = [[0.2, 10.] for row in range(10)]\n##\n##T = len(motions)\n##\n##print 'Robot:    ', myrobot\n##for t in range(T):\n##    myrobot = myrobot.move(motions[t])\n##    print 'Robot:    ', myrobot\n\n## IMPORTANT: You may uncomment the test cases below to test your code.\n## But when you submit this code, your test cases MUST be commented\n## out. Our testing program provides its own code for testing your\n## move function with randomized motion data.\n\n\n", "type": "Nugget", "id": 244001}, {"nuggetType": "lecture", "name": "Circular Motion Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQw", "media": {"dotsub_id": "3135a415-bfc6-4fce-a4a0-7137b5fde860", "name": "cs373_hw3_03_s_Circular-Motion", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIn6Dgw", "youtube_id": "tP3FKUG1xxM", "youtube_state": "done", "path": "Course/cs373/Media/245001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nHere's a function \"move\" as a class function of the class robot\n\n2\n00:00:03,000 --> 00:00:07,000\nthat implements where I get my motion vector,\n\n3\n00:00:07,000 --> 00:00:11,000\nand the motion vector is defined to be steering first, then distance.\n\n4\n00:00:11,000 --> 00:00:14,000\nI have a few error checks here to make sure the steering doesn't exceed \n\n5\n00:00:14,000 --> 00:00:17,000\nthe max steering angle, and the same is true for distance.\n\n6\n00:00:17,000 --> 00:00:19,000\nI want it to be non-negative.\n\n7\n00:00:19,000 --> 00:00:21,000\nAs I go down, I now implement the motion model.\n\n8\n00:00:21,000 --> 00:00:23,000\nLet's just look a little bit more.\n\n9\n00:00:23,000 --> 00:00:27,000\nI make a new robot copy as in my sample code in class.\n\n10\n00:00:27,000 --> 00:00:32,000\nI copy all the narrowing parameters--length, bearing noise, steering noise, and distance noise.\n\n11\n00:00:32,000 --> 00:00:34,000\nNothing surprising here.\n\n12\n00:00:34,000 --> 00:00:39,000\nHere I'll apply the noise, which you don't need it for the first implementation, \n\n13\n00:00:39,000 --> 00:00:42,000\nbut later on as we go on, you need it to actually add noise.\n\n14\n00:00:42,000 --> 00:00:48,000\nI just add Gaussian noise with the corresponding steering noise and distance noise parameters.\n\n15\n00:00:48,000 --> 00:00:51,000\nIf I set the mean of the Gaussian to be the steering command \n\n16\n00:00:51,000 --> 00:00:54,000\nand the distance command then this adds noise.\n\n17\n00:00:54,000 --> 00:00:57,000\nI could have equally written steering plus random.gauss, \n\n18\n00:00:57,000 --> 00:01:00,000\nzero, comma, and then the noise parameter.\n\n19\n00:01:00,000 --> 00:01:03,000\nAs I go down further, here is my execution of motion.\n\n20\n00:01:03,000 --> 00:01:06,000\nMy turning angle, I called \"turn.\"\n\n21\n00:01:06,000 --> 00:01:09,000\nThis is the tangents of the noisy steering \n\n22\n00:01:09,000 --> 00:01:12,000\ntimes the distance moved divided by the robot length.\n\n23\n00:01:12,000 --> 00:01:19,000\nAs in my explanation of this question, I'm going to branch and see if my turn is significant enough.\n\n24\n00:01:19,000 --> 00:01:23,000\nIt's smaller than tolerance, and tolerance was set about to 0.001.\n\n25\n00:01:23,000 --> 00:01:25,000\nThen I just model a straight motion. \n\n26\n00:01:25,000 --> 00:01:29,000\nI get my new robot coordinates by the old robot coordinates,\n\n27\n00:01:29,000 --> 00:01:35,000\nmoving in the orientation of the robot--cosine for x and sine for y.\n\n28\n00:01:35,000 --> 00:01:40,000\nI increase my orientation by turn, which is likely essentially zero.\n\n29\n00:01:40,000 --> 00:01:43,000\nIn case I go beyond 0 or 2\u03c0,\n\n30\n00:01:43,000 --> 00:01:49,000\nI do the modal operation here just to make sure my angles are nicely between 0 and 2\u03c0.\n\n31\n00:01:49,000 --> 00:01:52,000\nThe more interesting case--as we go down \n\n32\n00:01:52,000 --> 00:01:57,000\nin this program you can see that I now calculate the radius \n\n33\n00:01:57,000 --> 00:02:01,000\nas the noise distance divided by turning.\n\n34\n00:02:01,000 --> 00:02:05,000\nThen I find the center of the circle around which I'm turning, \n\n35\n00:02:05,000 --> 00:02:07,000\nusing the exact same math I just gave you. \n\n36\n00:02:07,000 --> 00:02:12,000\nI now first change the orientation to be the new orientation \n\n37\n00:02:12,000 --> 00:02:16,000\nby adding turn to the old orientation, modal, or 2\u03c0.\n\n38\n00:02:16,000 --> 00:02:20,000\nThen I plug the new orientation into the sine and cosine argument, \n\n39\n00:02:20,000 --> 00:02:25,000\nmultiply by radius, add to the center of the circle to get my result.\n\n40\n00:02:25,000 --> 00:02:30,000\nThis routine over here gives me exactly what I wanted.\n\n", "id": 245001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQYivoODA", "path": "Course/cs373/CourseRev/feb2012/Unit/224001/Nugget/245002", "type": "Nugget", "id": 245002}, {"nuggetType": "lecture", "name": "Final", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQw", "media": {"dotsub_id": "9a54f292-fdc3-41f4-976f-6e89afdebab6", "name": "cs373_hw3_05_p_Final", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMKRDww", "youtube_id": "NYKrkSGgsCE", "youtube_state": "done", "path": "Course/cs373/Media/248002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nNow, in our final programming exercise, \n\n2\n00:00:03,000 --> 00:00:07,000\nI want you to put everything together and build a particle filter.\n\n3\n00:00:07,000 --> 00:00:10,000\nI'm supplying you with code that has as gaps \n\n4\n00:00:10,000 --> 00:00:14,000\npretty much the 2 functions you just programmed--move and sense,\n\n5\n00:00:14,000 --> 00:00:17,000\nand some additional code that I copied from class--\n\n6\n00:00:17,000 --> 00:00:20,000\nthe particle filter code that you're familiar with and also code \n\n7\n00:00:20,000 --> 00:00:24,000\nthat helps you test your routines so you can make sure they're correct.\n\n8\n00:00:24,000 --> 00:00:28,000\nThe key new thing you have to do is you have to work on the noise.\n\n9\n00:00:28,000 --> 00:00:31,000\nThere is now bearing noise and steering noise and distance noise.\n\n10\n00:00:31,000 --> 00:00:34,000\nThe code that you wrote didn't have any of those.\n\n11\n00:00:34,000 --> 00:00:37,000\nI want you now to modify your procedures to accommodate this noise--\n\n12\n00:00:37,000 --> 00:00:40,000\nsteering noise, distance noise, and bearing noise--\n\n13\n00:00:40,000 --> 00:00:43,000\nand all of it should be Gaussian.\n\n14\n00:00:43,000 --> 00:00:46,000\nLet's go all the way to the end. There are two test cases.\n\n15\n00:00:46,000 --> 00:00:49,000\nThe first test case, which are uncommented so we can run it.\n\n16\n00:00:49,000 --> 00:00:52,000\nWhat this is is it creates a sequence of robot motions.\n\n17\n00:00:52,000 --> 00:00:55,000\nAt each of these time steps the robot turns a little bit and moves forward.\n\n18\n00:00:55,000 --> 00:01:02,000\nIt also has 8 measurements, which are the bearings to the those 4 different landmarks.\n\n19\n00:01:02,000 --> 00:01:04,000\nIf I go up a little bit in the code, \n\n20\n00:01:04,000 --> 00:01:10,000\nthen you'll find that the ground true final position was 93, 75, and 5.2.\n\n21\n00:01:10,000 --> 00:01:15,000\nWhen I run it, it runs the routine particle filter with those motions \n\n22\n00:01:15,000 --> 00:01:17,000\nand those measurements as an input.\n\n23\n00:01:17,000 --> 00:01:23,000\nIt produces an estimate, which is 94, 71, and 5.2,\n\n24\n00:01:23,000 --> 00:01:26,000\nwhich isn't exactly the same as up here, but it's close.\n\n25\n00:01:26,000 --> 00:01:28,000\nThis is a particle filter working.\n\n26\n00:01:28,000 --> 00:01:31,000\nI'm supplying quite a few functions for you. You should look around.\n\n27\n00:01:31,000 --> 00:01:33,000\nOne is called particle filters. \n\n28\n00:01:33,000 --> 00:01:36,000\nThat's exactly the same code we used in class and constructed together.\n\n29\n00:01:36,000 --> 00:01:42,000\n I just copied it over, so if you look through this you'll find, hopefully, no surprise here.\n\n30\n00:01:42,000 --> 00:01:46,000\nI'm also supplying you the measurement probability function, which is part of implementation.\n\n31\n00:01:46,000 --> 00:01:48,000\nLets just go there.\n\n32\n00:01:48,000 --> 00:01:51,000\nHere is the measurement probability function. There is something non-trivial here.\n\n33\n00:01:51,000 --> 00:01:54,000\nI compute the predicted measurements, \n\n34\n00:01:54,000 --> 00:01:58,000\nand then I compute a Gaussian that measures the distance between \n\n35\n00:01:58,000 --> 00:02:00,000\nthe measurements passed into the routine \n\n36\n00:02:00,000 --> 00:02:02,000\nand the predicted measurements computer over here.\n\n37\n00:02:02,000 --> 00:02:07,000\nThat's all happening down here. Here's my Gaussian function with the exponential.\n\n38\n00:02:07,000 --> 00:02:10,000\nThen I return my Gaussian error. There should be no surprise here.\n\n39\n00:02:10,000 --> 00:02:14,000\nWhat's important is a little modification to the sense function that we haven't seen before.\n\n40\n00:02:14,000 --> 00:02:19,000\nI can now give the sense function a parameter, and I give it the parameter 0.\n\n41\n00:02:19,000 --> 00:02:22,000\nIt switches off the noise model, so you will need the noise model \n\n42\n00:02:22,000 --> 00:02:25,000\nfor forward simulation of the robot, \n\n43\n00:02:25,000 --> 00:02:28,000\nbut you don't need it for computing the probability of the measurement.\n\n44\n00:02:28,000 --> 00:02:31,000\nIt augments your sense function to have a flag\n\n45\n00:02:31,000 --> 00:02:34,000\n that if it's set to 0 it switches off the noise modeling \n\n46\n00:02:34,000 --> 00:02:38,000\nand gets you the predicted best possible measurements.\n\n47\n00:02:38,000 --> 00:02:41,000\nWhat you have to do is you have to find the part in the code\n\n48\n00:02:41,000 --> 00:02:44,000\n that says \"only add/modify code below here.\"\n\n49\n00:02:44,000 --> 00:02:47,000\nYou have to copy over your move function and then work in,\n\n50\n00:02:47,000 --> 00:02:52,000\nas it says in the instructions, the steering noise and the distance noise \n\n51\n00:02:52,000 --> 00:02:55,000\nand it's Gaussian--I hope you know how to do this.\n\n52\n00:02:55,000 --> 00:02:58,000\nThen you also have to plug in the sense function, \n\n53\n00:02:58,000 --> 00:03:01,000\nand you also have to plug in bearing noise and make sure there's \n\n54\n00:03:01,000 --> 00:03:04,000\na flag that allows you to switch off the bearing noise. \n\n55\n00:03:04,000 --> 00:03:07,000\nIt should be an optional flag,\n\n56\n00:03:07,000 --> 00:03:10,000\nso it has to have a default value of the bearing noise being on.\n\n57\n00:03:10,000 --> 00:03:13,000\nOtherwise your code won't run.\n\n58\n00:03:13,000 --> 00:03:16,000\nHere is how we will test your code.\n\n59\n00:03:16,000 --> 00:03:19,000\nIf you go to test case number 2, \n\n60\n00:03:19,000 --> 00:03:22,000\nthen I wrote a few extra functions for you that allow you to test your particle filters \n\n61\n00:03:22,000 --> 00:03:25,000\non many, many instances just like the ones we were using \n\n62\n00:03:25,000 --> 00:03:28,000\nfor testing that are all randomly generated.\n\n63\n00:03:28,000 --> 00:03:31,000\nLet me just go through that code line-by-line.\n\n64\n00:03:31,000 --> 00:03:33,000\nOur test case will be 8 steps long.\n\n65\n00:03:33,000 --> 00:03:38,000\nThere is the same motions vector we had before of a slight turn on the circle.\n\n66\n00:03:38,000 --> 00:03:44,000\n\"Generate_ground_truth\" gives us a sequence of measurements and a robot position\n\n67\n00:03:44,000 --> 00:03:48,000\nthat we can split as follows, using a robot simulation.\n\n68\n00:03:48,000 --> 00:03:53,000\nThen you run your particle filter over here, and the function \n\n69\n00:03:53,000 --> 00:03:58,000\n\"check_output\" down here compares the final robot position, the ground truth position,\n\n70\n00:03:58,000 --> 00:04:01,000\nwith your particle filter position, estimated position, from here \n\n71\n00:04:01,000 --> 00:04:06,000\nand gives us a single flag whether this is all correct. Let me just do this.\n\n72\n00:04:06,000 --> 00:04:13,000\nWe generate a robot that finished with final location 20, -29, and this orientation over here.\n\n73\n00:04:13,000 --> 00:04:20,000\nThe particle filter came up with 22, -31, and 0.14, which is close to the original.\n\n74\n00:04:20,000 --> 00:04:24,000\nMy code check said \"True.\" Let me run it again.\n\n75\n00:04:24,000 --> 00:04:32,000\nDifferent values--still true. Run it again. Different values--still true.\n\n76\n00:04:32,000 --> 00:04:35,000\nNow, it could happen that the code check says \"False.\"\n\n77\n00:04:35,000 --> 00:04:38,000\nI just ran it 20 times, and it said true for me every single time.\n\n78\n00:04:38,000 --> 00:04:40,000\nBut I've seen it say \"False.\" \n\n79\n00:04:40,000 --> 00:04:43,000\nThe reason is it's a randomized algorithm. It's a particle filter.\n\n80\n00:04:43,000 --> 00:04:46,000\nIt might actually not have a particle at the right place.\n\n81\n00:04:46,000 --> 00:04:49,000\nSo when we test your routine, we're going to code our own code check, check_output.\n\n82\n00:04:49,000 --> 00:04:53,000\nWe have our own function for this, but we're going to run it multiple times.\n\n83\n00:04:53,000 --> 00:04:56,000\nIf you get it wrong once it's not a big deal.\n\n84\n00:04:56,000 --> 00:05:01,000\nIn summary, you will have comment out all the test cases again.\n\n85\n00:05:01,000 --> 00:05:05,000\nAll you have to do is supply the missing function. You can test the correctness yourself.\n\n86\n00:05:05,000 --> 00:05:08,000\nYou can basically grade yourself with this test case over here,\n\n87\n00:05:08,000 --> 00:05:10,000\nbut when you submit it, have those commented out, \n\n88\n00:05:10,000 --> 00:05:13,000\nbecause we have our own test software.\n\n89\n00:05:13,000 --> 00:05:16,000\nAll we're going to test is whether your particle filter gives us a good estimate \n\n90\n00:05:16,000 --> 00:05:20,000\nwhen we choose randomly the initial position \n\n91\n00:05:20,000 --> 00:05:24,000\nof the robots, measurements, motions, and so on.\n\n", "id": 248002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQYi_oODA", "path": "Course/cs373/CourseRev/feb2012/Unit/224001/Nugget/245003", "type": "Nugget", "id": 245003}, {"nuggetType": "program", "name": "Final", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQY8oEPDA", "path": "Course/cs373/CourseRev/feb2012/Unit/224001/Nugget/246002", "suppliedCode": "# --------------\n# USER INSTRUCTIONS\n#\n# Now you will put everything together.\n#\n# First make sure that your sense and move functions\n# work as expected for the test cases provided at the\n# bottom of the previous two programming assignments.\n# Once you are satisfied, copy your sense and move\n# definitions into the robot class on this page, BUT\n# now include noise.\n#\n# A good way to include noise in the sense step is to\n# add Gaussian noise, centered at zero with variance\n# of self.bearing_noise to each bearing. You can do this\n# with the command random.gauss(0, self.bearing_noise)\n#\n# In the move step, you should make sure that your\n# actual steering angle is chosen from a Gaussian\n# distribution of steering angles. This distribution\n# should be centered at the intended steering angle\n# with variance of self.steering_noise.\n#\n# Feel free to use the included set_noise function.\n#\n# Please do not modify anything except where indicated\n# below.\n\nfrom math import *\nimport random\n\n# --------\n# \n# some top level parameters\n#\n\nmax_steering_angle = pi / 4.0 # You do not need to use this value, but keep in mind the limitations of a real car.\nbearing_noise = 0.1 # Noise parameter: should be included in sense function.\nsteering_noise = 0.1 # Noise parameter: should be included in move function.\ndistance_noise = 5.0 # Noise parameter: should be included in move function.\n\ntolerance_xy = 15.0 # Tolerance for localization in the x and y directions.\ntolerance_orientation = 0.25 # Tolerance for orientation.\n\n\n# --------\n# \n# the \"world\" has 4 landmarks.\n# the robot's initial coordinates are somewhere in the square\n# represented by the landmarks.\n#\n# NOTE: Landmark coordinates are given in (y, x) form and NOT\n# in the traditional (x, y) format!\n\nlandmarks  = [[0.0, 100.0], [0.0, 0.0], [100.0, 0.0], [100.0, 100.0]] # position of 4 landmarks in (y, x) format.\nworld_size = 100.0 # world is NOT cyclic. Robot is allowed to travel \"out of bounds\"\n\n# ------------------------------------------------\n# \n# this is the robot class\n#\n\nclass robot:\n\n    # --------\n    # init: \n    #    creates robot and initializes location/orientation \n    #\n\n    def __init__(self, length = 20.0):\n        self.x = random.random() * world_size # initial x position\n        self.y = random.random() * world_size # initial y position\n        self.orientation = random.random() * 2.0 * pi # initial orientation\n        self.length = length # length of robot\n        self.bearing_noise  = 0.0 # initialize bearing noise to zero\n        self.steering_noise = 0.0 # initialize steering noise to zero\n        self.distance_noise = 0.0 # initialize distance noise to zero\n\n    # --------\n    # set: \n    #    sets a robot coordinate\n    #\n\n    def set(self, new_x, new_y, new_orientation):\n\n        if new_orientation < 0 or new_orientation >= 2 * pi:\n            raise ValueError, 'Orientation must be in [0..2pi]'\n        self.x = float(new_x)\n        self.y = float(new_y)\n        self.orientation = float(new_orientation)\n\n    # --------\n    # set_noise: \n    #    sets the noise parameters\n    #\n    def set_noise(self, new_b_noise, new_s_noise, new_d_noise):\n        # makes it possible to change the noise parameters\n        # this is often useful in particle filters\n        self.bearing_noise  = float(new_b_noise)\n        self.steering_noise = float(new_s_noise)\n        self.distance_noise = float(new_d_noise)\n\n    # --------\n    # measurement_prob\n    #    computes the probability of a measurement\n    #  \n\n    def measurement_prob(self, measurements):\n\n        # calculate the correct measurement\n        predicted_measurements = self.sense(0) # Our sense function took 0 as an argument to switch off noise.\n\n\n        # compute errors\n        error = 1.0\n        for i in range(len(measurements)):\n            error_bearing = abs(measurements[i] - predicted_measurements[i])\n            error_bearing = (error_bearing + pi) % (2.0 * pi) - pi # truncate\n            \n\n            # update Gaussian\n            error *= (exp(- (error_bearing ** 2) / (self.bearing_noise ** 2) / 2.0) /  \n                      sqrt(2.0 * pi * (self.bearing_noise ** 2)))\n\n        return error\n    \n    def __repr__(self): #allows us to print robot attributes.\n        return '[x=%.6s y=%.6s orient=%.6s]' % (str(self.x), str(self.y), \n                                                str(self.orientation))\n    \n    ############# ONLY ADD/MODIFY CODE BELOW HERE ###################\n       \n    # --------\n    # move: \n    #   \n    \n    # copy your code from the previous exercise\n    # and modify it so that it simulates motion noise\n    # according to the noise parameters\n    #           self.steering_noise\n    #           self.distance_noise\n\n    # --------\n    # sense: \n    #    \n\n    # copy your code from the previous exercise\n    # and modify it so that it simulates bearing noise\n    # according to\n    #           self.bearing_noise\n\n    ############## ONLY ADD/MODIFY CODE ABOVE HERE ####################\n\n# --------\n#\n# extract position from a particle set\n# \n\ndef get_position(p):\n    x = 0.0\n    y = 0.0\n    orientation = 0.0\n    for i in range(len(p)):\n        x += p[i].x\n        y += p[i].y\n        # orientation is tricky because it is cyclic. By normalizing\n        # around the first particle we are somewhat more robust to\n        # the 0=2pi problem\n        orientation += (((p[i].orientation - p[0].orientation + pi) % (2.0 * pi)) \n                        + p[0].orientation - pi)\n    return [x / len(p), y / len(p), orientation / len(p)]\n\n# --------\n#\n# The following code generates the measurements vector\n# You can use it to develop your solution.\n# \n\n\ndef generate_ground_truth(motions):\n\n    myrobot = robot()\n    myrobot.set_noise(bearing_noise, steering_noise, distance_noise)\n\n    Z = []\n    T = len(motions)\n\n    for t in range(T):\n        myrobot = myrobot.move(motions[t])\n        Z.append(myrobot.sense())\n    #print 'Robot:    ', myrobot\n    return [myrobot, Z]\n\n# --------\n#\n# The following code prints the measurements associated\n# with generate_ground_truth\n#\n\ndef print_measurements(Z):\n\n    T = len(Z)\n\n    print 'measurements = [[%.8s, %.8s, %.8s, %.8s],' % \\\n        (str(Z[0][0]), str(Z[0][1]), str(Z[0][2]), str(Z[0][3]))\n    for t in range(1,T-1):\n        print '                [%.8s, %.8s, %.8s, %.8s],' % \\\n            (str(Z[t][0]), str(Z[t][1]), str(Z[t][2]), str(Z[t][3]))\n    print '                [%.8s, %.8s, %.8s, %.8s]]' % \\\n        (str(Z[T-1][0]), str(Z[T-1][1]), str(Z[T-1][2]), str(Z[T-1][3]))\n\n# --------\n#\n# The following code checks to see if your particle filter\n# localizes the robot to within the desired tolerances\n# of the true position. The tolerances are defined at the top.\n#\n\ndef check_output(final_robot, estimated_position):\n\n    error_x = abs(final_robot.x - estimated_position[0])\n    error_y = abs(final_robot.y - estimated_position[1])\n    error_orientation = abs(final_robot.orientation - estimated_position[2])\n    error_orientation = (error_orientation + pi) % (2.0 * pi) - pi\n    correct = error_x < tolerance_xy and error_y < tolerance_xy \\\n              and error_orientation < tolerance_orientation\n    return correct\n\n\n\ndef particle_filter(motions, measurements, N=500): # I know it's tempting, but don't change N!\n    # --------\n    #\n    # Make particles\n    # \n\n    p = []\n    for i in range(N):\n        r = robot()\n        r.set_noise(bearing_noise, steering_noise, distance_noise)\n        p.append(r)\n\n    # --------\n    #\n    # Update particles\n    #     \n\n    for t in range(len(motions)):\n    \n        # motion update (prediction)\n        p2 = []\n        for i in range(N):\n            p2.append(p[i].move(motions[t]))\n        p = p2\n\n        # measurement update\n        w = []\n        for i in range(N):\n            w.append(p[i].measurement_prob(measurements[t]))\n\n        # resampling\n        p3 = []\n        index = int(random.random() * N)\n        beta = 0.0\n        mw = max(w)\n        for i in range(N):\n            beta += random.random() * 2.0 * mw\n            while beta > w[index]:\n                beta -= w[index]\n                index = (index + 1) % N\n            p3.append(p[index])\n        p = p3\n    \n    return get_position(p)\n\n## IMPORTANT: You may uncomment the test cases below to test your code.\n## But when you submit this code, your test cases MUST be commented\n## out.\n##\n## You can test whether your particle filter works using the\n## function check_output (see test case 2). We will be using a similar\n## function. Note: Even for a well-implemented particle filter this\n## function occasionally returns False. This is because a particle\n## filter is a randomized algorithm. We will be testing your code\n## multiple times. Make sure check_output returns True at least 80%\n## of the time.\n\n\n \n## --------\n## TEST CASES:\n## \n##1) Calling the particle_filter function with the following\n##    motions and measurements should return a [x,y,orientation]\n##    vector near [x=93.476 y=75.186 orient=5.2664], that is, the\n##    robot's true location.\n##\n##motions = [[2. * pi / 10, 20.] for row in range(8)]\n##measurements = [[4.746936, 3.859782, 3.045217, 2.045506],\n##                [3.510067, 2.916300, 2.146394, 1.598332],\n##                [2.972469, 2.407489, 1.588474, 1.611094],\n##                [1.906178, 1.193329, 0.619356, 0.807930],\n##                [1.352825, 0.662233, 0.144927, 0.799090],\n##                [0.856150, 0.214590, 5.651497, 1.062401],\n##                [0.194460, 5.660382, 4.761072, 2.471682],\n##                [5.717342, 4.736780, 3.909599, 2.342536]]\n##\n##print particle_filter(motions, measurements)\n\n## 2) You can generate your own test cases by generating\n##    measurements using the generate_ground_truth function.\n##    It will print the robot's last location when calling it.\n##\n##\n##number_of_iterations = 6\n##motions = [[2. * pi / 20, 12.] for row in range(number_of_iterations)]\n##\n##x = generate_ground_truth(motions)\n##final_robot = x[0]\n##measurements = x[1]\n##estimated_position = particle_filter(motions, measurements)\n##print_measurements(measurements)\n##print 'Ground truth:    ', final_robot\n##print 'Particle filter: ', estimated_position\n##print 'Code check:      ', check_output(final_robot, estimated_position)\n\n\n\n", "type": "Nugget", "id": 246002}, {"nuggetType": "program", "name": "Sensing", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQYwZEPDA", "path": "Course/cs373/CourseRev/feb2012/Unit/224001/Nugget/248001", "suppliedCode": "# --------------\n# USER INSTRUCTIONS\n#\n# Write a function in the class robot called sense()\n# that takes self as input\n# and returns a list, Z, of the four bearings* to the 4\n# different landmarks. you will have to use the robot's\n# x and y position, as well as its orientation, to\n# compute this.\n#\n# *bearing is defined in the video\n# which accompanies this problem.\n#\n# For now, please do NOT add noise to your sense function.\n#\n# Please do not modify anything except where indicated\n# below.\n#\n# There are test cases provided at the bottom which you are\n# free to use. If you uncomment any of these cases for testing\n# make sure that you re-comment it before you submit.\n\nfrom math import *\nimport random\n\n# --------\n# \n# the \"world\" has 4 landmarks.\n# the robot's initial coordinates are somewhere in the square\n# represented by the landmarks.\n#\n# NOTE: Landmark coordinates are given in (y, x) form and NOT\n# in the traditional (x, y) format!\n\nlandmarks  = [[0.0, 100.0], [0.0, 0.0], [100.0, 0.0], [100.0, 100.0]] # position of 4 landmarks in (y, x) form.\nworld_size = 100.0 # world is NOT cyclic. Robot is allowed to travel \"out of bounds\"\n\n# ------------------------------------------------\n# \n# this is the robot class\n#\n\nclass robot:\n\n    # --------\n    # init: \n    #\tcreates robot and initializes location/orientation\n    #\n\n    def __init__(self, length = 10.0):\n        self.x = random.random() * world_size # initial x position\n        self.y = random.random() * world_size # initial y position\n        self.orientation = random.random() * 2.0 * pi # initial orientation\n        self.length = length # length of robot\n        self.bearing_noise  = 0.0 # initialize bearing noise to zero\n        self.steering_noise = 0.0 # initialize steering noise to zero\n        self.distance_noise = 0.0 # initialize distance noise to zero\n\n\n\n    def __repr__(self):\n        return '[x=%.6s y=%.6s orient=%.6s]' % (str(self.x), str(self.y), \n                                                str(self.orientation))\n\n\n    # --------\n    # set: \n    #\tsets a robot coordinate\n    #\n\n    def set(self, new_x, new_y, new_orientation):\n        if new_orientation < 0 or new_orientation >= 2 * pi:\n            raise ValueError, 'Orientation must be in [0..2pi]'\n        self.x = float(new_x)\n        self.y = float(new_y)\n        self.orientation = float(new_orientation)\n\n    # --------\n    # set_noise: \n    #\tsets the noise parameters\n    #\n\n    def set_noise(self, new_b_noise, new_s_noise, new_d_noise):\n        # makes it possible to change the noise parameters\n        # this is often useful in particle filters\n        self.bearing_noise  = float(new_b_noise)\n        self.steering_noise = float(new_s_noise)\n        self.distance_noise = float(new_d_noise)\n\n    ############# ONLY ADD/MODIFY CODE BELOW HERE ###################\n\n    # --------\n    # sense:\n    #   obtains bearings from positions\n    #\n    \n    def sense(self): #do not change the name of this function\n        Z = []\n\n        # ENTER CODE HERE\n        # HINT: You will probably need to use the function atan2()\n\n        return Z #Leave this line here. Return vector Z of 4 bearings.\n    \n    ############## ONLY ADD/MODIFY CODE ABOVE HERE ####################\n\n\n## IMPORTANT: You may uncomment the test cases below to test your code.\n## But when you submit this code, your test cases MUST be commented\n## out. Our testing program provides its own code for testing your\n## sense function with randomized initial robot coordinates.\n    \n## --------\n## TEST CASES:\n\n\n\n##\n## 1) The following code should print the list [6.004885648174475, 3.7295952571373605, 1.9295669970654687, 0.8519663271732721]\n##\n##\n##length = 20.\n##bearing_noise  = 0.0\n##steering_noise = 0.0\n##distance_noise = 0.0\n##\n##myrobot = robot(length)\n##myrobot.set(30.0, 20.0, 0.0)\n##myrobot.set_noise(bearing_noise, steering_noise, distance_noise)\n##\n##print 'Robot:        ', myrobot\n##print 'Measurements: ', myrobot.sense()\n##\n\n## IMPORTANT: You may uncomment the test cases below to test your code.\n## But when you submit this code, your test cases MUST be commented\n## out. Our testing program provides its own code for testing your\n## sense function with randomized initial robot coordinates.\n    \n\n##\n## 2) The following code should print the list [5.376567117456516, 3.101276726419402, 1.3012484663475101, 0.22364779645531352]\n##\n##\n##length = 20.\n##bearing_noise  = 0.0\n##steering_noise = 0.0\n##distance_noise = 0.0\n##\n##myrobot = robot(length)\n##myrobot.set(30.0, 20.0, pi / 5.0)\n##myrobot.set_noise(bearing_noise, steering_noise, distance_noise)\n##\n##print 'Robot:        ', myrobot\n##print 'Measurements: ', myrobot.sense()\n##\n\n\n## IMPORTANT: You may uncomment the test cases below to test your code.\n## But when you submit this code, your test cases MUST be commented\n## out. Our testing program provides its own code for testing your\n## sense function with randomized initial robot coordinates.\n    \n", "type": "Nugget", "id": 248001}, {"nuggetType": "lecture", "name": "Final Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQw", "media": {"dotsub_id": "d9103f26-1f95-43de-bde6-935b22a6720c", "name": "cs373_hw3_05_s_Final", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOGwDww", "youtube_id": "zfEbYZ6hu-I", "youtube_state": "done", "path": "Course/cs373/Media/252001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nTo implement the full particle filter, the only thing that's really missing \n\n2\n00:00:03,000 --> 00:00:06,000\nis the measurement_prob function.\n\n3\n00:00:06,000 --> 00:00:10,000\nThat's a little bit more involved, because I have to really compare \n\n4\n00:00:10,000 --> 00:00:16,000\nwhat the exact measurement would be for any robot particle and what I sensed\n\n5\n00:00:16,000 --> 00:00:19,000\nand compute the probability correspondence between the correct \n\n6\n00:00:19,000 --> 00:00:22,000\nmeasurements and what I sensed over here.\n\n7\n00:00:22,000 --> 00:00:26,000\nTo do this, I calculate predicted measurements, using the sense function.\n\n8\n00:00:26,000 --> 00:00:29,000\nHere's comes a little flag that I defined. \n\n9\n00:00:29,000 --> 00:00:32,000\nIf I set it to zero then the sense function acts noise-free,\n\n10\n00:00:32,000 --> 00:00:36,000\nwhich is what I want to complete the measurement model.\n\n11\n00:00:36,000 --> 00:00:39,000\nBut even if we left this out, you're going to get a fine answer, in my opinion.\n\n12\n00:00:39,000 --> 00:00:41,000\nThat makes it a little bit more accurate.\n\n13\n00:00:41,000 --> 00:00:46,000\nThat allows me to compute the exact bearings of the landmarks for my particle.\n\n14\n00:00:46,000 --> 00:00:49,000\nThen I can compare these correct bearings called \"predicted_measurements\"\n\n15\n00:00:49,000 --> 00:00:51,000\nwith the ones I received. \n\n16\n00:00:51,000 --> 00:00:54,000\nI do this down here in the compute errors routine \n\n17\n00:00:54,000 --> 00:00:57,000\nwhere I go through each measurement,\n\n18\n00:00:57,000 --> 00:01:00,000\nand in 2 steps I calculate the error in bearing.\n\n19\n00:01:00,000 --> 00:01:04,000\nFirst, it's the absolute difference between my measurement \n\n20\n00:01:04,000 --> 00:01:07,000\nthat I observed minus the predicted measurement.\n\n21\n00:01:07,000 --> 00:01:11,000\nThere's an [ i ] at the end over here--let's see if you can see this. Right there.\n\n", "id": 252001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHWDQwLEgZOdWdnZXQYybgPDA", "path": "Course/cs373/CourseRev/feb2012/Unit/224001/Nugget/253001", "type": "Nugget", "id": 253001}]}, {"name": "Homework 3 Help", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKuWEAwLEgZOdWdnZXQYm8UQDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKuWEAwLEgZOdWdnZXQY8_4PDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKuWEAw", "path": "Course/cs373/CourseRev/feb2012/Unit/265003", "open": false, "id": 265003, "nuggets": [{"nuggetType": "lecture", "name": "Question 4 Position", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKuWEAw", "media": {"dotsub_id": "78a18f3b-a550-4a79-9551-bcce3626548b", "name": "cs373_hh3_01_l_Question-4-Position", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPyiEQw", "youtube_id": "2MWEYdZc26w", "youtube_state": "done", "path": "Course/cs373/Media/283004", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nFor homework 3.4, we also give you equations for the position of our robot.\n\n2\n00:00:05,000 --> 00:00:08,000\nLet's start at the center coordinates of our circle,\n\n3\n00:00:08,000 --> 00:00:12,000\nbecause our robot is undergoing circular motion, \n\n4\n00:00:12,000 --> 00:00:17,000\nand we can look at the (x, y) coordinates of our robot before the motion.\n\n5\n00:00:17,000 --> 00:00:25,000\nNow, the question is given these (x, y) coordinates and the robot's orientation angle theta,\n\n6\n00:00:25,000 --> 00:00:28,000\nhow can we find cx and cy.\n\n7\n00:00:28,000 --> 00:00:32,000\nWell, we just define a right triangle, and we see that this angle is theta.\n\n8\n00:00:32,000 --> 00:00:36,000\nWe can show this angle must also be theta.\n\n9\n00:00:36,000 --> 00:00:42,000\nThis length is R, so that means this horizontal distance is R times the sine of theta,\n\n10\n00:00:42,000 --> 00:00:45,000\n and the vertical distance is R times the cosine of theta.\n\n11\n00:00:45,000 --> 00:00:52,000\nThat means that cx is just equal to the initial x position minus this extra distance,\n\n12\n00:00:52,000 --> 00:01:00,000\nR times the sine of theta, and cy is equal to the initial y position plus this extra distance,\n\n13\n00:01:00,000 --> 00:01:03,000\nR times the cosine of theta.\n\n14\n00:01:03,000 --> 00:01:08,000\nOkay. Now let's let our car advance by some turning angle beta.\n\n15\n00:01:08,000 --> 00:01:12,000\nThis angle is beta, and here is our robot car.\n\n16\n00:01:12,000 --> 00:01:17,000\nLet's call these coordinates x-prime, y-prime.\n\n17\n00:01:17,000 --> 00:01:22,000\nHow can I get an equation for x-prime and y-prime.\n\n18\n00:01:22,000 --> 00:01:30,000\nWell, we can see that this total angle here is equal to beta plus theta,\n\n19\n00:01:30,000 --> 00:01:34,000\nand just as we defined a right triangle before, we can define another right triangle\n\n20\n00:01:34,000 --> 00:01:40,000\nwhere this line is going to be R times the sine of beta plus theta,\n\n21\n00:01:40,000 --> 00:01:43,000\nand this line will be R times the cosine of beta plus theta.\n\n22\n00:01:43,000 --> 00:01:47,000\nSo working from our center point,\n\n23\n00:01:47,000 --> 00:01:57,000\nx-prime is going to be equal to cx plus this extra distance, which is R times the sine of beta plus theta,\n\n24\n00:01:57,000 --> 00:02:05,000\nand the y-prime we can see will be cy minus the extra distance of R times the cosine of beta plus theta.\n\n25\n00:02:05,000 --> 00:02:11,000\nTheta prime, of course, will just be equal to our old theta plus the turning angle.\n\n26\n00:02:11,000 --> 00:02:19,000\nWe can't forget to make the mod 2\u03c0. Good work.\n\n", "id": 283004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKuWEAwLEgZOdWdnZXQY8_4PDA", "path": "Course/cs373/CourseRev/feb2012/Unit/265003/Nugget/262003", "type": "Nugget", "id": 262003}, {"nuggetType": "lecture", "name": "Question 4 Radius", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKuWEAw", "media": {"dotsub_id": "8dd252d2-3a92-4d6f-8359-2a64834a51a3", "name": "cs373_hh3_00_l_Question-4-Radius", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPyrDgw", "youtube_id": "49ZR_BdtFyc", "youtube_state": "done", "path": "Course/cs373/Media/235004", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nIn homework 3.4, you're asked to simulate circular robotic motion.\n\n2\n00:00:04,000 --> 00:00:08,000\nWe gave you some equations to help you along in your simulations.\n\n3\n00:00:08,000 --> 00:00:12,000\nI want to give you those formulas again and explain where some of them came from.\n\n4\n00:00:12,000 --> 00:00:17,000\nThe first equation I want to talk about is this one.\n\n5\n00:00:17,000 --> 00:00:23,000\nThe radius of curvature is equal to the length of the vehicle over the tangent of alpha\n\n6\n00:00:23,000 --> 00:00:27,000\nwhere alpha is our steering angle. Let me write that up here.\n\n7\n00:00:27,000 --> 00:00:30,000\nSo where does this equation come from.\n\n8\n00:00:30,000 --> 00:00:36,000\nTo derive it, the key realization is that the front and rear tire do not travel along the same circle.\n\n9\n00:00:36,000 --> 00:00:40,000\nHere's my rear tire, and here's my front tire.\n\n10\n00:00:40,000 --> 00:00:45,000\nThey are, of course, separated by a distance that we called \"L.\"\n\n11\n00:00:45,000 --> 00:00:49,000\nLet's draw the circles that these tires travel along.\n\n12\n00:00:49,000 --> 00:00:56,000\nWell, this rear tire is actually going to travel along a smaller inner circle\n\n13\n00:00:56,000 --> 00:00:59,000\nwhile this tire is going to travel along a larger outer circle.\n\n14\n00:00:59,000 --> 00:01:04,000\nSince we defined our radius of curvature as the distance from the back tire to the center,\n\n15\n00:01:04,000 --> 00:01:11,000\nLet's label this r, and we can see that the line connecting these tires defines an axis,\n\n16\n00:01:11,000 --> 00:01:16,000\nand here we have our steering angle, alpha, from here.\n\n17\n00:01:16,000 --> 00:01:18,000\nNow we can do a little bit of geometry.\n\n18\n00:01:18,000 --> 00:01:20,000\nLet's make a right triangle.\n\n19\n00:01:20,000 --> 00:01:26,000\nWell, if this angle here is alpha, then this much be a 90 degree angle,\n\n20\n00:01:26,000 --> 00:01:30,000\nbecause a radius intersecting with a tangent line always forms a right angle.\n\n21\n00:01:30,000 --> 00:01:37,000\nThat means that that this angle here must be equal to 90 degrees minus alpha,\n\n22\n00:01:37,000 --> 00:01:43,000\nwhich means this angle, since this is a right triangle must be alpha.\n\n23\n00:01:43,000 --> 00:01:47,000\nWell, we're almost there. The tangent of this angle is equal to the opposite side,\n\n24\n00:01:47,000 --> 00:01:51,000\nwhich is the length, over the adjacent side, which is the radius.\n\n25\n00:01:51,000 --> 00:01:56,000\nSo tangent of alpha is equal to L over r. \n\n26\n00:01:56,000 --> 00:02:00,000\nWe manipulate this equation a little bit, and we find that the radius of curvature\n\n27\n00:02:00,000 --> 00:02:05,000\n is equal to the length of the vehicle over the tangent of the steering angle.\n\n", "id": 235004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKuWEAwLEgZOdWdnZXQYm8UQDA", "path": "Course/cs373/CourseRev/feb2012/Unit/265003/Nugget/271003", "type": "Nugget", "id": 271003}]}, {"name": "Office Hours 3", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOetEAwLEgZOdWdnZXQY9PsQDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOetEAw", "path": "Course/cs373/CourseRev/feb2012/Unit/268007", "open": false, "id": 268007, "nuggets": [{"nuggetType": "lecture", "name": "Office Hours Week 3", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOetEAw", "media": {"dotsub_id": "a95d2c4f-90ca-4780-9575-f1e19c26db4f", "name": "cs373_oo3_00_l_Office-Hours-Week-3", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGP2iEQw", "youtube_id": "lqRbVMUP9U4", "youtube_state": "done", "path": "Course/cs373/Media/283005", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nHello and welcome to the third office hours. Let's jump right in. >>All right.\n\n2\n00:00:05,000 --> 00:00:10,000\nMany students, myself included, had some questions about the resampling wheel.\n\n3\n00:00:10,000 --> 00:00:15,000\nSpecifically, when you draw a random number between 0 and twice W max, \n\n4\n00:00:15,000 --> 00:00:18,000\nwhere did that number, twice W max, come from?\n\n5\n00:00:18,000 --> 00:00:21,000\nI have the same question. I made it up.\n\n6\n00:00:21,000 --> 00:00:25,000\nI wanted to make sure that these wheel can jump over entire particles\n\n7\n00:00:25,000 --> 00:00:28,000\nthat wouldn't large enough, but if you make it really large then you have to search a lot.\n\n8\n00:00:28,000 --> 00:00:31,000\nI figured if it's 2^n it's going to be fine.\n\n9\n00:00:31,000 --> 00:00:35,000\nDoes this bias the sample in any way, choosing this number.\n\n10\n00:00:35,000 --> 00:00:37,000\nI actually don't know.\n\n11\n00:00:37,000 --> 00:00:42,000\n I think there is certainly a correlation between adjacent particles in the selection of particles.\n\n12\n00:00:42,000 --> 00:00:45,000\nThey're not independently drawn.\n\n13\n00:00:45,000 --> 00:00:50,000\nI just don't know what the effect on the particle filter will be, and I wish I did.\n\n14\n00:00:50,000 --> 00:00:54,000\nThe next question, or two questions I should say, come from George.\n\n15\n00:00:54,000 --> 00:00:58,000\nHe wants to know if there are any rules of thumb that we should keep in mind\n\n16\n00:00:58,000 --> 00:01:01,000\nwhen we're choosing what filter to use for a given situation.\n\n17\n00:01:01,000 --> 00:01:05,000\nWhen do we use the particle filter? When do we use the Kalman filter?\n\n18\n00:01:05,000 --> 00:01:07,000\nAbsolutely, yes.\n\n19\n00:01:07,000 --> 00:01:13,000\nThe particle filter is the easiest to implement, but the complexity scales exponentially\n\n20\n00:01:13,000 --> 00:01:15,000\nwith the number of dimensions.\n\n21\n00:01:15,000 --> 00:01:19,000\nThat's usually a problem, because if you have a high-dimensional space, you just can't apply it.\n\n22\n00:01:19,000 --> 00:01:23,000\nThe Kalman filter is the only filter that does scale exponentially, so it's very nice.\n\n23\n00:01:23,000 --> 00:01:27,000\nIf you have like a 15-dimensional space, you will usually use a particle filter,\n\n24\n00:01:27,000 --> 00:01:31,000\nbut the problem with the Kalman filter is it's unimodal, so you can't really have multiple hypotheses.\n\n25\n00:01:31,000 --> 00:01:34,000\nThere are extensions of the Kalman filter that does this \n\n26\n00:01:34,000 --> 00:01:38,000\ncalled mixed rough Kalman filter, multihypothesis Kalman filter that can do this.\n\n27\n00:01:38,000 --> 00:01:42,000\nThey address some of these problems.\n\n28\n00:01:42,000 --> 00:01:48,000\nThe histogram filter is applicable in situations similar to the particle filter\n\n29\n00:01:48,000 --> 00:01:51,000\nwhere you have a global uncertainty, and it's more systematic.\n\n30\n00:01:51,000 --> 00:01:56,000\nIn the particle filter, if you loose track of the correct hypothesis, you might never regain it.\n\n31\n00:01:56,000 --> 00:01:59,000\nIn a grid-based filter you have a chance of regaining it.\n\n32\n00:01:59,000 --> 00:02:02,000\nGrids are easily supported in many programming frameworks.\n\n33\n00:02:02,000 --> 00:02:07,000\nSometimes there are better ones to use, but they also have a generic limitation \n\n34\n00:02:07,000 --> 00:02:10,000\nin the accuracy, which is related to the resolution of the grid.\n\n35\n00:02:10,000 --> 00:02:16,000\nMy recommendation is if you have a multimodal distribution use particle filters if you can.\n\n36\n00:02:16,000 --> 00:02:21,000\nIf it's really a continuous space with a unimodal distribution use Kalman filters.\n\n37\n00:02:21,000 --> 00:02:27,000\nOkay. That's a great segue this question about switching between filters on the fly.\n\n38\n00:02:27,000 --> 00:02:32,000\nFor example, we have our particle filters that converges to a unimodal distribution.\n\n39\n00:02:32,000 --> 00:02:35,000\nThen can we switch to the Kalman filter?\n\n40\n00:02:35,000 --> 00:02:38,000\nIt isn't done much that people switch.\n\n41\n00:02:38,000 --> 00:02:41,000\nThe reason is when you switch between filters,\n\n42\n00:02:41,000 --> 00:02:46,000\nyou end up getting moments of increased uncertainty.\n\n43\n00:02:46,000 --> 00:02:49,000\nYou can see this when you buy commercial GPS receivers.\n\n44\n00:02:49,000 --> 00:02:52,000\nThey tend to run multiple Kalman filters, it turns out, 3D\n\n45\n00:02:52,000 --> 00:02:55,000\ndepending on whether it's 2D or navigation. \n\n46\n00:02:55,000 --> 00:02:59,000\nWhen they are switched, the behavior becomes a little bit iffy, and often that is bad for robots,\n\n47\n00:02:59,000 --> 00:03:03,000\nbecause they they a little bit because this is where it says this thing versus the other thing.\n\n48\n00:03:03,000 --> 00:03:06,000\nThey're not quite consistent.\n\n49\n00:03:06,000 --> 00:03:09,000\nThere are ways to combine multiple filters types.\n\n50\n00:03:09,000 --> 00:03:12,000\nThe most common one is called the Rao-Blackwellized filter--Rao-Blackwellized--\n\n51\n00:03:12,000 --> 00:03:14,000\nafter Rao and Blackwell.\n\n52\n00:03:14,000 --> 00:03:21,000\nWhat they found is that in a particle domain, sometimes if we nail certain dimensions with particles,\n\n53\n00:03:21,000 --> 00:03:25,000\neverything else conditional on the particle becomes Gaussian or unimodal.\n\n54\n00:03:25,000 --> 00:03:31,000\nThen you can exploit the efficiency of a Kalman filter that is now attached to individual particles.\n\n55\n00:03:31,000 --> 00:03:36,000\nI'm not going to go into depth here, but there's an entire field of Rao-Blackwellized filters\n\n56\n00:03:36,000 --> 00:03:40,000\nthat sometimes can estimate in the spaces of hundreds of dimensions.\n\n57\n00:03:40,000 --> 00:03:45,000\nGreat. Thank you. That actually predicted George's next question, so we'll move on.\n\n58\n00:03:45,000 --> 00:03:50,000\nDrew wanted to know about what happens to a particle filter when the motion modal\n\n59\n00:03:50,000 --> 00:03:54,000\nmoves a particle into an invalid place.\n\n60\n00:03:54,000 --> 00:03:58,000\nFor an example, in that corridor demonstration you gave, what if a particle gets moved into a wall?\n\n61\n00:03:58,000 --> 00:04:01,000\nWell, thanks Drew. Great question. \n\n62\n00:04:01,000 --> 00:04:03,000\nThe obvious answer is you killed that particle.\n\n63\n00:04:03,000 --> 00:04:07,000\nThe way to think about this is in the measurement model you've got to have \n\n64\n00:04:07,000 --> 00:04:11,000\n this kind of implicit sensor that says, \"I'm just sitting inside a wall.\"\n\n65\n00:04:11,000 --> 00:04:15,000\nThe truth is the robot never sits inside a wall, so that sensor would always say \n\n66\n00:04:15,000 --> 00:04:18,000\nwith absolute certainty, \"I'm not sitting in the middle of a wall.\"\n\n67\n00:04:18,000 --> 00:04:21,000\nThis kind of hypothetical sensor would justify \n\n68\n00:04:21,000 --> 00:04:26,000\nthat the weight of that particle that's in the middle of the wall would get weight 0, so you just kill it.\n\n69\n00:04:26,000 --> 00:04:30,000\nOkay. A couple more questions from Drew.\n\n70\n00:04:30,000 --> 00:04:34,000\nWhat about dynamically adjusting our big end, our number of particles\n\n71\n00:04:34,000 --> 00:04:39,000\nwhen we want to trade off between computational cost versus the accuracy of our filter?\n\n72\n00:04:39,000 --> 00:04:42,000\nDynamically setting the number of particles has been done quite a bit, \n\n73\n00:04:42,000 --> 00:04:44,000\nand it's a good idea under certain circumstances.\n\n74\n00:04:44,000 --> 00:04:47,000\nObviously, the fewer particles you have the faster you can compute.\n\n75\n00:04:47,000 --> 00:04:50,000\nIf you're tracking really well and all the particles are centered in one location,\n\n76\n00:04:50,000 --> 00:04:54,000\nthere isn't really a need to have as many around as when you're globally uncertain.\n\n77\n00:04:54,000 --> 00:04:57,000\nThey way to set the number of particles is often done by looking \n\n78\n00:04:57,000 --> 00:05:00,000\nat the total non-normalized importance weights.\n\n79\n00:05:00,000 --> 00:05:04,000\nIf all your importance weights are really large, then you're probably doing a great job tracking,\n\n80\n00:05:04,000 --> 00:05:06,000\nand you don't need that many particles.\n\n81\n00:05:06,000 --> 00:05:09,000\nWhereas if your importance weights are all very small, \n\n82\n00:05:09,000 --> 00:05:13,000\nthen chances are you're doing a really lousy job tracking, and you need more particles.\n\n83\n00:05:13,000 --> 00:05:17,000\nThat isn't perfect. An unlikely measurement can cause weights to be small,\n\n84\n00:05:17,000 --> 00:05:20,000\nbut a good heuristic would be to say, let's particle sample \n\n85\n00:05:20,000 --> 00:05:23,000\nuntil our non-normalized importance weights reach a certain threshold,\n\n86\n00:05:23,000 --> 00:05:26,000\nand then let's stop sampling.\n\n87\n00:05:26,000 --> 00:05:29,000\nNow truth telling, many of the systems we're dealing with are real-time systems,\n\n88\n00:05:29,000 --> 00:05:33,000\nand you can't really afford using many particles sometimes and few other times,\n\n89\n00:05:33,000 --> 00:05:36,000\nbecause there's a fixed amount of time in which you want to do your estimates.\n\n90\n00:05:36,000 --> 00:05:41,000\nThen yes, it's more tricky, but in principle using few particles when you track well\n\n91\n00:05:41,000 --> 00:05:43,000\nis a very viable solution.\n\n92\n00:05:43,000 --> 00:05:47,000\nThank you. Taka also had a question.\n\n93\n00:05:47,000 --> 00:05:51,000\nHe wants to know how to distinguish between moving landmarks and non-moving landmarks.\n\n94\n00:05:51,000 --> 00:05:56,000\nThe maps that we dealt with in class were all static, and the landmarks were fixed.\n\n95\n00:05:56,000 --> 00:05:59,000\nHow does the Google car distinguish between these moving vehicles, \n\n96\n00:05:59,000 --> 00:06:02,000\nmoving people, and these static landmarks?\n\n97\n00:06:02,000 --> 00:06:04,000\nThat's a wonderful question.\n\n98\n00:06:04,000 --> 00:06:07,000\nFirst of all, the Google car assumes that the ground map,\n\n99\n00:06:07,000 --> 00:06:11,000\nlike the surface map of the street, is basically fixed.\n\n100\n00:06:11,000 --> 00:06:15,000\nIf lane markers would move along a little bit, then the Google car would probably get confused--\n\n101\n00:06:15,000 --> 00:06:20,000\na little secret here--so please don't repaint the lane markers when the Google car comes by.\n\n102\n00:06:20,000 --> 00:06:23,000\nThat's treated differently than stuff that sticks out of the ground,\n\n103\n00:06:23,000 --> 00:06:25,000\nand even that is used as a landmark.\n\n104\n00:06:25,000 --> 00:06:32,000\nWhat we do is we have a probabilistic threshold that says what's the chance of this thing being mobile or not?\n\n105\n00:06:32,000 --> 00:06:36,000\nWe do this by establishing correspondence, which means we take measurements a time step earlier\n\n106\n00:06:36,000 --> 00:06:39,000\nand measurements a time step later, see which has the most likely \n\n107\n00:06:39,000 --> 00:06:42,000\ncorrespondence between these two measurements \n\n108\n00:06:42,000 --> 00:06:44,000\nand then see if there's a motion vector in between.\n\n109\n00:06:44,000 --> 00:06:48,000\nSometimes we can explain it away by just noise, but for cars and people and so on,\n\n110\n00:06:48,000 --> 00:06:51,000\nthere is very often a very clear and strong motion \n\n111\n00:06:51,000 --> 00:06:54,000\nin which case we assume this thing is moving and tracking.\n\n112\n00:06:54,000 --> 00:06:59,000\nIt also turns out that the way we build our prior maps is sometimes we drive by multiple times.\n\n113\n00:06:59,000 --> 00:07:03,000\nWe do differencing, and then we have most captures are static things in our maps.\n\n114\n00:07:03,000 --> 00:07:07,000\nWe happen to know that in the middle of a street, there tend to be no static things.\n\n115\n00:07:07,000 --> 00:07:09,000\nThere tends to be just moving things.\n\n116\n00:07:09,000 --> 00:07:12,000\nYou can bias the estimate toward saying, well, in the middle of the street\n\n117\n00:07:12,000 --> 00:07:15,000\nwhat we'll see is likely not static.\n\n118\n00:07:15,000 --> 00:07:18,000\nTossing this all together gives us a fairly good tracker.\n\n119\n00:07:18,000 --> 00:07:23,000\nThanks a lot. That's all we had for this time. We'll see you all next week.\n\n120\n00:07:23,000 --> 00:07:25,000\nBut I want to make a comment. \n\n121\n00:07:25,000 --> 00:07:30,000\nI hear that many people really positively received the homework assignment on particle filters,\n\n122\n00:07:30,000 --> 00:07:33,000\nwhich is great. It took me a while to make it.\n\n123\n00:07:33,000 --> 00:07:37,000\nOn the discussion forum there is a posting of a graphical version of it,\n\n124\n00:07:37,000 --> 00:07:40,000\nand I downloaded it. It looks really great.\n\n125\n00:07:40,000 --> 00:07:45,000\nI couldn't get the curser keys to work on my computer, but it's a really great basis to visualize.\n\n126\n00:07:45,000 --> 00:07:49,000\nI think particle filters are really hard to understand without visualization,\n\n127\n00:07:49,000 --> 00:07:52,000\nso I'm really sorry that our current programming environment doesn't provide visualization.\n\n128\n00:07:52,000 --> 00:07:56,000\nI hope in the next round, we'll fix that. I'm pretty sure we'll fix this.\n\n129\n00:07:56,000 --> 00:07:58,000\nSo please play with it.\n\n130\n00:07:58,000 --> 00:08:02,000\nThe other thing I noticed in the discussion boards, and I wanted to just call for feedback,\n\n131\n00:08:02,000 --> 00:08:05,000\nand the same for the Facebook group, that people want harder homework assignments.\n\n132\n00:08:05,000 --> 00:08:11,000\nI'm not sure that's true universally, so if you have an opinion, why don't you just post it.\n\n133\n00:08:11,000 --> 00:08:13,000\nI'd like to get a sense of it.\n\n134\n00:08:13,000 --> 00:08:17,000\nI'm thinking of making an assignment where we toss everything togethera\n\n135\n00:08:17,000 --> 00:08:20,000\nand really build like a mini version of an actual car.\n\n136\n00:08:20,000 --> 00:08:26,000\nThat's going to be really involved, so let me know what you feel like.\n\n137\n00:08:26,000 --> 00:08:29,000\nThis course right now, I would argue, is really Stanford caliber.\n\n138\n00:08:29,000 --> 00:08:32,000\nWhat you guys are doing, and you girls are doing, is really \n\n139\n00:08:32,000 --> 00:08:36,000\nat a quality that I would expect my best Standford students to do.\n\n140\n00:08:36,000 --> 00:08:40,000\nThe type of things you implement, certainly, is at the same pace I would teach at Stanford \n\n141\n00:08:42,000 --> 00:08:43,000\nand possibly faster.\n\n142\n00:08:43,000 --> 00:08:47,000\nBut if I go to a general build-a-robot example, then I'm going to exceed beyond Stanford base.\n\n143\n00:08:47,000 --> 00:08:49,000\nIt's up to you. Let us know.\n\n144\n00:08:49,000 --> 00:08:53,000\nAll right. Keep us posted. I'll be reading the forums. I'm sure Sebastian will too.\n\n145\n00:08:53,000 --> 00:08:55,000\nThank you very much and see you next week.\n\n146\n00:08:55,000 --> 00:08:58,000\nAll right.\n\n", "id": 283005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GOetEAwLEgZOdWdnZXQY9PsQDA", "path": "Course/cs373/CourseRev/feb2012/Unit/268007/Nugget/278004", "type": "Nugget", "id": 278004}]}, {"name": "Unit 4", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY6tcPDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYoe8PDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY8f4PDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYuucPDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY2YYQDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY0t8PDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYivcPDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYg9APDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYm8gPDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY4a0QDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYmcUQDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY6dQQDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYueQQDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY6tQQDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY9IQODA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYifQQDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY8fsQDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY69QQDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY2YMRDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY2okPDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYwo4QDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY2oYQDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYqZMRDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY1N8PDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYkZsRDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY5K0QDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYovUNDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYyrUQDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYw44QDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYgs0QDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY-6UQDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY8vsQDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYybIRDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYnMgPDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYgcoRDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYou8PDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY-qIRDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYhM0QDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY8_sQDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYqpYQDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYu-cPDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYy7IRDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY5a0QDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYk54QDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYhtAPDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY5q0QDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYh9APDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYhdYNDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYoekRDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYifERDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "path": "Course/cs373/CourseRev/feb2012/Unit/256001", "open": false, "id": 256001, "nuggets": [{"nuggetType": "program", "name": "Left Turn Policy", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYhdYNDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/224005", "suppliedCode": "# ----------\n# User Instructions:\n# \n# Implement the function optimum_policy2D() below.\n#\n# You are given a car in a grid with initial state\n# init = [x-position, y-position, orientation]\n# where x/y-position is its position in a given\n# grid and orientation is 0-3 corresponding to 'up',\n# 'left', 'down' or 'right'.\n#\n# Your task is to compute and return the car's optimal\n# path to the position specified in `goal'; where\n# the costs for each motion are as defined in `cost'.\n\n# EXAMPLE INPUT:\n\n# grid format:\n#     0 = navigable space\n#     1 = occupied space \ngrid = [[1, 1, 1, 0, 0, 0],\n        [1, 1, 1, 0, 1, 0],\n        [0, 0, 0, 0, 0, 0],\n        [1, 1, 1, 0, 1, 1],\n        [1, 1, 1, 0, 1, 1]]\ngoal = [2, 0] # final position\ninit = [4, 3, 0] # first 2 elements are coordinates, third is direction\ncost = [2, 1, 20] # the cost field has 3 values: right turn, no turn, left turn\n\n# EXAMPLE OUTPUT:\n# calling optimum_policy2D() should return the array\n# \n# [[' ', ' ', ' ', 'R', '#', 'R'],\n#  [' ', ' ', ' ', '#', ' ', '#'],\n#  ['*', '#', '#', '#', '#', 'R'],\n#  [' ', ' ', ' ', '#', ' ', ' '],\n#  [' ', ' ', ' ', '#', ' ', ' ']]\n#\n# ----------\n\n\n# there are four motion directions: up/left/down/right\n# increasing the index in this array corresponds to\n# a left turn. Decreasing is is a right turn.\n\nforward = [[-1,  0], # go up\n           [ 0, -1], # go left\n           [ 1,  0], # go down\n           [ 0,  1]] # do right\nforward_name = ['up', 'left', 'down', 'right']\n\n# the cost field has 3 values: right turn, no turn, left turn\naction = [-1, 0, 1]\naction_name = ['R', '#', 'L']\n\n\n# ----------------------------------------\n# modify code below\n# ----------------------------------------\n\ndef optimum_policy2D():\n\n    return policy2D # Make sure your function returns the expected grid.\n\n\n\n", "type": "Nugget", "id": 224005}, {"nuggetType": "program", "name": "Print Path", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYovUNDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/228002", "suppliedCode": "# -----------\n# User Instructions:\n#\n# Modify the the search function so that it returns\n# a shortest path as follows:\n# \n# [['>', 'v', ' ', ' ', ' ', ' '],\n#  [' ', '>', '>', '>', '>', 'v'],\n#  [' ', ' ', ' ', ' ', ' ', 'v'],\n#  [' ', ' ', ' ', ' ', ' ', 'v'],\n#  [' ', ' ', ' ', ' ', ' ', '*']]\n#\n# Where '>', '<', '^', and 'v' refer to right, left, \n# up, and down motions. NOTE: the 'v' should be \n# lowercase.\n#\n# Your function should be able to do this for any\n# provided grid, not just the sample grid below.\n# ----------\n\n\n# Sample Test case\ngrid = [[0, 0, 1, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0],\n        [0, 0, 1, 0, 1, 0],\n        [0, 0, 1, 0, 1, 0],\n        [0, 0, 1, 0, 1, 0]]\n\ninit = [0, 0]\ngoal = [len(grid)-1, len(grid[0])-1]\n\ndelta = [[-1, 0 ], # go up\n         [ 0, -1], # go left\n         [ 1, 0 ], # go down\n         [ 0, 1 ]] # go right\n\ndelta_name = ['^', '<', 'v', '>']\n\ncost = 1\n\n# ----------------------------------------\n# modify code below\n# ----------------------------------------\n\ndef search():\n    closed = [[0 for row in range(len(grid[0]))] for col in range(len(grid))]\n    closed[init[0]][init[1]] = 1\n\n    x = init[0]\n    y = init[1]\n    g = 0\n\n    open = [[g, x, y]]\n\n    found = False  # flag that is set when search is complet\n    resign = False # flag set if we can't find expand\n\n    while not found and not resign:\n        if len(open) == 0:\n            resign = True\n            return 'fail'\n        else:\n            open.sort()\n            open.reverse()\n            next = open.pop()\n            x = next[1]\n            y = next[2]\n            g = next[0]\n            \n            if x == goal[0] and y == goal[1]:\n                found = True\n            else:\n                for i in range(len(delta)):\n                    x2 = x + delta[i][0]\n                    y2 = y + delta[i][1]\n                    if x2 >= 0 and x2 < len(grid) and y2 >=0 and y2 < len(grid[0]):\n                        if closed[x2][y2] == 0 and grid[x2][y2] == 0:\n                            g2 = g + cost\n                            open.append([g2, x2, y2])\n                            closed[x2][y2] = 1\n    for i in range(len(expand)):\n        print expand[i]\n    return # make sure you return the shortest path.\n\n\n\n", "type": "Nugget", "id": 228002}, {"nuggetType": "quiz", "name": "Maze", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY9IQODA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/230004", "type": "Nugget", "id": 230004}, {"nuggetType": "lecture", "name": "First Search Program", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "da1d4cb9-e49f-4260-b93b-011f023f9658", "name": "cs373_unit4_07_p_First-Search-Program", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMGLEQw", "youtube_id": "TPIFP4E7DVo", "youtube_state": "done", "path": "Course/cs373/Media/280001", "transcript": null, "id": 280001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY2okPDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/247002", "type": "Nugget", "id": 247002}, {"nuggetType": "quiz", "name": "Optimal Path", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYm8gPDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/255003", "type": "Nugget", "id": 255003}, {"nuggetType": "lecture", "name": "Dynamic Programming", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "c833f862-8ddf-4859-809d-bd22b888534f", "name": "cs373_unit4_13_l_Dynamic-Programming", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNuJDww", "youtube_id": "r2bPY2s9wII", "youtube_state": "done", "path": "Course/cs373/Media/247003", "transcript": null, "id": 247003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYnMgPDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/255004", "type": "Nugget", "id": 255004}, {"nuggetType": "lecture", "name": "Optimal Path", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "6d5146f2-9d67-49b8-83e4-949f58439790", "name": "cs373_unit4_03_q_Optimal-Path", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJGeEAw", "youtube_id": "Exl_kCyUc8U", "youtube_state": "done", "path": "Course/cs373/Media/266001", "transcript": null, "id": 266001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYg9APDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/256003", "type": "Nugget", "id": 256003}, {"nuggetType": "program", "name": "Optimal Policy", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYhtAPDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/256006", "suppliedCode": "# ----------\n# User Instructions:\n# \n# Create a function optimum_policy() that returns\n# a grid which shows the optimum policy for robot\n# motion. This means there should be an optimum\n# direction associated with each navigable cell.\n# \n# un-navigable cells must contain an empty string\n# WITH a space, as shown in the previous video.\n# Don't forget to mark the goal with a '*'\n\n# ----------\n\ngrid = [[0, 1, 0, 0, 0, 0],\n        [0, 1, 0, 0, 0, 0],\n        [0, 1, 0, 0, 0, 0],\n        [0, 1, 0, 0, 0, 0],\n        [0, 0, 0, 0, 1, 0]]\n\ninit = [0, 0]\ngoal = [len(grid)-1, len(grid[0])-1]\n\ndelta = [[-1, 0 ], # go up\n         [ 0, -1], # go left\n         [ 1, 0 ], # go down\n         [ 0, 1 ]] # go right\n\ndelta_name = ['^', '<', 'v', '>']\n\ncost_step = 1 # the cost associated with moving from a cell to an adjacent one.\n\n# ----------------------------------------\n# modify code below\n# ----------------------------------------\n\ndef optimum_policy():\n    value = [[99 for row in range(len(grid[0]))] for col in range(len(grid))]\n    change = True\n\n    while change:\n        change = False\n\n        for x in range(len(grid)):\n            for y in range(len(grid[0])):\n                if goal[0] == x and goal[1] == y:\n                    if value[x][y] > 0:\n                        value[x][y] = 0\n\n                        change = True\n\n                elif grid[x][y] == 0:\n                    for a in range(len(delta)):\n                        x2 = x + delta[a][0]\n                        y2 = y + delta[a][1]\n\n                        if x2 >= 0 and x2 < len(grid) and y2 >= 0 and y2 < len(grid[0]) and grid[x2][y2] == 0:\n                            v2 = value[x2][y2] + cost_step\n\n                            if v2 < value[x][y]:\n                                change = True\n                                value[x][y] = v2\n\n    return policy # Make sure your function returns the expected grid.\n\n\n", "type": "Nugget", "id": 256006}, {"nuggetType": "lecture", "name": "Left Turn Policy", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "e3849978-ade5-4475-923a-8261f7497b5a", "name": "cs373_unit4_18_p_Left-Turn-Policy", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJObEQw", "youtube_id": "bQA2ELDNmmg", "youtube_state": "done", "path": "Course/cs373/Media/282003", "transcript": null, "id": 282003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYh9APDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/256007", "type": "Nugget", "id": 256007}, {"nuggetType": "lecture", "name": "Motion Planning", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "31da7b66-af69-47ac-8a83-3bc9b6284517", "name": "cs373_unit4_00_l_Motion-Planning", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOnXDww", "youtube_id": "KHAu5A_flcQ", "youtube_state": "done", "path": "Course/cs373/Media/257001", "transcript": null, "id": 257001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY6tcPDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/257002", "type": "Nugget", "id": 257002}, {"nuggetType": "quiz", "name": "Compute Cost 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY0t8PDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/258002", "type": "Nugget", "id": 258002}, {"nuggetType": "program", "name": "Expansion Grid", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY1N8PDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/258004", "suppliedCode": "# -----------\n# User Instructions:\n# \n# Modify the function search() so that it returns\n# a table of values called expand. This table\n# will keep track of which step each node was\n# expanded.\n#\n# For grading purposes, please leave the return\n# statement at the bottom.\n# ----------\n\n\ngrid = [[0, 0, 1, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0],\n        [0, 0, 1, 0, 1, 0],\n        [0, 0, 1, 0, 1, 0],\n        [0, 0, 1, 0, 1, 0]]\n\ninit = [0, 0]\ngoal = [len(grid)-1, len(grid[0])-1]\n\ndelta = [[-1, 0 ], # go up\n         [ 0, -1], # go left\n         [ 1, 0 ], # go down\n         [ 0, 1 ]] # go right\n\ndelta_name = ['^', '<', 'v', '>']\n\ncost = 1\n\n\n# ----------------------------------------\n# modify code below\n# ----------------------------------------\n\ndef search():\n    closed = [[0 for row in range(len(grid[0]))] for col in range(len(grid))]\n    closed[init[0]][init[1]] = 1\n\n    x = init[0]\n    y = init[1]\n    g = 0\n\n    open = [[g, x, y]]\n\n    found = False  # flag that is set when search is complete\n    resign = False # flag set if we can't find expand\n\n    while not found and not resign:\n        if len(open) == 0:\n            resign = True\n        else:\n            open.sort()\n            open.reverse()\n            next = open.pop()\n            x = next[1]\n            y = next[2]\n            g = next[0]\n            \n            if x == goal[0] and y == goal[1]:\n                found = True\n            else:\n                for i in range(len(delta)):\n                    x2 = x + delta[i][0]\n                    y2 = y + delta[i][1]\n                    if x2 >= 0 and x2 < len(grid) and y2 >=0 and y2 < len(grid[0]):\n                        if closed[x2][y2] == 0 and grid[x2][y2] == 0:\n                            g2 = g + cost\n                            open.append([g2, x2, y2])\n                            closed[x2][y2] = 1\n    return expand #Leave this line for grading purposes!\n\n\n\n", "type": "Nugget", "id": 258004}, {"nuggetType": "lecture", "name": "Compute Cost Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "b8dbfbde-3698-4471-a0a6-b24073035f9e", "name": "cs373_unit4_01_s_Compute-Cost", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGILQDww", "youtube_id": "7-yOaHVeATk", "youtube_state": "done", "path": "Course/cs373/Media/256002", "transcript": null, "id": 256002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYuucPDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/259002", "type": "Nugget", "id": 259002}, {"nuggetType": "lecture", "name": "Value Program", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "eefaec9a-2040-4186-905c-f762ebcbec81", "name": "cs373_unit4_16_p_Value-Program", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNHZEQw", "youtube_id": "RXpuBRA-cpo", "youtube_state": "done", "path": "Course/cs373/Media/290001", "transcript": null, "id": 290001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYu-cPDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/259003", "type": "Nugget", "id": 259003}, {"nuggetType": "lecture", "name": "Compute Cost", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "166876b3-5046-4264-aa45-ddae6008ac12", "name": "cs373_unit4_01_q_Compute-Cost", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLnnDww", "youtube_id": "dBA94pR6JYw", "youtube_state": "done", "path": "Course/cs373/Media/259001", "transcript": null, "id": 259001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYoe8PDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/260001", "type": "Nugget", "id": 260001}, {"nuggetType": "quiz", "name": "Computing Value", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYou8PDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/260002", "type": "Nugget", "id": 260002}, {"nuggetType": "lecture", "name": "Compute Cost 2 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "fc31ee63-4734-4e5f-97eb-5b0984591efd", "name": "cs373_unit4_02_s_Compute-Cost-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMGOEAw", "youtube_id": "OXIESpN0KaE", "youtube_state": "done", "path": "Course/cs373/Media/264001", "transcript": null, "id": 264001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYivcPDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/261002", "type": "Nugget", "id": 261002}, {"nuggetType": "quiz", "name": "Compute Cost", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY8f4PDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/262001", "type": "Nugget", "id": 262001}, {"nuggetType": "lecture", "name": "Compute Cost 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "59ccaf7a-0217-4b1e-9616-711ac4f503fc", "name": "cs373_unit4_02_q_Compute-Cost-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIPWDQw", "youtube_id": "n9_th4V4qE4", "youtube_state": "done", "path": "Course/cs373/Media/224003", "transcript": null, "id": 224003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY2YYQDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/263001", "type": "Nugget", "id": 263001}, {"nuggetType": "lecture", "name": "First Search Program Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "bbd0967d-ad03-4839-98ab-8d0c4f4fea9a", "name": "cs373_unit4_07_s_First-Search-Program", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJrFEAw", "youtube_id": "cl8Kdkr4Gbg", "youtube_state": "done", "path": "Course/cs373/Media/271002", "transcript": null, "id": 271002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY2oYQDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/263002", "type": "Nugget", "id": 263002}, {"nuggetType": "program", "name": "First Search Program", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYwo4QDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/264002", "suppliedCode": "# ----------\n# User Instructions:\n# \n# Define a function, search() that takes no input\n# and returns a list\n# in the form of [optimal path length, x, y]. For\n# the grid shown below, your function should output\n# [11, 4, 5].\n#\n# If there is no valid path from the start point\n# to the goal, your function should return the string\n# 'fail'\n# ----------\n\n# Grid format:\n#   0 = Navigable space\n#   1 = Occupied space\n\ngrid = [[0, 0, 1, 0, 0, 0],\n        [0, 0, 1, 0, 0, 0],\n        [0, 0, 0, 0, 1, 0],\n        [0, 0, 1, 1, 1, 0],\n        [0, 0, 0, 0, 1, 0]]\n\ninit = [0, 0]\ngoal = [len(grid)-1, len(grid[0])-1] # Make sure that the goal definition stays in the function.\n\ndelta = [[-1, 0 ], # go up\n        [ 0, -1], # go left\n        [ 1, 0 ], # go down\n        [ 0, 1 ]] # go right\n\ndelta_name = ['^', '<', 'v', '>']\n\ncost = 1\n\ndef search():\n    # ----------------------------------------\n    # insert code here and make sure it returns the appropriate result\n    # ----------------------------------------\n\n\n\n\n", "type": "Nugget", "id": 264002}, {"nuggetType": "lecture", "name": "A Star", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "19c46983-3452-4d73-9f5b-deaf4fa99591", "name": "cs373_unit4_10_l_A-Star", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIv3Dww", "youtube_id": "lxCCtgHk5Vs", "youtube_state": "done", "path": "Course/cs373/Media/261003", "transcript": null, "id": 261003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYw44QDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/264003", "type": "Nugget", "id": 264003}, {"nuggetType": "lecture", "name": "Computing Value 2 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "d446db83-288f-49a7-a238-279d51aa52e7", "name": "cs373_unit4_15_s_Computing-Value-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMqyEQw", "youtube_id": "t2aT92C2ruA", "youtube_state": "done", "path": "Course/cs373/Media/285002", "transcript": null, "id": 285002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYqpYQDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/265002", "type": "Nugget", "id": 265002}, {"nuggetType": "lecture", "name": "Optimal Policy", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "1bda143c-b9fb-4fd1-9013-c260affbb7b3", "name": "cs373_unit4_17_p_Optimal-Policy", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJKeEAw", "youtube_id": "MMDcirk9QPM", "youtube_state": "done", "path": "Course/cs373/Media/266002", "transcript": null, "id": 266002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYk54QDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/266003", "type": "Nugget", "id": 266003}, {"nuggetType": "program", "name": "Implement A Star", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY-6UQDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/267003", "suppliedCode": "# -----------\n# User Instructions:\n#\n# Modify the the search function so that it becomes\n# an A* search algorithm as defined in the previous\n# lectures.\n#\n# Your function should return the expanded grid\n# which shows, for each element, the count when\n# it was expanded or -1 if the element was never expanded.\n#\n# Your function only needs to work for a 5x6 grid.\n# You do not need to modify the heuristic.\n# ----------\n\ngrid = [[0, 1, 0, 0, 0, 0],\n        [0, 1, 0, 0, 0, 0],\n        [0, 1, 0, 0, 0, 0],\n        [0, 1, 0, 0, 0, 0],\n        [0, 0, 0, 0, 1, 0]]\n\nheuristic = [[9, 8, 7, 6, 5, 4],\n            [8, 7, 6, 5, 4, 3],\n            [7, 6, 5, 4, 3, 2],\n            [6, 5, 4, 3, 2, 1],\n            [5, 4, 3, 2, 1, 0]]\n\ninit = [0, 0]\ngoal = [len(grid)-1, len(grid[0])-1]\n\ndelta = [[-1, 0 ], # go up\n         [ 0, -1], # go left\n         [ 1, 0 ], # go down\n         [ 0, 1 ]] # go right\n\ndelta_name = ['^', '<', 'v', '>']\n\ncost = 1\n\n# ----------------------------------------\n# modify code below\n# ----------------------------------------\n\ndef search():\n    closed = [[0 for row in range(len(grid[0]))] for col in range(len(grid))]\n    closed[init[0]][init[1]] = 1\n\n    expand = [[-1 for row in range(len(grid[0]))] for col in range(len(grid))]\n    action = [[-1 for row in range(len(grid[0]))] for col in range(len(grid))]\n\n\n    x = init[0]\n    y = init[1]\n    g = 0\n\n    open = [[g, x, y]]\n\n    found = False  # flag that is set when search is complet\n    resign = False # flag set if we can't find expand\n    count = 0\n    \n    while not found and not resign:\n        if len(open) == 0:\n            resign = True\n        else:\n            open.sort()\n            open.reverse()\n            next = open.pop()\n            x = next[1]\n            y = next[2]\n            g = next[0]\n            expand[x][y] = count\n            count += 1\n            \n            if x == goal[0] and y == goal[1]:\n                found = True\n            else:\n                for i in range(len(delta)):\n                    x2 = x + delta[i][0]\n                    y2 = y + delta[i][1]\n                    if x2 >= 0 and x2 < len(grid) and y2 >=0 and y2 < len(grid[0]):\n                        if closed[x2][y2] == 0 and grid[x2][y2] == 0:\n                            g2 = g + cost\n                            open.append([g2, x2, y2])\n                            closed[x2][y2] = 1\n    for i in range(len(expand)):\n        print expand[i]\n    return expand #Leave this line for grading purposes!\n\n\n\n", "type": "Nugget", "id": 267003}, {"nuggetType": "lecture", "name": "Optimal Path Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "055bab21-ad1d-423f-aecf-37cd8d187816", "name": "cs373_unit4_03_s_Optimal-Path", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNPfDww", "youtube_id": "wLz-nF2CrHc", "youtube_state": "done", "path": "Course/cs373/Media/258003", "transcript": null, "id": 258003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY4a0QDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/268001", "type": "Nugget", "id": 268001}, {"nuggetType": "lecture", "name": "Print Path", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "e12b509a-da17-426d-bbd6-4b9231b50213", "name": "cs373_unit4_09_p_Print-Path", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPaEDgw", "youtube_id": "6UJFZf40aBg", "youtube_state": "done", "path": "Course/cs373/Media/230006", "transcript": null, "id": 230006}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY5K0QDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/268004", "type": "Nugget", "id": 268004}, {"nuggetType": "lecture", "name": "Value Program Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "36468675-1daa-4f42-a0f2-f37309883e78", "name": "cs373_unit4_16_s_Value-Program", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOSqEQw", "youtube_id": "FdT1g_Bzjm0", "youtube_state": "done", "path": "Course/cs373/Media/284004", "transcript": null, "id": 284004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY5a0QDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/268005", "type": "Nugget", "id": 268005}, {"nuggetType": "lecture", "name": "Optimal Policy Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "f8187323-8616-4ab8-bad8-e335e9f6b638", "name": "cs373_unit4_17_s_Optimal-Policy", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNXfDww", "youtube_id": "7kllZxX-Nso", "youtube_state": "done", "path": "Course/cs373/Media/258005", "transcript": null, "id": 258005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY5q0QDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/268006", "type": "Nugget", "id": 268006}, {"nuggetType": "lecture", "name": "Print Path Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "fc2cd55e-0349-472f-8dc7-8b7fea3403f5", "name": "cs373_unit4_09_s_Print-Path", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOvXDww", "youtube_id": "CyQ2gl-9W4o", "youtube_state": "done", "path": "Course/cs373/Media/257003", "transcript": null, "id": 257003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYyrUQDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/269002", "type": "Nugget", "id": 269002}, {"nuggetType": "lecture", "name": "Optimal Path 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "de800f7b-f01f-4262-aca9-01b885b93c70", "name": "cs373_unit4_04_q_Optimal-Path-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLG9EAw", "youtube_id": "GvCSZOR3hLQ", "youtube_state": "done", "path": "Course/cs373/Media/270001", "transcript": null, "id": 270001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYmcUQDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/271001", "type": "Nugget", "id": 271001}, {"nuggetType": "lecture", "name": "Implement A Star", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "69457640-02af-4d31-ae0f-8ca07b471a12", "name": "cs373_unit4_11_p_Implement-A-Star", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOGqEQw", "youtube_id": "V0Ppaw5G2Pg", "youtube_state": "done", "path": "Course/cs373/Media/284001", "transcript": null, "id": 284001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYgs0QDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/272002", "type": "Nugget", "id": 272002}, {"nuggetType": "lecture", "name": "Computing Value 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "c3dbac9b-065f-436d-abd3-71b2250fb4b9", "name": "cs373_unit4_15_q_Computing-Value-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIPNEAw", "youtube_id": "yTV3JPJk1kE", "youtube_state": "done", "path": "Course/cs373/Media/272003", "transcript": null, "id": 272003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYhM0QDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/272004", "type": "Nugget", "id": 272004}, {"nuggetType": "quiz", "name": "Optimal Path 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY6dQQDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/273001", "type": "Nugget", "id": 273001}, {"nuggetType": "lecture", "name": "Maze", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "df1e46d2-0d91-4c5a-8499-129d34d4638e", "name": "cs373_unit4_05_q_Maze", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGKHsEAw", "youtube_id": "ge_-o0RfrgM", "youtube_state": "done", "path": "Course/cs373/Media/276001", "transcript": null, "id": 276001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY6tQQDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/273002", "type": "Nugget", "id": 273002}, {"nuggetType": "quiz", "name": "Maze 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY69QQDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/273003", "type": "Nugget", "id": 273003}, {"nuggetType": "lecture", "name": "Optimal Path 2 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "0f922ffd-7732-463f-8d38-84eedccf5ae6", "name": "cs373_unit4_04_s_Optimal-Path-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNHcEAw", "youtube_id": "qFswCrEUZSM", "youtube_state": "done", "path": "Course/cs373/Media/274001", "transcript": null, "id": 274001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYueQQDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/275001", "type": "Nugget", "id": 275001}, {"nuggetType": "lecture", "name": "Maze Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "f55e8e79-affb-4d04-92a1-c6d4ae002279", "name": "cs373_unit4_05_s_Maze", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGITWDQw", "youtube_id": "yVh0lVlerWs", "youtube_state": "done", "path": "Course/cs373/Media/224004", "transcript": null, "id": 224004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYifQQDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/277001", "type": "Nugget", "id": 277001}, {"nuggetType": "lecture", "name": "Maze 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "07b7ec26-8939-48f8-92ab-3b3f1693b372", "name": "cs373_unit4_06_q_Maze-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLLDDgw", "youtube_id": "YwAyqkznxa0", "youtube_state": "done", "path": "Course/cs373/Media/238002", "transcript": null, "id": 238002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY8fsQDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/278001", "type": "Nugget", "id": 278001}, {"nuggetType": "lecture", "name": "Implement A Star Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "edcf3444-1a0e-4381-88c9-2e9e3fd9b633", "name": "cs373_unit4_11_s_Implement-A-Star", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPL-Dww", "youtube_id": "SSyvcCZKlqo", "youtube_state": "done", "path": "Course/cs373/Media/262002", "transcript": null, "id": 262002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY8vsQDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/278002", "type": "Nugget", "id": 278002}, {"nuggetType": "quiz", "name": "Computing Value 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY8_sQDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/278003", "type": "Nugget", "id": 278003}, {"nuggetType": "lecture", "name": "Maze 2 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "24a65a8f-e932-4eb1-a839-4e534d974db4", "name": "cs373_unit4_06_s_Maze-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOOtEAw", "youtube_id": "aBUxPyEDOWw", "youtube_state": "done", "path": "Course/cs373/Media/268003", "transcript": null, "id": 268003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY2YMRDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/279001", "type": "Nugget", "id": 279001}, {"nuggetType": "lecture", "name": "Expansion Grid", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "49957426-be73-42ce-bca1-0414cf870d66", "name": "cs373_unit4_08_p_Expansion-Grid", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIr0EAw", "youtube_id": "1l7bWfz8sJw", "youtube_state": "done", "path": "Course/cs373/Media/277002", "transcript": null, "id": 277002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYqZMRDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/281001", "type": "Nugget", "id": 281001}, {"nuggetType": "lecture", "name": "Expansion Grid Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "eed2131a-7c7f-4941-a42d-fd482b39c314", "name": "cs373_unit4_08_s_Expansion-Grid", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGITQDww", "youtube_id": "pH6sDfBalaw", "youtube_state": "done", "path": "Course/cs373/Media/256004", "transcript": null, "id": 256004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYkZsRDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/282001", "type": "Nugget", "id": 282001}, {"nuggetType": "lecture", "name": "Computing Value Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "cb07dd87-235f-48a3-bb8d-5b8d16e86548", "name": "cs373_unit4_14_s_Computing-Value", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLK6EQw", "youtube_id": "ebFQqd7Uhek", "youtube_state": "done", "path": "Course/cs373/Media/286002", "transcript": null, "id": 286002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQY-qIRDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/283002", "type": "Nugget", "id": 283002}, {"nuggetType": "lecture", "name": "A Star In Action", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "9daf3b25-35e0-40ee-a508-f54fe0c8cb67", "name": "cs373_unit4_12_l_A-Star-In-Action", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOKqEQw", "youtube_id": "qXZt-B7iUyw", "youtube_state": "done", "path": "Course/cs373/Media/284002", "transcript": null, "id": 284002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYybIRDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/285001", "type": "Nugget", "id": 285001}, {"nuggetType": "program", "name": "Value Program", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYy7IRDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/285003", "suppliedCode": "# ----------\n# User Instructions:\n# \n# Create a function compute_value() which returns\n# a grid of values. Value is defined as the minimum\n# number of moves required to get from a cell to the\n# goal. \n#\n# If it is impossible to reach the goal from a cell\n# you should assign that cell a value of 99.\n\n# ----------\n\ngrid = [[0, 1, 0, 0, 0, 0],\n        [0, 1, 0, 0, 0, 0],\n        [0, 1, 0, 0, 0, 0],\n        [0, 1, 0, 0, 0, 0],\n        [0, 0, 0, 0, 1, 0]]\n\ninit = [0, 0]\ngoal = [len(grid)-1, len(grid[0])-1]\n\ndelta = [[-1, 0 ], # go up\n         [ 0, -1], # go left\n         [ 1, 0 ], # go down\n         [ 0, 1 ]] # go right\n\ndelta_name = ['^', '<', 'v', '>']\n\ncost_step = 1 # the cost associated with moving from a cell to an adjacent one.\n\n# ----------------------------------------\n# insert code below\n# ----------------------------------------\n\ndef compute_value():\n\n    return value #make sure your function returns a grid of values as demonstrated in the previous video.\n\n\n\n", "type": "Nugget", "id": 285003}, {"nuggetType": "lecture", "name": "Computing Value", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "70a07492-d3e0-4538-a87d-0ebf40606939", "name": "cs373_unit4_14_q_Computing-Value", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGKXsEAw", "youtube_id": "Sn-ZUbZdOn8", "youtube_state": "done", "path": "Course/cs373/Media/276005", "transcript": null, "id": 276005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYgcoRDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/288001", "type": "Nugget", "id": 288001}, {"nuggetType": "lecture", "name": "Left Turn Policy Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "359ef0a2-849c-4b2d-95eb-9f1f93c59e22", "name": "cs373_unit4_18_s_Left-Turn-Policy", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLnhEQw", "youtube_id": "rH5DKpwYQLY", "youtube_state": "done", "path": "Course/cs373/Media/291001", "transcript": null, "id": 291001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYoekRDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/292001", "type": "Nugget", "id": 292001}, {"nuggetType": "lecture", "name": "Planning Conclusion", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDww", "media": {"dotsub_id": "d578354d-697a-463a-ae6d-9c619e270ed2", "name": "cs373_unit4_19_l_Planning-Conclusion", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLrhEQw", "youtube_id": "M7ZJ74RVHqo", "youtube_state": "done", "path": "Course/cs373/Media/291002", "transcript": null, "id": 291002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GIHQDwwLEgZOdWdnZXQYifERDA", "path": "Course/cs373/CourseRev/feb2012/Unit/256001/Nugget/293001", "type": "Nugget", "id": 293001}]}, {"name": "Homework 4", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": true, "closedAt": "03/20/2012 00:00", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgwLEgZOdWdnZXQY-6gPDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgwLEgZOdWdnZXQY9fsQDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgwLEgZOdWdnZXQY6toODA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgwLEgZOdWdnZXQYu-ERDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgwLEgZOdWdnZXQY-Z8SDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgwLEgZOdWdnZXQY4acSDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgwLEgZOdWdnZXQYy7gPDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgwLEgZOdWdnZXQYya8SDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgwLEgZOdWdnZXQY_KgPDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgwLEgZOdWdnZXQYgccSDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgwLEgZOdWdnZXQY0dYSDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgwLEgZOdWdnZXQY-p8SDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgwLEgZOdWdnZXQYud4SDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgwLEgZOdWdnZXQY0tYSDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgwLEgZOdWdnZXQYoeYSDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgw", "path": "Course/cs373/CourseRev/feb2012/Unit/297001", "open": false, "id": 297001, "nuggets": [{"nuggetType": "lecture", "name": "Admissable Heuristic Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgw", "media": {"dotsub_id": "61dce857-9553-454c-b68a-6ea6a729e99e", "name": "cs373_hw4_00_s_Admissable-Heuristic", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMKIEgw", "youtube_id": "CwOjsxg3lhk", "youtube_state": "done", "path": "Course/cs373/Media/296002", "transcript": null, "id": 296002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgwLEgZOdWdnZXQY6toODA", "path": "Course/cs373/CourseRev/feb2012/Unit/297001/Nugget/241002", "type": "Nugget", "id": 241002}, {"nuggetType": "lecture", "name": "Admissable Heuristic", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgw", "media": {"dotsub_id": "2cc41edd-d174-449b-8adb-ebfce90f7eb7", "name": "cs373_hw4_00_q_Admissable-Heuristic", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPqoDww", "youtube_id": "vchdgrZ1w6M", "youtube_state": "done", "path": "Course/cs373/Media/251002", "transcript": null, "id": 251002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgwLEgZOdWdnZXQY-6gPDA", "path": "Course/cs373/CourseRev/feb2012/Unit/297001/Nugget/251003", "type": "Nugget", "id": 251003}, {"nuggetType": "lecture", "name": "Bad Heuristic Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgw", "media": {"dotsub_id": "e2e3ec40-4ad4-41c3-80ff-e70126f68f84", "name": "cs373_hw4_02_s_Bad-Heuristic", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGInQDww", "youtube_id": "yJoCzblS3x8", "youtube_state": "done", "path": "Course/cs373/Media/256009", "transcript": null, "id": 256009}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgwLEgZOdWdnZXQY_KgPDA", "path": "Course/cs373/CourseRev/feb2012/Unit/297001/Nugget/251004", "type": "Nugget", "id": 251004}, {"nuggetType": "lecture", "name": "Bad Heuristic", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgw", "media": {"dotsub_id": "0d7ba30c-20a5-42a2-939c-2a8c051f5e8b", "name": "cs373_hw4_02_q_Bad-Heuristic", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPb7EAw", "youtube_id": "PCElpX9x1AY", "youtube_state": "done", "path": "Course/cs373/Media/278006", "transcript": null, "id": 278006}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgwLEgZOdWdnZXQYy7gPDA", "path": "Course/cs373/CourseRev/feb2012/Unit/297001/Nugget/253003", "type": "Nugget", "id": 253003}, {"nuggetType": "quiz", "name": "Admissable Heuristic", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgwLEgZOdWdnZXQY9fsQDA", "path": "Course/cs373/CourseRev/feb2012/Unit/297001/Nugget/278005", "type": "Nugget", "id": 278005}, {"nuggetType": "lecture", "name": "Admissable Heuristic 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgw", "media": {"dotsub_id": "6333e1d2-584b-4855-b7db-45951d4f6d19", "name": "cs373_hw4_01_q_Admissable-Heuristic-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMq4Dww", "youtube_id": "u9m3qgwvnnY", "youtube_state": "done", "path": "Course/cs373/Media/253002", "transcript": null, "id": 253002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgwLEgZOdWdnZXQYu-ERDA", "path": "Course/cs373/CourseRev/feb2012/Unit/297001/Nugget/291003", "type": "Nugget", "id": 291003}, {"nuggetType": "quiz", "name": "Admissable Heuristic 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgwLEgZOdWdnZXQY-Z8SDA", "path": "Course/cs373/CourseRev/feb2012/Unit/297001/Nugget/299001", "type": "Nugget", "id": 299001}, {"nuggetType": "lecture", "name": "Diagonal Motion Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgw", "media": {"dotsub_id": "458be17d-076b-48c5-bccf-c0527273d3a6", "name": "cs373_hw4_03_s_Diagonal-Motion", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPf7EAw", "youtube_id": "p_Y5xEjrWtE", "youtube_state": "done", "path": "Course/cs373/Media/278007", "transcript": null, "id": 278007}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgwLEgZOdWdnZXQY-p8SDA", "path": "Course/cs373/CourseRev/feb2012/Unit/297001/Nugget/299002", "type": "Nugget", "id": 299002}, {"nuggetType": "lecture", "name": "Admissable Heuristic 2 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgw", "media": {"dotsub_id": "6f3886f0-1946-4672-92f6-5ff5b33c9ede", "name": "cs373_hw4_01_s_Admissable-Heuristic-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIv0EAw", "youtube_id": "vPUuosCdVug", "youtube_state": "done", "path": "Course/cs373/Media/277003", "transcript": null, "id": 277003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgwLEgZOdWdnZXQY4acSDA", "path": "Course/cs373/CourseRev/feb2012/Unit/297001/Nugget/300001", "type": "Nugget", "id": 300001}, {"nuggetType": "quiz", "name": "Bad Heuristic", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgwLEgZOdWdnZXQYya8SDA", "path": "Course/cs373/CourseRev/feb2012/Unit/297001/Nugget/301001", "type": "Nugget", "id": 301001}, {"nuggetType": "lecture", "name": "Diagonal Motion", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgw", "media": {"dotsub_id": "93fdf5dc-3733-4fe7-bb81-c7924012c580", "name": "cs373_hw4_03_q_Diagonal-Motion", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJm_Egw", "youtube_id": "XCNeTSBXIBk", "youtube_state": "done", "path": "Course/cs373/Media/303001", "transcript": null, "id": 303001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgwLEgZOdWdnZXQYgccSDA", "path": "Course/cs373/CourseRev/feb2012/Unit/297001/Nugget/304001", "type": "Nugget", "id": 304001}, {"nuggetType": "quiz", "name": "Diagonal Motion", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgwLEgZOdWdnZXQY0dYSDA", "path": "Course/cs373/CourseRev/feb2012/Unit/297001/Nugget/306001", "type": "Nugget", "id": 306001}, {"nuggetType": "program", "name": "Stochastic Motion", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgwLEgZOdWdnZXQY0tYSDA", "path": "Course/cs373/CourseRev/feb2012/Unit/297001/Nugget/306002", "suppliedCode": "# --------------\n# USER INSTRUCTIONS\n#\n# Write a function called stochastic_value that \n# takes no input and RETURNS two grids. The\n# first grid, value, should contain the computed\n# value of each cell as shown in the video. The\n# second grid, policy, should contain the optimum\n# policy for each cell.\n#\n# Stay tuned for a homework help video! This should\n# be available by Thursday and will be visible\n# in the course content tab.\n#\n# Good luck! Keep learning!\n#\n# --------------\n# GRADING NOTES\n#\n# We will be calling your stochastic_value function\n# with several different grids and different values\n# of success_prob, collision_cost, and cost_step.\n# In order to be marked correct, your function must\n# RETURN (it does not have to print) two grids,\n# value and policy.\n#\n# When grading your value grid, we will compare the\n# value of each cell with the true value according\n# to this model. If your answer for each cell\n# is sufficiently close to the correct answer\n# (within 0.001), you will be marked as correct.\n#\n# NOTE: Please do not modify the values of grid,\n# success_prob, collision_cost, or cost_step inside\n# your function. Doing so could result in your\n# submission being inappropriately marked as incorrect.\n\n# -------------\n# GLOBAL VARIABLES\n#\n# You may modify these variables for testing\n# purposes, but you should only modify them here.\n# Do NOT modify them inside your stochastic_value\n# function.\n\ngrid = [[0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 1, 1, 0]]\n       \ngoal = [0, len(grid[0])-1] # Goal is in top right corner\n\n\ndelta = [[-1, 0 ], # go up\n         [ 0, -1], # go left\n         [ 1, 0 ], # go down\n         [ 0, 1 ]] # go right\n\ndelta_name = ['^', '<', 'v', '>'] # Use these when creating your policy grid.\n\nsuccess_prob = 0.5                      \nfailure_prob = (1.0 - success_prob)/2.0 # Probability(stepping left) = prob(stepping right) = failure_prob\ncollision_cost = 100                    \ncost_step = 1        \n                     \n\n############## INSERT/MODIFY YOUR CODE BELOW ##################\n#\n# You may modify the code below if you want, but remember that\n# your function must...\n#\n# 1) ...be called stochastic_value().\n# 2) ...NOT take any arguments.\n# 3) ...return two grids: FIRST value and THEN policy.\n\ndef stochastic_value():\n    value = [[1000 for row in range(len(grid[0]))] for col in range(len(grid))]\n    policy = [[' ' for row in range(len(grid[0]))] for col in range(len(grid))]\n    \n    return value, policy\n\n\n\n", "type": "Nugget", "id": 306002}, {"nuggetType": "lecture", "name": "Stochastic Motion", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgw", "media": {"dotsub_id": "359d52ae-7a5b-4421-9012-17e0f4632448", "name": "cs373_hw4_04_p_Stochastic-Motion", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJOkDgw", "youtube_id": "NqIlWVeMIvg", "youtube_state": "done", "path": "Course/cs373/Media/234003", "transcript": null, "id": 234003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgwLEgZOdWdnZXQYud4SDA", "path": "Course/cs373/CourseRev/feb2012/Unit/297001/Nugget/307001", "type": "Nugget", "id": 307001}, {"nuggetType": "lecture", "name": "Stochastic Motion Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgw", "media": {"dotsub_id": "d7b51fd3-369d-4e55-a66f-56592aeb90f1", "name": "cs373_hw4_04_s_Stochastic-Motion", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPSBDww", "youtube_id": "rLOUZbAA8XA", "youtube_state": "done", "path": "Course/cs373/Media/246004", "transcript": null, "id": 246004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GKmQEgwLEgZOdWdnZXQYoeYSDA", "path": "Course/cs373/CourseRev/feb2012/Unit/297001/Nugget/308001", "type": "Nugget", "id": 308001}]}, {"name": "Office Hours 4", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJGVEwwLEgZOdWdnZXQY4aQTDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJGVEww", "path": "Course/cs373/CourseRev/feb2012/Unit/314001", "open": false, "id": 314001, "nuggets": [{"nuggetType": "lecture", "name": "Office Hours Week 4", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJGVEww", "media": {"dotsub_id": null, "name": "cs373_oo4_00_l_Office-Hours-Week-4", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPmcEww", "youtube_id": "FLn5cjnMUHI", "youtube_state": "done", "path": "Course/cs373/Media/315001", "transcript": null, "id": 315001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJGVEwwLEgZOdWdnZXQY4aQTDA", "path": "Course/cs373/CourseRev/feb2012/Unit/314001/Nugget/316001", "type": "Nugget", "id": 316001}]}, {"name": "Unit 5", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYgcQTDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQY0dMTDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYoeMTDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYiusTDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYutsTDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYqYoUDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYkpIUDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYyakUDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYmbkUDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQY6cgUDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYudgUDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYoeAUDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYu9sTDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYm7wTDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQY6sgUDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYouAUDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYjOsTDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQY2fcUDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYutgUDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYqYcVDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYg8EUDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYyqkUDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYvNsTDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYyaYVDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYiugUDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYouMTDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYmrkUDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYhMEUDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYy6kUDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYk48VDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQY6cUVDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQY2_oTDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQY0c0VDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYjesTDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYnbwTDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYvtsTDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYjusTDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQY68sTDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQY4qEUDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQY0s0VDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYw_8UDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYg8QTDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYzKkUDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYgr4VDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQY2_cUDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQY9PITDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYiuUVDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "path": "Course/cs373/CourseRev/feb2012/Unit/318001", "open": false, "id": 318001, "nuggets": [{"nuggetType": "program", "name": "Path Smoothing", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYm7wTDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/319003", "suppliedCode": "# -----------\n# User Instructions\n#\n# Define a function smooth that takes a path as its input\n# (with optional parameters for weight_data, weight_smooth)\n# and returns a smooth path.\n#\n# Smoothing should be implemented by iteratively updating\n# each entry in newpath until some desired level of accuracy\n# is reached. The update should be done according to the\n# gradient descent equations given in the previous video:\n#\n# If your function isn't submitting it is possible that the\n# runtime is too long. Try sacrificing accuracy for speed.\n# -----------\n\n\nfrom math import *\n\n# Don't modify path inside your function.\npath = [[0, 0],\n        [0, 1],\n        [0, 2],\n        [1, 2],\n        [2, 2],\n        [3, 2],\n        [4, 2],\n        [4, 3],\n        [4, 4]]\n\n# ------------------------------------------------\n# smooth coordinates\n#\n\ndef smooth(path, weight_data = 0.5, weight_smooth = 0.1):\n\n    # Make a deep copy of path into newpath\n    newpath = [[0 for col in range(len(path[0]))] for row in range(len(path))]\n    for i in range(len(path)):\n        for j in range(len(path[0])):\n            newpath[i][j] = path[i][j]\n\n\n    #### ENTER CODE BELOW THIS LINE ###\n    \n    \n    \n    return newpath # Leave this line for the grader!\n\n# feel free to leave this and the following lines if you want to print.\nnewpath = smooth(path)\n\n# thank you - EnTerr - for posting this on our discussion forum\nfor i in range(len(path)):\n    print '['+ ', '.join('%.3f'%x for x in path[i]) +'] -> ['+ ', '.join('%.3f'%x for x in newpath[i]) +']'\n\n\n\n\n\n", "type": "Nugget", "id": 319003}, {"nuggetType": "quiz", "name": "Systematic Bias", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYnbwTDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/319005", "type": "Nugget", "id": 319005}, {"nuggetType": "lecture", "name": "Robot Motion", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "93d894e9-3c4b-4e81-8330-4c66e179ffa4", "name": "cs373_unit5_00_q_Robot-Motion", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJm8Eww", "youtube_id": "A7TVAOgeFiA", "youtube_state": "done", "path": "Course/cs373/Media/319001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:07,000\nWelcome to Unit 5. Today we talk about actual robot motion.\n\n2\n00:00:07,000 --> 00:00:11,000\nIn the previous unit we talked about how to find paths .\n\n3\n00:00:11,000 --> 00:00:16,000\nNow we'll talk about how to turn these paths into actual motion commands.\n\n4\n00:00:16,000 --> 00:00:20,000\nIn particular, we'll talk about generating smooth paths.\n\n5\n00:00:20,000 --> 00:00:23,000\nThen we'll talk about control.\n\n6\n00:00:23,000 --> 00:00:26,000\nIn particular, a method called PID control.\n\n7\n00:00:26,000 --> 00:00:30,000\nAs usual, you get a chance to program all these wonderful things.\n\n8\n00:00:30,000 --> 00:00:36,000\nYou might be remember that our planning took place in a discrete world,\n\n9\n00:00:36,000 --> 00:00:42,000\nand the type of plans we found look very much like this, \n\n10\n00:00:42,000 --> 00:00:46,000\nperhaps in response to obstacles over here.\n\n11\n00:00:46,000 --> 00:00:49,000\nNow, a path like this has lots of disadvantages.\n\n12\n00:00:49,000 --> 00:00:54,000\nYou don't want to a robot to go straight, take a 90-degree turn and go straight again.\n\n13\n00:00:54,000 --> 00:00:59,000\nFor one, a car can't even do this, but for another this will force the robot to move\n\n14\n00:00:59,000 --> 00:01:01,000\nreally slowly around the corner over here.\n\n15\n00:01:01,000 --> 00:01:04,000\nA much better path would look like this.\n\n16\n00:01:04,000 --> 00:01:06,000\nThis is a smoother path.\n\n17\n00:01:06,000 --> 00:01:10,000\nIn the extreme case, you might even generate a path just like this.\n\n18\n00:01:10,000 --> 00:01:16,000\nThe question becomes can we modify the blue path to look more like the red or the green path?\n\n19\n00:01:16,000 --> 00:01:23,000\nSuppose your car like a robot right over here wished to get to right over here.\n\n20\n00:01:23,000 --> 00:01:26,000\nWhich path would you prefer?\n\n21\n00:01:26,000 --> 00:01:29,000\nThe blue path, the red one, or the green one?\n\n22\n00:01:29,000 --> 00:01:31,000\nJust check one of the three.\n\n23\n00:01:31,000 --> 00:01:36,000\nThis is a question where I check your intuition. This is not a mathematically precise question.\n\n", "id": 319001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYgcQTDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/320001", "type": "Nugget", "id": 320001}, {"nuggetType": "lecture", "name": "Pid Implementation Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "1d7c6b21-6d3a-4d66-bd8b-33a907547733", "name": "cs373_unit5_13_s_PID-Implementation", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNPNFQw", "youtube_id": "dgZnqCfyCoA", "youtube_state": "uploading", "path": "Course/cs373/Media/354003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nHere is my solution. I implement a variable int_crosstrack_error outside my main loop\n\n2\n00:00:05,000 --> 00:00:07,000\nthen initialize with zero.\n\n3\n00:00:07,000 --> 00:00:12,000\nI then add to the int_crosstrack_error my local crosstrack_error.\n\n4\n00:00:12,000 --> 00:00:17,000\nThen I have a controller that steers in proportion to the int_crosstrack_error.\n\n5\n00:00:17,000 --> 00:00:27,000\nWhen I hit run, I find that my y variable slowly converges all the way down to 0 or 0.05.\n\n6\n00:00:27,000 --> 00:00:31,000\nI get even faster conversions when I set this parameter to 0.01,\n\n7\n00:00:31,000 --> 00:00:38,000\nlooking down you can see a little overshoot, but my controller converges to 0.0 fairly quickly\n\n8\n00:00:38,000 --> 00:00:40,000\nand then tends to stay close to 0.0.\n\n9\n00:00:40,000 --> 00:00:46,000\nThis PID controller is kind of the best solution for the control problem at hand.\n\n10\n00:00:46,000 --> 00:00:48,000\nYou just implemented one.\n\n11\n00:00:48,000 --> 00:00:51,000\nNow, here's the big question for you.\n\n12\n00:00:51,000 --> 00:00:55,000\nHow can we find good control gains\n\n13\n00:00:55,000 --> 00:01:01,000\nwhere control gains are these parameters tau p, d, and i.\n\n14\n00:01:01,000 --> 00:01:03,000\nNow, this is my favorite part of this class.\n\n15\n00:01:03,000 --> 00:01:07,000\nEvery one of my students has made it through it, and every one of my students \n\n16\n00:01:07,000 --> 00:01:14,000\nis puzzled why I insist on this, but when they implement it they get to love what I'm just about to show you.\n\n17\n00:01:14,000 --> 00:01:17,000\nThe answer is to called \"twiddle.\"\n\n18\n00:01:17,000 --> 00:01:21,000\nTwiddle is my favorite algorithm that I have used in my entire life.\n\n19\n00:01:21,000 --> 00:01:26,000\nSome people call it \"coordinate ascent\" to make it sound a little more sophisticated,\n\n20\n00:01:26,000 --> 00:01:31,000\nbut I just called it twiddle, because it really gets to the heart of what's happening.\n\n", "id": 354003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYg8QTDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/320003", "type": "Nugget", "id": 320003}, {"nuggetType": "quiz", "name": "Is Pd Enough", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQY68sTDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/321003", "type": "Nugget", "id": 321003}, {"nuggetType": "quiz", "name": "Robot Motion", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQY0dMTDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/322001", "type": "Nugget", "id": 322001}, {"nuggetType": "quiz", "name": "Smoothing Algorithm", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYutsTDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/323002", "type": "Nugget", "id": 323002}, {"nuggetType": "lecture", "name": "Path Smoothing", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "5686c6a6-0d3c-4c9e-9c78-aff1ef6d824e", "name": "cs373_unit5_04_p_Path-Smoothing", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPqZFAw", "youtube_id": "v0-OUApP_5Q", "youtube_state": "done", "path": "Course/cs373/Media/331002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nHow can we optimize these two terms over here?\n\n2\n00:00:04,000 --> 00:00:06,000\nThe idea is to use grading descent.\n\n3\n00:00:06,000 --> 00:00:13,000\nThat is, every time step we take a small step in the direction of minimizing the error over here.\n\n4\n00:00:13,000 --> 00:00:15,000\nHere's the expression for the first objective.\n\n5\n00:00:15,000 --> 00:00:20,000\nWhen we iterate, we assigned to yi recursively the old yi,\n\n6\n00:00:20,000 --> 00:00:26,000\nbut we subtract a term that's proportional to the deviation of yi to xi,\n\n7\n00:00:26,000 --> 00:00:28,000\nweighted by a weight function alpha.\n\n8\n00:00:28,000 --> 00:00:31,000\nThat's not exactly the same alpha as before.\n\n9\n00:00:31,000 --> 00:00:34,000\nWe set this alpha over here to 0.5.\n\n10\n00:00:34,000 --> 00:00:37,000\nFor the second term, we could implement this as follows\n\n11\n00:00:37,000 --> 00:00:47,000\nwhere we retain the old y variable, but we move a little bit in the direction of yi+1 and away from yi.\n\n12\n00:00:47,000 --> 00:00:50,000\nBut an even better implementation looks as follows.\n\n13\n00:00:50,000 --> 00:00:53,000\nThis is combining the step on the left and the step on the right.\n\n14\n00:00:53,000 --> 00:00:58,000\nRealizing that each yi occurs twice in this optimization term,\n\n15\n00:00:58,000 --> 00:01:03,000\none here and one here, we can now go and implement this in a single update rule\n\n16\n00:01:03,000 --> 00:01:09,000\nwhere we wish yi to be as close to yi-1 and simultaneously be as close as yi+1\n\n17\n00:01:09,000 --> 00:01:11,000\nby optimizing this combined term.\n\n18\n00:01:11,000 --> 00:01:15,000\nThink about this as little bit, but that's what I want you to implement.\n\n19\n00:01:15,000 --> 00:01:18,000\nWe're going to set beta to 0.1.\n\n20\n00:01:18,000 --> 00:01:21,000\nNow let's go and implement this.\n\n21\n00:01:21,000 --> 00:01:27,000\nAs a last hint, I don't want you to apply this optimization for the first or the last node in the sequence.\n\n22\n00:01:27,000 --> 00:01:30,000\nI want those to be unchanged, as we'll see in a second.\n\n23\n00:01:30,000 --> 00:01:32,000\nHere's the code I'll be giving you.\n\n24\n00:01:32,000 --> 00:01:36,000\nThere's a path in a 5 x 5 grid, starting at [0, 0] to [4, 4].\n\n25\n00:01:36,000 --> 00:01:41,000\nIf you look very carefully, it goes to the right at first, then straight down, then to the right again.\n\n26\n00:01:41,000 --> 00:01:45,000\nThis is exactly the path we discussed so far and looks like this graphically.\n\n27\n00:01:45,000 --> 00:01:51,000\nI now want you to implement the function \"smooth,\" which takes as an input the path,\n\n28\n00:01:51,000 --> 00:01:54,000\nour two weighting factors, and a small tolerance variable,\n\n29\n00:01:54,000 --> 00:01:57,000\nwhich I'll explain to you in a second, and it creates the new path,\n\n30\n00:01:57,000 --> 00:02:03,000\nwhich are the y's in our equations so far from the old path.\n\n31\n00:02:03,000 --> 00:02:05,000\nThis is a deep copy over here.\n\n32\n00:02:05,000 --> 00:02:07,000\nThen below the line, I want you to implement the smoother.\n\n33\n00:02:07,000 --> 00:02:11,000\nWhat the smoother does is iteratively applies the two equations I just gave you to all nodes \n\n34\n00:02:11,000 --> 00:02:14,000\nexcept for the first and the last,\n\n35\n00:02:14,000 --> 00:02:20,000\nand it does so until the total change observed in the update step becomes smaller than tolerance,\n\n36\n00:02:20,000 --> 00:02:23,000\nat which point we consider the smoother to have converged.\n\n37\n00:02:23,000 --> 00:02:28,000\nHere is my command. I compute a new path as a result of the function smooth.\n\n38\n00:02:28,000 --> 00:02:31,000\nIn your test, you should uncomment the \"newpath\" smooth routine\n\n39\n00:02:31,000 --> 00:02:33,000\nand the print routine that outputs my result,\n\n40\n00:02:33,000 --> 00:02:41,000\n \"Thank to EnTeer,\" a student who posted a much better way to output matrices on the discussion forum.\n\n41\n00:02:41,000 --> 00:02:44,000\nI'm going to use his or her code. Thank you so much.\n\n42\n00:02:44,000 --> 00:02:52,000\nHere's the result. After hitting \"Run,\" I have the original path over here--zeros all the way to [4, 4].\n\n43\n00:02:52,000 --> 00:02:56,000\nThe two initial and the end position, should be the same as before, so please don't modify them,\n\n44\n00:02:56,000 --> 00:03:00,000\nbut in between we get these interpolation positions over here.\n\n45\n00:03:00,000 --> 00:03:05,000\nIf you look at this, my original path didn't vary the x's at all for the first three steps\n\n46\n00:03:05,000 --> 00:03:11,000\nwhereas this one goes from [0, 0] to 0.17, so it got closer. It went down a little bit.\n\n47\n00:03:11,000 --> 00:03:14,000\nAlso, it went less to the right side than my original path.\n\n48\n00:03:14,000 --> 00:03:17,000\nWe went all the way to 2 over here to 1.8 over here.\n\n49\n00:03:17,000 --> 00:03:22,000\nWhat this means is that our new points lie a little bit like this.\n\n50\n00:03:22,000 --> 00:03:27,000\nAs you go through the list over here, you'll find that our new points really smooth out \n\n51\n00:03:27,000 --> 00:03:30,000\nthe path to something more like that.\n\n52\n00:03:30,000 --> 00:03:35,000\nNow, just to test this again, I go up and set the weight of the data to 0.\n\n53\n00:03:35,000 --> 00:03:37,000\nHere is a tricky quiz question.\n\n54\n00:03:37,000 --> 00:03:43,000\nSay we set alpha or our data weight to 0, and beta or our smoothing weight to 0.1,\n\n55\n00:03:43,000 --> 00:03:45,000\nand we run this to completion. What do we get?\n\n56\n00:03:45,000 --> 00:03:51,000\nThe original path? The straight line connecting the initial and the final location?\n\n57\n00:03:51,000 --> 00:03:53,000\nOr will everything collapse to a single point?\n\n58\n00:03:53,000 --> 00:03:57,000\nYou can try this out in the RDE before answering this quiz.\n\n", "id": 331002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYu9sTDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/323003", "type": "Nugget", "id": 323003}, {"nuggetType": "quiz", "name": "Proportional Control", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYvNsTDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/323004", "type": "Nugget", "id": 323004}, {"nuggetType": "lecture", "name": "Systematic Bias Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "1dd28b6a-ee98-4359-91a9-bc0437032582", "name": "cs373_unit5_11_s_Systematic-Bias", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGL3bEww", "youtube_id": "luDFEQcJsPc", "youtube_state": "done", "path": "Course/cs373/Media/323005", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nOf course it causes a new error.\n\n2\n00:00:03,000 --> 00:00:10,000\nIf I go to my output for 100 steps, I find that the y value is between 0.7 and 0.9.\n\n3\n00:00:10,000 --> 00:00:13,000\nIt really a lot of error.\n\n4\n00:00:13,000 --> 00:00:18,000\nPut differently, the robot oscillates a bit like this with a fairly constant \n\n5\n00:00:18,000 --> 00:00:21,000\nnew offset error due to this bias.\n\n6\n00:00:21,000 --> 00:00:24,000\nEven though the bias was in steering, it manifests itself \n\n7\n00:00:24,000 --> 00:00:29,000\nas an increased crosstrack error in the y direction.\n\n", "id": 323005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYvtsTDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/323006", "type": "Nugget", "id": 323006}, {"nuggetType": "lecture", "name": "Robot Motion Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "f150cd3f-4fa0-4a17-acf9-2ed2c9ac156f", "name": "cs373_unit5_00_s_Robot-Motion", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLnbEww", "youtube_id": "QKAI0xkm41M", "youtube_state": "done", "path": "Course/cs373/Media/323001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nThe answer is subtle. I would actually prefer the red path.\n\n2\n00:00:04,000 --> 00:00:07,000\nThe reason is as the robot is facing the right side over here,\n\n3\n00:00:07,000 --> 00:00:10,000\nit can't take a 45-degree turn onto the green path.\n\n4\n00:00:10,000 --> 00:00:15,000\nIt should slowly move around the corner, go down here, and slowly move to the right.\n\n5\n00:00:15,000 --> 00:00:20,000\nThe greet path might be shorter, but it requires two 45-degree instantaeous turns, \n\n6\n00:00:20,000 --> 00:00:23,000\nwhich are unfeasible for the robot.\n\n7\n00:00:23,000 --> 00:00:27,000\nTo some extent, we'd like to find a smooth path that is executable by the robot.\n\n", "id": 323001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYoeMTDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/324001", "type": "Nugget", "id": 324001}, {"nuggetType": "program", "name": "Implement P Controller", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYouMTDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/324002", "suppliedCode": "# -----------\n# User Instructions\n#\n# Implement a P controller by running 100 iterations\n# of robot motion. The steering angle should be set\n# by the parameter tau so that:\n#\n# steering = -tau * crosstrack_error\n#\n# Note that tau is called \"param\" in the function\n# run to be completed below.\n#\n# Your code should print output that looks like\n# the output shown in the video. That is, at each step:\n# print myrobot, steering\n#\n# Only modify code at the bottom!\n# ------------\n \nfrom math import *\nimport random\n\n\n# ------------------------------------------------\n# \n# this is the robot class\n#\n\nclass robot:\n\n    # --------\n    # init: \n    #    creates robot and initializes location/orientation to 0, 0, 0\n    #\n\n    def __init__(self, length = 20.0):\n        self.x = 0.0\n        self.y = 0.0\n        self.orientation = 0.0\n        self.length = length\n        self.steering_noise = 0.0\n        self.distance_noise = 0.0\n        self.steering_drift = 0.0\n\n    # --------\n    # set: \n    #\tsets a robot coordinate\n    #\n\n    def set(self, new_x, new_y, new_orientation):\n\n        self.x = float(new_x)\n        self.y = float(new_y)\n        self.orientation = float(new_orientation) % (2.0 * pi)\n\n\n    # --------\n    # set_noise: \n    #\tsets the noise parameters\n    #\n\n    def set_noise(self, new_s_noise, new_d_noise):\n        # makes it possible to change the noise parameters\n        # this is often useful in particle filters\n        self.steering_noise = float(new_s_noise)\n        self.distance_noise = float(new_d_noise)\n\n    # --------\n    # set_steering_drift: \n    #\tsets the systematical steering drift parameter\n    #\n\n    def set_steering_drift(self, drift):\n        self.steering_drift = drift\n        \n    # --------\n    # move: \n    #    steering = front wheel steering angle, limited by max_steering_angle\n    #    distance = total distance driven, most be non-negative\n\n    def move(self, steering, distance, \n             tolerance = 0.001, max_steering_angle = pi / 4.0):\n\n        if steering > max_steering_angle:\n            steering = max_steering_angle\n        if steering < -max_steering_angle:\n            steering = -max_steering_angle\n        if distance < 0.0:\n            distance = 0.0\n\n\n        # make a new copy\n        res = robot()\n        res.length         = self.length\n        res.steering_noise = self.steering_noise\n        res.distance_noise = self.distance_noise\n        res.steering_drift = self.steering_drift\n\n        # apply noise\n        steering2 = random.gauss(steering, self.steering_noise)\n        distance2 = random.gauss(distance, self.distance_noise)\n\n        # apply steering drift\n        steering2 += self.steering_drift\n\n        # Execute motion\n        turn = tan(steering2) * distance2 / res.length\n\n        if abs(turn) < tolerance:\n\n            # approximate by straight line motion\n\n            res.x = self.x + (distance2 * cos(self.orientation))\n            res.y = self.y + (distance2 * sin(self.orientation))\n            res.orientation = (self.orientation + turn) % (2.0 * pi)\n\n        else:\n\n            # approximate bicycle model for motion\n\n            radius = distance2 / turn\n            cx = self.x - (sin(self.orientation) * radius)\n            cy = self.y + (cos(self.orientation) * radius)\n            res.orientation = (self.orientation + turn) % (2.0 * pi)\n            res.x = cx + (sin(res.orientation) * radius)\n            res.y = cy - (cos(res.orientation) * radius)\n\n        return res\n\n    def __repr__(self):\n        return '[x=%.5f y=%.5f orient=%.5f]'  % (self.x, self.y, self.orientation)\n\n############## ADD / MODIFY CODE BELOW ####################\n    \n# ------------------------------------------------------------------------\n#\n# run - does a single control run\n\n\ndef run(param):\n    myrobot = robot()\n    myrobot.set(0.0, 1.0, 0.0)\n    speed = 1.0 # motion distance is equal to speed (we assume time = 1)\n    N = 100\n    #\n    # Add Code Here\n    # \n\nrun(0.1) # call function with parameter tau of 0.1 and print results\n", "type": "Nugget", "id": 324002}, {"nuggetType": "lecture", "name": "Smoothing Algorithm", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "5e58a9a8-e417-4558-aeb1-31f832965571", "name": "cs373_unit5_01_q_Smoothing-Algorithm", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPHyEww", "youtube_id": "pjgfffzvbUg", "youtube_state": "uploading", "path": "Course/cs373/Media/326001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:08,000\nIn the path planning class, we specified paths as a sequence of points in a 2D grid\n\n2\n00:00:08,000 --> 00:00:10,000\njust like this over here.\n\n3\n00:00:10,000 --> 00:00:14,000\nFor the smoothing purposes, we will call each point xi.\n\n4\n00:00:14,000 --> 00:00:20,000\nThis is a sequence that goes from x0 to xn-1, \n\n5\n00:00:20,000 --> 00:00:25,000\nand each of the x's is really a 2-dimensional coordinate, but that should be immaterial to the smoothing.\n\n6\n00:00:25,000 --> 00:00:28,000\nYou could do this in 1D, 2D, or 3D.\n\n7\n00:00:28,000 --> 00:00:34,000\nHere's the smoothing algorithm. Initially we create variable yi that are the same \n\n8\n00:00:34,000 --> 00:00:39,000\nas all the xi's. Remember that these are the non-smooth locations that the planner has found.\n\n9\n00:00:39,000 --> 00:00:41,000\nThen we optimize two criteria.\n\n10\n00:00:41,000 --> 00:00:47,000\nThe first is minimizing this expression over here, and the second looks as follows.\n\n11\n00:00:47,000 --> 00:00:52,000\nIn the first one we minimize the error of the ith original point with the ith smooth point,\n\n12\n00:00:52,000 --> 00:00:57,000\nand the second we minimize the distance between consecutive smooth points, both to the square.\n\n13\n00:00:57,000 --> 00:00:59,000\nHere's a little quiz.\n\n14\n00:00:59,000 --> 00:01:04,000\n If we only apply the first criteria--forget about the second one--will we get the original path,\n\n15\n00:01:04,000 --> 00:01:09,000\nand smooth path, or no path. Please check exactly one of those boxes.\n\n", "id": 326001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYiusTDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/325002", "type": "Nugget", "id": 325002}, {"nuggetType": "quiz", "name": "Zero Data Weight", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYjOsTDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/325004", "type": "Nugget", "id": 325004}, {"nuggetType": "lecture", "name": "Systematic Bias", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "172762da-52bf-46ea-bcac-476b846664a5", "name": "cs373_unit5_11_q_Systematic-Bias", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPPvFAw", "youtube_id": "1wxFEcqq3_c", "youtube_state": "done", "path": "Course/cs373/Media/342003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nLet's talk about a problem that often occurs in robotics called a \"systematic bias.\"\n\n2\n00:00:04,000 --> 00:00:06,000\nIt goes as follows.\n\n3\n00:00:06,000 --> 00:00:12,000\nWhen you ordered your car, you believed the front wheels were 100% aligned,\n\n4\n00:00:12,000 --> 00:00:17,000\nbut your mechanic made a mistake, and he aligned the wheels a little bit at an angle.\n\n5\n00:00:17,000 --> 00:00:21,000\nNow, for people that isn't a big concern. When we notice this we just steer a little bit stronger.\n\n6\n00:00:21,000 --> 00:00:25,000\nBut let's try this out with out our proportional controller.\n\n7\n00:00:25,000 --> 00:00:31,000\nI'm now adding a line that sets the steering drift to be 10 degrees,\n\n8\n00:00:31,000 --> 00:00:35,000\nwhich in radians is this expression over here, using set_steering_drift command.\n\n9\n00:00:35,000 --> 00:00:39,000\nI now want you to run my proportional controller with parameter 0.2,\n\n10\n00:00:39,000 --> 00:00:43,000\nand for now we're going to set the differential controller to zero.\n\n11\n00:00:43,000 --> 00:00:45,000\nWhen you do this, what happens?\n\n12\n00:00:45,000 --> 00:00:49,000\nIt works just as before or it causes a new, big crosstrack error?\n\n13\n00:00:49,000 --> 00:00:52,000\nGo try it out.\n\n", "id": 342003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYjesTDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/325005", "type": "Nugget", "id": 325005}, {"nuggetType": "lecture", "name": "Is Pd Enough", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "e874d19b-fc3f-455d-8135-b594d547d79b", "name": "cs373_unit5_12_q_Is-PD-Enough", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOKeFQw", "youtube_id": "gDbpwPdStlY", "youtube_state": "done", "path": "Course/cs373/Media/348002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nHere's a question for you that will require some thought, \n\n2\n00:00:03,000 --> 00:00:05,000\nand you can try it out before answering this.\n\n3\n00:00:05,000 --> 00:00:09,000\nCan the differential term solve this problem?\n\n4\n00:00:09,000 --> 00:00:12,000\nYes or no?\n\n", "id": 348002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYjusTDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/325006", "type": "Nugget", "id": 325006}, {"nuggetType": "lecture", "name": "Parameter Optimization Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "13481f0e-6e43-49cc-82ee-2738c210f7ab", "name": "cs373_unit5_15_s_Parameter-Optimization", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNz3FAw", "youtube_id": "YQ5Pa-OKQm0", "youtube_state": "uploading", "path": "Course/cs373/Media/343004", "transcript": "\ufeff", "id": 343004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQY9PITDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/326004", "type": "Nugget", "id": 326004}, {"nuggetType": "program", "name": "Pd Controller", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQY2_oTDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/327003", "suppliedCode": "# -----------\n# User Instructions\n#\n# Implement a PD controller by running 100 iterations\n# of robot motion. The steering angle should be set\n# by the parameter tau so that:\n#\n# steering = -tau_p * CTE - tau_d * diff_CTE\n# where differential crosstrack error (diff_CTE)\n# is given by CTE(t) - CTE(t-1)\n#\n# Your code should print output that looks like\n# the output shown in the video.\n#\n# Only modify code at the bottom!\n# ------------\n \nfrom math import *\nimport random\n\n\n# ------------------------------------------------\n# \n# this is the robot class\n#\n\nclass robot:\n\n    # --------\n    # init: \n    #    creates robot and initializes location/orientation to 0, 0, 0\n    #\n\n    def __init__(self, length = 20.0):\n        self.x = 0.0\n        self.y = 0.0\n        self.orientation = 0.0\n        self.length = length\n        self.steering_noise = 0.0\n        self.distance_noise = 0.0\n        self.steering_drift = 0.0\n\n    # --------\n    # set: \n    #\tsets a robot coordinate\n    #\n\n    def set(self, new_x, new_y, new_orientation):\n\n        self.x = float(new_x)\n        self.y = float(new_y)\n        self.orientation = float(new_orientation) % (2.0 * pi)\n\n\n    # --------\n    # set_noise: \n    #\tsets the noise parameters\n    #\n\n    def set_noise(self, new_s_noise, new_d_noise):\n        # makes it possible to change the noise parameters\n        # this is often useful in particle filters\n        self.steering_noise = float(new_s_noise)\n        self.distance_noise = float(new_d_noise)\n\n    # --------\n    # set_steering_drift: \n    #\tsets the systematical steering drift parameter\n    #\n\n    def set_steering_drift(self, drift):\n        self.steering_drift = drift\n        \n    # --------\n    # move: \n    #    steering = front wheel steering angle, limited by max_steering_angle\n    #    distance = total distance driven, most be non-negative\n\n    def move(self, steering, distance, \n             tolerance = 0.001, max_steering_angle = pi / 4.0):\n\n        if steering > max_steering_angle:\n            steering = max_steering_angle\n        if steering < -max_steering_angle:\n            steering = -max_steering_angle\n        if distance < 0.0:\n            distance = 0.0\n\n\n        # make a new copy\n        res = robot()\n        res.length         = self.length\n        res.steering_noise = self.steering_noise\n        res.distance_noise = self.distance_noise\n        res.steering_drift = self.steering_drift\n\n        # apply noise\n        steering2 = random.gauss(steering, self.steering_noise)\n        distance2 = random.gauss(distance, self.distance_noise)\n\n        # apply steering drift\n        steering2 += self.steering_drift\n\n        # Execute motion\n        turn = tan(steering2) * distance2 / res.length\n\n        if abs(turn) < tolerance:\n\n            # approximate by straight line motion\n\n            res.x = self.x + (distance2 * cos(self.orientation))\n            res.y = self.y + (distance2 * sin(self.orientation))\n            res.orientation = (self.orientation + turn) % (2.0 * pi)\n\n        else:\n\n            # approximate bicycle model for motion\n\n            radius = distance2 / turn\n            cx = self.x - (sin(self.orientation) * radius)\n            cy = self.y + (cos(self.orientation) * radius)\n            res.orientation = (self.orientation + turn) % (2.0 * pi)\n            res.x = cx + (sin(res.orientation) * radius)\n            res.y = cy - (cos(res.orientation) * radius)\n\n        return res\n\n    def __repr__(self):\n        return '[x=%.5f y=%.5f orient=%.5f]'  % (self.x, self.y, self.orientation)\n\n############## ADD / MODIFY CODE BELOW ####################\n\n# ------------------------------------------------------------------------\n#\n# run - does a single control run.\n\n\ndef run(param1, param2):\n    myrobot = robot()\n    myrobot.set(0.0, 1.0, 0.0)\n    speed = 1.0 # motion distance is equal to speed (we assume time = 1)\n    N = 100\n    #\n    # Enter code here\n    #\n\n# Call your function with parameters of 0.2 and 3.0 and print results\nrun(0.2, 3.0)\n\n\n\n", "type": "Nugget", "id": 327003}, {"nuggetType": "lecture", "name": "Smoothing Algorithm Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "54b9be18-1203-4b93-a85f-9be4a6218f99", "name": "cs373_unit5_01_s_Smoothing-Algorithm", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMGCFAw", "youtube_id": "CHjsYzc_IwE", "youtube_state": "done", "path": "Course/cs373/Media/328001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nThe answer is if we just optimize this one over here, we get the original path,\n\n2\n00:00:04,000 --> 00:00:07,000\nand the reason is obvious. It's already zero for the original setting.\n\n3\n00:00:07,000 --> 00:00:11,000\nFurther minimization doesn't make it any smaller. It's a quadratic error. \n\n4\n00:00:11,000 --> 00:00:14,000\nThe minimization has no effect. We just get the original path.\n\n", "id": 328001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYqYoUDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/329001", "type": "Nugget", "id": 329001}, {"nuggetType": "lecture", "name": "Smoothing Algorithm 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "4b34a900-3d0f-4963-a6ad-1112e14dd433", "name": "cs373_unit5_02_q_Smoothing-Algorithm-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPmZFAw", "youtube_id": "9mOt7cnCxzo", "youtube_state": "done", "path": "Course/cs373/Media/331001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nNow let me ask the exact same question just for the second criterion.\n\n2\n00:00:04,000 --> 00:00:06,000\nForget about the first one.\n\n3\n00:00:06,000 --> 00:00:09,000\nWhat happens if you only optimize this criterion over here.\n\n4\n00:00:09,000 --> 00:00:12,000\nDo we get the original path, smooth path, or no path.\n\n", "id": 331001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYkpIUDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/330002", "type": "Nugget", "id": 330002}, {"nuggetType": "lecture", "name": "Is Pd Enough Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "0cf85a66-0c89-4279-945d-d100dd205129", "name": "cs373_unit5_12_s_Is-PD-Enough", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMKCFAw", "youtube_id": "YS9eR49WP44", "youtube_state": "done", "path": "Course/cs373/Media/328002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nThe correct answer is no. Let us try this out.\n\n2\n00:00:03,000 --> 00:00:08,000\nLet's enter a 3.0 for the differential term, run everything, \n\n3\n00:00:08,000 --> 00:00:10,000\nand the y error is still large.\n\n4\n00:00:10,000 --> 00:00:16,000\nIt converges now, 0.87, but it's still really, really large.\n\n", "id": 328002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQY4qEUDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/332002", "type": "Nugget", "id": 332002}, {"nuggetType": "quiz", "name": "Smoothing Algorithm 2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYyakUDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/333001", "type": "Nugget", "id": 333001}, {"nuggetType": "lecture", "name": "Proportional Control", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "2be930d3-aad6-4c46-bc1b-8c5d9e61318d", "name": "cs373_unit5_07_q_Proportional-Control", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJOSFAw", "youtube_id": "gGo-gSFqYqg", "youtube_state": "done", "path": "Course/cs373/Media/330003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:06,000\nWhat you just learned is called a \"P-controller\" where P stands for proportional.\n\n2\n00:00:06,000 --> 00:00:10,000\nHere is a really trick question by which I want to test your intuition--\n\n3\n00:00:10,000 --> 00:00:13,000\none that doesn't have a unique answer, but it has a best answer.\n\n4\n00:00:13,000 --> 00:00:19,000\nSuppose you do what I just said. You steer in proportion to the crosstrack error.\n\n5\n00:00:19,000 --> 00:00:26,000\nThat is, your steering angle is proportional by some factor of tau to the crosstrack error.\n\n6\n00:00:26,000 --> 00:00:28,000\nWhat will happen with the car?\n\n7\n00:00:28,000 --> 00:00:33,000\nIt never quite reaches the reference trajectory? It overshoots?\n\n8\n00:00:33,000 --> 00:00:36,000\nOr either can happen?\n\n", "id": 330003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYyqkUDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/333002", "type": "Nugget", "id": 333002}, {"nuggetType": "quiz", "name": "Oscillations", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYy6kUDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/333003", "type": "Nugget", "id": 333003}, {"nuggetType": "lecture", "name": "Twiddle", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "7466091f-8c1a-458d-a9cd-69c668639615", "name": "cs373_unit5_14_l_Twiddle", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJWSFAw", "youtube_id": "2uQ2BSzDvXs", "youtube_state": "uploading", "path": "Course/cs373/Media/330005", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nIn Twiddle, we're trying to optimize for a set of parameters.\n\n2\n00:00:04,000 --> 00:00:09,000\nTo do so, our function run() must return a goodness.\n\n3\n00:00:09,000 --> 00:00:11,000\nThis goodness value might be the average crosstrack error.\n\n4\n00:00:11,000 --> 00:00:16,000\nSay I wanted to implement Twiddle so as to minimize the average crosstrack error.\n\n5\n00:00:16,000 --> 00:00:21,000\nIf that's the case, then the output of run depends on the three parameters.\n\n6\n00:00:21,000 --> 00:00:23,000\nHere's how Twiddle works. \n\n7\n00:00:23,000 --> 00:00:28,000\nBuild a parameter vector of our 3-target parameters, and initialize it with zero.\n\n8\n00:00:28,000 --> 00:00:35,000\nAlso, build a vector of potential changes that you want to probe and initialize them for now with 1.\n\n9\n00:00:35,000 --> 00:00:39,000\nThen you can run our command run( ) with our parameters, \n\n10\n00:00:39,000 --> 00:00:44,000\nand whatever it outputs is our best error so far.\n\n11\n00:00:44,000 --> 00:00:48,000\nNow we wish to modify p as to make the error smaller.\n\n12\n00:00:48,000 --> 00:00:51,000\nThat's where Twiddle comes in. It's a really smart algorithm, I believe.\n\n13\n00:00:51,000 --> 00:00:54,000\nWe sequentially go through these parameters.\n\n14\n00:00:54,000 --> 00:00:58,000\nObviously, you shouldn't write 3. You should write len of p.\n\n15\n00:00:58,000 --> 00:01:02,000\nFirst we tried to increase p by our probing value,\n\n16\n00:01:02,000 --> 00:01:06,000\ncompute a new error for this new modified p.\n\n17\n00:01:06,000 --> 00:01:10,000\nIf this new error is better than our best error, then we do two things.\n\n18\n00:01:10,000 --> 00:01:17,000\nFirst, we set best_err to err, and we even modify our dp to a slightly larger value\n\n19\n00:01:17,000 --> 00:01:20,000\nby multiplying it with 1.1.\n\n20\n00:01:20,000 --> 00:01:23,000\nOtherwise, we try the other way.\n\n21\n00:01:23,000 --> 00:01:29,000\nWe subtract dp from p--and we have to do it twice now because we added it before.\n\n22\n00:01:29,000 --> 00:01:31,000\nThen we do the same thing again as over here. I'm not going to write it out.\n\n23\n00:01:31,000 --> 00:01:38,000\nWe check whether the error is better than our best error, we retain it, and we multiply dp by 1.1.\n\n24\n00:01:38,000 --> 00:01:41,000\nBut if both of those fail--this one over here and this one over here--\n\n25\n00:01:41,000 --> 00:01:49,000\nwe set p[ i ] back to the original value, and we decrease our probing thing over here,\n\n26\n00:01:49,000 --> 00:01:54,000\nsay, by multiplying it with 0.9.\n\n27\n00:01:54,000 --> 00:01:59,000\nThat's the core of Twiddle, and what it really does is for each coordinate in isolation\n\n28\n00:01:59,000 --> 00:02:03,000\nit moves our parameter down a little bit by this value over here.\n\n29\n00:02:03,000 --> 00:02:10,000\nIf it then finds a better solution, it retains it, and it even increments the probing interval.\n\n30\n00:02:10,000 --> 00:02:15,000\nIf it fails to find a better solution, it goes back to the original and decreases our probing interval.\n\n31\n00:02:15,000 --> 00:02:22,000\nWe do this entire thing so long as the sum of the dp's is larger than the threshold.\n\n32\n00:02:22,000 --> 00:02:34,000\nSomewhere in here we say while some of dp is larger than 0.00001.\n\n33\n00:02:34,000 --> 00:02:36,000\nIt's hard to read, but I hope you can follow it.\n\n34\n00:02:36,000 --> 00:02:41,000\nThis is Twiddle. Let me put this into pictures.\n\n35\n00:02:41,000 --> 00:02:44,000\nWe have three parameters--0, 0, 0.\n\n36\n00:02:44,000 --> 00:02:49,000\nThen in the first iteration, we bump one of the parameters up and see if it improves the error.\n\n37\n00:02:49,000 --> 00:02:51,000\nIf that's the case, we retain it.\n\n38\n00:02:51,000 --> 00:02:53,000\nThen we go to the second parameter. We bump it up. It might not work.\n\n39\n00:02:53,000 --> 00:02:56,000\nWe bump it down and maybe retain that one, and so on.\n\n40\n00:02:56,000 --> 00:03:02,000\nNow, as we keep bumping up, we might find that neither bumping up nor bumping down helps.\n\n41\n00:03:02,000 --> 00:03:06,000\nWhat we do instead is we retain the original solution but make our probing interval \n\n42\n00:03:06,000 --> 00:03:09,000\nsmaller than before by a factor of 0.9.\n\n43\n00:03:09,000 --> 00:03:14,000\nIn doing so, we can zoom in more and more into a detailed parameter until it finally converges.\n\n44\n00:03:14,000 --> 00:03:20,000\nIt's local hill climber, but it happens to be really, really efficient.\n\n", "id": 330005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYzKkUDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/333004", "type": "Nugget", "id": 333004}, {"nuggetType": "lecture", "name": "Smoothing Algorithm 2 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "49209b91-e3a7-400c-9e20-e78eb1d529e5", "name": "cs373_unit5_02_s_Smoothing-Algorithm-2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLGxFAw", "youtube_id": "0I-8WJdkWrk", "youtube_state": "done", "path": "Course/cs373/Media/334001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nThe answer here is you get no path.\n\n2\n00:00:02,000 --> 00:00:07,000\nThis criterion alone asks that all the y's are as similar as possible.\n\n3\n00:00:07,000 --> 00:00:11,000\nIf it's minimized, then all the y's are the same, which means you only get a single point,\n\n4\n00:00:11,000 --> 00:00:14,000\nand we get no path at all.\n\n", "id": 334001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYmbkUDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/335001", "type": "Nugget", "id": 335001}, {"nuggetType": "lecture", "name": "Implement P Controller Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "a72e6484-4047-49bd-a6a0-f8c030d4ced5", "name": "cs373_unit5_08_s_Implement-P-Controller", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJSSFAw", "youtube_id": "wvdFPAOCb64", "youtube_state": "done", "path": "Course/cs373/Media/330004", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nHere is my implementation. It's really simple.\n\n2\n00:00:04,000 --> 00:00:07,000\nI execute the following loop 100 times.\n\n3\n00:00:07,000 --> 00:00:10,000\nI set the crosstrack error to my robot y.\n\n4\n00:00:10,000 --> 00:00:15,000\nThe steering angle becomes minus my control parameter times the crosstrack error.\n\n5\n00:00:15,000 --> 00:00:19,000\nI call the move command with a steering angle and the given speed.\n\n6\n00:00:19,000 --> 00:00:23,000\nI print as an output my robot along with the steering direction.\n\n7\n00:00:23,000 --> 00:00:26,000\nThis simple routine just does it.\n\n", "id": 330004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYmrkUDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/335002", "type": "Nugget", "id": 335002}, {"nuggetType": "lecture", "name": "Pid Control Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "ebf8017a-1e97-451d-b599-709a4ed23bc8", "name": "cs373_unit5_06_s_PID-Control", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPuZFAw", "youtube_id": "ZDC4KAJq6wQ", "youtube_state": "done", "path": "Course/cs373/Media/331003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nAnd yes, you'll steer in proportion to the crosstrack error, \n\n2\n00:00:04,000 --> 00:00:12,000\nwhich means the larger the error, the more you're willing to turn towards the target trajectory.\n\n3\n00:00:12,000 --> 00:00:18,000\nYou can see that this works. As you get closer to trajectory, your steering will be slower and slower.\n\n4\n00:00:18,000 --> 00:00:20,000\nYou will reach the trajectory.\n\n5\n00:00:20,000 --> 00:00:22,000\nClearly the other two answers are really bad.\n\n6\n00:00:22,000 --> 00:00:26,000\nA constant steering will put you in a circle and not in a straight line.\n\n7\n00:00:26,000 --> 00:00:31,000\nRandom steering, if you ever implement this, is a really bad idea.\n\n8\n00:00:31,000 --> 00:00:34,000\nBelieve me. We accidentally did this once.\n\n9\n00:00:34,000 --> 00:00:37,000\nIt's a really bad idea.\n\n", "id": 331003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYg8EUDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/336003", "type": "Nugget", "id": 336003}, {"nuggetType": "lecture", "name": "Oscillations", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "6106ef0f-a4c9-40ee-99ca-503d28c78bda", "name": "cs373_unit5_09_q_Oscillations", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLO0Eww", "youtube_id": "CO3zjkxBaIc", "youtube_state": "done", "path": "Course/cs373/Media/318003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:06,000\nLet's now modify the parameter to 0.3, and here is my quiz.\n\n2\n00:00:06,000 --> 00:00:11,000\nIf you modify the control parameter from 0.1 to 0.3, what happens?\n\n3\n00:00:11,000 --> 00:00:16,000\nIt oscillates faster? It oscillates slower? Or nothing?\n\n4\n00:00:16,000 --> 00:00:19,000\nPlease check exactly one of those.\n\n", "id": 318003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYhMEUDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/336004", "type": "Nugget", "id": 336004}, {"nuggetType": "lecture", "name": "Smoothing Algorithm 3", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "32ab8c3f-7d48-4047-82f9-2cd8c029bc87", "name": "cs373_unit5_03_q_Smoothing-Algorithm-3", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIHBFAw", "youtube_id": "YesKg2m9vng", "youtube_state": "done", "path": "Course/cs373/Media/336001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nObviously these two criteria are in conflict to each other.\n\n2\n00:00:03,000 --> 00:00:08,000\nIn reality, what we do is minimize both, and you do that with some sort of a weight, alpha,\n\n3\n00:00:08,000 --> 00:00:10,000\nwhich you can play with in the code.\n\n4\n00:00:10,000 --> 00:00:13,000\nThe stronger alpha, the smoother the path.\n\n5\n00:00:13,000 --> 00:00:16,000\nThe smaller alpha, the more we retain the original points.\n\n6\n00:00:16,000 --> 00:00:21,000\nHere's my next question. Suppose we optimize both at the same time with an appropriate alpha?\n\n7\n00:00:21,000 --> 00:00:25,000\nWhat do we get? An original path, a smooth path, or no path?\n\n", "id": 336001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQY6cgUDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/337001", "type": "Nugget", "id": 337001}, {"nuggetType": "lecture", "name": "Path Smoothing Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "b5ce57d1-67a3-4485-8d64-5e3ba6572a27", "name": "cs373_unit5_04_s_Path-Smoothing", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGILBFAw", "youtube_id": "ffLPf8kI6qg", "youtube_state": "done", "path": "Course/cs373/Media/336002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nThe answer is a straight line.\n\n2\n00:00:02,000 --> 00:00:04,000\nThe reason is really subtle. \n\n3\n00:00:04,000 --> 00:00:07,000\nIt's because we're not modifying the first and last point.\n\n4\n00:00:07,000 --> 00:00:09,000\nOtherwise, it would be a single point.\n\n5\n00:00:09,000 --> 00:00:12,000\nI just hit the run button, and if you look at these coordinates,\n\n6\n00:00:12,000 --> 00:00:19,000\nthey go in 0.5 increments from 0, 1, 2, 3, and 4, and the same is true with this coordinate over here.\n\n7\n00:00:19,000 --> 00:00:22,000\nThis is obviously the coordinates of a straight line.\n\n8\n00:00:22,000 --> 00:00:29,000\nAs a result of our smoother, applied with a smoothing weight of 0.1 and no data weight.\n\n9\n00:00:29,000 --> 00:00:34,000\nIf we change this to no smoothing weight, we obviously get the original path.\n\n10\n00:00:34,000 --> 00:00:38,000\nSo we look at the right side as well as the left side--it's now identical.\n\n11\n00:00:38,000 --> 00:00:41,000\nWhen you implement your algorithm, please test this on those settings,\n\n12\n00:00:41,000 --> 00:00:46,000\nand we will give you a different path in our testing to see if the algorithm is implemented correctly.\n\n13\n00:00:46,000 --> 00:00:49,000\nCongratulations. You just learned how to produce a smooth path.\n\n14\n00:00:49,000 --> 00:00:51,000\nThere are a few caveats.\n\n15\n00:00:51,000 --> 00:00:55,000\nIf you apply this algorithm is a robot world like this\n\n16\n00:00:55,000 --> 00:00:58,000\n where an A-star planner might give you something like this,\n\n17\n00:00:58,000 --> 00:01:02,000\nthe smooth path might then lead straight through the obstacle, which you don't want.\n\n18\n00:01:02,000 --> 00:01:05,000\nThere are ways to accommodate this, which I just hinted at.\n\n19\n00:01:05,000 --> 00:01:09,000\nOne is to use dynamic programming with a stochastic action function,\n\n20\n00:01:09,000 --> 00:01:11,000\nand you've learned this in the previous homework assignment.\n\n21\n00:01:11,000 --> 00:01:13,000\nThat way we'll stay away from the obstacle.\n\n22\n00:01:13,000 --> 00:01:16,000\nThe second one is to introduce a term that propels you away from obstacles.\n\n23\n00:01:16,000 --> 00:01:20,000\nI won't go into any depth here, but in your optimization you could have a term \n\n24\n00:01:20,000 --> 00:01:24,000\nthat pushes you away from obstacles by maximizing \n\n25\n00:01:24,000 --> 00:01:27,000\nthe distance between the nearest obstacle and data point.\n\n26\n00:01:27,000 --> 00:01:31,000\nWhen you toss that in, you get a path that might look more like this\n\n27\n00:01:31,000 --> 00:01:35,000\nthat is still smooth but maximizes your clearance to obstacles.\n\n28\n00:01:35,000 --> 00:01:38,000\nWe will revisit this in the homework assignment.\n\n", "id": 336002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQY6sgUDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/337002", "type": "Nugget", "id": 337002}, {"nuggetType": "quiz", "name": "Smoothing Algorithm 3", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYudgUDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/339001", "type": "Nugget", "id": 339001}, {"nuggetType": "lecture", "name": "Pid Control", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "f21fb94a-48df-4822-9748-a942f6c4b8cb", "name": "cs373_unit5_06_q_PID-Control", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNLQFAw", "youtube_id": "-8w0prceask", "youtube_state": "uploading", "path": "Course/cs373/Media/338002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nLet's now talk about the second part of this lesson called PID control.\n\n2\n00:00:04,000 --> 00:00:10,000\nPID control is a vast field in control, and many, many classes can be taught about this one subject matter.\n\n3\n00:00:10,000 --> 00:00:14,000\nWhat I'll do is I'll give you the very basics, and I'll let you implement the very basics.\n\n4\n00:00:14,000 --> 00:00:15,000\nI promise it'll be fun.\n\n5\n00:00:15,000 --> 00:00:20,000\nYou'll be able to drive a car around, and the Google car to the present day uses a version\n\n6\n00:00:20,000 --> 00:00:25,000\nof this exact same controller that is, of course, much more tuned the specifics of our car.\n\n7\n00:00:25,000 --> 00:00:29,000\nBut you get to see some of the essence of what it means to control a car.\n\n8\n00:00:29,000 --> 00:00:36,000\nHere is the problem. Consider the following car with a steerable front axle and 2 non-steerable wheels in the back.\n\n9\n00:00:36,000 --> 00:00:40,000\nSay we wished this car to drive along this line, which is the output of our smoother we just discussed.\n\n10\n00:00:40,000 --> 00:00:43,000\nLet's assume the car has a fixed forward velocity, \n\n11\n00:00:43,000 --> 00:00:48,000\nbut you have the ability to set the steering angle of the car. How would you do this?\n\n12\n00:00:48,000 --> 00:00:50,000\nYou would keep the steering constant?\n\n13\n00:00:50,000 --> 00:00:52,000\nYou would use random steering commands?\n\n14\n00:00:52,000 --> 00:00:57,000\nOr you could set the steering angle in proportion to what's known as the \"crosstrack error,\"\n\n15\n00:00:57,000 --> 00:01:03,000\nwhich is the lateral distance between the vehicle and the so-called reference trajectory.\n\n16\n00:01:03,000 --> 00:01:11,000\nThe third possibility is steer in proportion to the this crosstrack error or CTE.\n\n17\n00:01:11,000 --> 00:01:15,000\nChoose one of those that you think is best suited to control the car.\n\n", "id": 338002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYutgUDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/339002", "type": "Nugget", "id": 339002}, {"nuggetType": "lecture", "name": "Smoothing Algorithm 3 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "5e7e76fb-650c-4764-b117-954526f0ebd5", "name": "cs373_unit5_03_s_Smoothing-Algorithm-3", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJq8Eww", "youtube_id": "-fcwwzfKYjU", "youtube_state": "done", "path": "Course/cs373/Media/319002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nThe answer is we get a smooth path.\n\n2\n00:00:02,000 --> 00:00:06,000\nTo see why that's the case, let me just simulate the optimization.\n\n3\n00:00:06,000 --> 00:00:10,000\nSuppose we're given a solution to the planning problem like this, \n\n4\n00:00:10,000 --> 00:00:13,000\nand you run the optimization algorithm. Consider a place like this.\n\n5\n00:00:13,000 --> 00:00:16,000\nBy shifting this point into that direction,\n\n6\n00:00:16,000 --> 00:00:19,000\nand perhaps shifting the other points in other directions,\n\n7\n00:00:19,000 --> 00:00:22,000\nwe can decrease the second error term,\n\n8\n00:00:22,000 --> 00:00:25,000\nboth for this pair of points, and this pair of points.\n\n9\n00:00:25,000 --> 00:00:28,000\nHowever, we do this at the expense of the first error term,\n\n10\n00:00:28,000 --> 00:00:32,000\nsince we're now shifting the point away from the original x.\n\n11\n00:00:32,000 --> 00:00:36,000\nDepending on the weight of these error terms, we might arrive with like the following.\n\n12\n00:00:36,000 --> 00:00:42,000\nThis new path suffers an error of the first type that we moved the points away\n\n13\n00:00:42,000 --> 00:00:48,000\n from the original points, but it drastically reduces the inter-point distance\n\n14\n00:00:48,000 --> 00:00:50,000\nas in this error term over here.\n\n15\n00:00:50,000 --> 00:00:53,000\nIf you insist that the original points are not changed,\n\n16\n00:00:53,000 --> 00:00:56,000\nthen just exclude those from the optimization.\n\n17\n00:00:56,000 --> 00:01:00,000\nIn fact, in our exercise, we will not consider those points\n\n18\n00:01:00,000 --> 00:01:07,000\nY0 will always been the same as x0, and yn-1 will always be the same as xn-1,\n\n19\n00:01:07,000 --> 00:01:10,000\nassuming we have n points starting in x0.\n\n20\n00:01:10,000 --> 00:01:14,000\nThe optimization is only applied to the intermediary points. \n\n", "id": 319002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYoeAUDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/340001", "type": "Nugget", "id": 340001}, {"nuggetType": "lecture", "name": "Zero Data Weight", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "73c2061c-93e9-443c-8a09-ba4bfff62ac8", "name": "cs373_unit5_05_q_Zero-Data-Weight", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJy8Eww", "youtube_id": "XUVbNHSlliA", "youtube_state": "done", "path": "Course/cs373/Media/319004", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nHere is a tricky quiz question.\n\n2\n00:00:03,000 --> 00:00:08,000\nSay we alpha, our data weight to zero, and better, our smoothing weight, to 0.1,\n\n3\n00:00:08,000 --> 00:00:11,000\nand we run this to completion. What do we get?\n\n4\n00:00:11,000 --> 00:00:16,000\nYour original path? The straight line connecting the initial the final location?\n\n5\n00:00:16,000 --> 00:00:18,000\nOr will everything collapse to a single point?\n\n6\n00:00:18,000 --> 00:00:22,000\nYou can try this out in the RDE before answering this quiz.\n\n", "id": 319004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYouAUDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/340002", "type": "Nugget", "id": 340002}, {"nuggetType": "lecture", "name": "Implement P Controller", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "527a4473-8992-4877-87d7-07f34a018f10", "name": "cs373_unit5_08_p_Implement-P-Controller", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJKPFQw", "youtube_id": "OrJgrTc5d04", "youtube_state": "done", "path": "Course/cs373/Media/346002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nI want you to implement such a controller.\n\n2\n00:00:04,000 --> 00:00:06,000\nHere is the code I've prepared for you.\n\n3\n00:00:06,000 --> 00:00:08,000\nThere is a class robot with which you're familiar.\n\n4\n00:00:08,000 --> 00:00:13,000\nIt has an \"init.\" You can set the position using the function \"set\" as before.\n\n5\n00:00:13,000 --> 00:00:16,000\nThere are steering_noise and distance_noise. \n\n6\n00:00:16,000 --> 00:00:18,000\nYou're familiar with this.\n\n7\n00:00:18,000 --> 00:00:20,000\nThere is also something called \"drift,\" which you won't use right now,\n\n8\n00:00:20,000 --> 00:00:22,000\nbut later on it'll become handy.\n\n9\n00:00:22,000 --> 00:00:28,000\nThere is your move command, all the way we've implemented before.\n\n10\n00:00:28,000 --> 00:00:33,000\nI've improved a little bit the print out of the coordinates using floats.\n\n11\n00:00:33,000 --> 00:00:38,000\nI want you to implement the run command, which takes as input the control parameter\n\n12\n00:00:38,000 --> 00:00:43,000\nthat governs the proportional response of the steering angle to the crosstrack error.\n\n13\n00:00:43,000 --> 00:00:48,000\nThe robot has an initial position of 0, 1, and 0, a speed of 1,\n\n14\n00:00:48,000 --> 00:00:51,000\nand I wanted to simulate it for 100 steps.\n\n15\n00:00:51,000 --> 00:00:53,000\nHere is what I envision to happen.\n\n16\n00:00:53,000 --> 00:00:57,000\nYour robot is initially off the the x axis by 1.\n\n17\n00:00:57,000 --> 00:01:00,000\nI want it to drive along the x axis.\n\n18\n00:01:00,000 --> 00:01:04,000\nThe y value is the same as the cross track error.\n\n19\n00:01:04,000 --> 00:01:08,000\nBy turning, inversely proportional to the y value,\n\n20\n00:01:08,000 --> 00:01:14,000\nusing a parameter tau that sets the response strength of the proportional controller.\n\n21\n00:01:14,000 --> 00:01:19,000\nI want the robot to turn towards the x axis, drive in that direction, overshoot, \n\n22\n00:01:19,000 --> 00:01:22,000\nturn around, and drive back.\n\n23\n00:01:22,000 --> 00:01:28,000\nTo do this, simulate the world for a 800 steps, and use a proportionality term \n\n24\n00:01:28,000 --> 00:01:35,000\nthat sets my steering angle alpha in proportion to the crosstrack error y.\n\n25\n00:01:35,000 --> 00:01:41,000\nEnter your code here, and when you're done with it, and you run it with the coefficient 0.1,\n\n26\n00:01:41,000 --> 00:01:45,000\nhere's the output that I want you to produce. It's 100 lines.\n\n27\n00:01:45,000 --> 00:01:47,000\nYou can see the robot position starting 1 off in y.\n\n28\n00:01:47,000 --> 00:01:53,000\nIt then reduces y over time to go into negative territory.\n\n29\n00:01:53,000 --> 00:01:56,000\nOn the right side you see this corresponding steering orientation,\n\n30\n00:01:56,000 --> 00:02:02,000\nand you can see as you move on the y coming back into positive territory,\n\n31\n00:02:02,000 --> 00:02:07,000\nand you can see how the robot overshoots slowly around the reference trajectory of the x axis.\n\n32\n00:02:07,000 --> 00:02:10,000\nPlease go implement this.\n\n", "id": 346002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYiugUDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/341002", "type": "Nugget", "id": 341002}, {"nuggetType": "lecture", "name": "Zero Data Weight Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "eda3f18a-40b6-44d2-85d5-cfe921d4d480", "name": "cs373_unit5_05_s_Zero-Data-Weight", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJKVEww", "youtube_id": "jYutRrD3O5U", "youtube_state": "done", "path": "Course/cs373/Media/314002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nThe answer is a straight line, and the reason is really subtle.\n\n2\n00:00:04,000 --> 00:00:07,000\nIt's because we're not modifying the first and last point.\n\n3\n00:00:07,000 --> 00:00:09,000\nOtherwise, it would be a single point.\n\n4\n00:00:09,000 --> 00:00:14,000\nI just hit the run button, and if you look at these coordinates, they go in 0.5 increments\n\n5\n00:00:14,000 --> 00:00:19,000\nfrom 0, 1, 2, 3, 4, and the same is true with this coordinate over here.\n\n6\n00:00:19,000 --> 00:00:22,000\nThis is obviously the coordinates of a straight line\n\n7\n00:00:22,000 --> 00:00:29,000\nas a result of our smoother applied with a smoothing weight of 0.1 and no data weight. \n\n8\n00:00:29,000 --> 00:00:34,000\nIf we change this to no smoothing weight, we obviously get the original path.\n\n9\n00:00:34,000 --> 00:00:38,000\nIf we look at the right side as well as the left side, it's not identical.\n\n10\n00:00:38,000 --> 00:00:41,000\nWhen you implement your algorithm, please test this on those settings, \n\n11\n00:00:41,000 --> 00:00:46,000\nand we will give you a different path in our testing to see if your algorithm is implemented correctly.\n\n12\n00:00:46,000 --> 00:00:48,000\nCongratulations!\n\n13\n00:00:48,000 --> 00:00:52,000\nYou just learned how to produce a smooth path. There are a few caveats.\n\n14\n00:00:52,000 --> 00:00:57,000\nIf you apply this algorithm in a robot world like this where an A-star planner might give you something like this,\n\n15\n00:00:57,000 --> 00:01:02,000\nthe smooth path might then lead straight through the obstacle, which you don't want. \n\n16\n00:01:02,000 --> 00:01:05,000\nThere are ways to accommodate this, which I'll just hint at.\n\n17\n00:01:05,000 --> 00:01:09,000\nOne is to use dynamic programming with a stochastic action function.\n\n18\n00:01:09,000 --> 00:01:11,000\nYou've learned this in the previous homework assignment.\n\n19\n00:01:11,000 --> 00:01:13,000\nThat way we stay away from the obstacle.\n\n20\n00:01:13,000 --> 00:01:17,000\nThe second one is to introduce a term that propels you away from obstacles.\n\n21\n00:01:17,000 --> 00:01:20,000\nI won't go into any depth here, but in your optimization you could have a term\n\n22\n00:01:20,000 --> 00:01:23,000\nthat pushes you away from obstacles \n\n23\n00:01:23,000 --> 00:01:27,000\nby maximizing the distance between the nearest obstacle and data point.\n\n24\n00:01:27,000 --> 00:01:31,000\nWhen you toss that in, you get a path that might look more like this\n\n25\n00:01:31,000 --> 00:01:35,000\nthat is still smooth but maximizes your clearance from obstacles.\n\n26\n00:01:35,000 --> 00:01:38,000\nWe will revisit this in the homework assignment.\n\n", "id": 314002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQY2fcUDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/343001", "type": "Nugget", "id": 343001}, {"nuggetType": "program", "name": "Parameter Optimization", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQY2_cUDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/343003", "suppliedCode": "# ----------------\n# User Instructions\n#\n# Implement twiddle as shown in the previous two videos.\n# Your accumulated error should be very small!\n#\n# Your twiddle function should RETURN the accumulated\n# error. Try adjusting the parameters p and dp to make\n# this error as small as possible.\n#\n# Try to get your error below 1.0e-10 with as few iterations\n# as possible (too many iterations will cause a timeout).\n# No cheating!\n# ------------\n \nfrom math import *\nimport random\n\n\n# ------------------------------------------------\n# \n# this is the robot class\n#\n\nclass robot:\n\n    # --------\n    # init: \n    #    creates robot and initializes location/orientation to 0, 0, 0\n    #\n\n    def __init__(self, length = 20.0):\n        self.x = 0.0\n        self.y = 0.0\n        self.orientation = 0.0\n        self.length = length\n        self.steering_noise = 0.0\n        self.distance_noise = 0.0\n        self.steering_drift = 0.0\n\n    # --------\n    # set: \n    #\tsets a robot coordinate\n    #\n\n    def set(self, new_x, new_y, new_orientation):\n\n        self.x = float(new_x)\n        self.y = float(new_y)\n        self.orientation = float(new_orientation) % (2.0 * pi)\n\n\n    # --------\n    # set_noise: \n    #\tsets the noise parameters\n    #\n\n    def set_noise(self, new_s_noise, new_d_noise):\n        # makes it possible to change the noise parameters\n        # this is often useful in particle filters\n        self.steering_noise = float(new_s_noise)\n        self.distance_noise = float(new_d_noise)\n\n    # --------\n    # set_steering_drift: \n    #\tsets the systematical steering drift parameter\n    #\n\n    def set_steering_drift(self, drift):\n        self.steering_drift = drift\n        \n    # --------\n    # move: \n    #    steering = front wheel steering angle, limited by max_steering_angle\n    #    distance = total distance driven, most be non-negative\n\n    def move(self, steering, distance, \n             tolerance = 0.001, max_steering_angle = pi / 4.0):\n\n        if steering > max_steering_angle:\n            steering = max_steering_angle\n        if steering < -max_steering_angle:\n            steering = -max_steering_angle\n        if distance < 0.0:\n            distance = 0.0\n\n\n        # make a new copy\n        res = robot()\n        res.length         = self.length\n        res.steering_noise = self.steering_noise\n        res.distance_noise = self.distance_noise\n        res.steering_drift = self.steering_drift\n\n        # apply noise\n        steering2 = random.gauss(steering, self.steering_noise)\n        distance2 = random.gauss(distance, self.distance_noise)\n\n        # apply steering drift\n        steering2 += self.steering_drift\n\n        # Execute motion\n        turn = tan(steering2) * distance2 / res.length\n\n        if abs(turn) < tolerance:\n\n            # approximate by straight line motion\n\n            res.x = self.x + (distance2 * cos(self.orientation))\n            res.y = self.y + (distance2 * sin(self.orientation))\n            res.orientation = (self.orientation + turn) % (2.0 * pi)\n\n        else:\n\n            # approximate bicycle model for motion\n\n            radius = distance2 / turn\n            cx = self.x - (sin(self.orientation) * radius)\n            cy = self.y + (cos(self.orientation) * radius)\n            res.orientation = (self.orientation + turn) % (2.0 * pi)\n            res.x = cx + (sin(res.orientation) * radius)\n            res.y = cy - (cos(res.orientation) * radius)\n\n        return res\n\n\n\n\n    def __repr__(self):\n        return '[x=%.5f y=%.5f orient=%.5f]'  % (self.x, self.y, self.orientation)\n\n\n# ------------------------------------------------------------------------\n#\n# run - does a single control run.\n\n\ndef run(params, printflag = False):\n    myrobot = robot()\n    myrobot.set(0.0, 1.0, 0.0)\n    speed = 1.0\n    err = 0.0\n    int_crosstrack_error = 0.0\n    N = 100\n    # myrobot.set_noise(0.1, 0.0)\n    myrobot.set_steering_drift(10.0 / 180.0 * pi) # 10 degree steering error\n\n\n    crosstrack_error = myrobot.y\n\n\n    for i in range(N * 2):\n\n        diff_crosstrack_error = myrobot.y - crosstrack_error\n        crosstrack_error = myrobot.y\n        int_crosstrack_error += crosstrack_error\n\n        steer = - params[0] * crosstrack_error  \\\n            - params[1] * diff_crosstrack_error \\\n            - int_crosstrack_error * params[2]\n        myrobot = myrobot.move(steer, speed)\n        if i >= N:\n            err += (crosstrack_error ** 2)\n        if printflag:\n            print myrobot, steer\n    return err / float(N)\n\n\ndef twiddle(tol = 0.2): #Make this tolerance bigger if you are timing out!\n############## ADD CODE BELOW ####################\n            \n\n\n    # -------------\n    # Add code here\n    # -------------\n    \n    return run(params)\n\n\n\n", "type": "Nugget", "id": 343003}, {"nuggetType": "program", "name": "Pid Implementation", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYw_8UDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/344003", "suppliedCode": "# -----------\n# User Instructions\n#\n# Implement a P controller by running 100 iterations\n# of robot motion. The steering angle should be set\n# by the parameter tau so that:\n#\n# steering = -tau_p * CTE - tau_d * diff_CTE - tau_i * int_CTE\n#\n# where the integrated crosstrack error (int_CTE) is\n# the sum of all the previous crosstrack errors.\n# This term works to cancel out steering drift.\n#\n# Your code should print a list that looks just like\n# the list shown in the video.\n#\n# Only modify code at the bottom!\n# ------------\n \nfrom math import *\nimport random\n\n\n# ------------------------------------------------\n# \n# this is the robot class\n#\n\nclass robot:\n\n    # --------\n    # init: \n    #    creates robot and initializes location/orientation to 0, 0, 0\n    #\n\n    def __init__(self, length = 20.0):\n        self.x = 0.0\n        self.y = 0.0\n        self.orientation = 0.0\n        self.length = length\n        self.steering_noise = 0.0\n        self.distance_noise = 0.0\n        self.steering_drift = 0.0\n\n    # --------\n    # set: \n    #\tsets a robot coordinate\n    #\n\n    def set(self, new_x, new_y, new_orientation):\n\n        self.x = float(new_x)\n        self.y = float(new_y)\n        self.orientation = float(new_orientation) % (2.0 * pi)\n\n\n    # --------\n    # set_noise: \n    #\tsets the noise parameters\n    #\n\n    def set_noise(self, new_s_noise, new_d_noise):\n        # makes it possible to change the noise parameters\n        # this is often useful in particle filters\n        self.steering_noise = float(new_s_noise)\n        self.distance_noise = float(new_d_noise)\n\n    # --------\n    # set_steering_drift: \n    #\tsets the systematical steering drift parameter\n    #\n\n    def set_steering_drift(self, drift):\n        self.steering_drift = drift\n        \n    # --------\n    # move: \n    #    steering = front wheel steering angle, limited by max_steering_angle\n    #    distance = total distance driven, most be non-negative\n\n    def move(self, steering, distance, \n             tolerance = 0.001, max_steering_angle = pi / 4.0):\n\n        if steering > max_steering_angle:\n            steering = max_steering_angle\n        if steering < -max_steering_angle:\n            steering = -max_steering_angle\n        if distance < 0.0:\n            distance = 0.0\n\n\n        # make a new copy\n        res = robot()\n        res.length         = self.length\n        res.steering_noise = self.steering_noise\n        res.distance_noise = self.distance_noise\n        res.steering_drift = self.steering_drift\n\n        # apply noise\n        steering2 = random.gauss(steering, self.steering_noise)\n        distance2 = random.gauss(distance, self.distance_noise)\n\n        # apply steering drift\n        steering2 += self.steering_drift\n\n        # Execute motion\n        turn = tan(steering2) * distance2 / res.length\n\n        if abs(turn) < tolerance:\n\n            # approximate by straight line motion\n\n            res.x = self.x + (distance2 * cos(self.orientation))\n            res.y = self.y + (distance2 * sin(self.orientation))\n            res.orientation = (self.orientation + turn) % (2.0 * pi)\n\n        else:\n\n            # approximate bicycle model for motion\n\n            radius = distance2 / turn\n            cx = self.x - (sin(self.orientation) * radius)\n            cy = self.y + (cos(self.orientation) * radius)\n            res.orientation = (self.orientation + turn) % (2.0 * pi)\n            res.x = cx + (sin(res.orientation) * radius)\n            res.y = cy - (cos(res.orientation) * radius)\n\n        return res\n\n\n\n\n    def __repr__(self):\n        return '[x=%.5f y=%.5f orient=%.5f]'  % (self.x, self.y, self.orientation)\n\n\n\n\n############## ADD / MODIFY CODE BELOW ####################\n\n# ------------------------------------------------------------------------\n#\n# run - does a single control run.\n\n\ndef run(param1, param2, param3):\n    myrobot = robot()\n    myrobot.set(0.0, 1.0, 0.0)\n    speed = 1.0 # motion distance is equal to speed (we assume time = 1)\n    N = 100\n    myrobot.set_steering_drift(10.0 / 180.0 * pi) # 10 degree bias, this will be added in by the move function, you do not need to add it below!\n    #\n    # Enter code here\n    #\n\n# Call your function with parameters of (0.2, 3.0, and 0.004)\nrun(0.2, 3.0, 0.004)\n\n\n\n\n", "type": "Nugget", "id": 344003}, {"nuggetType": "quiz", "name": "Pid Control", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYqYcVDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/345001", "type": "Nugget", "id": 345001}, {"nuggetType": "lecture", "name": "Oscillations Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "e69a3546-6964-486f-96c8-2ad9a4da9ed4", "name": "cs373_unit5_09_s_Oscillations", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJm2FQw", "youtube_id": "UC_tAy65yrw", "youtube_state": "done", "path": "Course/cs373/Media/351001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nAs we'll see, they'll oscillate faster.\n\n2\n00:00:03,000 --> 00:00:08,000\nYou have to spend some time with this, but for the larger value of 0.3,\n\n3\n00:00:08,000 --> 00:00:13,000\nwe reach a negative value in y already here, which means we just crossed the line.\n\n4\n00:00:13,000 --> 00:00:17,000\nThis is just 13 steps in whereas if we were back to 0.1, \n\n5\n00:00:17,000 --> 00:00:20,000\nthen our step 13 would still be 0.6 off.\n\n6\n00:00:20,000 --> 00:00:26,000\nSo clearly the control oscillation is much slower, and we compensate much less\n\n", "id": 351001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYk48VDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/346003", "type": "Nugget", "id": 346003}, {"nuggetType": "lecture", "name": "Proportional Control Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "72856200-2f30-448d-a0ba-4c69782af2e5", "name": "cs373_unit5_07_s_Proportional-Control", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOGeFQw", "youtube_id": "SZ5D2AbWr3s", "youtube_state": "done", "path": "Course/cs373/Media/348001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nMy answer is it actually overshoots.\n\n2\n00:00:04,000 --> 00:00:07,000\nThe problem is no matter how small this constant is over here,\n\n3\n00:00:07,000 --> 00:00:12,000\nIt will eventually turns its wheels quite a bit towards it's trajectory.\n\n4\n00:00:12,000 --> 00:00:15,000\nThen it'll move towards a trajectory more and more, \n\n5\n00:00:15,000 --> 00:00:19,000\nand when it hits it, it's wheels will be straight,\n\n6\n00:00:19,000 --> 00:00:25,000\nbut the robot itself will still be oriented a little bit downwards, so it's forced to overshoot.\n\n7\n00:00:25,000 --> 00:00:32,000\nWhat this means is that applied to a car, a P-controller will act like this.\n\n8\n00:00:32,000 --> 00:00:36,000\nIt'll slightly overshoot, and that could be okay. The overshooting is very small.\n\n9\n00:00:36,000 --> 00:00:38,000\nBut it'll never really converge.\n\n10\n00:00:38,000 --> 00:00:44,000\nIt'll be what's called \"marginally stable\" or often just \"stable\" in the literature.\n\n", "id": 348001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYyaYVDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/349001", "type": "Nugget", "id": 349001}, {"nuggetType": "lecture", "name": "Parameter Optimization", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "b0d83a55-a845-4a37-81ad-5ce078183609", "name": "cs373_unit5_15_p_Parameter-Optimization", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGInlFQw", "youtube_id": "A2b3F5Ae53Y", "youtube_state": "uploading", "path": "Course/cs373/Media/357001", "transcript": "\ufeff", "id": 357001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYgr4VDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/352002", "type": "Nugget", "id": 352002}, {"nuggetType": "lecture", "name": "Pd Controller", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "4a274d84-3e4c-4e4f-9765-63e650e5a163", "name": "cs373_unit5_10_p_PD-Controller", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIG-FQw", "youtube_id": "kVYy2kjZjhA", "youtube_state": "done", "path": "Course/cs373/Media/352001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nThe basic next question is is there a way to void the overshoot?\n\n2\n00:00:05,000 --> 00:00:11,000\nIt would be nice if we could do this, because driving in an oscillating car is no fun.\n\n3\n00:00:11,000 --> 00:00:14,000\nIn fact, it makes you really seasick, believe me. \n\n4\n00:00:14,000 --> 00:00:20,000\nI've been in this car for months on end when we prepared for the Darpa Grand Challenge.\n\n5\n00:00:20,000 --> 00:00:23,000\nThe trick is called \"PD-control.\"\n\n6\n00:00:23,000 --> 00:00:30,000\nIn PD-control my steering alpha is no just related to the crosstrack error by virtue\n\n7\n00:00:30,000 --> 00:00:33,000\nby virtue of the gain parameter tau p, \n\n8\n00:00:33,000 --> 00:00:36,000\nbut also to the temporal derivative of the crosstrack error.\n\n9\n00:00:36,000 --> 00:00:43,000\nWhat this means is that when the car has turned enough to reduce the crosstrack error,\n\n10\n00:00:43,000 --> 00:00:46,000\nit won't just go shooting for the x axis,\n\n11\n00:00:46,000 --> 00:00:51,000\nbut it will notice that it's already reducing the error.\n\n12\n00:00:51,000 --> 00:00:57,000\nThe error is becoming smaller over time. It counter steers. It steers up again.\n\n13\n00:00:57,000 --> 00:01:00,000\nThis will allow it to gracefully approach our target trajectory,\n\n14\n00:01:00,000 --> 00:01:08,000\nassuming appropriate settings of our differential gain--tau d versus the proportional gain tau p.\n\n15\n00:01:08,000 --> 00:01:10,000\nHow do you compute this derivative over here?\n\n16\n00:01:10,000 --> 00:01:18,000\nWell, at time t this is the same as the crosstrack error at time t minus the crosstrack error \n\n17\n00:01:18,000 --> 00:01:25,000\nat time t minus 1 divided by the time span between t and t minus 1.\n\n18\n00:01:25,000 --> 00:01:29,000\nIn our code, we assume delta t equals 1, so so we can omit this.\n\n19\n00:01:29,000 --> 00:01:36,000\nThe difference of the current crosscheck error and the previous one is this term over here.\n\n20\n00:01:36,000 --> 00:01:41,000\nWe now control not just in proportion to the error itself but also to this difference\n\n21\n00:01:41,000 --> 00:01:47,000\nof the error using a second constant tau d.\n\n22\n00:01:47,000 --> 00:01:53,000\nLet's implement this. Now I give the run command two parameters--param1 and param2.\n\n23\n00:01:53,000 --> 00:01:58,000\nI want you to implement a controller that varies the steering direction proportionally\n\n24\n00:01:58,000 --> 00:02:03,000\naccording to parameter 1, and differentially proportionally to parameter 2.\n\n25\n00:02:03,000 --> 00:02:08,000\nAgain, run for 100 time steps and see what happens.\n\n26\n00:02:08,000 --> 00:02:13,000\nWhen I run my new controller with proportionality parameter of 0.2\n\n27\n00:02:13,000 --> 00:02:16,000\nand the differentiation one is 3.0.\n\n28\n00:02:16,000 --> 00:02:22,000\nThen, I get a sequence of y values that converge much more gently to 0.\n\n29\n00:02:22,000 --> 00:02:29,000\nMiraculously, as time goes on, they really go down to 0 and stay at 0,\n\n30\n00:02:29,000 --> 00:02:32,000\nwhich we didn't achieve for the proportional controller.\n\n31\n00:02:32,000 --> 00:02:35,000\nPlease write that routine so we can test it.\n\n", "id": 352001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQY6cUVDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/353001", "type": "Nugget", "id": 353001}, {"nuggetType": "lecture", "name": "Pd Controller Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "878e7be4-a39e-4e63-8afb-0eb6024b24dd", "name": "cs373_unit5_10_s_PD-Controller", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGKPgFAw", "youtube_id": "YgomQgfFlTQ", "youtube_state": "done", "path": "Course/cs373/Media/340003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nHere is my solution. I build a variable called \"diff_crosstrack_error,\n\n2\n00:00:05,000 --> 00:00:08,000\nwhich is in my differential, that is set to the momentary crosstrack error\n\n3\n00:00:08,000 --> 00:00:13,000\n minus the previous one which I the very first time initialize to the present one.\n\n4\n00:00:13,000 --> 00:00:18,000\nThen in the steering, I don't just steer proportionately to the crosstrack error,\n\n5\n00:00:18,000 --> 00:00:23,000\nbut also proportionately to the differential crosstrack error times the parameter 2.\n\n6\n00:00:23,000 --> 00:00:28,000\nWhen I put this in and I run it, I will get exactly the output that I showed you.\n\n", "id": 340003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQY0c0VDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/354001", "type": "Nugget", "id": 354001}, {"nuggetType": "lecture", "name": "Pid Implementation", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "0919c685-c35c-4b29-bc22-17e979aadd33", "name": "cs373_unit5_13_p_PID-Implementation", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJSPFQw", "youtube_id": "Ag8H3Iit9j4", "youtube_state": "uploading", "path": "Course/cs373/Media/346004", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nWhat's the intuition? \n\n2\n00:00:02,000 --> 00:00:08,000\nIf you drive a car and your normal steering mode leads you to a trajectory far away from the goal,\n\n3\n00:00:08,000 --> 00:00:14,000\nthen what I submit you do is you notice over a long period of time you can't get closer.\n\n4\n00:00:14,000 --> 00:00:20,000\nSo you start steering more and more the more time goes by to the right to compensate this bias.\n\n5\n00:00:20,000 --> 00:00:26,000\nAs a result, when you drive you steer the car this way.\n\n6\n00:00:26,000 --> 00:00:30,000\nTo do so, you need a sustained situation of large error.\n\n7\n00:00:30,000 --> 00:00:35,000\nThat's measured by the integral or the sum of the crosstrack errors over time.\n\n8\n00:00:35,000 --> 00:00:41,000\nLet's make a new controller where steering is proportional to the crosstrack errors before. \n\n9\n00:00:41,000 --> 00:00:45,000\nIt's equally proportional to the differential of the crosstrack error,\n\n10\n00:00:45,000 --> 00:00:50,000\nbut now it's also proportional to what's called the integral or the sum\n\n11\n00:00:50,000 --> 00:00:53,000\nof all the crosstrack errors you ever observed.\n\n12\n00:00:53,000 --> 00:00:57,000\nThis term is interesting. If we have a constant crosstrack error of, say, 0.8\n\n13\n00:00:57,000 --> 00:01:02,000\nand the sum will increase by 0.8 for each time unit, it'll become larger and larger and larger,\n\n14\n00:01:02,000 --> 00:01:05,000\nand eventually it'll correct the robot's motion.\n\n15\n00:01:05,000 --> 00:01:07,000\nThis is called the PID controller. \n\n16\n00:01:07,000 --> 00:01:14,000\nThis is the P or the proportional term, the D or the differential term, and the i for integral.\n\n17\n00:01:14,000 --> 00:01:17,000\nP-I-D.\n\n18\n00:01:17,000 --> 00:01:21,000\nLet's implement this, and the integrated crosstrack error \n\n19\n00:01:21,000 --> 00:01:24,000\nis the sum of all crosstrack errors you ever observed.\n\n20\n00:01:24,000 --> 00:01:27,000\nLet's implement this in our code.\n\n21\n00:01:27,000 --> 00:01:31,000\nI give you an integral factor of 0.004.\n\n22\n00:01:31,000 --> 00:01:36,000\nLet's not worry why I picked those. They're actually wisely chosen, as you will see in a minute.\n\n23\n00:01:36,000 --> 00:01:44,000\nBut let's run our code and now modify our code to also allow for this parameter over here.\n\n", "id": 346004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQY0s0VDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/354002", "type": "Nugget", "id": 354002}, {"nuggetType": "lecture", "name": "Summary", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0Eww", "media": {"dotsub_id": "f7a387d2-ead0-46f6-8b60-e399f95ef66f", "name": "cs373_unit5_16_l_Summary", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNLTEww", "youtube_id": "Rp5AVdvfCVw", "youtube_state": "uploading", "path": "Course/cs373/Media/322002", "transcript": "\ufeff", "id": 322002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GLG0EwwLEgZOdWdnZXQYiuUVDA", "path": "Course/cs373/CourseRev/feb2012/Unit/318001/Nugget/357002", "type": "Nugget", "id": 357002}]}, {"name": "Homework 5", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": true, "closedAt": "03/27/2012 00:00", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQwLEgZOdWdnZXQYwfwVDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQwLEgZOdWdnZXQYqYQWDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQwLEgZOdWdnZXQY-ZMWDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQwLEgZOdWdnZXQYsasWDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQwLEgZOdWdnZXQYgbsWDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQwLEgZOdWdnZXQY6cIWDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQwLEgZOdWdnZXQYodoWDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQwLEgZOdWdnZXQYieIWDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQwLEgZOdWdnZXQY8ekWDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQwLEgZOdWdnZXQYwfkWDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQwLEgZOdWdnZXQYhcEUDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQwLEgZOdWdnZXQY-ZAXDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQw", "path": "Course/cs373/CourseRev/feb2012/Unit/358001", "open": false, "id": 358001, "nuggets": [{"nuggetType": "program", "name": "Racetrack Control", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQwLEgZOdWdnZXQYhcEUDA", "path": "Course/cs373/CourseRev/feb2012/Unit/358001/Nugget/336005", "suppliedCode": "# --------------\n# User Instructions\n# \n# Define a function cte in the robot class that will\n# compute the crosstrack error for a robot on a\n# racetrack with a shape as described in the video.\n#\n# You will need to base your error calculation on\n# the robot's location on the track. Remember that \n# the robot will be traveling to the right on the\n# upper straight segment and to the left on the lower\n# straight segment.\n#\n# --------------\n# Grading Notes\n#\n# We will be testing your cte function directly by\n# calling it with different robot locations and making\n# sure that it returns the correct crosstrack error.  \n \nfrom math import *\nimport random\n\n\n# ------------------------------------------------\n# \n# this is the robot class\n#\n\nclass robot:\n\n    # --------\n    # init: \n    #    creates robot and initializes location/orientation to 0, 0, 0\n    #\n\n    def __init__(self, length = 20.0):\n        self.x = 0.0\n        self.y = 0.0\n        self.orientation = 0.0\n        self.length = length\n        self.steering_noise = 0.0\n        self.distance_noise = 0.0\n        self.steering_drift = 0.0\n\n    # --------\n    # set: \n    #\tsets a robot coordinate\n    #\n\n    def set(self, new_x, new_y, new_orientation):\n\n        self.x = float(new_x)\n        self.y = float(new_y)\n        self.orientation = float(new_orientation) % (2.0 * pi)\n\n\n    # --------\n    # set_noise: \n    #\tsets the noise parameters\n    #\n\n    def set_noise(self, new_s_noise, new_d_noise):\n        # makes it possible to change the noise parameters\n        # this is often useful in particle filters\n        self.steering_noise = float(new_s_noise)\n        self.distance_noise = float(new_d_noise)\n\n    # --------\n    # set_steering_drift: \n    #\tsets the systematical steering drift parameter\n    #\n\n    def set_steering_drift(self, drift):\n        self.steering_drift = drift\n        \n    # --------\n    # move: \n    #    steering = front wheel steering angle, limited by max_steering_angle\n    #    distance = total distance driven, most be non-negative\n\n    def move(self, steering, distance, \n             tolerance = 0.001, max_steering_angle = pi / 4.0):\n\n        if steering > max_steering_angle:\n            steering = max_steering_angle\n        if steering < -max_steering_angle:\n            steering = -max_steering_angle\n        if distance < 0.0:\n            distance = 0.0\n\n\n        # make a new copy\n        res = robot()\n        res.length         = self.length\n        res.steering_noise = self.steering_noise\n        res.distance_noise = self.distance_noise\n        res.steering_drift = self.steering_drift\n\n        # apply noise\n        steering2 = random.gauss(steering, self.steering_noise)\n        distance2 = random.gauss(distance, self.distance_noise)\n\n        # apply steering drift\n        steering2 += self.steering_drift\n\n        # Execute motion\n        turn = tan(steering2) * distance2 / res.length\n\n        if abs(turn) < tolerance:\n\n            # approximate by straight line motion\n\n            res.x = self.x + (distance2 * cos(self.orientation))\n            res.y = self.y + (distance2 * sin(self.orientation))\n            res.orientation = (self.orientation + turn) % (2.0 * pi)\n\n        else:\n\n            # approximate bicycle model for motion\n\n            radius = distance2 / turn\n            cx = self.x - (sin(self.orientation) * radius)\n            cy = self.y + (cos(self.orientation) * radius)\n            res.orientation = (self.orientation + turn) % (2.0 * pi)\n            res.x = cx + (sin(res.orientation) * radius)\n            res.y = cy - (cos(res.orientation) * radius)\n\n        return res\n\n\n\n\n    def __repr__(self):\n        return '[x=%.5f y=%.5f orient=%.5f]'  % (self.x, self.y, self.orientation)\n\n\n############## ONLY ADD / MODIFY CODE BELOW THIS LINE ####################\n   \n    def cte(self, radius):\n        # \n        #\n        # Add code here\n        #\n        #            \n        return cte\n    \n############## ONLY ADD / MODIFY CODE ABOVE THIS LINE ####################\n\n\n\n\n# ------------------------------------------------------------------------\n#\n# run - does a single control run.\n\n\ndef run(params, radius, printflag = False):\n    myrobot = robot()\n    myrobot.set(0.0, radius, pi / 2.0)\n    speed = 1.0 # motion distance is equal to speed (we assume time = 1)\n    err = 0.0\n    int_crosstrack_error = 0.0\n    N = 200\n\n    crosstrack_error = myrobot.cte(radius) # You need to define the cte function!\n\n    for i in range(N*2):\n        diff_crosstrack_error = - crosstrack_error\n        crosstrack_error = myrobot.cte(radius)\n        diff_crosstrack_error += crosstrack_error\n        int_crosstrack_error += crosstrack_error\n        steer = - params[0] * crosstrack_error \\\n                - params[1] * diff_crosstrack_error \\\n                - params[2] * int_crosstrack_error\n        myrobot = myrobot.move(steer, speed)\n        if i >= N:\n            err += crosstrack_error ** 2\n        if printflag:\n            print myrobot\n    return err / float(N)\n\nradius = 25.0\nparams = [10.0, 15.0, 0]\nerr = run(params, radius, True)\nprint '\\nFinal paramaeters: ', params, '\\n ->', err\n", "type": "Nugget", "id": 336005}, {"nuggetType": "lecture", "name": "Missing Parameters", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQw", "media": {"dotsub_id": "e56958b3-bf68-42a7-83b5-cbd8e921d9f9", "name": "cs373_hw5_00_q_Missing-Parameters", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNn0FQw", "youtube_id": "NdtOljq6wuc", "youtube_state": "done", "path": "Course/cs373/Media/359001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nWelcome to homework 5. \n\n2\n00:00:02,000 --> 00:00:06,000\nIn the first problem, you're going to build some intuition for what happens to a robot's path\n\n3\n00:00:06,000 --> 00:00:15,000\nwhen one of the these parameters, either toe p, toe d, or toe i, is set equal to 0,\n\n4\n00:00:15,000 --> 00:00:19,000\nso if we don't include that term in our steering angle equation.\n\n5\n00:00:19,000 --> 00:00:25,000\nIn each of these 4 cases on the left, the black horizontal line is the intended track for the robot,\n\n6\n00:00:25,000 --> 00:00:28,000\nwhile the pink represents its actual motion.\n\n7\n00:00:28,000 --> 00:00:32,000\nIn each of these cases, the robot has a 10 degree positive drift\n\n8\n00:00:32,000 --> 00:00:36,000\nand starts with a cross check error of 1.\n\n9\n00:00:36,000 --> 00:00:41,000\nFor each of these 4 cases, you should go through and decide which of these radio buttons\n\n10\n00:00:41,000 --> 00:00:43,000\nis the correct selection.\n\n11\n00:00:43,000 --> 00:00:48,000\nSo for example, if you thought that this was appropriate robot motion\n\n12\n00:00:48,000 --> 00:00:51,000\nand all the parameters were tuned correctly, \n\n13\n00:00:51,000 --> 00:00:52,000\nyou would select no problem.\n\n14\n00:00:52,000 --> 00:00:58,000\nKeep in mind that each column should be selected exactly 1 time. Good luck!\n\n", "id": 359001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQwLEgZOdWdnZXQYwfwVDA", "path": "Course/cs373/CourseRev/feb2012/Unit/358001/Nugget/360001", "type": "Nugget", "id": 360001}, {"nuggetType": "quiz", "name": "Missing Parameters", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQwLEgZOdWdnZXQYqYQWDA", "path": "Course/cs373/CourseRev/feb2012/Unit/358001/Nugget/361001", "type": "Nugget", "id": 361001}, {"nuggetType": "lecture", "name": "Missing Parameters Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQw", "media": {"dotsub_id": "dfe9ee57-20fd-4bf5-aab6-b16745616220", "name": "cs373_hw5_00_s_Missing-Parameters", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJGMFgw", "youtube_id": "If2EftLINUs", "youtube_state": "done", "path": "Course/cs373/Media/362001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nThis was actually a really tricky question.\n\n2\n00:00:03,000 --> 00:00:07,000\nSo let's, first, mark down the answers, \n\n3\n00:00:07,000 --> 00:00:08,000\nand now we can talk about why.\n\n4\n00:00:08,000 --> 00:00:11,000\nSo these were the answers and let's think about why.\n\n5\n00:00:11,000 --> 00:00:14,000\nWe have some really interesting behavior over in some of these graphs,\n\n6\n00:00:14,000 --> 00:00:17,000\nand it's nice to think about what's causing that behavior.\n\n7\n00:00:17,000 --> 00:00:19,000\nSo let's start with number 2.\n\n8\n00:00:19,000 --> 00:00:22,000\nPretty straight forward. The robot does exactly what we want.\n\n9\n00:00:22,000 --> 00:00:27,000\nIt starts off away from the track, then it approaches it, and stays right on the track.\n\n10\n00:00:27,000 --> 00:00:30,000\nThat's exactly what we want PID to do, so this is no problem.\n\n11\n00:00:30,000 --> 00:00:35,000\nNumber 3 looks similar to number 2 but not quite because now you can see the line\n\n12\n00:00:35,000 --> 00:00:39,000\nthat we're approaching is not actually the track.\n\n13\n00:00:39,000 --> 00:00:43,000\nThat's because we're reaching the steady state where the robot's upward drift \n\n14\n00:00:43,000 --> 00:00:46,000\nis being balanced by its downward tendency caused by this term,\n\n15\n00:00:46,000 --> 00:00:51,000\nand though we reach some sort of steady state, it's not the steady state we want,\n\n16\n00:00:51,000 --> 00:00:52,000\nwhich would be right on the track.\n\n17\n00:00:52,000 --> 00:00:56,000\nThe key to understanding number 4 was realizing that the robot \n\n18\n00:00:56,000 --> 00:00:58,000\nstarts by moving upwards.\n\n19\n00:00:58,000 --> 00:01:01,000\nThis is the only case for the robot started going up,\n\n20\n00:01:01,000 --> 00:01:06,000\nand what's happening here is the drift is dominating since the toe p is equal to 0,\n\n21\n00:01:06,000 --> 00:01:09,000\nthere is no initial term that steers the robot towards the goal,\n\n22\n00:01:09,000 --> 00:01:12,000\nand without that, the drift is going to take over.\n\n23\n00:01:12,000 --> 00:01:17,000\nOf course, as we accumulate error that gets corrected for and we steer down,\n\n24\n00:01:17,000 --> 00:01:20,000\nbut eventually we get into this sort of oscillating behavior.\n\n25\n00:01:20,000 --> 00:01:25,000\nThe oscillations are not as frequent, however, as they are in case number 1.\n\n26\n00:01:25,000 --> 00:01:28,000\nIf we think of this differential CTE term as a sort of smoothing term,\n\n27\n00:01:28,000 --> 00:01:32,000\nwhich damps out these wild oscillations.\n\n28\n00:01:32,000 --> 00:01:38,000\nThen we can see how, if tow d is equal to 0, we would expect these sort of \n\n29\n00:01:38,000 --> 00:01:43,000\ngrowing oscillations, and this behavior is characteristic of any PID controller\n\n30\n00:01:43,000 --> 00:01:45,000\nwhere the differential term is too small.\n\n", "id": 362001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQwLEgZOdWdnZXQY-ZMWDA", "path": "Course/cs373/CourseRev/feb2012/Unit/358001/Nugget/363001", "type": "Nugget", "id": 363001}, {"nuggetType": "lecture", "name": "Cyclic Smoothing", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQw", "media": {"dotsub_id": "5a611d43-320f-4bd5-b9aa-9b8758cc83e3", "name": "cs373_hw5_01_p_Cyclic-Smoothing", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMmjFgw", "youtube_id": "jyuQFTUsH_8", "youtube_state": "done", "path": "Course/cs373/Media/365001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nWelcome to homework assignment #5.\n\n2\n00:00:04,000 --> 00:00:11,000\nToday I only have programming assignments. One on smoothing and one on control.\n\n3\n00:00:11,000 --> 00:00:21,000\nIn both cases, we are trying to drive a car on a racetrack as fast as we can.\n\n4\n00:00:21,000 --> 00:00:24,000\nOkay? You'll see in a minute what I mean by this.\n\n5\n00:00:24,000 --> 00:00:28,000\nBut think of the car going on an oval just like that.\n\n6\n00:00:28,000 --> 00:00:32,000\nSo in this first exercise, you're going to go through a sequence of improvements\n\n7\n00:00:32,000 --> 00:00:34,000\nof the code smooth.PI.\n\n8\n00:00:34,000 --> 00:00:36,000\nI'm giving you a path that is very much a box path.\n\n9\n00:00:36,000 --> 00:00:41,000\nIt starts at 0,0, cranks up the estimation all the way to 6,\n\n10\n00:00:41,000 --> 00:00:44,000\nthen increases the y all the way to 3.\n\n11\n00:00:44,000 --> 00:00:51,000\nIt goes down on x all the way down to 0, and then uses the y all the way down to almost 0.\n\n12\n00:00:51,000 --> 00:00:55,000\nIf I draw this, the way this looks like--\n\n13\n00:00:55,000 --> 00:01:05,000\nwe start at 0,0, all the way to 6,0, then we go up here to 6,3, and you go left to 0,3,\n\n14\n00:01:05,000 --> 00:01:07,000\nand down to 0,1.\n\n15\n00:01:07,000 --> 00:01:14,000\nThis is a cyclic course so we're smoothing before what's for an open path.\n\n16\n00:01:14,000 --> 00:01:19,000\nI'd now like you to modify smoothing, so it can smooth this path over here.\n\n17\n00:01:19,000 --> 00:01:25,000\nSo I want you to run the function smooth with path as an input--\n\n18\n00:01:25,000 --> 00:01:33,000\nthe weight_data of 0.1 and the smoothing parameter of 0.1 and tolerance of 0.000001.\n\n19\n00:01:33,000 --> 00:01:38,000\nWhen you run it, what it should produce is a path like this, that when you plot it, \n\n20\n00:01:38,000 --> 00:01:40,000\nit looks a little bit like an oval.\n\n21\n00:01:40,000 --> 00:01:42,000\nYou can look at these numbers carefully.\n\n22\n00:01:42,000 --> 00:01:45,000\nIt ranks the corner points more into the interior.\n\n23\n00:01:45,000 --> 00:01:49,000\nI want to do it in a way that is cyclic, so that the last point connects smoothly\n\n24\n00:01:49,000 --> 00:01:51,000\nto the initial point over here.\n\n25\n00:01:51,000 --> 00:01:56,000\nSo please modify the code just to be a cyclic smoother as opposed to before\n\n26\n00:01:56,000 --> 00:02:00,000\nit wasn't a cyclic smoother, and make it so each point get uprooted.\n\n27\n00:02:00,000 --> 00:02:02,000\nYou don't keep 2 of the points fixed.\n\n", "id": 365001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQwLEgZOdWdnZXQYsasWDA", "path": "Course/cs373/CourseRev/feb2012/Unit/358001/Nugget/366001", "type": "Nugget", "id": 366001}, {"nuggetType": "program", "name": "Cyclic Smoothing", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQwLEgZOdWdnZXQYgbsWDA", "path": "Course/cs373/CourseRev/feb2012/Unit/358001/Nugget/368001", "suppliedCode": "# -------------\n# User Instructions\n#\n# Here you will be implementing a cyclic smoothing\n# algorithm. This algorithm should not fix the end\n# points (as you did in the unit quizzes). You  \n# should use the gradient descent equations that\n# you used previously.\n#\n# Your function should return the newpath that it\n# calculates..\n#\n# Feel free to use the provided solution_check function\n# to test your code. You can find it at the bottom.\n#\n# --------------\n# Testing Instructions\n# \n# To test your code, call the solution_check function with\n# two arguments. The first argument should be the result of your\n# smooth function. The second should be the corresponding answer.\n# For example, calling\n#\n# solution_check(smooth(testpath1), answer1)\n#\n# should return True if your answer is correct and False if\n# it is not.\n\nfrom math import *\n\n# Do not modify path inside your function.\npath=[[0, 0], \n      [1, 0],\n      [2, 0],\n      [3, 0],\n      [4, 0],\n      [5, 0],\n      [6, 0],\n      [6, 1],\n      [6, 2],\n      [6, 3],\n      [5, 3],\n      [4, 3],\n      [3, 3],\n      [2, 3],\n      [1, 3],\n      [0, 3],\n      [0, 2],\n      [0, 1]]\n\n############# ONLY ENTER CODE BELOW THIS LINE ##########\n\n# ------------------------------------------------\n# smooth coordinates\n# If your code is timing out, make the tolerance parameter\n# larger to decrease run time.\n#\n\ndef smooth(path, weight_data = 0.1, weight_smooth = 0.1, tolerance = 0.00001):\n\n    # \n    # Enter code here\n    #\n    \n    return newpath\n\n# thank you - EnTerr - for posting this on our discussion forum\n\n#newpath = smooth(path)\n#for i in range(len(path)):\n#    print '['+ ', '.join('%.3f'%x for x in path[i]) +'] -> ['+ ', '.join('%.3f'%x for x in newpath[i]) +']'\n\n\n##### TESTING ######\n\n# --------------------------------------------------\n# check if two numbers are 'close enough,'used in\n# solution_check function.\n#\ndef close_enough(user_answer, true_answer, epsilon = 0.001):\n    if abs(user_answer - true_answer) > epsilon:\n        return False\n    return True\n\n# --------------------------------------------------\n# check your solution against our reference solution for\n# a variety of test cases (given below)\n#\ndef solution_check(newpath, answer):\n    if type(newpath) != type(answer):\n        print \"Error. You do not return a list.\"\n        return False\n    if len(newpath) != len(answer):\n        print 'Error. Your newpath is not the correct length.'\n        return False\n    if len(newpath[0]) != len(answer[0]):\n        print 'Error. Your entries do not contain an (x, y) coordinate pair.'\n        return False\n    for i in range(len(newpath)): \n        for j in range(len(newpath[0])):\n            if not close_enough(newpath[i][j], answer[i][j]):\n                print 'Error, at least one of your entries is not correct.'\n                return False\n    print \"Test case correct!\"\n    return True\n\n# --------------\n# Testing Instructions\n# \n# To test your code, call the solution_check function with\n# two arguments. The first argument should be the result of your\n# smooth function. The second should be the corresponding answer.\n# For example, calling\n#\n# solution_check(smooth(testpath1), answer1)\n#\n# should return True if your answer is correct and False if\n# it is not.\n    \ntestpath1 = [[0, 0],\n             [1, 0],\n             [2, 0],\n             [3, 0],\n             [4, 0],\n             [5, 0],\n             [6, 0],\n             [6, 1],\n             [6, 2],\n             [6, 3],\n             [5, 3],\n             [4, 3],\n             [3, 3],\n             [2, 3],\n             [1, 3],\n             [0, 3],\n             [0, 2],\n             [0, 1]]\n\nanswer1 = [[0.5449300156668018, 0.47485226780102946],\n           [1.2230705677535505, 0.2046277687200752],\n           [2.079668890615267, 0.09810778721159963],\n           [3.0000020176660755, 0.07007646364781912],\n           [3.9203348821839112, 0.09810853832382399],\n           [4.7769324511170455, 0.20462917195702085],\n           [5.455071854686622, 0.4748541381544533],\n           [5.697264197153936, 1.1249625336275617],\n           [5.697263485026567, 1.8750401628534337],\n           [5.455069810373743, 2.5251482916876378],\n           [4.776929339068159, 2.795372759575895],\n           [3.92033110541304, 2.9018927284871063],\n           [2.999998066091118, 2.929924058932193],\n           [2.0796652780381826, 2.90189200881968],\n           [1.2230677654766597, 2.7953714133566603],\n           [0.544928391271399, 2.5251464933327794],\n           [0.3027360471605494, 1.875038145804603],\n           [0.302736726373967, 1.1249605602741133]]\n\n##    [0.000, 0.000] -> [0.545, 0.475]\n##    [1.000, 0.000] -> [1.223, 0.205]\n##    [2.000, 0.000] -> [2.080, 0.098]\n##    [3.000, 0.000] -> [3.000, 0.070]\n##    [4.000, 0.000] -> [3.920, 0.098]\n##    [5.000, 0.000] -> [4.777, 0.205]\n##    [6.000, 0.000] -> [5.455, 0.475]\n##    [6.000, 1.000] -> [5.697, 1.125]\n##    [6.000, 2.000] -> [5.697, 1.875]\n##    [6.000, 3.000] -> [5.455, 2.525]\n##    [5.000, 3.000] -> [4.777, 2.795]\n##    [4.000, 3.000] -> [3.920, 2.902]\n##    [3.000, 3.000] -> [3.000, 2.930]\n##    [2.000, 3.000] -> [2.080, 2.902]\n##    [1.000, 3.000] -> [1.223, 2.795]\n##    [0.000, 3.000] -> [0.545, 2.525]\n##    [0.000, 2.000] -> [0.303, 1.875]\n##    [0.000, 1.000] -> [0.303, 1.125]\n\n\ntestpath2 = [[1, 0], # Move in the shape of a plus sign\n             [2, 0],\n             [2, 1],\n             [3, 1],\n             [3, 2],\n             [2, 2],\n             [2, 3],\n             [1, 3],\n             [1, 2],\n             [0, 2], \n             [0, 1],\n             [1, 1]]\n\nanswer2 = [[1.239080543767428, 0.5047204351187283],\n           [1.7609243903912781, 0.5047216452560908],\n           [2.0915039821562416, 0.9085017167753027],\n           [2.495281862032503, 1.2390825203587184],\n           [2.4952805300504783, 1.7609262468826048],\n           [2.0915003641706296, 2.0915058211575475],\n           [1.7609195135622062, 2.4952837841027695],\n           [1.2390757942466555, 2.4952826072236918],\n           [0.9084962737918979, 2.091502621431358],\n           [0.5047183914625598, 1.7609219230352355],\n           [0.504719649257698, 1.2390782835562297],\n           [0.9084996902674257, 0.9084987462432871]]\n\n##    [1.000, 0.000] -> [1.239, 0.505]\n##    [2.000, 0.000] -> [1.761, 0.505]\n##    [2.000, 1.000] -> [2.092, 0.909]\n##    [3.000, 1.000] -> [2.495, 1.239]\n##    [3.000, 2.000] -> [2.495, 1.761]\n##    [2.000, 2.000] -> [2.092, 2.092]\n##    [2.000, 3.000] -> [1.761, 2.495]\n##    [1.000, 3.000] -> [1.239, 2.495]\n##    [1.000, 2.000] -> [0.908, 2.092]\n##    [0.000, 2.000] -> [0.505, 1.761]\n##    [0.000, 1.000] -> [0.505, 1.239]\n##    [1.000, 1.000] -> [0.908, 0.908]\n\n# solution_check(smooth(testpath1), answer1)\n\n\n\n", "type": "Nugget", "id": 368001}, {"nuggetType": "lecture", "name": "Cyclic Smoothing Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQw", "media": {"dotsub_id": "961a061d-156a-4854-b59e-d36d59006a59", "name": "cs373_hw5_01_s_Cyclic-Smoothing", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOKbFgw", "youtube_id": "Gbqdp3dj2Xs", "youtube_state": "done", "path": "Course/cs373/Media/364002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nSo here's my solution. I modified the code in trivial ways.\n\n2\n00:00:03,000 --> 00:00:07,000\nI go through all the i's as opposed to leaving out the first and last node,\n\n3\n00:00:07,000 --> 00:00:13,000\nand because we are cyclic, I now have to add the model of division by the length of the path\n\n4\n00:00:13,000 --> 00:00:15,000\nin this smoothing parameter.\n\n5\n00:00:15,000 --> 00:00:18,000\nThat's it. So it's a very small modification.\n\n6\n00:00:18,000 --> 00:00:24,000\nI don't have a graphical interface, but what the points look like is very much like an oval, \n\n7\n00:00:24,000 --> 00:00:29,000\nlike this, after the smoothing. It actually put all endmarks a little bit,\n\n8\n00:00:29,000 --> 00:00:33,000\nwhich is a bit of a concern, which we address in a minute.\n\n", "id": 364002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQwLEgZOdWdnZXQY6cIWDA", "path": "Course/cs373/CourseRev/feb2012/Unit/358001/Nugget/369001", "type": "Nugget", "id": 369001}, {"nuggetType": "lecture", "name": "Constrained Smoothing", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQw", "media": {"dotsub_id": "23712696-85a7-4564-8f1d-a0c0391b0ed8", "name": "cs373_hw5_02_p_Constrained-Smoothing", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLnSFgw", "youtube_id": "a3whnj4H4DQ", "youtube_state": "done", "path": "Course/cs373/Media/371001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\n[Thrun] So in this next assignment, I'd like you to fix certain data points.\n\n2\n00:00:05,000 --> 00:00:08,000\nJust as much as you fixed the data points originally in our path,\n\n3\n00:00:08,000 --> 00:00:12,000\nthe beginning and end point, now I want to fix you 4 points.\n\n4\n00:00:12,000 --> 00:00:15,000\nThese are the corner points in our data points.\n\n5\n00:00:15,000 --> 00:00:18,000\nIn our original data, it's the one over here, the one over here,\n\n6\n00:00:18,000 --> 00:00:21,000\nand I want those to be fixed so they can't move.\n\n7\n00:00:21,000 --> 00:00:27,000\nAnd the way I indicated this in the code is by giving you a fix array that looks like this\n\n8\n00:00:27,000 --> 00:00:29,000\nwhere each of these numbers corresponds to exactly 1 data point.\n\n9\n00:00:29,000 --> 00:00:32,000\nThere's as many elements in fix as there is in path.\n\n10\n00:00:32,000 --> 00:00:37,000\nAnd then when I call smooth, I add fix as a parameter.\n\n11\n00:00:37,000 --> 00:00:40,000\nSo when you change the procedure and run it,\n\n12\n00:00:40,000 --> 00:00:42,000\nI can tell you you should be surprised by the output\n\n13\n00:00:42,000 --> 00:00:48,000\nin that when I run my procedure it copies over the initial path into the output.\n\n14\n00:00:48,000 --> 00:00:52,000\nWe'll talk about this in a second, but please go ahead and change your procedure\n\n15\n00:00:52,000 --> 00:00:57,000\nso that your output ends up to be giving you something very much like this.\n\n16\n00:00:57,000 --> 00:00:59,000\nThe modification is simple.\n\n17\n00:00:59,000 --> 00:01:03,000\nAs I go through my data points, I only apply the update if it's not fixed.\n\n18\n00:01:03,000 --> 00:01:07,000\nSo if the fix flag is not set, they go in here.\n\n19\n00:01:07,000 --> 00:01:09,000\nThis is all indented one compared to before.\n\n20\n00:01:09,000 --> 00:01:11,000\nIt's a single line change.\n\n21\n00:01:11,000 --> 00:01:13,000\nLet me tell you why this doesn't work.\n\n22\n00:01:13,000 --> 00:01:15,000\nConsider a few data points like these.\n\n23\n00:01:15,000 --> 00:01:17,000\nIf you fix this data point over here,\n\n24\n00:01:17,000 --> 00:01:21,000\nthen this guy is perfectly happy with his 2 neighbors--\n\n25\n00:01:21,000 --> 00:01:23,000\nthis is a smooth path--\n\n26\n00:01:23,000 --> 00:01:25,000\nand so is this guy over here.\n\n27\n00:01:25,000 --> 00:01:28,000\nThe only data point that's unhappy is the one over here\n\n28\n00:01:28,000 --> 00:01:30,000\nbecause it's not part of a very smooth path,\n\n29\n00:01:30,000 --> 00:01:32,000\nbut this one is never being updated.\n\n30\n00:01:32,000 --> 00:01:35,000\nSo as a result, all the other ones stay where they are.\n\n31\n00:01:35,000 --> 00:01:39,000\nThey already have the absolute minimum for smoothness and for the data fit.\n\n32\n00:01:39,000 --> 00:01:43,000\nNo updates take change, and we don't have the desired result.\n\n33\n00:01:43,000 --> 00:01:46,000\nWe don't get a nice round curve the way we wish to get it.\n\n34\n00:01:46,000 --> 00:01:51,000\nTo get this, we are going to modify our rule a little bit now, and that's the interesting part.\n\n35\n00:01:51,000 --> 00:01:54,000\nFor a node like this with coordinates xi and yi, \n\n36\n00:01:54,000 --> 00:01:59,000\nwe add to it with a very small constant gamma--\n\n37\n00:01:59,000 --> 00:02:04,000\nin fact, it will be half our weight smoothing constant in a minute--\n\n38\n00:02:04,000 --> 00:02:06,000\n2 times the previous guy--\n\n39\n00:02:06,000 --> 00:02:09,000\nand of course that's cyclic, so you have to make sure this is really cyclic--\n\n40\n00:02:09,000 --> 00:02:14,000\nminus the guy 2 steps away and minus our node.\n\n41\n00:02:14,000 --> 00:02:19,000\nWhy this makes sense we see when we go into the opposite direction.\n\n42\n00:02:19,000 --> 00:02:26,000\nHere we add a small gamma, 2 times this guy over here minus this guy here\n\n43\n00:02:26,000 --> 00:02:28,000\nminus our original data point.\n\n44\n00:02:28,000 --> 00:02:30,000\nAnd behind this is a certain desire.\n\n45\n00:02:30,000 --> 00:02:34,000\nWe want the vector over here to be the same as the vector over here.\n\n46\n00:02:34,000 --> 00:02:41,000\nThis vector is this difference over here of xi + 1 over yi + 1 - xi over yi.\n\n47\n00:02:41,000 --> 00:02:44,000\nThat is this vector over here.\n\n48\n00:02:44,000 --> 00:02:51,000\nAnd the vector over here is similarly the difference of the point i + 2 \n\n49\n00:02:51,000 --> 00:02:53,000\nminus the same for i + 1.\n\n50\n00:02:53,000 --> 00:02:58,000\nIf you set these to be equal and bring yi to the right side,\n\n51\n00:02:58,000 --> 00:03:05,000\nthen if you modify yi in proportion to this expression over here, we reduce the error.\n\n52\n00:03:05,000 --> 00:03:11,000\nIn fact, the expression in the brackets is the same as this one, called (A),\n\n53\n00:03:11,000 --> 00:03:14,000\nminus this one, called (B).\n\n54\n00:03:14,000 --> 00:03:16,000\nSo we're looking at the mismatch between these 2 vectors\n\n55\n00:03:16,000 --> 00:03:20,000\nand use it to adjust the xi factor over here.\n\n56\n00:03:20,000 --> 00:03:23,000\nWe do those sequentially--this one first, this one second.\n\n57\n00:03:23,000 --> 00:03:25,000\nYou might call them a little bit sloppy\n\n58\n00:03:25,000 --> 00:03:29,000\nbecause the first update already inferences the second update. But who cares?\n\n59\n00:03:29,000 --> 00:03:32,000\nWe're just going to add lines of code that achieve this over here,\n\n60\n00:03:32,000 --> 00:03:38,000\nand when you do this, please make sure that your update\n\n61\n00:03:38,000 --> 00:03:41,000\nunderstands the fact that these indices are cyclic.\n\n62\n00:03:41,000 --> 00:03:43,000\nSo I did this in my code and I'm running it,\n\n63\n00:03:43,000 --> 00:03:46,000\nand out come the following numbers that you can read over here.\n\n64\n00:03:46,000 --> 00:03:50,000\nThese numbers are indeed a cycle.\n\n65\n00:03:50,000 --> 00:03:53,000\nSo if we were to plot them--and this is the original data--\n\n66\n00:03:53,000 --> 00:03:55,000\nthese are the points we would constant,\n\n67\n00:03:55,000 --> 00:04:00,000\nthen the new data lies in over very much like this. You can plot them.\n\n68\n00:04:00,000 --> 00:04:04,000\nUnfortunately, I can't plot them in our environment here, but you could see this. \n\n69\n00:04:04,000 --> 00:04:06,000\nNow we are not shifting the racetrack inbound anymore.\n\n70\n00:04:06,000 --> 00:04:11,000\nPlease go to your code and modify the function smooth by doing these new constraints.\n\n71\n00:04:11,000 --> 00:04:18,000\nFor the update strength, I suggest you use half of weight_smooth for each update.\n\n72\n00:04:18,000 --> 00:04:22,000\nSo in total, you add another 0.1 as update strength.\n\n", "id": 371001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQwLEgZOdWdnZXQYodoWDA", "path": "Course/cs373/CourseRev/feb2012/Unit/358001/Nugget/372001", "type": "Nugget", "id": 372001}, {"nuggetType": "program", "name": "Constrained Smoothing", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQwLEgZOdWdnZXQYieIWDA", "path": "Course/cs373/CourseRev/feb2012/Unit/358001/Nugget/373001", "suppliedCode": "# -------------\n# User Instructions\n#\n# Now you will be incorporating fixed points into\n# your smoother. \n#\n# You will need to use the equations from gradient\n# descent AND the new equations presented in the\n# previous lecture to implement smoothing with\n# fixed points.\n#\n# Your function should return the newpath that it\n# calculates. \n#\n# Feel free to use the provided solution_check function\n# to test your code. You can find it at the bottom.\n#\n# --------------\n# Testing Instructions\n# \n# To test your code, call the solution_check function with\n# two arguments. The first argument should be the result of your\n# smooth function. The second should be the corresponding answer.\n# For example, calling\n#\n# solution_check(smooth(testpath1), answer1)\n#\n# should return True if your answer is correct and False if\n# it is not.\n\nfrom math import *\n\n# Do not modify path inside your function.\npath=[[0, 0], #fix \n      [1, 0],\n      [2, 0],\n      [3, 0],\n      [4, 0],\n      [5, 0],\n      [6, 0], #fix\n      [6, 1],\n      [6, 2],\n      [6, 3], #fix\n      [5, 3],\n      [4, 3],\n      [3, 3],\n      [2, 3],\n      [1, 3],\n      [0, 3], #fix\n      [0, 2],\n      [0, 1]]\n\n# Do not modify fix inside your function\nfix = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0]\n\n######################## ENTER CODE BELOW HERE #########################\n\ndef smooth(path, fix, weight_data = 0.0, weight_smooth = 0.1, tolerance = 0.00001):\n    #\n    # Enter code here. \n    # The weight for each of the two new equations should be 0.5 * weight_smooth\n    #\n    return newpath\n\n\n\n#thank you - EnTerr - for posting this on our discussion forum\n\n##newpath = smooth(path)\n##for i in range(len(path)):\n##    print '['+ ', '.join('%.3f'%x for x in path[i]) +'] -> ['+ ', '.join('%.3f'%x for x in newpath[i]) +']'\n\n# --------------------------------------------------\n# check if two numbers are 'close enough,'used in\n# solution_check function.\n#\ndef close_enough(user_answer, true_answer, epsilon = 0.03):\n    if abs(user_answer - true_answer) > epsilon:\n        return False\n    return True\n\n# --------------------------------------------------\n# check your solution against our reference solution for\n# a variety of test cases (given below)\n#\ndef solution_check(newpath, answer):\n    if type(newpath) != type(answer):\n        print \"Error. You do not return a list.\"\n        return False\n    if len(newpath) != len(answer):\n        print 'Error. Your newpath is not the correct length.'\n        return False\n    if len(newpath[0]) != len(answer[0]):\n        print 'Error. Your entries do not contain an (x, y) coordinate pair.'\n        return False\n    for i in range(len(newpath)): \n        for j in range(len(newpath[0])):\n            if not close_enough(newpath[i][j], answer[i][j]):\n                print 'Error, at least one of your entries is not correct.'\n                return False\n    print \"Test case correct!\"\n    return True\n\n# --------------\n# Testing Instructions\n# \n# To test your code, call the solution_check function with\n# two arguments. The first argument should be the result of your\n# smooth function. The second should be the corresponding answer.\n# For example, calling\n#\n# solution_check(smooth(testpath1), answer1)\n#\n# should return True if your answer is correct and False if\n# it is not.\n\ntestpath1=[[0, 0], #fix\n      [1, 0],\n      [2, 0],\n      [3, 0],\n      [4, 0],\n      [5, 0],\n      [6, 0], #fix\n      [6, 1],\n      [6, 2],\n      [6, 3], #fix\n      [5, 3],\n      [4, 3],\n      [3, 3],\n      [2, 3],\n      [1, 3],\n      [0, 3], #fix\n      [0, 2],\n      [0, 1]]\ntestfix1 = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0]\nanswer1 = [[0, 0],\n           [0.7938620981547201, -0.8311168821106101],\n           [1.8579052986461084, -1.3834788165869276],\n           [3.053905318597796, -1.5745863173084],\n           [4.23141390533387, -1.3784271816058231],\n           [5.250184859723701, -0.8264215958231558],\n           [6, 0],\n           [6.415150091996651, 0.9836951698796843],\n           [6.41942442687092, 2.019512290770163],\n           [6, 3],\n           [5.206131365604606, 3.831104483245191],\n           [4.142082497497067, 4.383455704596517],\n           [2.9460804122779813, 4.5745592975708105],\n           [1.768574219397359, 4.378404668718541],\n           [0.7498089205417316, 3.826409771585794],\n           [0, 3],\n           [-0.4151464728194156, 2.016311854977891],\n           [-0.4194207879552198, 0.9804948340550833]]\n\ntestpath2 = [[0, 0], # fix\n             [2, 0],\n             [4, 0], # fix\n             [4, 2],\n             [4, 4], # fix\n             [2, 4],\n             [0, 4], # fix\n             [0, 2]]\ntestfix2 = [1, 0, 1, 0, 1, 0, 1, 0]\nanswer2 = [[0, 0],\n           [2.0116767115496095, -0.7015439080661671],\n           [4, 0],\n           [4.701543905420104, 2.0116768147460418],\n           [4, 4],\n           [1.9883231877640861, 4.701543807525115],\n           [0, 4],\n           [-0.7015438099112995, 1.9883232808252207]]\n#solution_check(smooth(testpath1, testfix1), answer1)\n\n\n", "type": "Nugget", "id": 373001}, {"nuggetType": "lecture", "name": "Constrained Smoothing Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQw", "media": {"dotsub_id": "bccd87e9-55de-47d3-bfda-dd46357cac31", "name": "cs373_hw5_02_s_Constrained-Smoothing", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJKMFgw", "youtube_id": "ApN4VxlueqM", "youtube_state": "done", "path": "Course/cs373/Media/362002", "transcript": "\ufeff", "id": 362002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQwLEgZOdWdnZXQY8ekWDA", "path": "Course/cs373/CourseRev/feb2012/Unit/358001/Nugget/374001", "type": "Nugget", "id": 374001}, {"nuggetType": "lecture", "name": "Racetrack Control", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQw", "media": {"dotsub_id": "4c4cc841-2e99-409a-8eb6-ff2c1aba2d95", "name": "cs373_hw5_03_p_Racetrack-Control", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNnxFgw", "youtube_id": "64PjCuGOHzQ", "youtube_state": "done", "path": "Course/cs373/Media/375001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n[Thrun] So here's my second piece of software assignments in controls.\n\n2\n00:00:04,000 --> 00:00:09,000\nIn the class we talked about how to make a car follow a straight line.\n\n3\n00:00:09,000 --> 00:00:11,000\nWe used the line x = 0\n\n4\n00:00:11,000 --> 00:00:17,000\nwhere the crossing arrow was defined as the y difference between this axis.\n\n5\n00:00:17,000 --> 00:00:19,000\nWe just went off the y value.\n\n6\n00:00:19,000 --> 00:00:24,000\nSo now I want to make a more interesting course, a cyclic course, a racecourse. \n\n7\n00:00:24,000 --> 00:00:28,000\nHere's my racecourse. It has the radius r, which you can set.\n\n8\n00:00:28,000 --> 00:00:34,000\nThe way I'd like to define this racecourse is through a half cycle where we use r,\n\n9\n00:00:34,000 --> 00:00:39,000\nsame half cycle over here, and the stretches in between I want to be 2r long.\n\n10\n00:00:39,000 --> 00:00:45,000\nSo for example, if this radius equals 25 meters, then this would be 50 meters.\n\n11\n00:00:45,000 --> 00:00:49,000\nThe whole thing would be 100 meters, and this measurement would also be 50 meters.\n\n12\n00:00:49,000 --> 00:00:53,000\nI want you to program it such that the initial car is stationed right over here,\n\n13\n00:00:53,000 --> 00:00:59,000\npointed upwards, and then it drives onto the racecourse like this, \n\n14\n00:00:59,000 --> 00:01:02,000\nall the way around infinitely often.\n\n15\n00:01:02,000 --> 00:01:06,000\nThe key in doing this is going to be to set a function.\n\n16\n00:01:06,000 --> 00:01:11,000\nI have already modified for you the function run from our control class\n\n17\n00:01:11,000 --> 00:01:15,000\nto use that crosstrack_error with the parameter radius, \n\n18\n00:01:15,000 --> 00:01:19,000\nwhich we're going to set to 25, but I can pick a different value in my testing.\n\n19\n00:01:19,000 --> 00:01:23,000\nAnd then I have modified a little bit the update over here\n\n20\n00:01:23,000 --> 00:01:27,000\nto maintain the differential and the integral crosstrack_error,\n\n21\n00:01:27,000 --> 00:01:32,000\nand here is our steering control law that you are familiar with.\n\n22\n00:01:32,000 --> 00:01:37,000\nInstead of twiddle I'm just going to give you parameters, 10, 15, and 0.\n\n23\n00:01:37,000 --> 00:01:40,000\nThose work fine for me,\n\n24\n00:01:40,000 --> 00:01:43,000\nand they're actually the result of running twiddle without the integral part.\n\n25\n00:01:43,000 --> 00:01:47,000\nAnd then when I run it, I get my output. And here it is.\n\n26\n00:01:47,000 --> 00:01:50,000\nThe crosstrack_error by and large is very small.\n\n27\n00:01:50,000 --> 00:01:54,000\nYou can see the steering tends to be on the negative side.\n\n28\n00:01:54,000 --> 00:01:57,000\nHere we're steering at the first turn, here we're on the straightaway.\n\n29\n00:01:57,000 --> 00:01:59,000\nYou can see this by the numbers.\n\n30\n00:01:59,000 --> 00:02:03,000\nHere we go into a turn again, so the turning becomes larger.\n\n31\n00:02:03,000 --> 00:02:07,000\nIn all of this you find the crosstrack_error to be relatively small, \n\n32\n00:02:07,000 --> 00:02:12,000\nabout 0.1 or so--not very much--and this continues and continues.\n\n33\n00:02:12,000 --> 00:02:16,000\nThe final crosstrack_error for the second half of the race is 0.005.\n\n34\n00:02:16,000 --> 00:02:19,000\nSo you want this number to be really, really small.\n\n35\n00:02:19,000 --> 00:02:24,000\nThe tricky part is when you code this up and code the function cte,\n\n36\n00:02:24,000 --> 00:02:27,000\nyou need a different branch for this area here, for this area over here,\n\n37\n00:02:27,000 --> 00:02:29,000\nthis area over here, this area over here.\n\n38\n00:02:29,000 --> 00:02:32,000\nKeep in mind that the robot is going to go in a cycle.\n\n39\n00:02:32,000 --> 00:02:35,000\nSo it's going to traverse this one in the opposite direction with this one over here.\n\n40\n00:02:35,000 --> 00:02:40,000\nSo good luck coding up the correct crosstrack_error function.\n\n", "id": 375001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQwLEgZOdWdnZXQYwfkWDA", "path": "Course/cs373/CourseRev/feb2012/Unit/358001/Nugget/376001", "type": "Nugget", "id": 376001}, {"nuggetType": "lecture", "name": "Racetrack Control Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQw", "media": {"dotsub_id": "9b5c00f9-e18d-4505-9269-36f9b094b595", "name": "cs373_hw5_03_s_Racetrack-Control", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJGJFww", "youtube_id": "GCJXunrJjBY", "youtube_state": "done", "path": "Course/cs373/Media/378001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\n[Thrun] And here is my solution. We have 4 cases.\n\n2\n00:00:03,000 --> 00:00:07,000\nOn the left side, if I'm on the left side of the racecourse,\n\n3\n00:00:07,000 --> 00:00:10,000\nas defined that x is smaller to radius,\n\n4\n00:00:10,000 --> 00:00:17,000\nthen my crosstrack_error is defined by the distance to the circle,\n\n5\n00:00:17,000 --> 00:00:20,000\ncentered at radius comma radius minus the radius itself.\n\n6\n00:00:20,000 --> 00:00:23,000\nSo this is going to be 0 if I'm exactly on the circle.\n\n7\n00:00:23,000 --> 00:00:27,000\nIf I'm more than 3 times over to the right side, I get a circle again.\n\n8\n00:00:27,000 --> 00:00:32,000\nIt looks like the one before, but now the center of the circle is a little bit further to the right\n\n9\n00:00:32,000 --> 00:00:34,000\nby 3 times radius as opposed to 1 radius.\n\n10\n00:00:34,000 --> 00:00:36,000\nThe rest is identical to the line over here,\n\n11\n00:00:36,000 --> 00:00:38,000\nso I'm subtracting the same radius on the right side. \n\n12\n00:00:38,000 --> 00:00:40,000\nYou can't quite see it but it's there.\n\n13\n00:00:40,000 --> 00:00:42,000\nInteresting are the straightaways.\n\n14\n00:00:42,000 --> 00:00:46,000\nSo if my y value is large on the upper part of the diagram--\n\n15\n00:00:46,000 --> 00:00:52,000\nin fact, it's larger than radius--then my crosstrack_error is the y coordinate\n\n16\n00:00:52,000 --> 00:00:55,000\ntimes 2 times the radius, which is the height of the racetrack.\n\n17\n00:00:55,000 --> 00:00:57,000\nIf I'm down at the bottom, it's just the y axis,\n\n18\n00:00:57,000 --> 00:01:01,000\nbut really important is the minus sign because I'm moving in the opposite direction.\n\n19\n00:01:01,000 --> 00:01:08,000\nSo for your code, to run this correctly you would have gotten everything in this routine right.\n\n20\n00:01:08,000 --> 00:01:11,000\nSo that finishes my homework assignment.\n\n21\n00:01:11,000 --> 00:01:14,000\nCongratulations. You were able to make a car drive on a racetrack.\n\n22\n00:01:14,000 --> 00:01:18,000\nThat is actually quite a significant component of making cars drive.\n\n23\n00:01:18,000 --> 00:01:21,000\nThe PID control methodology that you learned today\n\n24\n00:01:21,000 --> 00:01:24,000\nand the smoothing methodology are really, really essential\n\n25\n00:01:24,000 --> 00:01:30,000\nnot just in controlling self-driving cars but in a great number of other control setups.\n\n26\n00:01:30,000 --> 00:01:33,000\nThank you for taking the class so far. You learned a lot already.\n\n27\n00:01:33,000 --> 00:01:36,000\nYou learned about localization, about planning and control,\n\n28\n00:01:36,000 --> 00:01:40,000\nand we almost learned talking about how to build a self-driving car.\n\n", "id": 378001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHsFQwLEgZOdWdnZXQY-ZAXDA", "path": "Course/cs373/CourseRev/feb2012/Unit/358001/Nugget/379001", "type": "Nugget", "id": 379001}]}, {"name": "Homework 5 Help", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMmgFwwLEgZOdWdnZXQYmbAXDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMmgFww", "path": "Course/cs373/CourseRev/feb2012/Unit/381001", "open": false, "id": 381001, "nuggets": [{"nuggetType": "lecture", "name": "Gradient Descent", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMmgFww", "media": {"dotsub_id": "b5cab9f7-119b-4ab8-8d4b-b83a6d97d563", "name": "cs373_hh5_00_l_Gradient-Descent", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLGoFww", "youtube_id": "umAeJ7LMCfU", "youtube_state": "done", "path": "Course/cs373/Media/382001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nSo we saw a lot of confusion in the forums about what was going on \n\n2\n00:00:04,000 --> 00:00:05,000\nwith this gradient descent.\n\n3\n00:00:05,000 --> 00:00:09,000\nThe equations that were given to you were presented as a black box,\n\n4\n00:00:09,000 --> 00:00:13,000\nand I'd like to open up that black box and see what's going on inside.\n\n5\n00:00:13,000 --> 00:00:17,000\nFor those of you who looked at Wikipedia to try to understand what's going on \n\n6\n00:00:17,000 --> 00:00:22,000\nwith gradient descent, the first formula you would have encountered was this one.\n\n7\n00:00:22,000 --> 00:00:24,000\nThis equation describes gradient descent.\n\n8\n00:00:24,000 --> 00:00:28,000\nNow this is a little intimidating at first.\n\n9\n00:00:28,000 --> 00:00:31,000\nWhat do all of these parameters mean?\n\n10\n00:00:31,000 --> 00:00:36,000\nb = a - gamma x the gradient of the function of valued at a.\n\n11\n00:00:36,000 --> 00:00:38,000\nLet's figure out what's going on here.\n\n12\n00:00:38,000 --> 00:00:43,000\nBefore we get into gradient descent, let's first answer the question,\n\n13\n00:00:43,000 --> 00:00:45,000\nwhat is a gradient?\n\n14\n00:00:45,000 --> 00:00:51,000\nTo help me answer this question, I'm going to get the help of my blindfolded hill climber.\n\n15\n00:00:51,000 --> 00:00:56,000\nHere's our blindfolded hill climber, and he's climbing this rounded hill.\n\n16\n00:00:56,000 --> 00:01:00,000\nHe wants to get to the top, and he wants to do it in as few steps as possible.\n\n17\n00:01:00,000 --> 00:01:02,000\nWhat is his method going to be?\n\n18\n00:01:02,000 --> 00:01:06,000\nWell, as long as the hill is steep, he knows he can afford to take a really big step\n\n19\n00:01:06,000 --> 00:01:09,000\nbecause he's still not really close to the top.\n\n20\n00:01:09,000 --> 00:01:12,000\nAs the hill smoothes out and becomes more level, he's going to want to take \n\n21\n00:01:12,000 --> 00:01:17,000\nsmaller and smaller steps because he's going to be afraid of overshooting the top\n\n22\n00:01:17,000 --> 00:01:19,000\nand winding up on the other side of the hill.\n\n23\n00:01:19,000 --> 00:01:22,000\nHow can we describe this mathematically?\n\n24\n00:01:22,000 --> 00:01:23,000\nThe way we're going to do that is by \n\n25\n00:01:23,000 --> 00:01:31,000\nusing the gradient, and when we do that, our climber is going to get to the top of the hill.\n\n26\n00:01:31,000 --> 00:01:35,000\nLet's look at this hill from a top-down view, instead of from the side.\n\n27\n00:01:35,000 --> 00:01:42,000\nI'm going to draw these isocline, so these lines all represent lines of the same altitude.\n\n28\n00:01:42,000 --> 00:01:43,000\nWe can see they come together.\n\n29\n00:01:43,000 --> 00:01:47,000\nThey're really close together in the beginning and become further and further apart\n\n30\n00:01:47,000 --> 00:01:50,000\nas we go inside, and that's because the hill is getting less and less steep.\n\n31\n00:01:50,000 --> 00:01:53,000\nSo at any point, the gradient is a vector.\n\n32\n00:01:53,000 --> 00:01:56,000\nIf I took the gradient at, let's say, this point.\n\n33\n00:01:56,000 --> 00:02:01,000\nI would get a vector pointing in the direction of steepest descent,\n\n34\n00:02:01,000 --> 00:02:03,000\nand the length of that vector would depend on exactly how steep the hill is.\n\n35\n00:02:03,000 --> 00:02:07,000\nSo at this point, which maybe corresponds to somewhere down here on the hill,\n\n36\n00:02:07,000 --> 00:02:10,000\nthe hill is quite steep, so our vector is quite long,\n\n37\n00:02:10,000 --> 00:02:12,000\nand it points directly uphill.\n\n38\n00:02:12,000 --> 00:02:15,000\nIf I was over here and taking the gradient, I would still be pointing uphill,\n\n39\n00:02:15,000 --> 00:02:17,000\nbut the vector wouldn't be quite as long now\n\n40\n00:02:17,000 --> 00:02:21,000\nbecause now we're up here, and the slope isn't so great,\n\n41\n00:02:21,000 --> 00:02:24,000\nand with reduced slope comes reduced gradient and a reduced step size\n\n42\n00:02:24,000 --> 00:02:26,000\nfor our blindfolded hill climber.\n\n43\n00:02:26,000 --> 00:02:30,000\nGradient descent is very similar to blindfolded hill climbing.\n\n44\n00:02:30,000 --> 00:02:33,000\nNow instead of climbing up a hill, we're climbing into a valley and trying to find the bottom of it\n\n45\n00:02:33,000 --> 00:02:36,000\nbecause we want to minimize a function.\n\n46\n00:02:36,000 --> 00:02:41,000\nThat minimization is encoded in this - sign so instead of adding the gradient,\n\n47\n00:02:41,000 --> 00:02:42,000\nwe're going to subtract it.\n\n48\n00:02:42,000 --> 00:02:45,000\nLet's talk about what each of these variables mean.\n\n49\n00:02:45,000 --> 00:02:48,000\nA is our current position.\n\n50\n00:02:48,000 --> 00:02:50,000\nIf we were the hill climber, it would be right here where he starts off.\n\n51\n00:02:50,000 --> 00:02:55,000\nB is going to be his next position so this is how the hill climber decides where to go next.\n\n52\n00:02:55,000 --> 00:03:00,000\nThis gradient term tells us the direction of steepest ascent.\n\n53\n00:03:00,000 --> 00:03:06,000\nThis - sign flips that around. It says okay, let's actually find the direction of steepest descent.\n\n54\n00:03:06,000 --> 00:03:09,000\nThis gamma is just a waiting factor.\n\n55\n00:03:09,000 --> 00:03:10,000\nThat's all this formula is doing.\n\n56\n00:03:10,000 --> 00:03:15,000\nIt's saying, let's take a step down the hill and use that as our new equation--\n\n57\n00:03:15,000 --> 00:03:17,000\nour new position. Sorry.\n\n58\n00:03:17,000 --> 00:03:20,000\nNow to elaborate on this, we're going to need to use a little bit of calculus,\n\n59\n00:03:20,000 --> 00:03:23,000\nso if you don't know calculus, don't be intimidated. \n\n60\n00:03:23,000 --> 00:03:26,000\nTry your best to follow along, and if you can't, that's okay too.\n\n61\n00:03:26,000 --> 00:03:32,000\nI think this captures the essence of what's going on with gradient descent.\n\n62\n00:03:32,000 --> 00:03:36,000\nFirst, we have to figure out what exactly is the function we're trying to minimize.\n\n63\n00:03:36,000 --> 00:03:39,000\nFor the purposes of the lecture, the function we're trying to minimize \n\n64\n00:03:39,000 --> 00:03:48,000\nwas a function of yi, and it was equal to some waiting alpha x xi - yi squared,\n\n65\n00:03:48,000 --> 00:03:54,000\n+ some waiting beta x yi - yi +1 squared,\n\n66\n00:03:54,000 --> 00:03:55,000\nso the next y coordinate,\n\n67\n00:03:55,000 --> 00:03:59,000\nand we also do the same for the previous y coordinate,\n\n68\n00:03:59,000 --> 00:04:01,000\nso yi - 1.\n\n69\n00:04:01,000 --> 00:04:04,000\nWe want to minimize this, and we're going to use gradient descent.\n\n70\n00:04:04,000 --> 00:04:09,000\nWell, gradient descent says that, we should just iterate over this process until we get\n\n71\n00:04:09,000 --> 00:04:13,000\nto a sufficiently shallow slope that we're confident are in the bottom.\n\n72\n00:04:13,000 --> 00:04:14,000\nWe've really found a minimum.\n\n73\n00:04:14,000 --> 00:04:17,000\nSo at each step, we're going to follow this.\n\n74\n00:04:17,000 --> 00:04:21,000\nB, our new location becomes yi prime.\n\n75\n00:04:21,000 --> 00:04:26,000\nThat's going to equal our old location, yi, and then - this gradient,\n\n76\n00:04:26,000 --> 00:04:30,000\nand the gradient here is just going to be the derivative with respect to yi.\n\n77\n00:04:30,000 --> 00:04:33,000\nIf you don't know calculus again, don't worry about it, and if you do,\n\n78\n00:04:33,000 --> 00:04:35,000\nthis is a fairly simple derivative.\n\n79\n00:04:35,000 --> 00:04:40,000\nI'm going to writie it simplified. I'm not going to show you all the intermediate steps.\n\n80\n00:04:40,000 --> 00:04:59,000\nBut once we do this out, we find that yi prime = yi + 2 alpha x (xi - yi) + 2B(yi + 1 + yi  - 1 - 2yi).\n\n81\n00:04:59,000 --> 00:05:03,000\nThis almost, almost looks like the equation that you were given in class.\n\n82\n00:05:03,000 --> 00:05:05,000\nThere's a little problem, and that's these 2s.\n\n83\n00:05:05,000 --> 00:05:09,000\nI'm going to do something where I just erase them.\n\n84\n00:05:09,000 --> 00:05:12,000\nYou may be saying, hey, you're not allowed to do that,\n\n85\n00:05:12,000 --> 00:05:16,000\nbut let's just pretend I'd originally called these parameters alpha over 2 and beta over 2,\n\n86\n00:05:16,000 --> 00:05:18,000\nthen everything will work out just fine.\n\n87\n00:05:18,000 --> 00:05:20,000\nThat's gradient descent.\n\n88\n00:05:20,000 --> 00:05:22,000\nThat's where this occasion comes from in our update step.\n\n89\n00:05:22,000 --> 00:05:25,000\nThis would be simultaneous update.\n\n90\n00:05:25,000 --> 00:05:28,000\nAnother good way of using gradient descent.\n\n91\n00:05:28,000 --> 00:05:31,000\nIt's not how we implement it in lectures, but that's okay.\n\n92\n00:05:31,000 --> 00:05:33,000\nI hope this was helpful. Good luck!\n\n", "id": 382001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GMmgFwwLEgZOdWdnZXQYmbAXDA", "path": "Course/cs373/CourseRev/feb2012/Unit/381001/Nugget/383001", "type": "Nugget", "id": 383001}]}, {"name": "Office Hours 5", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJGAGgwLEgZOdWdnZXQY4Y8aDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJGAGgw", "path": "Course/cs373/CourseRev/feb2012/Unit/426001", "open": false, "id": 426001, "nuggets": [{"nuggetType": "lecture", "name": "Office Hours Week 5", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJGAGgw", "media": {"dotsub_id": null, "name": "cs373_oo5_00_l_Office-Hours-Week-5", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPmHGgw", "youtube_id": "UASLNJOidvs", "youtube_state": "processing", "path": "Course/cs373/Media/427001", "transcript": null, "id": 427001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJGAGgwLEgZOdWdnZXQY4Y8aDA", "path": "Course/cs373/CourseRev/feb2012/Unit/426001/Nugget/428001", "type": "Nugget", "id": 428001}]}, {"name": "Unit 6", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYodcXDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY2e4XDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYqf4XDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY-Y0YDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYk4YYDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYsqgXDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYyqAXDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYyp0YDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYqv4XDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY6r8XDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYo9cXDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY0scXDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYzJ0YDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYucwYDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYotQYDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY8uYXDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY8eMYDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYgrUYDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYpNcXDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYitwYDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYw_YXDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY2u4XDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYwvMYDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY2-4XDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYzp0YDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYqvsYDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYi9wYDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYsaIZDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY1McXDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYjNwYDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYz50YDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYs6gXDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY6bkZDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYhLgXDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY0J0YDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYm6oZDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYuckZDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY4pUYDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY7L8XDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYsqUYDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYw_MYDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYjdwYDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYsZ8aDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYga8aDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY0b4aDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYhLIZDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYlYYYDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYo9QYDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY4pIZDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY2ugZDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYhbgXDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY8uMYDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYzaAXDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY08QYDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYvc8XDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY67wYDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYpdcXDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYoc4aDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYo9EZDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "path": "Course/cs373/CourseRev/feb2012/Unit/386001", "open": false, "id": 386001, "nuggets": [{"nuggetType": "lecture", "name": "Planning Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "732da0f2-4e72-4061-88db-fc5fa9bccb90", "name": "cs373_unit6_02_s_Planning", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIrfFww", "youtube_id": "O3FY8zmdSME", "youtube_state": "failed", "path": "Course/cs373/Media/389002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nSmoothing was the only planner that actually really worked in a continuous domain.\n\n2\n00:00:04,000 --> 00:00:06,000\nEverything else was very discrete.\n\n3\n00:00:06,000 --> 00:00:11,000\nOur breadth-first, A-star, and dynamic programming all find the optimal solution.\n\n4\n00:00:11,000 --> 00:00:15,000\nDynamic programming is the only one that's universal,\n\n5\n00:00:15,000 --> 00:00:17,000\nand smoothing is the only local operation \n\n6\n00:00:17,000 --> 00:00:22,000\nwhereas those over here all optimize a global planning problem.\n\n", "id": 389002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYyqAXDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/381002", "type": "Nugget", "id": 381002}, {"nuggetType": "program", "name": "Confident Measurements", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYzaAXDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/381005", "suppliedCode": "# -----------\n# User Instructions\n#\n# Modify the previous code to adjust for a highly\n# confident last measurement. Do this by adding a\n# factor of 5 into your Omega and Xi matrices\n# as described in the video.\n\n\n \nfrom math import *\nimport random\n\n\n#===============================================================\n#\n# SLAM in a rectolinear world (we avoid non-linearities)\n#      \n# \n#===============================================================\n\n\n# ------------------------------------------------\n# \n# this is the matrix class\n# we use it because it makes it easier to collect constraints in GraphSLAM\n# and to calculate solutions (albeit inefficiently)\n# \n\nclass matrix:\n    \n    # implements basic operations of a matrix class\n\n    # ------------\n    #\n    # initialization - can be called with an initial matrix\n    #\n\n    def __init__(self, value = [[]]):\n        self.value = value\n        self.dimx  = len(value)\n        self.dimy  = len(value[0])\n        if value == [[]]:\n            self.dimx = 0\n\n    # ------------\n    #\n    # makes matrix of a certain size and sets each element to zero\n    #\n\n    def zero(self, dimx, dimy = 0):\n        if dimy == 0:\n            dimy = dimx\n        # check if valid dimensions\n        if dimx < 1 or dimy < 1:\n            raise ValueError, \"Invalid size of matrix\"\n        else:\n            self.dimx  = dimx\n            self.dimy  = dimy\n            self.value = [[0.0 for row in range(dimy)] for col in range(dimx)]\n\n    # ------------\n    #\n    # makes matrix of a certain (square) size and turns matrix into identity matrix\n    #\n\n\n    def identity(self, dim):\n        # check if valid dimension\n        if dim < 1:\n            raise ValueError, \"Invalid size of matrix\"\n        else:\n            self.dimx  = dim\n            self.dimy  = dim\n            self.value = [[0.0 for row in range(dim)] for col in range(dim)]\n            for i in range(dim):\n                self.value[i][i] = 1.0\n    # ------------\n    #\n    # prints out values of matrix\n    #\n\n\n    def show(self, txt = ''):\n        for i in range(len(self.value)):\n            print txt + '['+ ', '.join('%.3f'%x for x in self.value[i]) + ']' \n        print ' '\n\n    # ------------\n    #\n    # defines elmement-wise matrix addition. Both matrices must be of equal dimensions\n    #\n\n\n    def __add__(self, other):\n        # check if correct dimensions\n        if self.dimx != other.dimx or self.dimx != other.dimx:\n            raise ValueError, \"Matrices must be of equal dimension to add\"\n        else:\n            # add if correct dimensions\n            res = matrix()\n            res.zero(self.dimx, self.dimy)\n            for i in range(self.dimx):\n                for j in range(self.dimy):\n                    res.value[i][j] = self.value[i][j] + other.value[i][j]\n            return res\n\n    # ------------\n    #\n    # defines elmement-wise matrix subtraction. Both matrices must be of equal dimensions\n    #\n\n    def __sub__(self, other):\n        # check if correct dimensions\n        if self.dimx != other.dimx or self.dimx != other.dimx:\n            raise ValueError, \"Matrices must be of equal dimension to subtract\"\n        else:\n            # subtract if correct dimensions\n            res = matrix()\n            res.zero(self.dimx, self.dimy)\n            for i in range(self.dimx):\n                for j in range(self.dimy):\n                    res.value[i][j] = self.value[i][j] - other.value[i][j]\n            return res\n\n    # ------------\n    #\n    # defines multiplication. Both matrices must be of fitting dimensions\n    #\n\n\n    def __mul__(self, other):\n        # check if correct dimensions\n        if self.dimy != other.dimx:\n            raise ValueError, \"Matrices must be m*n and n*p to multiply\"\n        else:\n            # multiply if correct dimensions\n            res = matrix()\n            res.zero(self.dimx, other.dimy)\n            for i in range(self.dimx):\n                for j in range(other.dimy):\n                    for k in range(self.dimy):\n                        res.value[i][j] += self.value[i][k] * other.value[k][j]\n        return res\n\n\n    # ------------\n    #\n    # returns a matrix transpose\n    #\n\n\n    def transpose(self):\n        # compute transpose\n        res = matrix()\n        res.zero(self.dimy, self.dimx)\n        for i in range(self.dimx):\n            for j in range(self.dimy):\n                res.value[j][i] = self.value[i][j]\n        return res\n\n    # ------------\n    #\n    # creates a new matrix from the existing matrix elements.\n    #\n    # Example:\n    #       l = matrix([[ 1,  2,  3,  4,  5], \n    #                   [ 6,  7,  8,  9, 10], \n    #                   [11, 12, 13, 14, 15]])\n    #\n    #       l.take([0, 2], [0, 2, 3])\n    #\n    # results in:\n    #       \n    #       [[1, 3, 4], \n    #        [11, 13, 14]]\n    #       \n    # \n    # take is used to remove rows and columns from existing matrices\n    # list1/list2 define a sequence of rows/columns that shall be taken\n    # is no list2 is provided, then list2 is set to list1 (good for symmetric matrices)\n    #\n\n    def take(self, list1, list2 = []):\n        if list2 == []:\n            list2 = list1\n        if len(list1) > self.dimx or len(list2) > self.dimy:\n            raise ValueError, \"list invalid in take()\"\n\n        res = matrix()\n        res.zero(len(list1), len(list2))\n        for i in range(len(list1)):\n            for j in range(len(list2)):\n                res.value[i][j] = self.value[list1[i]][list2[j]]\n        return res\n\n    # ------------\n    #\n    # creates a new matrix from the existing matrix elements.\n    #\n    # Example:\n    #       l = matrix([[1, 2, 3],\n    #                  [4, 5, 6]])\n    #\n    #       l.expand(3, 5, [0, 2], [0, 2, 3])\n    #\n    # results in:\n    #\n    #       [[1, 0, 2, 3, 0], \n    #        [0, 0, 0, 0, 0], \n    #        [4, 0, 5, 6, 0]]\n    # \n    # expand is used to introduce new rows and columns into an existing matrix\n    # list1/list2 are the new indexes of row/columns in which the matrix\n    # elements are being mapped. Elements for rows and columns \n    # that are not listed in list1/list2 \n    # will be initialized by 0.0.\n    #\n\n    def expand(self, dimx, dimy, list1, list2 = []):\n        if list2 == []:\n            list2 = list1\n        if len(list1) > self.dimx or len(list2) > self.dimy:\n            raise ValueError, \"list invalid in expand()\"\n\n        res = matrix()\n        res.zero(dimx, dimy)\n        for i in range(len(list1)):\n            for j in range(len(list2)):\n                res.value[list1[i]][list2[j]] = self.value[i][j]\n        return res\n\n    # ------------\n    #\n    # Computes the upper triangular Cholesky factorization of  \n    # a positive definite matrix.\n    # This code is based on http://adorio-research.org/wordpress/?p=4560\n\n    def Cholesky(self, ztol= 1.0e-5):\n\n\n        res = matrix()\n        res.zero(self.dimx, self.dimx)\n\n        for i in range(self.dimx):\n            S = sum([(res.value[k][i])**2 for k in range(i)])\n            d = self.value[i][i] - S\n            if abs(d) < ztol:\n                res.value[i][i] = 0.0\n            else: \n                if d < 0.0:\n                    raise ValueError, \"Matrix not positive-definite\"\n                res.value[i][i] = sqrt(d)\n            for j in range(i+1, self.dimx):\n                S = sum([res.value[k][i] * res.value[k][j] for k in range(i)])\n                if abs(S) < ztol:\n                    S = 0.0\n                res.value[i][j] = (self.value[i][j] - S)/res.value[i][i]\n        return res \n \n    # ------------\n    #\n    # Computes inverse of matrix given its Cholesky upper Triangular\n    # decomposition of matrix.\n    # This code is based on http://adorio-research.org/wordpress/?p=4560\n\n    def CholeskyInverse(self):\n    # Computes inverse of matrix given its Cholesky upper Triangular\n    # decomposition of matrix.\n        # This code is based on http://adorio-research.org/wordpress/?p=4560\n\n        res = matrix()\n        res.zero(self.dimx, self.dimx)\n\n    # Backward step for inverse.\n        for j in reversed(range(self.dimx)):\n            tjj = self.value[j][j]\n            S = sum([self.value[j][k]*res.value[j][k] for k in range(j+1, self.dimx)])\n            res.value[j][j] = 1.0/ tjj**2 - S/ tjj\n            for i in reversed(range(j)):\n                res.value[j][i] = res.value[i][j] = \\\n                    -sum([self.value[i][k]*res.value[k][j] for k in \\\n                              range(i+1,self.dimx)])/self.value[i][i]\n        return res\n    \n    # ------------\n    #\n    # comutes and returns the inverse of a square matrix\n    #\n\n\n    def inverse(self):\n        aux = self.Cholesky()\n        res = aux.CholeskyInverse()\n        return res\n\n    # ------------\n    #\n    # prints matrix (needs work!)\n    #\n\n\n    def __repr__(self):\n        return repr(self.value)\n\n\n# ######################################################################\n# ######################################################################\n# ######################################################################\n\n\n# Including the 5 times multiplier, your returned mu should now be:\n#\n# [[-3.0],\n#  [2.179],\n#  [5.714],\n#  [6.821]]\n\n\n\n############## MODIFY CODE BELOW ##################\n\ndef doit(initial_pos, move1, move2, Z0, Z1, Z2):\n    Omega = matrix([[1.0, 0.0, 0.0],\n                    [0.0, 0.0, 0.0],\n                    [0.0, 0.0, 0.0]])\n    Xi    = matrix([[initial_pos],\n                    [0.0],\n                    [0.0]])\n\n    Omega += matrix([[1.0, -1.0, 0.0],\n                     [-1.0, 1.0, 0.0],\n                     [0.0, 0.0, 0.0]])\n    Xi    += matrix([[-move1],\n                     [move1],\n                     [0.0]])\n    \n    Omega += matrix([[0.0, 0.0, 0.0],\n                     [0.0, 1.0, -1.0],\n                     [0.0, -1.0, 1.0]])\n    Xi    += matrix([[0.0],\n                     [-move2],\n                     [move2]])\n    \n    Omega = Omega.expand(4, 4, [0, 1, 2], [0, 1, 2])\n    Xi =    Xi.expand(4, 1, [0, 1, 2], [0])\n\n    Omega += matrix([[1.0, 0.0, 0.0, -1.0],\n                     [0.0, 0.0, 0.0, 0.0],\n                     [0.0, 0.0, 0.0, 0.0],\n                     [-1.0, 0.0, 0.0, 1.0]])\n    Xi    += matrix([[-Z0],\n                     [0.0],\n                     [0.0],\n                     [Z0]])\n\n    Omega += matrix([[0.0, 0.0, 0.0, 0.0],\n                     [0.0, 1.0, 0.0, -1.0],\n                     [0.0, 0.0, 0.0, 0.0],\n                     [0.0, -1.0, 0.0, 1.0]])\n    Xi    += matrix([[0.0],\n                     [-Z1],\n                     [0.0],\n                     [Z1]])\n\n    Omega += matrix([[0.0, 0.0, 0.0, 0.0],\n                     [0.0, 0.0, 0.0, 0.0],\n                     [0.0, 0.0, 1.0, -1.0],\n                     [0.0, 0.0, -1.0, 1.0]])\n    Xi    += matrix([[0.0],\n                     [0.0],\n                     [-Z2],\n                     [Z2]])\n\n    Omega.show('Omega: ')\n    Xi.show('Xi:    ')\n    mu = Omega.inverse() * Xi\n    mu.show('Mu:    ')\n    \n    return mu\n\ndoit(-3, 5, 3, 10, 5, 1)\n\n\n", "type": "Nugget", "id": 381005}, {"nuggetType": "quiz", "name": "Planning", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYsqgXDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/382002", "type": "Nugget", "id": 382002}, {"nuggetType": "quiz", "name": "Slam Quiz", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYs6gXDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/382003", "type": "Nugget", "id": 382003}, {"nuggetType": "lecture", "name": "Landmark Position Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": null, "name": "cs373_unit6_17_s_Landmark-Position", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMX2Fww", "youtube_id": "yC986WXuS1E", "youtube_state": "processing", "path": "Course/cs373/Media/392005", "transcript": null, "id": 392005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYtagXDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/382005", "type": "Nugget", "id": 382005}, {"nuggetType": "lecture", "name": "Matrix Modification", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "03f93b2a-941d-4e75-8ab3-2a5d5e1ef23f", "name": "cs373_unit6_14_q_Matrix-Modification", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNHBGQw", "youtube_id": "cFObs2UufNE", "youtube_state": "done", "path": "Course/cs373/Media/418001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nI want to add one last thing here--the initial robot location.\n\n2\n00:00:03,000 --> 00:00:08,000\nIf we define x0 to be 0, which is the origin of the map,\n\n3\n00:00:08,000 --> 00:00:13,000\nthen what this means is we add 1 over here and 0 over here.\n\n4\n00:00:13,000 --> 00:00:19,000\nThe reason why is this constraint is that x0 is 0.\n\n5\n00:00:19,000 --> 00:00:23,000\nLet's take a robot moving around and let's say it sees a landmark\n\n6\n00:00:23,000 --> 00:00:30,000\nfrom the first pose x0 and from the third pose x2 but not from the second pose.\n\n7\n00:00:30,000 --> 00:00:33,000\nI want you, in this matrix over here, \n\n8\n00:00:33,000 --> 00:00:37,000\nto check mark all the fields that are being modified by Graph SLAM--\n\n9\n00:00:37,000 --> 00:00:42,000\nit's a binary check--and the same for the vector without putting actual numbers in.\n\n10\n00:00:42,000 --> 00:00:46,000\nSo go into this matrix and ask yourself which fields will be 0, the ones untouched,\n\n11\n00:00:46,000 --> 00:00:50,000\nand which ones will not be 0 that are the ones we modified.\n\n", "id": 418001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYhLgXDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/384004", "type": "Nugget", "id": 384004}, {"nuggetType": "lecture", "name": "Introducing Noise Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "2e02bad0-91ef-4795-b17b-e4b30d1b692a", "name": "cs373_unit6_19_s_Introducing-Noise", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLzPFww", "youtube_id": "8O8TTizH8ZA", "youtube_state": "done", "path": "Course/cs373/Media/387004", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nI'm trying it out and see what happens.\n\n2\n00:00:03,000 --> 00:00:09,000\nBefore it was a -3, 2, 5, 7, and now the first position is completely unchanged.\n\n3\n00:00:09,000 --> 00:00:11,000\nI'll explain to you in a second why.\n\n4\n00:00:11,000 --> 00:00:20,000\nThe third one went from 5 to 5.5, and the landmark went down from 7 to 6.8.\n\n5\n00:00:20,000 --> 00:00:25,000\nGraphically, this guy becomes larger than 5, and this landmark even shifts a little bit \n\n6\n00:00:25,000 --> 00:00:30,000\nto the left to make these two things closer together than they were before\n\n7\n00:00:30,000 --> 00:00:32,000\nwhen they had a separation distance of 2.\n\n8\n00:00:32,000 --> 00:00:36,000\nNow this picture doesn't really explain it well, because it's a 2D picture,\n\n9\n00:00:36,000 --> 00:00:39,000\nbut in 1D that's exactly what's happening.\n\n10\n00:00:39,000 --> 00:00:41,000\nAlso interesting is the initial position is unchanged.\n\n11\n00:00:41,000 --> 00:00:43,000\nThese are the correct answers.\n\n12\n00:00:43,000 --> 00:00:47,000\nNow, I would be blown away if you guessed them correctly.\n\n13\n00:00:47,000 --> 00:00:50,000\nThe reason why the initial position doesn't change is the only information we have\n\n14\n00:00:50,000 --> 00:00:55,000\nabout the absolute coordinate location is the very first initial position anchor \n\n15\n00:00:55,000 --> 00:00:58,000\nthat we said was to be -3.\n\n16\n00:00:58,000 --> 00:01:03,000\nNone of the relative rubber bands change the fact that we need this guy to be -3.\n\n17\n00:01:03,000 --> 00:01:06,000\nA relative change between these 2 things over here \n\n18\n00:01:06,000 --> 00:01:09,000\nmeans the rubber band is different, but it's a relative thing.\n\n19\n00:01:09,000 --> 00:01:12,000\nThis is the only absolute constraint we put in.\n\n20\n00:01:12,000 --> 00:01:16,000\nClearly the absolute location of the first position doesn't change.\n\n21\n00:01:16,000 --> 00:01:21,000\nThe reason why becomes larger than 5 is--well, think about rubber bands.\n\n22\n00:01:21,000 --> 00:01:25,000\nOur landmark is around 7. We believe to be at position 5 in the noise-free case.\n\n23\n00:01:25,000 --> 00:01:30,000\nWe just put a tighter rubber band between them. It's not 2 anymore; it's now 1.\n\n24\n00:01:30,000 --> 00:01:35,000\nThat means we are inclined to move the landmark and this position closer together.\n\n25\n00:01:35,000 --> 00:01:37,000\nThat's exactly what happens.\n\n26\n00:01:37,000 --> 00:01:44,000\nIf you go to this solution over here, the final position becomes 5.5. It's now 5.5.\n\n27\n00:01:44,000 --> 00:01:49,000\nThe landmark becomes 6.875 instead of 7.\n\n28\n00:01:49,000 --> 00:01:53,000\nNow, this is the case where the rubber bands don't add up.\n\n29\n00:01:53,000 --> 00:01:56,000\nThis is one of the places where Graph Slam is just magical.\n\n30\n00:01:56,000 --> 00:02:01,000\nBefore everything added up, but we have cycles in these structures.\n\n31\n00:02:01,000 --> 00:02:04,000\nThese cycles might not added up, because we have noise and motion,\n\n32\n00:02:04,000 --> 00:02:06,000\nnoise and measurements\n\n33\n00:02:06,000 --> 00:02:11,000\nWhat our method does by computing this thing--omega to -1 times xi--\n\n34\n00:02:11,000 --> 00:02:16,000\nwe find the best solution to the relaxation of those rubber bands.\n\n35\n00:02:16,000 --> 00:02:20,000\nThat, to me, is sheer magic.\n\n", "id": 387004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYhbgXDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/384005", "type": "Nugget", "id": 384005}, {"nuggetType": "lecture", "name": "Pid Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "9f8360b9-8572-4607-b6f6-221bfe5adca7", "name": "cs373_unit6_03_s_PID", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIG1GAw", "youtube_id": "IV4wooSGQ5M", "youtube_state": "failed", "path": "Course/cs373/Media/400001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nThe primary function of P is to minimize the error. We steer in proportion to the error.\n\n2\n00:00:05,000 --> 00:00:09,000\nThe D term avoids the overshoot, if used wisely.\n\n3\n00:00:09,000 --> 00:00:13,000\nSystematic drift and biases are best addressed by the I term.\n\n4\n00:00:13,000 --> 00:00:17,000\nThat's the correct answer, which I'm sure you got right at this point.\n\n", "id": 400001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY6r8XDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/385002", "type": "Nugget", "id": 385002}, {"nuggetType": "lecture", "name": "Untouched Fields Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "52f7e880-60c3-4d60-b43a-12d9d4edcc44", "name": "cs373_unit6_15_s_Untouched-Fields", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOq5GQw", "youtube_id": "PGqgn2Pellc", "youtube_state": "done", "path": "Course/cs373/Media/417002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nThe correct answer is 6 for the following missing links:\n\n2\n00:00:04,000 --> 00:00:07,000\nthis guy here gives me two values in the matrix.\n\n3\n00:00:07,000 --> 00:00:10,000\nThis guy here another two.\n\n4\n00:00:10,000 --> 00:00:14,000\nAnd this link here is also missing. That's another two. So 6 values are missing.\n\n5\n00:00:14,000 --> 00:00:20,000\nLet's prove it to ourselves. Moving from x0 to x1 fills up this area.\n\n6\n00:00:20,000 --> 00:00:24,000\nFrom x1 to x2, this area.\n\n7\n00:00:24,000 --> 00:00:31,000\nSeeing landmark L0 from x0 and x1 means we fill these guys over here.\n\n8\n00:00:31,000 --> 00:00:33,000\nand the main diagonal there.\n\n9\n00:00:33,000 --> 00:00:38,000\nSeeing the other landmark from x1 and x2 means we fill these guys over here.\n\n10\n00:00:38,000 --> 00:00:42,000\nLet's count the ones that are still open, and here are the ones.\n\n11\n00:00:42,000 --> 00:00:45,000\nMy answer was actually wrong. It's 8. \n\n12\n00:00:45,000 --> 00:00:49,000\nI overlooked there is no direct link from L1 to L2 either.\n\n13\n00:00:49,000 --> 00:00:51,000\nMy apologies that I gave you the wrong number, \n\n14\n00:00:51,000 --> 00:00:56,000\nbut it proves to you this is actually not an easy question. It's harder than I thought.\n\n15\n00:00:56,000 --> 00:01:01,000\nThe reason is there is also no direct link that constrains L1 and L2 directly.\n\n16\n00:01:01,000 --> 00:01:06,000\nLandmarks can't see, so they can't put a direct link between any two landmarks.\n\n17\n00:01:06,000 --> 00:01:12,000\nOr put differently, in this part over here our matrix will always be a diagonal matrix.\n\n", "id": 417002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY7L8XDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/385004", "type": "Nugget", "id": 385004}, {"nuggetType": "lecture", "name": "Segmented Cte", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "e0b805b9-f127-4aae-9d0d-3632f07fb313", "name": "cs373_unit6_05_p_Segmented-CTE", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGML2Fww", "youtube_id": "fJL47oJVQN4", "youtube_state": "failed", "path": "Course/cs373/Media/392002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nI spent a couple hours porting all the code over into this new format,\n\n2\n00:00:05,000 --> 00:00:10,000\nand I want to spare you all this editing work so in the final code \n\n3\n00:00:10,000 --> 00:00:13,000\nthat is a little bit incomplete still, we have a grid.\n\n4\n00:00:13,000 --> 00:00:15,000\nWe've got a function called \"main.\"\n\n5\n00:00:15,000 --> 00:00:24,000\nMain then runs a path planner, A-star, smooths it, and then runs the controller, as in \"run.\"\n\n6\n00:00:24,000 --> 00:00:29,000\nThen the controller even implemented for you our particle filter that you're familiar with.\n\n7\n00:00:29,000 --> 00:00:31,000\nThere's nothing new here.\n\n8\n00:00:31,000 --> 00:00:34,000\nYou're going to get the exact same code from class that you programmed yourself.\n\n9\n00:00:34,000 --> 00:00:39,000\nThen I go through a loop where I compute a crosstrack error,\n\n10\n00:00:39,000 --> 00:00:44,000\napply my only PD controller--here is no I term here--\n\n11\n00:00:44,000 --> 00:00:49,000\nand I run my particle filter as before to estimate where the robot is.\n\n12\n00:00:49,000 --> 00:00:54,000\nWhat I would like you to do is to implement the crosstrack error function,\n\n13\n00:00:54,000 --> 00:00:58,000\nand I want you to use as an input the estimate, not the actual robot position,\n\n14\n00:00:58,000 --> 00:01:03,000\nbut the best estimate, which you can get by running filter.get_position.\n\n15\n00:01:03,000 --> 00:01:08,000\nNow here is the difficulty, and I can tell you confidently it took me more than an hour\n\n16\n00:01:08,000 --> 00:01:11,000\nto solve this problem myself just for this class.\n\n17\n00:01:11,000 --> 00:01:15,000\nOur path now is a sequence of linear pieces.\n\n18\n00:01:15,000 --> 00:01:19,000\nWhen our robot drives along, it has a certain crosstrack error,\n\n19\n00:01:19,000 --> 00:01:25,000\nbut as the robot state project beyond the end of a line segment, as is happening here,\n\n20\n00:01:25,000 --> 00:01:30,000\nwe have to change the corresponding line segments to be the next one.\n\n21\n00:01:30,000 --> 00:01:35,000\nI addition, to calculating the assigned error relative to an arbitrary line segment,\n\n22\n00:01:35,000 --> 00:01:39,000\nnot just the y-axis, we also have to detect when the robot steps beyond \n\n23\n00:01:39,000 --> 00:01:44,000\nthe end of a line segment and switch over to the next one.\n\n24\n00:01:44,000 --> 00:01:47,000\nNow, suppose this is our line segment.\n\n25\n00:01:47,000 --> 00:01:53,000\nThe path is given by the coordinates of the beginning point, p1, and the end point, p2,\n\n26\n00:01:53,000 --> 00:01:57,000\nboth of which are (x, y) coordinates, which you get straight in the path.\n\n27\n00:01:57,000 --> 00:02:01,000\nSuppose our robot's position is something like this\n\n28\n00:02:01,000 --> 00:02:06,000\nwhere it has its own (x, y) estimate that comes out of the particle filter in your case,\n\n29\n00:02:06,000 --> 00:02:09,000\nand it has it's own orientation, theta.\n\n30\n00:02:09,000 --> 00:02:14,000\nThen both the cross track error as well as how far it has progressed \n\n31\n00:02:14,000 --> 00:02:20,000\nalong the line segment--call this \"U\"--can be calculated using a dot product.\n\n32\n00:02:20,000 --> 00:02:25,000\nSpecifically, let's call this vector over here delta x and delta y\n\n33\n00:02:25,000 --> 00:02:31,000\nas defined in x2 minus x1, and y2 minus y1--this vector over here.\n\n34\n00:02:31,000 --> 00:02:40,000\nLet's call this vector over here our Rx, which is x minus x1, and Ry.\n\n35\n00:02:40,000 --> 00:02:46,000\nThen U, the ratio of how far we've progressed along this segment is given\n\n36\n00:02:46,000 --> 00:02:53,000\nby the dot product Rx times delta x plus Ry times delta y \n\n37\n00:02:53,000 --> 00:03:02,000\ndivided over the sum of squares delta x times delta x plus delta y times delta y. Why?\n\n38\n00:03:02,000 --> 00:03:09,000\nWell, this normalizes the vector length to 1, and this is the dot product of this vector over here\n\n39\n00:03:09,000 --> 00:03:12,000\nand the green vector, which happens to define the distance.\n\n40\n00:03:12,000 --> 00:03:18,000\nIf this is larger than 1, we know we've left the segment and it's time to move onto the next one.\n\n41\n00:03:18,000 --> 00:03:23,000\nFinally, the crosstrack error--the red one over here--is given by a similar \n\n42\n00:03:23,000 --> 00:03:29,000\nbut not identical dot product of Ry times delta--\n\n43\n00:03:29,000 --> 00:03:32,000\nnotice we are now multiplying a y with an x--\n\n44\n00:03:32,000 --> 00:03:38,000\nminus--instead of plus--our x times delta y \n\n45\n00:03:38,000 --> 00:03:41,000\nwith the exact same normalizer as down here.\n\n46\n00:03:41,000 --> 00:03:44,000\nYou can see the normalizer over here.\n\n47\n00:03:44,000 --> 00:03:47,000\nWhat I want you to implement are these pieces of math over here.\n\n48\n00:03:47,000 --> 00:03:54,000\nWhen you run your controller, you will find that I setup for you a variable called \"index\"\n\n49\n00:03:54,000 --> 00:03:56,000\nthat's the index into your path.\n\n50\n00:03:56,000 --> 00:04:00,000\nWhen U exceeds 1, we should increment this index \n\n51\n00:04:00,000 --> 00:04:04,000\nto make sure it never goes beyond what's legal in path length.\n\n52\n00:04:04,000 --> 00:04:09,000\nThe crosstrack error should be computed relative to the current index\n\n53\n00:04:09,000 --> 00:04:13,000\nand is, of course, the assigned error using the exact same dot product I've shown you.\n\n54\n00:04:13,000 --> 00:04:16,000\nThe last thing I want to tell you is what the path is.\n\n55\n00:04:16,000 --> 00:04:18,000\nI want you to use the following path.\n\n56\n00:04:18,000 --> 00:04:21,000\nThe path is called \"S\" path.\n\n57\n00:04:21,000 --> 00:04:24,000\nIt is given the run function as one of the parameters over here.\n\n58\n00:04:24,000 --> 00:04:26,000\nYou can see it up here.\n\n59\n00:04:26,000 --> 00:04:33,000\nS path index is the indexth element of this path and 0 stands for x and 1 stands for y.\n\n60\n00:04:33,000 --> 00:04:37,000\nPlease fill in the missing code over here.\n\n61\n00:04:37,000 --> 00:04:41,000\nI should tell you, when you run our controller with the missing code included, \n\n62\n00:04:41,000 --> 00:04:45,000\nyou get actually a valid, nice path that mostly doesn't collide.\n\n63\n00:04:45,000 --> 00:04:48,000\nOccasionally it does, because of randomness in the system,\n\n64\n00:04:48,000 --> 00:04:50,000\nbut it should be mostly collision free.\n\n65\n00:04:50,000 --> 00:04:54,000\nFor this example, it will require about 130 or so robot steps. \n\n66\n00:04:54,000 --> 00:04:59,000\nJust so that you see a typical answer, here is a random run.\n\n67\n00:04:59,000 --> 00:05:04,000\nYou read this as follows--true means the robot actually found the goal,\n\n68\n00:05:04,000 --> 00:05:08,000\nzero means zero collisions, and it took 137 steps.\n\n69\n00:05:08,000 --> 00:05:11,000\nLet me run it again, and here is another outcome.\n\n70\n00:05:11,000 --> 00:05:15,000\nThe robot didn't collide and reached the goal in 145 steps.\n\n71\n00:05:15,000 --> 00:05:17,000\nI should warn you that sometimes I do get collisions here,\n\n72\n00:05:17,000 --> 00:05:20,000\nand it's because our obstacle surfaces are relatively large.\n\n73\n00:05:20,000 --> 00:05:23,000\nThe noise in the system makes it hard to navigate.\n\n74\n00:05:23,000 --> 00:05:26,000\nBut most of the time we should be able to get to the goal without difficulties\n\n75\n00:05:26,000 --> 00:05:28,000\nif we implement this piece of code correctly.\n\n76\n00:05:28,000 --> 00:05:31,000\nJust to warn you, it took me quite a while to work this out.\n\n", "id": 392002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY0scXDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/386002", "type": "Nugget", "id": 386002}, {"nuggetType": "quiz", "name": "Adding Landmarks", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY1McXDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/386004", "type": "Nugget", "id": 386004}, {"nuggetType": "lecture", "name": "Implementing Slam", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "af316ee1-5425-4479-bc44-f2af1a1ac664", "name": "cs373_unit6_21_p_Implementing-SLAM", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIa4Fww", "youtube_id": "uEElLi1Ob_g", "youtube_state": "done", "path": "Course/cs373/Media/384006", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nSo now we've learned all about Linear GraphSLAM, \n\n2\n00:00:02,000 --> 00:00:04,000\nand that's quite a bit--and it's really simple. \n\n3\n00:00:04,000 --> 00:00:06,000\nEvery time there's a constraint--\n\n4\n00:00:06,000 --> 00:00:09,000\nInitial Position, Motion or Measurement--\n\n5\n00:00:09,000 --> 00:00:14,000\nwe take this constraint and add something to Omega,  Xi.\n\n6\n00:00:14,000 --> 00:00:17,000\nAnd what we add is the constraint itself,\n\n7\n00:00:17,000 --> 00:00:20,000\nbut it's up multiplied by a strength factor.\n\n8\n00:00:20,000 --> 00:00:22,000\nThere's nothing else but 1 over sigma--\n\n9\n00:00:22,000 --> 00:00:25,000\nthe uncertainty in Motion or in Measurements. \n\n10\n00:00:25,000 --> 00:00:27,000\nAnd then when we're done with this adding--\n\n11\n00:00:27,000 --> 00:00:29,000\nwe simply calculate this guy \n\n12\n00:00:29,000 --> 00:00:31,000\nand out comes our best possible PATH--\n\n13\n00:00:31,000 --> 00:00:35,000\nand along with the MAP of all the landmarks. \n\n14\n00:00:35,000 --> 00:00:38,000\nIsn't that something? Isn't that really cool?\n\n15\n00:00:38,000 --> 00:00:44,000\nSo let's dive in and have you program your own real robot example. \n\n16\n00:00:44,000 --> 00:00:48,000\nThis is a fairly complicated generalization of what we just saw. \n\n17\n00:00:48,000 --> 00:00:50,000\nI'm giving you an environment where you can specify \n\n18\n00:00:50,000 --> 00:00:52,000\nthe number of landmarks that exist,\n\n19\n00:00:52,000 --> 00:00:55,000\nthe number of time steps you want the robot to run, \n\n20\n00:00:55,000 --> 00:00:58,000\nthe world_size, the measurement_range--that is \n\n21\n00:00:58,000 --> 00:01:01,000\nthe range at which a robot might be able to see a landmark--\n\n22\n00:01:01,000 --> 00:01:03,000\nif it's further away than this--it just won't see it;\n\n23\n00:01:03,000 --> 00:01:06,000\na motion_noise, a measurement_noise, \n\n24\n00:01:06,000 --> 00:01:08,000\nand a distance parameter. \n\n25\n00:01:08,000 --> 00:01:11,000\nThe distance specifies how fast a robot moves in each step. \n\n26\n00:01:11,000 --> 00:01:14,000\nAnd then I'm giving you a routine which makes the data. \n\n27\n00:01:14,000 --> 00:01:19,000\nIt takes all these parameters and it outputs a data field\n\n28\n00:01:19,000 --> 00:01:24,000\nthat contains a sequence of motions and a sequence of measurements. \n\n29\n00:01:24,000 --> 00:01:28,000\nThe code comments on the exact format of what data looks like. \n\n30\n00:01:28,000 --> 00:01:30,000\nNow  I want you to program the function, SLAM,\n\n31\n00:01:30,000 --> 00:01:33,000\nthat inputs the data and various important parameters\n\n32\n00:01:33,000 --> 00:01:39,000\nand it outputs my result--a sequence of estimated poses,\n\n33\n00:01:39,000 --> 00:01:43,000\nthe robot PATH, and estimated landmark positions. \n\n34\n00:01:43,000 --> 00:01:45,000\nThis is really challenging to program. \n\n35\n00:01:45,000 --> 00:01:47,000\nIt's based on the math I just gave you. \n\n36\n00:01:47,000 --> 00:01:50,000\nThe robot coordinates are now x and y coordinates.\n\n37\n00:01:50,000 --> 00:01:53,000\nThe measurements are differences in x and y--\n\n38\n00:01:53,000 --> 00:01:57,000\nso you have to duplicate things for x and things for y. \n\n39\n00:01:57,000 --> 00:01:59,000\nI, myself, put them all into one big matrix, \n\n40\n00:01:59,000 --> 00:02:02,000\nbut you could have them in 2 separate matrices, if you so wish. \n\n41\n00:02:02,000 --> 00:02:05,000\nYou have to apply everything we learned so far,\n\n42\n00:02:05,000 --> 00:02:07,000\nincluding the weights of one with our measurerment_noise\n\n43\n00:02:07,000 --> 00:02:09,000\nand one with our motion_noise.\n\n44\n00:02:09,000 --> 00:02:12,000\nThese happen to be equivalent, in this case--but they might be different. \n\n45\n00:02:12,000 --> 00:02:15,000\nAnd then you have to run SLAM \n\n46\n00:02:15,000 --> 00:02:18,000\nand return back to me a result data structure.\n\n47\n00:02:18,000 --> 00:02:21,000\nI'm also supplying you with the print_result routine \n\n48\n00:02:21,000 --> 00:02:24,000\nso you can go in and see how the result has to look like. \n\n49\n00:02:24,000 --> 00:02:27,000\nThere's an example routine--that doesn't work-- \n\n50\n00:02:27,000 --> 00:02:29,000\nthat outputs all the correct formats,\n\n51\n00:02:29,000 --> 00:02:33,000\nbut it tries not to implement the estimate that I want you to estimate. \n\n52\n00:02:33,000 --> 00:02:35,000\nYou have to bring this to life \n\n53\n00:02:35,000 --> 00:02:38,000\nand turn this into an amazing SLAM routine\n\n54\n00:02:38,000 --> 00:02:41,000\nso that when you run it, you get the same results that I do\n\n55\n00:02:41,000 --> 00:02:43,000\nfor the examples here,\n\n56\n00:02:43,000 --> 00:02:45,000\nwhere there's an estimated PATH\n\n57\n00:02:45,000 --> 00:02:47,000\nand estimated landmark positions. \n\n58\n00:02:47,000 --> 00:02:49,000\nThere's one last thing I wanted to know--\n\n59\n00:02:49,000 --> 00:02:52,000\nis I assume the initial robot position \n\n60\n00:02:52,000 --> 00:02:54,000\nis going to be in the center of the world.\n\n61\n00:02:54,000 --> 00:02:57,000\nSo it's the real-world set of 100\n\n62\n00:02:57,000 --> 00:03:00,000\nand it's going to be 50/50--or here it's printed as 49.999,\n\n63\n00:03:00,000 --> 00:03:02,000\nbut this is the same as 50.\n\n64\n00:03:02,000 --> 00:03:04,000\nSo you have to put in a constraint \n\n65\n00:03:04,000 --> 00:03:06,000\nthat sets the initial robot pose \n\n66\n00:03:06,000 --> 00:03:09,000\nto the center of the world. \n\n", "id": 384006}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYvc8XDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/387005", "type": "Nugget", "id": 387005}, {"nuggetType": "lecture", "name": "Putting It All Together Needs Headshot", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "596fd048-9565-49ea-b5d4-bc0e1bf41bf6", "name": "cs373_unit6_00_l_Putting-It-All-Together-NEEDS-HEADSHOT", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLnPFww", "youtube_id": "wEACoh3zLm4", "youtube_state": "processing", "path": "Course/cs373/Media/387001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\n[Unit 6 - CS373: Programming a Robotic Car, Putting It All Together]\n\n2\n00:00:02,000 --> 00:00:06,000\n[Sebastian:] Welcome to Unit 6 is CS373 Programming a Robotic Car.\n\n3\n00:00:06,000 --> 00:00:11,000\nThis is the final unit focused on putting it all together.\n\n4\n00:00:11,000 --> 00:00:13,000\nIn this class you learned quite a bit.\n\n5\n00:00:13,000 --> 00:00:19,000\nI didn't tell you all the secrets of the Google car, but I covered all the basic elements.\n\n6\n00:00:19,000 --> 00:00:23,000\nYou implemented all of them in a simplified was, admittedly,\n\n7\n00:00:23,000 --> 00:00:27,000\nbut what I focused on wasn't the nitty-gritty detail of the last little hack.\n\n8\n00:00:27,000 --> 00:00:31,000\nWhat I focused on were the basic artificial intelligence principles.\n\n9\n00:00:31,000 --> 00:00:35,000\nSo guess what? You just learned a lot about artificial intelligence.\n\n10\n00:00:35,000 --> 00:00:38,000\nYou learned as much as my students at Stanford learn when they take \n\n11\n00:00:38,000 --> 00:00:43,000\nan advanced AI class from me, and you implemented it yourself.\n\n12\n00:00:43,000 --> 00:00:49,000\nYou can go out and implement methods like the ones I told you about by yourself.\n\n13\n00:00:49,000 --> 00:00:51,000\nLet's review some of the things you learned.\n\n14\n00:00:51,000 --> 00:00:55,000\nYou learned about localization, tracking, planning, and control.\n\n15\n00:00:55,000 --> 00:00:58,000\nYou also learned about probabilities--so-called filters.\n\n16\n00:00:58,000 --> 00:01:05,000\nYou learned about A-star, dynamic programming, DP, and about PID control.\n\n17\n00:01:05,000 --> 00:01:08,000\nThis is a lot of stuff, and you implemented quite a bit.\n\n18\n00:01:08,000 --> 00:01:13,000\nToday, we take all those pieces and we put them together \n\n19\n00:01:13,000 --> 00:01:17,000\nto build a true robotic self-driving car.\n\n20\n00:01:17,000 --> 00:01:20,000\nLet's start with localize.\n\n", "id": 387001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYodcXDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/388001", "type": "Nugget", "id": 388001}, {"nuggetType": "lecture", "name": "Your Robot Car", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "2f8fc427-b1cc-41d9-bd22-875244056da9", "name": "cs373_unit6_04_l_Your-Robot-Car", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGKLXFww", "youtube_id": "aEUfsmH7j2k", "youtube_state": "processing", "path": "Course/cs373/Media/388002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:06,000\nNow let's put them all together into a single piece of software.\n\n2\n00:00:06,000 --> 00:00:09,000\nUpfront it took me about a whole day to do this.\n\n3\n00:00:09,000 --> 00:00:12,000\nI'm not going to ask you to do it all yourself, \n\n4\n00:00:12,000 --> 00:00:16,000\nbecause it's going to cost you probably at least an hour if it takes me a day.\n\n5\n00:00:16,000 --> 00:00:22,000\nBut I still want to be able to take all the lessons that we did together into a single system.\n\n6\n00:00:22,000 --> 00:00:25,000\nI'm going to help you a little bit--bits and pieces--\n\n7\n00:00:25,000 --> 00:00:29,000\nbut up front here is the environment that I wrote for you, \n\n8\n00:00:29,000 --> 00:00:33,000\nwhich is very much derived from the environment we studied in the past.\n\n9\n00:00:33,000 --> 00:00:37,000\nWe have a class robot that has certain kinds of noise characteristics you can find over here.\n\n10\n00:00:37,000 --> 00:00:47,000\nAs I scroll down, you can see the familiar init function, the position-setting function,\n\n11\n00:00:47,000 --> 00:00:54,000\nthe set_noise function, and then we have two checking functions--\n\n12\n00:00:54,000 --> 00:00:59,000\nwhether we have a collision with the world called \"grid,\" which I will show you in a minute.\n\n13\n00:00:59,000 --> 00:01:02,000\nand we have a check_goal function to see if we reached a goal \n\n14\n00:01:02,000 --> 00:01:05,000\naccording to a certain distance threshold.\n\n15\n00:01:05,000 --> 00:01:08,000\nThe move function should be very familiar at this point.\n\n16\n00:01:11,000 --> 00:01:15,000\nIt applies noise to the motion command.\n\n17\n00:01:15,000 --> 00:01:20,000\nIt the same code that you originally wrote.\n\n18\n00:01:20,000 --> 00:01:24,000\nThen we have a very simple sense function, which measures the robot's (x, y) location,\n\n19\n00:01:24,000 --> 00:01:29,000\nsimilar to a GPS on a car but with substantial measurement noise.\n\n20\n00:01:32,000 --> 00:01:36,000\nCorresponding to this sense function we have a measurement probability function\n\n21\n00:01:36,000 --> 00:01:40,000\nthat you might want to use in your filter, and it evaluates the probability\n\n22\n00:01:40,000 --> 00:01:47,000\nof a measurement relative to the ground truth coordinates of the robot using Gaussians.\n\n23\n00:01:47,000 --> 00:01:50,000\nArmed with all this here is the problem.\n\n24\n00:01:50,000 --> 00:01:55,000\nI'm going to give you a grid. Here is an example grid. Let me draw this for you.\n\n25\n00:01:55,000 --> 00:01:59,000\nThis specific one happens to be of dimensions 6 and 5,\n\n26\n00:01:59,000 --> 00:02:03,000\nand there are a number of blocked off cells like this.\n\n27\n00:02:03,000 --> 00:02:09,000\nIf we look carefully into the code, you'll find information about the initial starting location \n\n28\n00:02:09,000 --> 00:02:14,000\non the left upper corner and the goal location, which is the bottom right corner.\n\n29\n00:02:14,000 --> 00:02:18,000\nIn putting everything together, you're going to build a robotic car using our bicycle model\n\n30\n00:02:18,000 --> 00:02:22,000\nthat'll drive through the free space through the continuous free space\n\n31\n00:02:22,000 --> 00:02:28,000\non something close to the shortest path all the way into the goal.\n\n32\n00:02:28,000 --> 00:02:31,000\nHere is my solution that I implemented \n\n33\n00:02:31,000 --> 00:02:35,000\nand that you will get to see for the most part towards the end of this class.\n\n34\n00:02:35,000 --> 00:02:38,000\nI am starting up over here. These are my obstacles. \n\n35\n00:02:38,000 --> 00:02:43,000\nThey implement as circles through the center of these grid cells.\n\n36\n00:02:43,000 --> 00:02:47,000\nIt's not exactly correct but good enough for my implementation.\n\n37\n00:02:47,000 --> 00:02:51,000\nHere are multiple runs using the same code, and you can see they're far from optimal.\n\n38\n00:02:51,000 --> 00:02:53,000\nThey are non-optimal because there is control noise, \n\n39\n00:02:53,000 --> 00:02:55,000\nand there is also measurement noise.\n\n40\n00:02:55,000 --> 00:03:02,000\nBut they all make it safely through free space into the corner where the goal objective is.\n\n41\n00:03:02,000 --> 00:03:07,000\nIf we look at them in detail, like this solution over here.\n\n42\n00:03:07,000 --> 00:03:11,000\nYou'll find that the spacing of the circles is somewhat variable.\n\n43\n00:03:11,000 --> 00:03:15,000\nYou'll find that there's little corners over here that are either the result of control noise \n\n44\n00:03:15,000 --> 00:03:20,000\nor of measurement noise or of my somewhat deficient implementation.\n\n45\n00:03:20,000 --> 00:03:24,000\nYou'll also find the control set points that are the smooth points of my A-star planner\n\n46\n00:03:24,000 --> 00:03:26,000\nas shown here in green.\n\n47\n00:03:26,000 --> 00:03:31,000\nIn the version that I implemented for you, the controller does something very, very different.\n\n48\n00:03:31,000 --> 00:03:35,000\nIt actually chooses as the control objective to head straight to the goal, \n\n49\n00:03:35,000 --> 00:03:40,000\nusing the atan2 function, executes the action at a speed of 0.1,\n\n50\n00:03:40,000 --> 00:03:44,000\nand then reports a collision whenever the robot is moving.\n\n51\n00:03:44,000 --> 00:03:48,000\nJust looking down to the output where we see the robot's coordinates \n\n52\n00:03:48,000 --> 00:03:52,000\nalong with the orientation there are very frequent collisions\n\n53\n00:03:52,000 --> 00:03:56,000\n that the robot undergoes in its attempt to reach the goal,\n\n54\n00:03:56,000 --> 00:04:01,000\nwhich it eventually does, but you can see 2 big regions of collisions\n\n55\n00:04:01,000 --> 00:04:04,000\nuntil the goal is finally reached.\n\n", "id": 388002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYo9cXDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/388003", "type": "Nugget", "id": 388003}, {"nuggetType": "lecture", "name": "Is Localization Necessary", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "517bfd4f-9389-4af5-8cf9-3a142128a57b", "name": "cs373_unit6_09_q_Is-Localization-Necessary", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLrMGAw", "youtube_id": "I5DDZw9ejOU", "youtube_state": "done", "path": "Course/cs373/Media/403002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nHere is a quick quiz.\n\n2\n00:00:02,000 --> 00:00:06,000\nWhen mapping an environment with a mobile robot, uncertainty in robot motion \n\n3\n00:00:06,000 --> 00:00:09,000\nforces us to also perform localization.\n\n4\n00:00:09,000 --> 00:00:14,000\nI'm going to give you two possible answers--yes and no.\n\n", "id": 403002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYpNcXDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/388004", "type": "Nugget", "id": 388004}, {"nuggetType": "lecture", "name": "Implementing Slam Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "5eec4457-660a-43b2-a8bd-e66668b179ef", "name": "cs373_unit6_21_s_Implementing-SLAM", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGL7PFww", "youtube_id": "ByOt_lrBFss", "youtube_state": "done", "path": "Course/cs373/Media/387006", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nSo here is my solution: I've takan all the input parameters,\n\n2\n00:00:03,000 --> 00:00:06,000\nand the very first thing is I've set the dimension of the matrix and the vector:\n\n3\n00:00:06,000 --> 00:00:10,000\nthe length of the Path, plus the number of Landmarks--\n\n4\n00:00:10,000 --> 00:00:13,000\ntimes 2--because I'm modeling x and y \n\n5\n00:00:13,000 --> 00:00:15,000\nfor each of those, in the same data structures. \n\n6\n00:00:15,000 --> 00:00:19,000\nI then create a matrix for Omega and a vector for Xi,\n\n7\n00:00:19,000 --> 00:00:21,000\ngive it the appropriate dimensions,\n\n8\n00:00:21,000 --> 00:00:25,000\nand subsequently I introduce the constraint \n\n9\n00:00:25,000 --> 00:00:28,000\nthat the initial positions have to be world-size/2.0,\n\n10\n00:00:28,000 --> 00:00:30,000\nwith a strength value of 1.0,\n\n11\n00:00:30,000 --> 00:00:33,000\nThat tells it this has no bearing on the final solutions\n\n12\n00:00:33,000 --> 00:00:35,000\nbecause it's the only absolute constraint.\n\n13\n00:00:35,000 --> 00:00:37,000\nBut you can see--I add 1.0 over here in the main diagonal: \n\n14\n00:00:37,000 --> 00:00:39,000\n1 for x and 1 for y--\n\n15\n00:00:39,000 --> 00:00:42,000\nand then now add the same thing over here. \n\n16\n00:00:42,000 --> 00:00:46,000\nIt's important to understand how I set up the data structure.\n\n17\n00:00:46,000 --> 00:00:49,000\nThere's our positions--and let me just, for a second, call them \"S\".\n\n18\n00:00:49,000 --> 00:00:51,000\nAnd there's our landmarks. \n\n19\n00:00:51,000 --> 00:00:54,000\nEach of those have an x-component and a y-component. \n\n20\n00:00:54,000 --> 00:00:57,000\nSo in doing this, I'm taking this matrix and I'm setting it up, \n\n21\n00:00:57,000 --> 00:01:01,000\nnot by a matrix of Path length plus the number of landmarks, \n\n22\n00:01:01,000 --> 00:01:04,000\nbut each of those becomes a 2 by 2 matrix, \n\n23\n00:01:04,000 --> 00:01:08,000\nwhere I explicitly retain the x and the y value. \n\n24\n00:01:08,000 --> 00:01:12,000\nSo the dimension here is 2 times N--the Path length--\n\n25\n00:01:12,000 --> 00:01:14,000\nplus the number of landmarks. \n\n26\n00:01:14,000 --> 00:01:18,000\nAnd the 2 is the result of modeling x and y:  xy, xy, xy.\n\n27\n00:01:18,000 --> 00:01:20,000\nThat's really important for my solution. \n\n28\n00:01:20,000 --> 00:01:22,000\nYou might have done this differently--you might have said: \n\n29\n00:01:22,000 --> 00:01:26,000\nI'm going to build 1 matrix for x and 1 matrix for y. \n\n30\n00:01:26,000 --> 00:01:28,000\nand then each of those becomes just a single value,\n\n31\n00:01:28,000 --> 00:01:31,000\nwhich is closer to the way we discussed it in class. \n\n32\n00:01:31,000 --> 00:01:33,000\nAnd that's fine, in this case. \n\n33\n00:01:33,000 --> 00:01:35,000\nIn general, it has disadvantages\n\n34\n00:01:35,000 --> 00:01:38,000\nin that it cannot correlate X and Ys.\n\n35\n00:01:38,000 --> 00:01:41,000\nSo for a real robot that has real rotations, this doesn't work. \n\n36\n00:01:41,000 --> 00:01:44,000\nMy solution is better, but for this specific example\n\n37\n00:01:44,000 --> 00:01:46,000\nthis would have been perfectly fine. \n\n38\n00:01:46,000 --> 00:01:49,000\nComing back to my example, I now process the data.\n\n39\n00:01:49,000 --> 00:01:51,000\nI go through all the data items \n\n40\n00:01:51,000 --> 00:01:54,000\nand my Path index is now the data item, times 2--\n\n41\n00:01:54,000 --> 00:01:57,000\nwhich is the xy thing. \n\n42\n00:01:57,000 --> 00:01:59,000\nI extract my measurements from the data--\n\n43\n00:01:59,000 --> 00:02:01,000\nmy motion from the data--\n\n44\n00:02:01,000 --> 00:02:03,000\nusing this command over here;\n\n45\n00:02:03,000 --> 00:02:06,000\nand then I go through all the measurements, \n\n46\n00:02:06,000 --> 00:02:08,000\nof which they are my multiple ones.\n\n47\n00:02:08,000 --> 00:02:10,000\nI find the index in my matrix of the measurement, \n\n48\n00:02:10,000 --> 00:02:14,000\nwhich is the Path plus the measurement index,\n\n49\n00:02:14,000 --> 00:02:16,000\ntimes 2--because there are X and Ys again. \n\n50\n00:02:16,000 --> 00:02:19,000\nAnd then the next routine just implements \n\n51\n00:02:19,000 --> 00:02:22,000\nthe simple addition with the measurement_noise \n\n52\n00:02:22,000 --> 00:02:25,000\nas the inverse weighting factor.\n\n53\n00:02:25,000 --> 00:02:27,000\nSo it adds: 1, 1, -1, -1 \n\n54\n00:02:27,000 --> 00:02:30,000\nto the corresponding elements in the submatrix,\n\n55\n00:02:30,000 --> 00:02:32,000\nand in the vector, it adds the measurement--\n\n56\n00:02:32,000 --> 00:02:36,000\nall divided by the strength of the noise variable. \n\n57\n00:02:36,000 --> 00:02:38,000\nIf you look at this carefully,\n\n58\n00:02:38,000 --> 00:02:40,000\nyou'll take a minute to digest it \n\n59\n00:02:40,000 --> 00:02:42,000\nand what was the use in the auxilliary variable, b, \n\n60\n00:02:42,000 --> 00:02:46,000\nto account for the effect of this x and y. \n\n61\n00:02:46,000 --> 00:02:48,000\nSo b goes from zero to 1. \n\n62\n00:02:48,000 --> 00:02:50,000\nAnd these are all the combinations.\n\n63\n00:02:50,000 --> 00:02:53,000\nYou have to stare at them to make sure they are all correct,\n\n64\n00:02:53,000 --> 00:02:56,000\nbut I can promise you--they're actually all correct. \n\n65\n00:02:56,000 --> 00:02:58,000\nMotion is handled very much the same way:\n\n66\n00:02:58,000 --> 00:03:01,000\nI extract the Motion command,\n\n67\n00:03:01,000 --> 00:03:03,000\nI add among, the main diagonal--\n\n68\n00:03:03,000 --> 00:03:06,000\nbetween the 2 variables that are being tied together--a \"+1\",\n\n69\n00:03:06,000 --> 00:03:09,000\nand then I add, in the off-diagonal elements,\"-1\".\n\n70\n00:03:09,000 --> 00:03:11,000\nSo again, you have to stare at this \n\n71\n00:03:11,000 --> 00:03:13,000\nvery carefully to see they're all correct. \n\n72\n00:03:13,000 --> 00:03:17,000\nAnd then I add the Motion itself to the vector, Xi.\n\n73\n00:03:17,000 --> 00:03:19,000\nThat's what I had to implement.\n\n74\n00:03:19,000 --> 00:03:22,000\nI then solve, as before, and return the solution.\n\n75\n00:03:22,000 --> 00:03:26,000\nAnd that's exactly what's being printed out down here. \n\n76\n00:03:26,000 --> 00:03:29,000\nI have to say, we got this correct--I'm mightily impressed.  \n\n77\n00:03:29,000 --> 00:03:31,000\nYou understood a lot about Mapping\n\n78\n00:03:31,000 --> 00:03:34,000\nand you solved a really hard programming problem. \n\n79\n00:03:34,000 --> 00:03:36,000\nI'm responding to some of you online \n\n80\n00:03:36,000 --> 00:03:38,000\nwho asked for challenging programming problems.\n\n81\n00:03:38,000 --> 00:03:40,000\nThis is a challenging piece of code to write. \n\n82\n00:03:40,000 --> 00:03:43,000\nIt took myself a number of hours to write,\n\n83\n00:03:43,000 --> 00:03:47,000\nand that would be wonderful if you got it right. \n\n", "id": 387006}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYpdcXDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/388005", "type": "Nugget", "id": 388005}, {"nuggetType": "program", "name": "Landmark Position", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYi98XDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/389003", "suppliedCode": "# This quiz was mistakenly identified as a programming\n# assigment. We are aware of the mistake and will fix it\n# shortly. \n#\n# Please press the next button to see the solution.", "type": "Nugget", "id": 389003}, {"nuggetType": "program", "name": "Fun With Parameters", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY8uYXDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/390002", "suppliedCode": "# -----------\n# User Instructions\n#\n# The point of this exercise is to find the optimal\n# parameters! You can write a twiddle function or you\n# can use any other method\n# that you like. Since we don't know what the optimal\n# parameters are, we will be very loose with the \n# grading. If you find parameters that work well, post \n# them in the forums!\n#\n# Note: when we first released this problem, we \n# included a twiddle function. But that's no fun!\n# Try coding up your own parameter optimization\n# and see how quickly you can get to the goal.\n#\n# You can find the parameters at line 581.\n \nfrom math import *\nimport random\n\n\n# don't change the noise paameters\n\nsteering_noise    = 0.1\ndistance_noise    = 0.03\nmeasurement_noise = 0.3\n\n\nclass plan:\n\n    # --------\n    # init: \n    #    creates an empty plan\n    #\n\n    def __init__(self, grid, init, goal, cost = 1):\n        self.cost = cost\n        self.grid = grid\n        self.init = init\n        self.goal = goal\n        self.make_heuristic(grid, goal, self.cost)\n        self.path = []\n        self.spath = []\n\n    # --------\n    #\n    # make heuristic function for a grid\n        \n    def make_heuristic(self, grid, goal, cost):\n        self.heuristic = [[0 for row in range(len(grid[0]))] \n                          for col in range(len(grid))]\n        for i in range(len(self.grid)):    \n            for j in range(len(self.grid[0])):\n                self.heuristic[i][j] = abs(i - self.goal[0]) + \\\n                    abs(j - self.goal[1])\n\n\n\n    # ------------------------------------------------\n    # \n    # A* for searching a path to the goal\n    #\n    #\n\n    def astar(self):\n\n\n        if self.heuristic == []:\n            raise ValueError, \"Heuristic must be defined to run A*\"\n\n        # internal motion parameters\n        delta = [[-1,  0], # go up\n                 [ 0,  -1], # go left\n                 [ 1,  0], # go down\n                 [ 0,  1]] # do right\n\n\n        # open list elements are of the type: [f, g, h, x, y]\n\n        closed = [[0 for row in range(len(self.grid[0]))] \n                  for col in range(len(self.grid))]\n        action = [[0 for row in range(len(self.grid[0]))] \n                  for col in range(len(self.grid))]\n\n        closed[self.init[0]][self.init[1]] = 1\n\n\n        x = self.init[0]\n        y = self.init[1]\n        h = self.heuristic[x][y]\n        g = 0\n        f = g + h\n\n        open = [[f, g, h, x, y]]\n\n        found  = False # flag that is set when search complete\n        resign = False # flag set if we can't find expand\n        count  = 0\n\n\n        while not found and not resign:\n\n            # check if we still have elements on the open list\n            if len(open) == 0:\n                resign = True\n                print '###### Search terminated without success'\n                \n            else:\n                # remove node from list\n                open.sort()\n                open.reverse()\n                next = open.pop()\n                x = next[3]\n                y = next[4]\n                g = next[1]\n\n            # check if we are done\n\n            if x == goal[0] and y == goal[1]:\n                found = True\n                # print '###### A* search successful'\n\n            else:\n                # expand winning element and add to new open list\n                for i in range(len(delta)):\n                    x2 = x + delta[i][0]\n                    y2 = y + delta[i][1]\n                    if x2 >= 0 and x2 < len(self.grid) and y2 >= 0 \\\n                            and y2 < len(self.grid[0]):\n                        if closed[x2][y2] == 0 and self.grid[x2][y2] == 0:\n                            g2 = g + self.cost\n                            h2 = self.heuristic[x2][y2]\n                            f2 = g2 + h2\n                            open.append([f2, g2, h2, x2, y2])\n                            closed[x2][y2] = 1\n                            action[x2][y2] = i\n\n            count += 1\n\n        # extract the path\n\n\n\n        invpath = []\n        x = self.goal[0]\n        y = self.goal[1]\n        invpath.append([x, y])\n        while x != self.init[0] or y != self.init[1]:\n            x2 = x - delta[action[x][y]][0]\n            y2 = y - delta[action[x][y]][1]\n            x = x2\n            y = y2\n            invpath.append([x, y])\n\n        self.path = []\n        for i in range(len(invpath)):\n            self.path.append(invpath[len(invpath) - 1 - i])\n\n\n\n\n    # ------------------------------------------------\n    # \n    # this is the smoothing function\n    #\n\n  \n\n\n    def smooth(self, weight_data = 0.1, weight_smooth = 0.1, \n               tolerance = 0.000001):\n\n        if self.path == []:\n            raise ValueError, \"Run A* first before smoothing path\"\n\n        self.spath = [[0 for row in range(len(self.path[0]))] \\\n                           for col in range(len(self.path))]\n        for i in range(len(self.path)):\n            for j in range(len(self.path[0])):\n                self.spath[i][j] = self.path[i][j]\n\n        change = tolerance\n        while change >= tolerance:\n            change = 0.0\n            for i in range(1, len(self.path)-1):\n                for j in range(len(self.path[0])):\n                    aux = self.spath[i][j]\n                    \n                    self.spath[i][j] += weight_data * \\\n                        (self.path[i][j] - self.spath[i][j])\n                    \n                    self.spath[i][j] += weight_smooth * \\\n                        (self.spath[i-1][j] + self.spath[i+1][j] \n                         - (2.0 * self.spath[i][j]))\n                    if i >= 2:\n                        self.spath[i][j] += 0.5 * weight_smooth * \\\n                            (2.0 * self.spath[i-1][j] - self.spath[i-2][j] \n                             - self.spath[i][j])\n                    if i <= len(self.path) - 3:\n                        self.spath[i][j] += 0.5 * weight_smooth * \\\n                            (2.0 * self.spath[i+1][j] - self.spath[i+2][j] \n                             - self.spath[i][j])\n                \n            change += abs(aux - self.spath[i][j])\n                \n\n\n\n\n\n\n# ------------------------------------------------\n# \n# this is the robot class\n#\n\nclass robot:\n\n    # --------\n    # init: \n    #\tcreates robot and initializes location/orientation to 0, 0, 0\n    #\n\n    def __init__(self, length = 0.5):\n        self.x = 0.0\n        self.y = 0.0\n        self.orientation = 0.0\n        self.length = length\n        self.steering_noise    = 0.0\n        self.distance_noise    = 0.0\n        self.measurement_noise = 0.0\n        self.num_collisions    = 0\n        self.num_steps         = 0\n\n    # --------\n    # set: \n    #\tsets a robot coordinate\n    #\n\n    def set(self, new_x, new_y, new_orientation):\n\n        self.x = float(new_x)\n        self.y = float(new_y)\n        self.orientation = float(new_orientation) % (2.0 * pi)\n\n\n    # --------\n    # set_noise: \n    #\tsets the noise parameters\n    #\n\n    def set_noise(self, new_s_noise, new_d_noise, new_m_noise):\n        # makes it possible to change the noise parameters\n        # this is often useful in particle filters\n        self.steering_noise     = float(new_s_noise)\n        self.distance_noise    = float(new_d_noise)\n        self.measurement_noise = float(new_m_noise)\n\n    # --------\n    # check: \n    #    checks of the robot pose collides with an obstacle, or\n    # is too far outside the plane\n\n    def check_collision(self, grid):\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == 1:\n                    dist = sqrt((self.x - float(i)) ** 2 + \n                                (self.y - float(j)) ** 2)\n                    if dist < 0.5:\n                        self.num_collisions += 1\n                        return False\n        return True\n        \n    def check_goal(self, goal, threshold = 1.0):\n        dist =  sqrt((float(goal[0]) - self.x) ** 2 + (float(goal[1]) - self.y) ** 2)\n        return dist < threshold\n        \n    # --------\n    # move: \n    #    steering = front wheel steering angle, limited by max_steering_angle\n    #    distance = total distance driven, most be non-negative\n\n    def move(self, grid, steering, distance, \n             tolerance = 0.001, max_steering_angle = pi / 4.0):\n\n        if steering > max_steering_angle:\n            steering = max_steering_angle\n        if steering < -max_steering_angle:\n            steering = -max_steering_angle\n        if distance < 0.0:\n            distance = 0.0\n\n\n        # make a new copy\n        res = robot()\n        res.length            = self.length\n        res.steering_noise    = self.steering_noise\n        res.distance_noise    = self.distance_noise\n        res.measurement_noise = self.measurement_noise\n        res.num_collisions    = self.num_collisions\n        res.num_steps         = self.num_steps + 1\n\n        # apply noise\n        steering2 = random.gauss(steering, self.steering_noise)\n        distance2 = random.gauss(distance, self.distance_noise)\n\n\n        # Execute motion\n        turn = tan(steering2) * distance2 / res.length\n\n        if abs(turn) < tolerance:\n\n            # approximate by straight line motion\n\n            res.x = self.x + (distance2 * cos(self.orientation))\n            res.y = self.y + (distance2 * sin(self.orientation))\n            res.orientation = (self.orientation + turn) % (2.0 * pi)\n\n        else:\n\n            # approximate bicycle model for motion\n\n            radius = distance2 / turn\n            cx = self.x - (sin(self.orientation) * radius)\n            cy = self.y + (cos(self.orientation) * radius)\n            res.orientation = (self.orientation + turn) % (2.0 * pi)\n            res.x = cx + (sin(res.orientation) * radius)\n            res.y = cy - (cos(res.orientation) * radius)\n\n        # check for collision\n        # res.check_collision(grid)\n\n        return res\n\n    # --------\n    # sense: \n    #    \n\n    def sense(self):\n\n        return [random.gauss(self.x, self.measurement_noise),\n                random.gauss(self.y, self.measurement_noise)]\n\n    # --------\n    # measurement_prob\n    #    computes the probability of a measurement\n    # \n\n    def measurement_prob(self, measurement):\n\n        # compute errors\n        error_x = measurement[0] - self.x\n        error_y = measurement[1] - self.y\n\n        # calculate Gaussian\n        error = exp(- (error_x ** 2) / (self.measurement_noise ** 2) / 2.0) \\\n            / sqrt(2.0 * pi * (self.measurement_noise ** 2))\n        error *= exp(- (error_y ** 2) / (self.measurement_noise ** 2) / 2.0) \\\n            / sqrt(2.0 * pi * (self.measurement_noise ** 2))\n\n        return error\n\n\n\n    def __repr__(self):\n        # return '[x=%.5f y=%.5f orient=%.5f]'  % (self.x, self.y, self.orientation)\n        return '[%.5f, %.5f]'  % (self.x, self.y)\n\n\n\n\n\n\n# ------------------------------------------------\n# \n# this is the particle filter class\n#\n\nclass particles:\n\n    # --------\n    # init: \n    #\tcreates particle set with given initial position\n    #\n\n    def __init__(self, x, y, theta, \n                 steering_noise, distance_noise, measurement_noise, N = 100):\n        self.N = N\n        self.steering_noise    = steering_noise\n        self.distance_noise    = distance_noise\n        self.measurement_noise = measurement_noise\n        \n        self.data = []\n        for i in range(self.N):\n            r = robot()\n            r.set(x, y, theta)\n            r.set_noise(steering_noise, distance_noise, measurement_noise)\n            self.data.append(r)\n\n\n    # --------\n    #\n    # extract position from a particle set\n    # \n    \n    def get_position(self):\n        x = 0.0\n        y = 0.0\n        orientation = 0.0\n\n        for i in range(self.N):\n            x += self.data[i].x\n            y += self.data[i].y\n            # orientation is tricky because it is cyclic. By normalizing\n            # around the first particle we are somewhat more robust to\n            # the 0=2pi problem\n            orientation += (((self.data[i].orientation\n                              - self.data[0].orientation + pi) % (2.0 * pi)) \n                            + self.data[0].orientation - pi)\n        return [x / self.N, y / self.N, orientation / self.N]\n\n    # --------\n    #\n    # motion of the particles\n    # \n\n    def move(self, grid, steer, speed):\n        newdata = []\n\n        for i in range(self.N):\n            r = self.data[i].move(grid, steer, speed)\n            newdata.append(r)\n        self.data = newdata\n\n    # --------\n    #\n    # sensing and resampling\n    # \n\n    def sense(self, Z):\n        w = []\n        for i in range(self.N):\n            w.append(self.data[i].measurement_prob(Z))\n\n        # resampling (careful, this is using shallow copy)\n        p3 = []\n        index = int(random.random() * self.N)\n        beta = 0.0\n        mw = max(w)\n\n        for i in range(self.N):\n            beta += random.random() * 2.0 * mw\n            while beta > w[index]:\n                beta -= w[index]\n                index = (index + 1) % self.N\n            p3.append(self.data[index])\n        self.data = p3\n\n    \n\n\n\n    \n\n# --------\n#\n# run:  runs control program for the robot\n#\n\n\ndef run(grid, goal, spath, params, printflag = False, speed = 0.1, timeout = 1000):\n\n    myrobot = robot()\n    myrobot.set(0., 0., 0.)\n    myrobot.set_noise(steering_noise, distance_noise, measurement_noise)\n    filter = particles(myrobot.x, myrobot.y, myrobot.orientation,\n                       steering_noise, distance_noise, measurement_noise)\n\n    cte  = 0.0\n    err  = 0.0\n    N    = 0\n\n    index = 0 # index into the path\n    \n    while not myrobot.check_goal(goal) and N < timeout:\n\n        diff_cte = - cte\n\n\n        # ----------------------------------------\n        # compute the CTE\n\n        # start with the present robot estimate\n        estimate = filter.get_position()\n\n        # some basic vector calculations\n        dx = spath[index+1][0] - spath[index][0]\n        dy = spath[index+1][1] - spath[index][1]\n        drx = estimate[0] - spath[index][0]\n        dry = estimate[1] - spath[index][1]\n        \n        # u is the robot estimate projectes onto the path segment\n        u = (drx * dx + dry * dy) / (dx * dx + dy * dy)\n        \n        # the cte is the estimate projected onto the normal of the path segment\n        cte = (dry * dx - drx * dy) / (dx * dx + dy * dy)\n        \n        # pick the next path segment\n        if u > 1.0 and index < len(spath) - 1:\n            index += 1\n        \n\n        # ----------------------------------------\n\n\n        diff_cte += cte\n\n        steer = - params[0] * cte - params[1] * diff_cte \n\n        myrobot = myrobot.move(grid, steer, speed)\n        filter.move(grid, steer, speed)\n\n        Z = myrobot.sense()\n        filter.sense(Z)\n\n        if not myrobot.check_collision(grid):\n            print '##### Collision ####'\n\n        err += (cte ** 2)\n        N += 1\n\n        if printflag:\n            print myrobot, cte, index, u\n\n    return [myrobot.check_goal(goal), myrobot.num_collisions, myrobot.num_steps]\n\n\n# ------------------------------------------------\n# \n# this is our main routine\n#\n\ndef main(grid, init, goal, steering_noise, distance_noise, measurement_noise, \n     weight_data, weight_smooth, p_gain, d_gain):\n\n    path = plan(grid, init, goal)\n    path.astar()\n    path.smooth(weight_data, weight_smooth)\n    return run(grid, goal, path.spath, [p_gain, d_gain])\n\n    \n\n\n# ------------------------------------------------\n# \n# input data and parameters\n#\n\n\n# grid format:\n#   0 = navigable space\n#   1 = occupied space\n\ngrid = [[0, 1, 0, 0, 0, 0],\n        [0, 1, 0, 1, 1, 0],\n        [0, 1, 0, 1, 0, 0],\n        [0, 0, 0, 1, 0, 1],\n        [0, 1, 0, 1, 0, 0]]\n\n\ninit = [0, 0]\ngoal = [len(grid)-1, len(grid[0])-1]\n\n\nsteering_noise    = 0.1\ndistance_noise    = 0.03\nmeasurement_noise = 0.3\n\n#### ADJUST THESE PARAMETERS ######\n\nweight_data       = 0.1\nweight_smooth     = 0.2\np_gain            = 2.0\nd_gain            = 6.0\n\n###################################\n    \nprint main(grid, init, goal, steering_noise, distance_noise, measurement_noise, \n           weight_data, weight_smooth, p_gain, d_gain)\n\n\n\n\n", "type": "Nugget", "id": 390002}, {"nuggetType": "lecture", "name": "Localization", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "69c63f31-8eeb-4426-b27e-818955ed51a9", "name": "cs373_unit6_01_q_Localization", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPHmFww", "youtube_id": "kdPwaWATYKg", "youtube_state": "failed", "path": "Course/cs373/Media/390001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:07,000\nWe learned about how maps are being used to localized a moving robot.\n\n2\n00:00:07,000 --> 00:00:11,000\nHere is a laser map being produced--in this case, Stanford's car,\n\n3\n00:00:11,000 --> 00:00:14,000\nand we used particles to localize this robot \n\n4\n00:00:14,000 --> 00:00:18,000\nby matching momentary measurements with the previously acquired map.\n\n5\n00:00:18,000 --> 00:00:23,000\nIn doing so we were able to localize Junior in the Darpa Urban Challenge\n\n6\n00:00:23,000 --> 00:00:25,000\nwith centimeter precision.\n\n7\n00:00:25,000 --> 00:00:28,000\nA similar method is being used by the Google Street View car,\n\n8\n00:00:28,000 --> 00:00:32,000\nand it is one of the secrets sources of the street-view car.\n\n9\n00:00:32,000 --> 00:00:36,000\nWe heavily rely on a previously built map and a type of localization method \n\n10\n00:00:36,000 --> 00:00:42,000\nthat you implemented to localize the robot and make it follow known lanes.\n\n11\n00:00:42,000 --> 00:00:44,000\nHere is a localization quiz.\n\n12\n00:00:44,000 --> 00:00:47,000\nWe learned about the 3 filters, Kalman filters, histogram filters in our first class, \n\n13\n00:00:47,000 --> 00:00:49,000\nand particle filters.\n\n14\n00:00:49,000 --> 00:00:53,000\nCheck the corresponding box if the attribute applies.\n\n15\n00:00:53,000 --> 00:00:57,000\nIf any of those is multimodal in their distributions, please check the box,\n\n16\n00:00:57,000 --> 00:01:02,000\nexponential in the computation complexity relative to the number of dimensions,\n\n17\n00:01:02,000 --> 00:01:05,000\nand useful in the context of robotics.\n\n18\n00:01:05,000 --> 00:01:10,000\nPlease check none, any, or all of those boxes.\n\n", "id": 390001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY2e4XDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/391001", "type": "Nugget", "id": 391001}, {"nuggetType": "lecture", "name": "Graph Slam", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "027efd16-37f8-4a7e-9e61-a41832f6f6ca", "name": "cs373_unit6_10_q_Graph-SLAM", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIO4Fww", "youtube_id": "nLEbJZFm5-E", "youtube_state": "done", "path": "Course/cs373/Media/384003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nLet me tell you about my favorite method of all, called \"Graph SLAM.\"\n\n2\n00:00:04,000 --> 00:00:09,000\nThis is one of many methods for SLAM, and it's the one that is by far the easiest to explain.\n\n3\n00:00:09,000 --> 00:00:11,000\nLet's assume we have a robot, \n\n4\n00:00:11,000 --> 00:00:17,000\nand let's call arbitrarily the initial location x equals zero and y equals zero.\n\n5\n00:00:17,000 --> 00:00:20,000\nFor this example, we just assume the road has a perfect compass,\n\n6\n00:00:20,000 --> 00:00:23,000\nand we don't care about heading direction just to keep things simple.\n\n7\n00:00:23,000 --> 00:00:29,000\nLet's assume the robot moves to the right in x-direction by 10, so it's now over here.\n\n8\n00:00:29,000 --> 00:00:34,000\nIn a perfect world, we would know that x1, the location after motion, \n\n9\n00:00:34,000 --> 00:00:40,000\nis the same as x0+10 and y1 is the same as y0.\n\n10\n00:00:40,000 --> 00:00:44,000\nBut we learned from our various robotic Kalman filter lessons and others\n\n11\n00:00:44,000 --> 00:00:47,000\nthat the location is actually uncertain.\n\n12\n00:00:47,000 --> 00:00:52,000\nRather than assuming in our (x, y) coordinate system the robot moved to the right by 10 exactly,\n\n13\n00:00:52,000 --> 00:00:58,000\nwe know that the actual location is a Gaussian centered around (10, 0),\n\n14\n00:00:58,000 --> 00:01:00,000\nbut it's possible the robot is somewhere else.\n\n15\n00:01:00,000 --> 00:01:03,000\nRemember we worked out the math for this Gaussian?\n\n16\n00:01:03,000 --> 00:01:06,000\n Here's how it looks just for the x variable.\n\n17\n00:01:06,000 --> 00:01:11,000\nRather than setting x1 to x0 plus 10, we try to express the Gaussian\n\n18\n00:01:11,000 --> 00:01:14,000\n that peaks when these two things are the same.\n\n19\n00:01:14,000 --> 00:01:18,000\nIf we subtract from x1 x0 and 10, \n\n20\n00:01:18,000 --> 00:01:22,000\nput this into a squared format and turn this into a Gaussian,\n\n21\n00:01:22,000 --> 00:01:27,000\nwe get a probability distribution that relates x1 and x0.\n\n22\n00:01:27,000 --> 00:01:29,000\nWe can do the same for y.\n\n23\n00:01:29,000 --> 00:01:32,000\nSince there is no change in y, according to our motion,\n\n24\n00:01:32,000 --> 00:01:37,000\nall we ask is that y1 and y0 are as close together as possible.\n\n25\n00:01:37,000 --> 00:01:41,000\nThe product of these two Gaussians is now our constraint.\n\n26\n00:01:41,000 --> 00:01:50,000\nWe wish to maximize the likelihood of the position x1 given the position x0 is (0, 0).\n\n27\n00:01:50,000 --> 00:01:59,000\nWhat Graph SLAM does is defining our probabilities using a sequence of such constraints.\n\n28\n00:01:59,000 --> 00:02:03,000\nSay we have a robot that moves in some space, \n\n29\n00:02:03,000 --> 00:02:07,000\nand each location is now characterized by a vector x0 \n\n30\n00:02:07,000 --> 00:02:13,000\nand a vector x1, vector x2, vector x3. Often they are 3-dimensional vectors.\n\n31\n00:02:13,000 --> 00:02:18,000\nWhat Graph SLAM collects is initial location, which is a (0, 0, 0) initially--\n\n32\n00:02:18,000 --> 00:02:20,000\nalthough here it looks a little bit different--\n\n33\n00:02:20,000 --> 00:02:23,000\nthen, really importantly, lots of relative constraints \n\n34\n00:02:23,000 --> 00:02:28,000\nthat relate each robot pose to the previous robot pose.\n\n35\n00:02:28,000 --> 00:02:30,000\nWe call them relative motion constraints.\n\n36\n00:02:30,000 --> 00:02:32,000\nYou can think of those as rubber bands.\n\n37\n00:02:32,000 --> 00:02:38,000\nIn expectation, this rubber band will be exactly the motion the robot sensed or commanded,\n\n38\n00:02:38,000 --> 00:02:43,000\nbut in reality, it might have to bend it a little bit to make the map more consistent.\n\n39\n00:02:43,000 --> 00:02:47,000\nSpeaking about maps, let's use landmarks as an example.\n\n40\n00:02:47,000 --> 00:02:50,000\nSuppose there is a landmark out here, and the landmark is being seen \n\n41\n00:02:50,000 --> 00:02:54,000\nfrom the robot with some relative measurement--z0, z1.\n\n42\n00:02:54,000 --> 00:02:58,000\nPerhaps I didn't see it it during time 2, but this is z3.\n\n43\n00:02:58,000 --> 00:03:01,000\nAll these are also relative constraints\n\n44\n00:03:01,000 --> 00:03:03,000\nvery much like the ones before.\n\n45\n00:03:03,000 --> 00:03:07,000\nAgain, they are captured by Gaussians, and we get relative measurement contraints.\n\n46\n00:03:07,000 --> 00:03:11,000\nOne such constraint is every time the robot sees a landmark.\n\n47\n00:03:11,000 --> 00:03:15,000\nGraph SLAM collects thosee constraints, and as we'll see,\n\n48\n00:03:15,000 --> 00:03:19,000\nthey're insanely easy to collect, and it just relaxes the set of rubber bands \n\n49\n00:03:19,000 --> 00:03:25,000\nto find the most likely configuration of robot path along with the location of landmarks.\n\n50\n00:03:25,000 --> 00:03:27,000\nThat is the mapping process.\n\n51\n00:03:27,000 --> 00:03:30,000\nLet me ask you a quick quiz that'll take thinking.\n\n52\n00:03:30,000 --> 00:03:35,000\nSuppose we have six robot poses--that is, one initial and five motions.\n\n53\n00:03:35,000 --> 00:03:39,000\nWe have eight measurements of landmarks that we've seen.\n\n54\n00:03:39,000 --> 00:03:42,000\nThese might be multiple landmarks. Sometimes the robot saw more than one.\n\n55\n00:03:42,000 --> 00:03:46,000\nThe question now is how many total constraints do we have if we count each\n\n56\n00:03:46,000 --> 00:03:50,000\nof these constraints as exactly one constraint.\n\n", "id": 384003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY2u4XDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/391002", "type": "Nugget", "id": 391002}, {"nuggetType": "lecture", "name": "Graph Slam Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "a9626df2-9bc0-48a8-9b35-586c4ca2e55c", "name": "cs373_unit6_10_s_Graph-SLAM", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPmKGQw", "youtube_id": "8m4wsC8qaS0", "youtube_state": "done", "path": "Course/cs373/Media/411001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nThe answer is 14.\n\n2\n00:00:02,000 --> 00:00:07,000\nThere is 1 initial location constraint, 5 motions, which adds up to 6,\n\n3\n00:00:07,000 --> 00:00:09,000\nand 8 landmarks constraints.\n\n4\n00:00:09,000 --> 00:00:12,000\nThat's the gist of what we're going to implement.\n\n5\n00:00:12,000 --> 00:00:17,000\nThe key insight now is that this is insanely simple to do.\n\n", "id": 411001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY2-4XDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/391003", "type": "Nugget", "id": 391003}, {"nuggetType": "lecture", "name": "Is Localization Necessary Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "e7d64ea9-d440-4a18-83c0-1a8b7f75f1c7", "name": "cs373_unit6_09_s_Is-Localization-Necessary", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGM2dGAw", "youtube_id": "AhVMW2_3Zqo", "youtube_state": "done", "path": "Course/cs373/Media/397005", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nThe answer is yes.\n\n2\n00:00:02,000 --> 00:00:06,000\nIn nearly all cases of mapping, we have robot uncertainty in motion. \n\n3\n00:00:06,000 --> 00:00:08,000\nThat uncertainty might grow over time.\n\n4\n00:00:08,000 --> 00:00:12,000\nWe need to address this; otherwise the map looks really bad.\n\n5\n00:00:12,000 --> 00:00:14,000\nLet me give an example .\n\n6\n00:00:14,000 --> 00:00:18,000\nSuppose a robot drives down a corridor, and it senses surrounding walls.\n\n7\n00:00:18,000 --> 00:00:23,000\nIf this robot has a drift problem and because of uncertainty it its motion,\n\n8\n00:00:23,000 --> 00:00:26,000\nit actually believes it drives a trajectory like this.\n\n9\n00:00:26,000 --> 00:00:29,000\nThen the surrounding map would look very much like that.\n\n10\n00:00:29,000 --> 00:00:33,000\nNow, these might be indistinguishable at first glance,\n\n11\n00:00:33,000 --> 00:00:35,000\nbut if this robot ever comes back to the same place, \n\n12\n00:00:35,000 --> 00:00:38,000\nthen it has an opportunity to correct all this.\n\n13\n00:00:38,000 --> 00:00:43,000\nA good SLAM technique is able to understand not just the fact that the environment\n\n14\n00:00:43,000 --> 00:00:48,000\nis uncertain but also the robot itself runs on an uncertain trajectory.\n\n15\n00:00:48,000 --> 00:00:51,000\nThat makes it hard.\n\n", "id": 397005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYw_YXDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/392003", "type": "Nugget", "id": 392003}, {"nuggetType": "quiz", "name": "Localization", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYqf4XDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/393001", "type": "Nugget", "id": 393001}, {"nuggetType": "quiz", "name": "Pid", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYqv4XDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/393002", "type": "Nugget", "id": 393002}, {"nuggetType": "lecture", "name": "Planning", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "a5c71aeb-b249-4d32-bf88-210ff8580564", "name": "cs373_unit6_02_q_Planning", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJKGGAw", "youtube_id": "x5ghaEKLJIg", "youtube_state": "processing", "path": "Course/cs373/Media/394002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nWe also learned about planning--in particular, breadth-first planning, \n\n2\n00:00:04,000 --> 00:00:07,000\nA-star planning, and dynamic programming planning \n\n3\n00:00:07,000 --> 00:00:10,000\nthat all address slightly different use cases.\n\n4\n00:00:10,000 --> 00:00:15,000\nThose are being used to plan the trajectory of the Google Street-View car\n\n5\n00:00:15,000 --> 00:00:17,000\nand the Darpa Grand Challenge cars.\n\n6\n00:00:17,000 --> 00:00:22,000\nIn fact, you implemented a good number of those, which is quite amazing.\n\n7\n00:00:22,000 --> 00:00:25,000\nHere is my quiz for planning.\n\n8\n00:00:25,000 --> 00:00:28,000\nYou learned about breadth first, A-star, dynamic programming,\n\n9\n00:00:28,000 --> 00:00:32,000\nand for the sake of this comparison I will also include the smoother,\n\n10\n00:00:32,000 --> 00:00:35,000\nwhich is more like plan refinement.\n\n11\n00:00:35,000 --> 00:00:38,000\nCheck any or all of those boxes if the corresponding planner \n\n12\n00:00:38,000 --> 00:00:43,000\nacts in a continuous space, if it finds an optimal solution,\n\n13\n00:00:43,000 --> 00:00:46,000\nif it's a universal plan--\n\n14\n00:00:46,000 --> 00:00:50,000\nthat means the solution, once found, can be applied to arbitrary states--\n\n15\n00:00:50,000 --> 00:00:56,000\nor if the solution is local, which means given an approximate initial solution,\n\n16\n00:00:56,000 --> 00:01:02,000\nit cannot really do anything more than just locally refine the solution.\n\n", "id": 394002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYk4YYDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/394003", "type": "Nugget", "id": 394003}, {"nuggetType": "program", "name": "Expand", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYlYYYDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/394005", "suppliedCode": "# -----------\n# User Instructions\n#\n# Modify your doit function to incorporate 3\n# distance measurements to a landmark(Z0, Z1, Z2).\n# You should use the provided expand function to\n# allow your Omega and Xi matrices to accomodate\n# the new information.\n#\n# Each landmark measurement should modify 4\n# values in your Omega matrix and 2 in your\n# Xi vector.\n#\n# Add your code at line 356.\n\nfrom math import *\nimport random\n\n#===============================================================\n#\n# SLAM in a rectolinear world (we avoid non-linearities)\n#      \n# \n#===============================================================\n\n\n# ------------------------------------------------\n# \n# this is the matrix class\n# we use it because it makes it easier to collect constraints in GraphSLAM\n# and to calculate solutions (albeit inefficiently)\n# \n\nclass matrix:\n    \n    # implements basic operations of a matrix class\n\n    # ------------\n    #\n    # initialization - can be called with an initial matrix\n    #\n\n    def __init__(self, value = [[]]):\n        self.value = value\n        self.dimx  = len(value)\n        self.dimy  = len(value[0])\n        if value == [[]]:\n            self.dimx = 0\n\n    # ------------\n    #\n    # makes matrix of a certain size and sets each element to zero\n    #\n\n    def zero(self, dimx, dimy = 0):\n        if dimy == 0:\n            dimy = dimx\n        # check if valid dimensions\n        if dimx < 1 or dimy < 1:\n            raise ValueError, \"Invalid size of matrix\"\n        else:\n            self.dimx  = dimx\n            self.dimy  = dimy\n            self.value = [[0.0 for row in range(dimy)] for col in range(dimx)]\n\n    # ------------\n    #\n    # makes matrix of a certain (square) size and turns matrix into identity matrix\n    #\n\n\n    def identity(self, dim):\n        # check if valid dimension\n        if dim < 1:\n            raise ValueError, \"Invalid size of matrix\"\n        else:\n            self.dimx  = dim\n            self.dimy  = dim\n            self.value = [[0.0 for row in range(dim)] for col in range(dim)]\n            for i in range(dim):\n                self.value[i][i] = 1.0\n    # ------------\n    #\n    # prints out values of matrix\n    #\n\n\n    def show(self, txt = ''):\n        for i in range(len(self.value)):\n            print txt + '['+ ', '.join('%.3f'%x for x in self.value[i]) + ']' \n        print ' '\n\n    # ------------\n    #\n    # defines elmement-wise matrix addition. Both matrices must be of equal dimensions\n    #\n\n\n    def __add__(self, other):\n        # check if correct dimensions\n        if self.dimx != other.dimx or self.dimx != other.dimx:\n            raise ValueError, \"Matrices must be of equal dimension to add\"\n        else:\n            # add if correct dimensions\n            res = matrix()\n            res.zero(self.dimx, self.dimy)\n            for i in range(self.dimx):\n                for j in range(self.dimy):\n                    res.value[i][j] = self.value[i][j] + other.value[i][j]\n            return res\n\n    # ------------\n    #\n    # defines elmement-wise matrix subtraction. Both matrices must be of equal dimensions\n    #\n\n    def __sub__(self, other):\n        # check if correct dimensions\n        if self.dimx != other.dimx or self.dimx != other.dimx:\n            raise ValueError, \"Matrices must be of equal dimension to subtract\"\n        else:\n            # subtract if correct dimensions\n            res = matrix()\n            res.zero(self.dimx, self.dimy)\n            for i in range(self.dimx):\n                for j in range(self.dimy):\n                    res.value[i][j] = self.value[i][j] - other.value[i][j]\n            return res\n\n    # ------------\n    #\n    # defines multiplication. Both matrices must be of fitting dimensions\n    #\n\n\n    def __mul__(self, other):\n        # check if correct dimensions\n        if self.dimy != other.dimx:\n            raise ValueError, \"Matrices must be m*n and n*p to multiply\"\n        else:\n            # multiply if correct dimensions\n            res = matrix()\n            res.zero(self.dimx, other.dimy)\n            for i in range(self.dimx):\n                for j in range(other.dimy):\n                    for k in range(self.dimy):\n                        res.value[i][j] += self.value[i][k] * other.value[k][j]\n        return res\n\n\n    # ------------\n    #\n    # returns a matrix transpose\n    #\n\n\n    def transpose(self):\n        # compute transpose\n        res = matrix()\n        res.zero(self.dimy, self.dimx)\n        for i in range(self.dimx):\n            for j in range(self.dimy):\n                res.value[j][i] = self.value[i][j]\n        return res\n\n    # ------------\n    #\n    # creates a new matrix from the existing matrix elements.\n    #\n    # Example:\n    #       l = matrix([[ 1,  2,  3,  4,  5], \n    #                   [ 6,  7,  8,  9, 10], \n    #                   [11, 12, 13, 14, 15]])\n    #\n    #       l.take([0, 2], [0, 2, 3])\n    #\n    # results in:\n    #       \n    #       [[1, 3, 4], \n    #        [11, 13, 14]]\n    #       \n    # \n    # take is used to remove rows and columns from existing matrices\n    # list1/list2 define a sequence of rows/columns that shall be taken\n    # is no list2 is provided, then list2 is set to list1 (good for symmetric matrices)\n    #\n\n    def take(self, list1, list2 = []):\n        if list2 == []:\n            list2 = list1\n        if len(list1) > self.dimx or len(list2) > self.dimy:\n            raise ValueError, \"list invalid in take()\"\n\n        res = matrix()\n        res.zero(len(list1), len(list2))\n        for i in range(len(list1)):\n            for j in range(len(list2)):\n                res.value[i][j] = self.value[list1[i]][list2[j]]\n        return res\n\n    # ------------\n    #\n    # creates a new matrix from the existing matrix elements.\n    #\n    # Example:\n    #       l = matrix([[1, 2, 3],\n    #                  [4, 5, 6]])\n    #\n    #       l.expand(3, 5, [0, 2], [0, 2, 3])\n    #\n    # results in:\n    #\n    #       [[1, 0, 2, 3, 0], \n    #        [0, 0, 0, 0, 0], \n    #        [4, 0, 5, 6, 0]]\n    # \n    # expand is used to introduce new rows and columns into an existing matrix\n    # list1/list2 are the new indexes of row/columns in which the matrix\n    # elements are being mapped. Elements for rows and columns \n    # that are not listed in list1/list2 \n    # will be initialized by 0.0.\n    #\n\n    def expand(self, dimx, dimy, list1, list2 = []):\n        if list2 == []:\n            list2 = list1\n        if len(list1) > self.dimx or len(list2) > self.dimy:\n            raise ValueError, \"list invalid in expand()\"\n\n        res = matrix()\n        res.zero(dimx, dimy)\n        for i in range(len(list1)):\n            for j in range(len(list2)):\n                res.value[list1[i]][list2[j]] = self.value[i][j]\n        return res\n\n    # ------------\n    #\n    # Computes the upper triangular Cholesky factorization of  \n    # a positive definite matrix.\n    # This code is based on http://adorio-research.org/wordpress/?p=4560\n\n    def Cholesky(self, ztol= 1.0e-5):\n\n\n        res = matrix()\n        res.zero(self.dimx, self.dimx)\n\n        for i in range(self.dimx):\n            S = sum([(res.value[k][i])**2 for k in range(i)])\n            d = self.value[i][i] - S\n            if abs(d) < ztol:\n                res.value[i][i] = 0.0\n            else: \n                if d < 0.0:\n                    raise ValueError, \"Matrix not positive-definite\"\n                res.value[i][i] = sqrt(d)\n            for j in range(i+1, self.dimx):\n                S = sum([res.value[k][i] * res.value[k][j] for k in range(i)])\n                if abs(S) < ztol:\n                    S = 0.0\n                res.value[i][j] = (self.value[i][j] - S)/res.value[i][i]\n        return res \n \n    # ------------\n    #\n    # Computes inverse of matrix given its Cholesky upper Triangular\n    # decomposition of matrix.\n    # This code is based on http://adorio-research.org/wordpress/?p=4560\n\n    def CholeskyInverse(self):\n    # Computes inverse of matrix given its Cholesky upper Triangular\n    # decomposition of matrix.\n        # This code is based on http://adorio-research.org/wordpress/?p=4560\n\n        res = matrix()\n        res.zero(self.dimx, self.dimx)\n\n    # Backward step for inverse.\n        for j in reversed(range(self.dimx)):\n            tjj = self.value[j][j]\n            S = sum([self.value[j][k]*res.value[j][k] for k in range(j+1, self.dimx)])\n            res.value[j][j] = 1.0/ tjj**2 - S/ tjj\n            for i in reversed(range(j)):\n                res.value[j][i] = res.value[i][j] = \\\n                    -sum([self.value[i][k]*res.value[k][j] for k in \\\n                              range(i+1,self.dimx)])/self.value[i][i]\n        return res\n    \n    # ------------\n    #\n    # comutes and returns the inverse of a square matrix\n    #\n\n\n    def inverse(self):\n        aux = self.Cholesky()\n        res = aux.CholeskyInverse()\n        return res\n\n    # ------------\n    #\n    # prints matrix (needs work!)\n    #\n\n\n    def __repr__(self):\n        return repr(self.value)\n\n\n\n# ######################################################################\n# ######################################################################\n# ######################################################################\n\n\n\"\"\"\nFor the following example, you would call doit(-3, 5, 3, 10, 5, 2):\n3 robot positions\n  initially: -3 (measure landmark to be 10 away)\n  moves by 5 (measure landmark to be 5 away)\n  moves by 3 (measure landmark to be 2 away)\n\n  \n\nwhich should return a mu of:\n[[-3.0],\n [2.0],\n [5.0],\n [7.0]]\n\"\"\"\ndef doit(initial_pos, move1, move2, Z0, Z1, Z2):\n    Omega = matrix([[1.0, 0.0, 0.0],\n                    [0.0, 0.0, 0.0],\n                    [0.0, 0.0, 0.0]])\n    Xi = matrix([[initial_pos],\n                 [0.0],\n                 [0.0]])\n\n    Omega += matrix([[1.0, -1.0, 0.0],\n                     [-1.0, 1.0, 0.0],\n                     [0.0, 0.0, 0.0]])\n    Xi += matrix([[-move1],\n                  [move1],\n                  [0.0]])\n    \n    Omega += matrix([[0.0, 0.0, 0.0],\n                     [0.0, 1.0, -1.0],\n                     [0.0, -1.0, 1.0]])\n    Xi += matrix([[0.0],\n                  [-move2],\n                  [move2]])\n\n    #\n    #\n    # Add your code here.\n    #\n    #\n\n    Omega.show('Omega: ')\n    Xi.show('Xi:    ')\n    mu = Omega.inverse() * Xi\n    mu.show('Mu:    ')\n    \n    return mu\n\ndoit(-3, 5, 3, 10, 5, 2)\n\n\n", "type": "Nugget", "id": 394005}, {"nuggetType": "lecture", "name": "Localization Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "ebebd8c2-f4c8-428d-9848-b72def4941e2", "name": "cs373_unit6_01_s_Localization", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJGGGAw", "youtube_id": "nmBwsBQRX9U", "youtube_state": "failed", "path": "Course/cs373/Media/394001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nOf course, we learned that the Kalman filter is unimodal, just a single bump,\n\n2\n00:00:04,000 --> 00:00:07,000\nwhereas histograms and particles can have multiple bumps.\n\n3\n00:00:07,000 --> 00:00:10,000\nThe Kalman filter was more efficient than the histogram and the particles \n\n4\n00:00:10,000 --> 00:00:15,000\nthat both require exponentially many units in the number of dimensions in the worst case.\n\n5\n00:00:15,000 --> 00:00:22,000\nAnd yes, my god, they are all extremely useful--super, super useful\n\n6\n00:00:22,000 --> 00:00:25,000\nin case you didn't get this from the class.\n\n", "id": 394001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY-Y0YDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/395001", "type": "Nugget", "id": 395001}, {"nuggetType": "quiz", "name": "Untouched Fields", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY4pUYDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/396002", "type": "Nugget", "id": 396002}, {"nuggetType": "lecture", "name": "Pid", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "48adc73f-5c6e-47c2-b950-12c83ecfd672", "name": "cs373_unit6_03_q_PID", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJmtGAw", "youtube_id": "lqsd4Zh0BMc", "youtube_state": "failed", "path": "Course/cs373/Media/399001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nThen we also learned about control. You implemented your first controller.\n\n2\n00:00:04,000 --> 00:00:08,000\nControl is what makes things like the following experiment possible.\n\n3\n00:00:15,000 --> 00:00:17,000\nHere's my quiz. \n\n4\n00:00:17,000 --> 00:00:22,000\nYou learned about PID control and, specifically, the P term, the I term, and the D term.\n\n5\n00:00:22,000 --> 00:00:26,000\nWhich of the terms is most associated with the idea of avoiding overshoot,\n\n6\n00:00:26,000 --> 00:00:33,000\nminimizing error relative to a reference trajectory, and compensating drift.\n\n7\n00:00:33,000 --> 00:00:41,000\nI want you to check exactly one check box for P, one for I, and one for D.\n\n", "id": 399001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYyp0YDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/397002", "type": "Nugget", "id": 397002}, {"nuggetType": "program", "name": "Segmented Cte", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYzJ0YDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/397004", "suppliedCode": "# -----------\n# User Instructions\n#\n# Familiarize yourself with the code below. Most of it\n# reproduces results that you have obtained at some\n# point in this class. Once you understand the code,\n# write a function, cte, in the run class that\n# computes the crosstrack\n# error for the case of a segmented path. You will\n# need to include the equations shown in the video.\n#\n \nfrom math import *\nimport random\n\n\n# don't change the noise paameters\n\nsteering_noise    = 0.1\ndistance_noise    = 0.03\nmeasurement_noise = 0.3\n\n\nclass plan:\n\n    # --------\n    # init: \n    #    creates an empty plan\n    #\n\n    def __init__(self, grid, init, goal, cost = 1):\n        self.cost = cost\n        self.grid = grid\n        self.init = init\n        self.goal = goal\n        self.make_heuristic(grid, goal, self.cost)\n        self.path = []\n        self.spath = []\n\n    # --------\n    #\n    # make heuristic function for a grid\n        \n    def make_heuristic(self, grid, goal, cost):\n        self.heuristic = [[0 for row in range(len(grid[0]))] \n                          for col in range(len(grid))]\n        for i in range(len(self.grid)):    \n            for j in range(len(self.grid[0])):\n                self.heuristic[i][j] = abs(i - self.goal[0]) + \\\n                    abs(j - self.goal[1])\n\n\n\n    # ------------------------------------------------\n    # \n    # A* for searching a path to the goal\n    #\n    #\n\n    def astar(self):\n\n\n        if self.heuristic == []:\n            raise ValueError, \"Heuristic must be defined to run A*\"\n\n        # internal motion parameters\n        delta = [[-1,  0], # go up\n                 [ 0,  -1], # go left\n                 [ 1,  0], # go down\n                 [ 0,  1]] # do right\n\n\n        # open list elements are of the type: [f, g, h, x, y]\n\n        closed = [[0 for row in range(len(self.grid[0]))] \n                  for col in range(len(self.grid))]\n        action = [[0 for row in range(len(self.grid[0]))] \n                  for col in range(len(self.grid))]\n\n        closed[self.init[0]][self.init[1]] = 1\n\n\n        x = self.init[0]\n        y = self.init[1]\n        h = self.heuristic[x][y]\n        g = 0\n        f = g + h\n\n        open = [[f, g, h, x, y]]\n\n        found  = False # flag that is set when search complete\n        resign = False # flag set if we can't find expand\n        count  = 0\n\n\n        while not found and not resign:\n\n            # check if we still have elements on the open list\n            if len(open) == 0:\n                resign = True\n                print '###### Search terminated without success'\n                \n            else:\n                # remove node from list\n                open.sort()\n                open.reverse()\n                next = open.pop()\n                x = next[3]\n                y = next[4]\n                g = next[1]\n\n            # check if we are done\n\n            if x == goal[0] and y == goal[1]:\n                found = True\n                # print '###### A* search successful'\n\n            else:\n                # expand winning element and add to new open list\n                for i in range(len(delta)):\n                    x2 = x + delta[i][0]\n                    y2 = y + delta[i][1]\n                    if x2 >= 0 and x2 < len(self.grid) and y2 >= 0 \\\n                            and y2 < len(self.grid[0]):\n                        if closed[x2][y2] == 0 and self.grid[x2][y2] == 0:\n                            g2 = g + self.cost\n                            h2 = self.heuristic[x2][y2]\n                            f2 = g2 + h2\n                            open.append([f2, g2, h2, x2, y2])\n                            closed[x2][y2] = 1\n                            action[x2][y2] = i\n\n            count += 1\n\n        # extract the path\n\n\n\n        invpath = []\n        x = self.goal[0]\n        y = self.goal[1]\n        invpath.append([x, y])\n        while x != self.init[0] or y != self.init[1]:\n            x2 = x - delta[action[x][y]][0]\n            y2 = y - delta[action[x][y]][1]\n            x = x2\n            y = y2\n            invpath.append([x, y])\n\n        self.path = []\n        for i in range(len(invpath)):\n            self.path.append(invpath[len(invpath) - 1 - i])\n\n\n\n\n    # ------------------------------------------------\n    # \n    # this is the smoothing function\n    #\n\n  \n\n\n    def smooth(self, weight_data = 0.1, weight_smooth = 0.1, \n               tolerance = 0.000001):\n\n        if self.path == []:\n            raise ValueError, \"Run A* first before smoothing path\"\n\n        self.spath = [[0 for row in range(len(self.path[0]))] \\\n                           for col in range(len(self.path))]\n        for i in range(len(self.path)):\n            for j in range(len(self.path[0])):\n                self.spath[i][j] = self.path[i][j]\n\n        change = tolerance\n        while change >= tolerance:\n            change = 0.0\n            for i in range(1, len(self.path)-1):\n                for j in range(len(self.path[0])):\n                    aux = self.spath[i][j]\n                    \n                    self.spath[i][j] += weight_data * \\\n                        (self.path[i][j] - self.spath[i][j])\n                    \n                    self.spath[i][j] += weight_smooth * \\\n                        (self.spath[i-1][j] + self.spath[i+1][j] \n                         - (2.0 * self.spath[i][j]))\n                    if i >= 2:\n                        self.spath[i][j] += 0.5 * weight_smooth * \\\n                            (2.0 * self.spath[i-1][j] - self.spath[i-2][j] \n                             - self.spath[i][j])\n                    if i <= len(self.path) - 3:\n                        self.spath[i][j] += 0.5 * weight_smooth * \\\n                            (2.0 * self.spath[i+1][j] - self.spath[i+2][j] \n                             - self.spath[i][j])\n                \n            change += abs(aux - self.spath[i][j])\n                \n\n\n\n\n\n\n# ------------------------------------------------\n# \n# this is the robot class\n#\n\nclass robot:\n\n    # --------\n    # init: \n    #\tcreates robot and initializes location/orientation to 0, 0, 0\n    #\n\n    def __init__(self, length = 0.5):\n        self.x = 0.0\n        self.y = 0.0\n        self.orientation = 0.0\n        self.length = length\n        self.steering_noise    = 0.0\n        self.distance_noise    = 0.0\n        self.measurement_noise = 0.0\n        self.num_collisions    = 0\n        self.num_steps         = 0\n\n    # --------\n    # set: \n    #\tsets a robot coordinate\n    #\n\n    def set(self, new_x, new_y, new_orientation):\n\n        self.x = float(new_x)\n        self.y = float(new_y)\n        self.orientation = float(new_orientation) % (2.0 * pi)\n\n\n    # --------\n    # set_noise: \n    #\tsets the noise parameters\n    #\n\n    def set_noise(self, new_s_noise, new_d_noise, new_m_noise):\n        # makes it possible to change the noise parameters\n        # this is often useful in particle filters\n        self.steering_noise     = float(new_s_noise)\n        self.distance_noise    = float(new_d_noise)\n        self.measurement_noise = float(new_m_noise)\n\n    # --------\n    # check: \n    #    checks of the robot pose collides with an obstacle, or\n    # is too far outside the plane\n\n    def check_collision(self, grid):\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == 1:\n                    dist = sqrt((self.x - float(i)) ** 2 + \n                                (self.y - float(j)) ** 2)\n                    if dist < 0.5:\n                        self.num_collisions += 1\n                        return False\n        return True\n        \n    def check_goal(self, goal, threshold = 1.0):\n        dist =  sqrt((float(goal[0]) - self.x) ** 2 + (float(goal[1]) - self.y) ** 2)\n        return dist < threshold\n        \n    # --------\n    # move: \n    #    steering = front wheel steering angle, limited by max_steering_angle\n    #    distance = total distance driven, most be non-negative\n\n    def move(self, grid, steering, distance, \n             tolerance = 0.001, max_steering_angle = pi / 4.0):\n\n        if steering > max_steering_angle:\n            steering = max_steering_angle\n        if steering < -max_steering_angle:\n            steering = -max_steering_angle\n        if distance < 0.0:\n            distance = 0.0\n\n\n        # make a new copy\n        res = robot()\n        res.length            = self.length\n        res.steering_noise    = self.steering_noise\n        res.distance_noise    = self.distance_noise\n        res.measurement_noise = self.measurement_noise\n        res.num_collisions    = self.num_collisions\n        res.num_steps         = self.num_steps + 1\n\n        # apply noise\n        steering2 = random.gauss(steering, self.steering_noise)\n        distance2 = random.gauss(distance, self.distance_noise)\n\n\n        # Execute motion\n        turn = tan(steering2) * distance2 / res.length\n\n        if abs(turn) < tolerance:\n\n            # approximate by straight line motion\n\n            res.x = self.x + (distance2 * cos(self.orientation))\n            res.y = self.y + (distance2 * sin(self.orientation))\n            res.orientation = (self.orientation + turn) % (2.0 * pi)\n\n        else:\n\n            # approximate bicycle model for motion\n\n            radius = distance2 / turn\n            cx = self.x - (sin(self.orientation) * radius)\n            cy = self.y + (cos(self.orientation) * radius)\n            res.orientation = (self.orientation + turn) % (2.0 * pi)\n            res.x = cx + (sin(res.orientation) * radius)\n            res.y = cy - (cos(res.orientation) * radius)\n\n        # check for collision\n        # res.check_collision(grid)\n\n        return res\n\n    # --------\n    # sense: \n    #    \n\n    def sense(self):\n\n        return [random.gauss(self.x, self.measurement_noise),\n                random.gauss(self.y, self.measurement_noise)]\n\n    # --------\n    # measurement_prob\n    #    computes the probability of a measurement\n    # \n\n    def measurement_prob(self, measurement):\n\n        # compute errors\n        error_x = measurement[0] - self.x\n        error_y = measurement[1] - self.y\n\n        # calculate Gaussian\n        error = exp(- (error_x ** 2) / (self.measurement_noise ** 2) / 2.0) \\\n            / sqrt(2.0 * pi * (self.measurement_noise ** 2))\n        error *= exp(- (error_y ** 2) / (self.measurement_noise ** 2) / 2.0) \\\n            / sqrt(2.0 * pi * (self.measurement_noise ** 2))\n\n        return error\n\n\n\n    def __repr__(self):\n        # return '[x=%.5f y=%.5f orient=%.5f]'  % (self.x, self.y, self.orientation)\n        return '[%.5f, %.5f]'  % (self.x, self.y)\n\n\n\n\n\n\n# ------------------------------------------------\n# \n# this is the particle filter class\n#\n\nclass particles:\n\n    # --------\n    # init: \n    #\tcreates particle set with given initial position\n    #\n\n    def __init__(self, x, y, theta, \n                 steering_noise, distance_noise, measurement_noise, N = 100):\n        self.N = N\n        self.steering_noise    = steering_noise\n        self.distance_noise    = distance_noise\n        self.measurement_noise = measurement_noise\n        \n        self.data = []\n        for i in range(self.N):\n            r = robot()\n            r.set(x, y, theta)\n            r.set_noise(steering_noise, distance_noise, measurement_noise)\n            self.data.append(r)\n\n\n    # --------\n    #\n    # extract position from a particle set\n    # \n    \n    def get_position(self):\n        x = 0.0\n        y = 0.0\n        orientation = 0.0\n\n        for i in range(self.N):\n            x += self.data[i].x\n            y += self.data[i].y\n            # orientation is tricky because it is cyclic. By normalizing\n            # around the first particle we are somewhat more robust to\n            # the 0=2pi problem\n            orientation += (((self.data[i].orientation\n                              - self.data[0].orientation + pi) % (2.0 * pi)) \n                            + self.data[0].orientation - pi)\n        return [x / self.N, y / self.N, orientation / self.N]\n\n    # --------\n    #\n    # motion of the particles\n    # \n\n    def move(self, grid, steer, speed):\n        newdata = []\n\n        for i in range(self.N):\n            r = self.data[i].move(grid, steer, speed)\n            newdata.append(r)\n        self.data = newdata\n\n    # --------\n    #\n    # sensing and resampling\n    # \n\n    def sense(self, Z):\n        w = []\n        for i in range(self.N):\n            w.append(self.data[i].measurement_prob(Z))\n\n        # resampling (careful, this is using shallow copy)\n        p3 = []\n        index = int(random.random() * self.N)\n        beta = 0.0\n        mw = max(w)\n\n        for i in range(self.N):\n            beta += random.random() * 2.0 * mw\n            while beta > w[index]:\n                beta -= w[index]\n                index = (index + 1) % self.N\n            p3.append(self.data[index])\n        self.data = p3\n\n    \n\n\n\n    \n\n# --------\n#\n# run:  runs control program for the robot\n#\n\n\ndef run(grid, goal, spath, params, printflag = False, speed = 0.1, timeout = 1000):\n\n    myrobot = robot()\n    myrobot.set(0., 0., 0.)\n    myrobot.set_noise(steering_noise, distance_noise, measurement_noise)\n    filter = particles(myrobot.x, myrobot.y, myrobot.orientation,\n                       steering_noise, distance_noise, measurement_noise)\n\n    cte  = 0.0\n    err  = 0.0\n    N    = 0\n\n    index = 0 # index into the path\n    \n    while not myrobot.check_goal(goal) and N < timeout:\n\n        diff_cte = - cte\n\n\n        # ----------------------------------------\n        # compute the CTE\n\n        # start with the present robot estimate\n        estimate = filter.get_position()\n\n        ### ENTER CODE HERE\n        \n\n        # ----------------------------------------\n\n\n        diff_cte += cte\n\n        steer = - params[0] * cte - params[1] * diff_cte \n\n        myrobot = myrobot.move(grid, steer, speed)\n        filter.move(grid, steer, speed)\n\n        Z = myrobot.sense()\n        filter.sense(Z)\n\n        if not myrobot.check_collision(grid):\n            print '##### Collision ####'\n\n        err += (cte ** 2)\n        N += 1\n\n        if printflag:\n            print myrobot, cte, index, u\n\n    return [myrobot.check_goal(goal), myrobot.num_collisions, myrobot.num_steps]\n\n\n# ------------------------------------------------\n# \n# this is our main routine\n#\n\ndef main(grid, init, goal, steering_noise, distance_noise, measurement_noise, \n     weight_data, weight_smooth, p_gain, d_gain):\n\n    path = plan(grid, init, goal)\n    path.astar()\n    path.smooth(weight_data, weight_smooth)\n    return run(grid, goal, path.spath, [p_gain, d_gain])\n\n    \n\n\n# ------------------------------------------------\n# \n# input data and parameters\n#\n\n\n# grid format:\n#   0 = navigable space\n#   1 = occupied space\n\ngrid = [[0, 1, 0, 0, 0, 0],\n        [0, 1, 0, 1, 1, 0],\n        [0, 1, 0, 1, 0, 0],\n        [0, 0, 0, 1, 0, 1],\n        [0, 1, 0, 1, 0, 0]]\n\n\ninit = [0, 0]\ngoal = [len(grid)-1, len(grid[0])-1]\n\n\nsteering_noise    = 0.1\ndistance_noise    = 0.03\nmeasurement_noise = 0.3\n\nweight_data       = 0.1\nweight_smooth     = 0.2\np_gain            = 2.0\nd_gain            = 6.0\n\n    \nprint main(grid, init, goal, steering_noise, distance_noise, measurement_noise, \n           weight_data, weight_smooth, p_gain, d_gain)\n\n\n\n\ndef twiddle(init_params):\n    n_params   = len(init_params)\n    dparams    = [1.0 for row in range(n_params)]\n    params     = [0.0 for row in range(n_params)]\n    K = 10\n\n    for i in range(n_params):\n        params[i] = init_params[i]\n\n\n    best_error = 0.0;\n    for k in range(K):\n        ret = main(grid, init, goal, \n                   steering_noise, distance_noise, measurement_noise, \n                   params[0], params[1], params[2], params[3])\n        if ret[0]:\n            best_error += ret[1] * 100 + ret[2]\n        else:\n            best_error += 99999\n    best_error = float(best_error) / float(k+1)\n    print best_error\n\n    n = 0\n    while sum(dparams) > 0.0000001:\n        for i in range(len(params)):\n            params[i] += dparams[i]\n            err = 0\n            for k in range(K):\n                ret = main(grid, init, goal, \n                           steering_noise, distance_noise, measurement_noise, \n                           params[0], params[1], params[2], params[3], best_error)\n                if ret[0]:\n                    err += ret[1] * 100 + ret[2]\n                else:\n                    err += 99999\n            print float(err) / float(k+1)\n            if err < best_error:\n                best_error = float(err) / float(k+1)\n                dparams[i] *= 1.1\n            else:\n                params[i] -= 2.0 * dparams[i]            \n                err = 0\n                for k in range(K):\n                    ret = main(grid, init, goal, \n                               steering_noise, distance_noise, measurement_noise, \n                               params[0], params[1], params[2], params[3], best_error)\n                    if ret[0]:\n                        err += ret[1] * 100 + ret[2]\n                    else:\n                        err += 99999\n                print float(err) / float(k+1)\n                if err < best_error:\n                    best_error = float(err) / float(k+1)\n                    dparams[i] *= 1.1\n                else:\n                    params[i] += dparams[i]\n                    dparams[i] *= 0.5\n        n += 1\n        print 'Twiddle #', n, params, ' -> ', best_error\n    print ' '\n    return params\n\n\n#twiddle([weight_data, weight_smooth, p_gain, d_gain])\n", "type": "Nugget", "id": 397004}, {"nuggetType": "lecture", "name": "Implementing Constraints", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "15567693-09f7-4a7d-acce-0262d2a00d23", "name": "cs373_unit6_11_q_Implementing-Constraints", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNPHFww", "youtube_id": "V41eTlGU0gw", "youtube_state": "done", "path": "Course/cs373/Media/386003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nWhat we do is we make a matrix and also a vector.\n\n2\n00:00:03,000 --> 00:00:08,000\nWe label the matrix, which is quadratic, with all the poses and all the landmarks.\n\n3\n00:00:08,000 --> 00:00:12,000\nHere we assume the landmarks are distinguishable.\n\n4\n00:00:12,000 --> 00:00:15,000\nEvery time we make an observation, say between two poses, \n\n5\n00:00:15,000 --> 00:00:18,000\nthey become little additions, locally, \n\n6\n00:00:18,000 --> 00:00:21,000\nin the 4 elements in the matrix defined over those poses.\n\n7\n00:00:21,000 --> 00:00:25,000\nFor example, if the robot moves from x0 to x1, \n\n8\n00:00:25,000 --> 00:00:31,000\nand we therefore believe x1 should be the same as x0, say, plus 5,\n\n9\n00:00:31,000 --> 00:00:33,000\nthe way we enter this into the matrix is in two ways.\n\n10\n00:00:33,000 --> 00:00:42,000\nFirst, 1 x0 and -1 x1--add it together should be -5.\n\n11\n00:00:42,000 --> 00:00:48,000\nSo we look at the equation here--x0 minus x1 equals -5.\n\n12\n00:00:48,000 --> 00:00:51,000\nThese are added into the matrix that starts with 0 everywhere,\n\n13\n00:00:51,000 --> 00:00:58,000\nand it's a constraint that relates x0 and x1 by -5. It's that simple.\n\n14\n00:00:58,000 --> 00:01:03,000\nSecondly, we do the same with x1 as positive, so we add 1 over here.\n\n15\n00:01:03,000 --> 00:01:09,000\nFor that, x1 minus x0 equals +5, so you put 5 over here and a -1 over here.\n\n16\n00:01:09,000 --> 00:01:15,000\nPut differently, the motion constraint that relates x0 to x1 by the motion of 5\n\n17\n00:01:15,000 --> 00:01:20,000\nhas modified incrementally by adding values the matrix for L elements\n\n18\n00:01:20,000 --> 00:01:22,000\n that fall between x0 and x1.\n\n19\n00:01:22,000 --> 00:01:25,000\nWe basically wrote that constraint twice.\n\n20\n00:01:25,000 --> 00:01:29,000\nIn both cases, we made sure the diagonal element was positive,\n\n21\n00:01:29,000 --> 00:01:33,000\nand then we wrote the correspondant off-diagonal element as a negative value,\n\n22\n00:01:33,000 --> 00:01:36,000\nand we added the corresponding value on the right side.\n\n23\n00:01:36,000 --> 00:01:38,000\nLet me ask you a question.\n\n24\n00:01:38,000 --> 00:01:41,000\nSuppose we know we go from x1 to x2 and whereas the motion over here \n\n25\n00:01:41,000 --> 00:01:47,000\nwas +5, say, now it's -4, so we're moving back in the opposite direction.\n\n26\n00:01:47,000 --> 00:01:50,000\nWhat would be the new values for the matrix over here?\n\n27\n00:01:50,000 --> 00:01:52,000\nI'll give you a hint.\n\n28\n00:01:52,000 --> 00:01:58,000\nThey only affect values that occur in the region between x1 and x2 and over here.\n\n29\n00:01:58,000 --> 00:02:01,000\nRemember, these are additive.\n\n", "id": 386003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYzp0YDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/397006", "type": "Nugget", "id": 397006}, {"nuggetType": "lecture", "name": "Slam Quiz", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "af592c07-d1c4-4a87-a6ba-11b827a4927e", "name": "cs373_unit6_13_q_SLAM-Quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJqtGAw", "youtube_id": "QF-CHsUIRUE", "youtube_state": "done", "path": "Course/cs373/Media/399002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nLet's summarize what we've learned in the form of a little quiz on Graph SLAM.\n\n2\n00:00:05,000 --> 00:00:09,000\nCheck this box if Graph SLAM seem to be all about local constraints.\n\n3\n00:00:09,000 --> 00:00:13,000\nThey require multiplications--if that's true check the box over here.\n\n4\n00:00:13,000 --> 00:00:19,000\nThe require additions--check this box if this is correct or none of the above.\n\n", "id": 399002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYz50YDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/397007", "type": "Nugget", "id": 397007}, {"nuggetType": "quiz", "name": "Matrix Modification", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY0J0YDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/397008", "type": "Nugget", "id": 397008}, {"nuggetType": "lecture", "name": "Omega And Xi", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "6551c41a-d0a1-405f-86d0-1174f3baae78", "name": "cs373_unit6_16_p_Omega-and-Xi", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLKiGQw", "youtube_id": "U8iFMhtJyek", "youtube_state": "done", "path": "Course/cs373/Media/414002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nThe last thing I want to tell you before we go into programming\n\n2\n00:00:02,000 --> 00:00:05,000\n is why this makes any sense.\n\n3\n00:00:05,000 --> 00:00:08,000\nSuppose you fill the matrix, which I call omega [\u03a9], \n\n4\n00:00:08,000 --> 00:00:12,000\nand the vector, which I give the Greek name of xi [\u03be].\n\n5\n00:00:12,000 --> 00:00:15,000\nMy apologies to my non-Greek students here.\n\n6\n00:00:15,000 --> 00:00:17,000\nYou Greek students should be very proud. \n\n7\n00:00:17,000 --> 00:00:19,000\nYou'll always have a special place in my mathematical heart.\n\n8\n00:00:19,000 --> 00:00:26,000\nThen I can find the best solution for all the landmark positions or the world positions\n\n9\n00:00:26,000 --> 00:00:28,000\nby a very simple mathematical trick that is completely counterintuitive.\n\n10\n00:00:28,000 --> 00:00:37,000\nI invert the omega, I right multiply with xi, and out comes a vector mu [\u00b5],\n\n11\n00:00:37,000 --> 00:00:43,000\nwhich gives me the best estimates for all the robot locations and the landmark locations.\n\n12\n00:00:43,000 --> 00:00:48,000\nNow, that is quite amazing, because all it means in Graph SLAM is\n\n13\n00:00:48,000 --> 00:00:52,000\n that you keep adding numbers to these matrices every time you see a constraint.\n\n14\n00:00:52,000 --> 00:00:55,000\nWhen you're done with it, you run a very simple procedure \n\n15\n00:00:55,000 --> 00:00:57,000\nand out comes the best places for your robot.\n\n16\n00:00:57,000 --> 00:01:00,000\nLet's go and try it. I'm now going to ask you to program this.\n\n17\n00:01:00,000 --> 00:01:04,000\nI'm giving you my matrix class, so you can do this easily.\n\n18\n00:01:04,000 --> 00:01:09,000\nWhat I'm asking you to do is to build a 3 x 3 matrix and, of course, a 3 x 1 vector\n\n19\n00:01:09,000 --> 00:01:14,000\nabout which you shall state that our initial location is -3.\n\n20\n00:01:14,000 --> 00:01:23,000\nX1 in exportation is obtained by adding 5 to x0 and x2 is obtained by adding 3 to x1.\n\n21\n00:01:23,000 --> 00:01:26,000\nIn exportation what we should get out when we run \n\n22\n00:01:26,000 --> 00:01:31,000\nthe mu equals omega minus 1 times xi trick is that x0 becomes -3, \n\n23\n00:01:31,000 --> 00:01:36,000\nx1 becomes 2, and x2 becomes 5.\n\n24\n00:01:36,000 --> 00:01:40,000\nDiving straight into our programming environment,\n\n25\n00:01:40,000 --> 00:01:44,000\nI'm giving you a matrix class--you might want to take a moment to look over it.\n\n26\n00:01:44,000 --> 00:01:47,000\nIt's a little bit augmented to what I've given you before,\n\n27\n00:01:47,000 --> 00:01:52,000\nand I fixed a bug with the inversion code, which is quite essential.\n\n28\n00:01:52,000 --> 00:01:56,000\nIf I run it, I construct an omega matrix piece-by-piece--\n\n29\n00:01:56,000 --> 00:01:58,000\nthat's the one that you should come out with--\n\n30\n00:01:58,000 --> 00:02:04,000\na xi vector, and then I run and print out, using the \"show\" command,\n\n31\n00:02:04,000 --> 00:02:08,000\nthe result of omega to the -1 times c.\n\n32\n00:02:08,000 --> 00:02:11,000\nYou can see -3, 2, and 5 are the correct results \n\n33\n00:02:11,000 --> 00:02:14,000\nthat result from the omega matrix and the xi vector.\n\n34\n00:02:14,000 --> 00:02:18,000\nWhat I want you to do is write code that incrementally step-by-step constructs \n\n35\n00:02:18,000 --> 00:02:24,000\nthe omega vector and the xi function and then returns to me those results over here.\n\n36\n00:02:24,000 --> 00:02:27,000\nThere is an empty function in your code that accepts as parameter\n\n37\n00:02:27,000 --> 00:02:33,000\n the initial position, -3, and the two motion values, 5 and 3.\n\n", "id": 414002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYsqUYDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/398002", "type": "Nugget", "id": 398002}, {"nuggetType": "lecture", "name": "Slam", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "c003a25a-e0d6-4271-a497-e03656895a2e", "name": "cs373_unit6_08_l_SLAM", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNnrGAw", "youtube_id": "O5Zu19-tjY8", "youtube_state": "done", "path": "Course/cs373/Media/407001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nHi, students. I am back to teach you a bit about SLAM.\n\n2\n00:00:03,000 --> 00:00:07,000\nThere was a request--a popular request, actually, in email and the discussion forum.\n\n3\n00:00:07,000 --> 00:00:14,000\nSLAM is a method for mapping that's short for \"simultaneous localization and mapping.\"\n\n4\n00:00:14,000 --> 00:00:20,000\nSome of the this might show up in the final exam, so do pay attention.\n\n5\n00:00:20,000 --> 00:00:23,000\nMapping is all about building maps of the environment.\n\n6\n00:00:23,000 --> 00:00:27,000\nYou might remember in the localization classes we assumed the map was given.\n\n7\n00:00:27,000 --> 00:00:32,000\nOne of the big passions in my life has been to understand how to make a robot \n\n8\n00:00:32,000 --> 00:00:37,000\nmake these maps like this map here, which is a 3D map \n\n9\n00:00:37,000 --> 00:00:42,000\nof an abandoned underground coal mine in Pennsylvania \n\n10\n00:00:42,000 --> 00:00:45,000\nnear Carnegie-Mellon University.\n\n11\n00:00:45,000 --> 00:00:48,000\nOver the past 10 years or so, I have worked on a number of different methods \n\n12\n00:00:48,000 --> 00:00:51,000\nfor buildings maps that are quite sophisticated, \n\n13\n00:00:51,000 --> 00:00:55,000\nlike this particle filter method over here that you can see.\n\n14\n00:00:55,000 --> 00:00:58,000\nAll these methods have in common that we build a model of the environment\n\n15\n00:00:58,000 --> 00:01:04,000\nwhile also addressing the fact that the robot itself accrues uncertainty while it moves.\n\n16\n00:01:04,000 --> 00:01:07,000\nWhen, in this example here, the loop is being closed, \n\n17\n00:01:07,000 --> 00:01:12,000\nyou can see how our mapping technology is able to accommodate this\n\n18\n00:01:12,000 --> 00:01:18,000\nand find a consistent map despite the fact that the robot drifted a little along the way.\n\n19\n00:01:18,000 --> 00:01:22,000\nThe key insight in building maps is the robot itself \n\n20\n00:01:22,000 --> 00:01:26,000\nmight lose track of where it is by virtue of its motion uncertainty.\n\n21\n00:01:26,000 --> 00:01:30,000\nYou accommodate this in localization by using an existing map,\n\n22\n00:01:30,000 --> 00:01:33,000\nbut now we don't have an existing map. We're building a map.\n\n23\n00:01:33,000 --> 00:01:35,000\nThat's where SLAM comes into play.\n\n24\n00:01:35,000 --> 00:01:38,000\nSLAM doesn't stand for \"slamming\" a robot.\n\n25\n00:01:38,000 --> 00:01:43,000\nWhat it really means is \"simultaneous localization and mapping.\"\n\n26\n00:01:43,000 --> 00:01:46,000\nThis is a big, big, big research field.\n\n27\n00:01:46,000 --> 00:01:50,000\nMost of my AI book is about this technology,\n\n28\n00:01:50,000 --> 00:01:54,000\nand today I want to show you my favorite method called \"graph SLAM,\"\n\n29\n00:01:54,000 --> 00:01:58,000\nwhich is also by far the easiest method to understand.\n\n30\n00:01:58,000 --> 00:02:02,000\nWe will reduce the mapping problem to a couple of very intuitive \n\n31\n00:02:02,000 --> 00:02:07,000\nadditions into a big matrix and a vector, and that's it.\n\n", "id": 407001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYgrUYDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/400002", "type": "Nugget", "id": 400002}, {"nuggetType": "lecture", "name": "Landmark Position", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": null, "name": "cs373_unit6_17_p_Landmark-Position", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIOyGQw", "youtube_id": "crngGVW3DLs", "youtube_state": "processing", "path": "Course/cs373/Media/416003", "transcript": null, "id": 416003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYg7UYDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/400003", "type": "Nugget", "id": 400003}, {"nuggetType": "program", "name": "Implementing Slam", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY67wYDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/401003", "suppliedCode": "# ------------\n# User Instructions\n# \n# In this problem you will implement SLAM in a 2 dimensional\n# world. Please define a function, slam, which takes five\n# parameters as input and returns the vector mu. This vector\n# should have x, y coordinates interlaced, so for example, \n# if there were 2 poses and 2 landmarks, mu would look like:\n#\n#  mu =  matrix([[Px0],\n#                [Py0],\n#                [Px1],\n#                [Py1],\n#                [Lx0],\n#                [Ly0],\n#                [Lx1],\n#                [Ly1]])\n#\n# data - This is the data that is generated with the included\n#        make_data function. You can also use test_data to\n#        make sure your function gives the correct result.\n#\n# N -    The number of time steps.\n#\n# num_landmarks - The number of landmarks.\n#\n# motion_noise - The noise associated with motion. The update\n#                strength for motion should be 1.0 / motion_noise.\n#\n# measurement_noise - The noise associated with measurement.\n#                     The update strength for measurement should be\n#                     1.0 / measurement_noise.\n#\n#\n# Enter your code at line 509\n\n# --------------\n# Testing\n#\n# Uncomment the test cases at the bottom of this document.\n# Your output should be identical to the given results.\n\n \nfrom math import *\nimport random\n\n\n#===============================================================\n#\n# SLAM in a rectolinear world (we avoid non-linearities)\n#      \n# \n#===============================================================\n\n\n# ------------------------------------------------\n# \n# this is the matrix class\n# we use it because it makes it easier to collect constraints in GraphSLAM\n# and to calculate solutions (albeit inefficiently)\n# \n\nclass matrix:\n    \n    # implements basic operations of a matrix class\n\n    # ------------\n    #\n    # initialization - can be called with an initial matrix\n    #\n\n    def __init__(self, value = [[]]):\n        self.value = value\n        self.dimx  = len(value)\n        self.dimy  = len(value[0])\n        if value == [[]]:\n            self.dimx = 0\n\n    # ------------\n    #\n    # makes matrix of a certain size and sets each element to zero\n    #\n\n    def zero(self, dimx, dimy):\n        if dimy == 0:\n            dimy = dimx\n        # check if valid dimensions\n        if dimx < 1 or dimy < 1:\n            raise ValueError, \"Invalid size of matrix\"\n        else:\n            self.dimx  = dimx\n            self.dimy  = dimy\n            self.value = [[0.0 for row in range(dimy)] for col in range(dimx)]\n\n    # ------------\n    #\n    # makes matrix of a certain (square) size and turns matrix into identity matrix\n    #\n\n    def identity(self, dim):\n        # check if valid dimension\n        if dim < 1:\n            raise ValueError, \"Invalid size of matrix\"\n        else:\n            self.dimx  = dim\n            self.dimy  = dim\n            self.value = [[0.0 for row in range(dim)] for col in range(dim)]\n            for i in range(dim):\n                self.value[i][i] = 1.0\n    # ------------\n    #\n    # prints out values of matrix\n    #\n\n    def show(self, txt = ''):\n        for i in range(len(self.value)):\n            print txt + '['+ ', '.join('%.3f'%x for x in self.value[i]) + ']' \n        print ' '\n\n    # ------------\n    #\n    # defines elmement-wise matrix addition. Both matrices must be of equal dimensions\n    #\n\n    def __add__(self, other):\n        # check if correct dimensions\n        if self.dimx != other.dimx or self.dimx != other.dimx:\n            raise ValueError, \"Matrices must be of equal dimension to add\"\n        else:\n            # add if correct dimensions\n            res = matrix()\n            res.zero(self.dimx, self.dimy)\n            for i in range(self.dimx):\n                for j in range(self.dimy):\n                    res.value[i][j] = self.value[i][j] + other.value[i][j]\n            return res\n\n    # ------------\n    #\n    # defines elmement-wise matrix subtraction. Both matrices must be of equal dimensions\n    #\n\n    def __sub__(self, other):\n        # check if correct dimensions\n        if self.dimx != other.dimx or self.dimx != other.dimx:\n            raise ValueError, \"Matrices must be of equal dimension to subtract\"\n        else:\n            # subtract if correct dimensions\n            res = matrix()\n            res.zero(self.dimx, self.dimy)\n            for i in range(self.dimx):\n                for j in range(self.dimy):\n                    res.value[i][j] = self.value[i][j] - other.value[i][j]\n            return res\n\n    # ------------\n    #\n    # defines multiplication. Both matrices must be of fitting dimensions\n    #\n\n    def __mul__(self, other):\n        # check if correct dimensions\n        if self.dimy != other.dimx:\n            raise ValueError, \"Matrices must be m*n and n*p to multiply\"\n        else:\n            # multiply if correct dimensions\n            res = matrix()\n            res.zero(self.dimx, other.dimy)\n            for i in range(self.dimx):\n                for j in range(other.dimy):\n                    for k in range(self.dimy):\n                        res.value[i][j] += self.value[i][k] * other.value[k][j]\n        return res\n\n\n    # ------------\n    #\n    # returns a matrix transpose\n    #\n\n    def transpose(self):\n        # compute transpose\n        res = matrix()\n        res.zero(self.dimy, self.dimx)\n        for i in range(self.dimx):\n            for j in range(self.dimy):\n                res.value[j][i] = self.value[i][j]\n        return res\n\n    # ------------\n    #\n    # creates a new matrix from the existing matrix elements.\n    #\n    # Example:\n    #       l = matrix([[ 1,  2,  3,  4,  5], \n    #                   [ 6,  7,  8,  9, 10], \n    #                   [11, 12, 13, 14, 15]])\n    #\n    #       l.take([0, 2], [0, 2, 3])\n    #\n    # results in:\n    #       \n    #       [[1, 3, 4], \n    #        [11, 13, 14]]\n    #       \n    # \n    # take is used to remove rows and columns from existing matrices\n    # list1/list2 define a sequence of rows/columns that shall be taken\n    # is no list2 is provided, then list2 is set to list1 (good for \n    # symmetric matrices)\n    #\n\n    def take(self, list1, list2 = []):\n        if list2 == []:\n            list2 = list1\n        if len(list1) > self.dimx or len(list2) > self.dimy:\n            raise ValueError, \"list invalid in take()\"\n\n        res = matrix()\n        res.zero(len(list1), len(list2))\n        for i in range(len(list1)):\n            for j in range(len(list2)):\n                res.value[i][j] = self.value[list1[i]][list2[j]]\n        return res\n\n    # ------------\n    #\n    # creates a new matrix from the existing matrix elements.\n    #\n    # Example:\n    #       l = matrix([[1, 2, 3],\n    #                  [4, 5, 6]])\n    #\n    #       l.expand(3, 5, [0, 2], [0, 2, 3])\n    #\n    # results in:\n    #\n    #       [[1, 0, 2, 3, 0], \n    #        [0, 0, 0, 0, 0], \n    #        [4, 0, 5, 6, 0]]\n    # \n    # expand is used to introduce new rows and columns into an existing matrix\n    # list1/list2 are the new indexes of row/columns in which the matrix\n    # elements are being mapped. Elements for rows and columns \n    # that are not listed in list1/list2 \n    # will be initialized by 0.0.\n    #\n    \n    def expand(self, dimx, dimy, list1, list2 = []):\n        if list2 == []:\n            list2 = list1\n        if len(list1) > self.dimx or len(list2) > self.dimy:\n            raise ValueError, \"list invalid in expand()\"\n\n        res = matrix()\n        res.zero(dimx, dimy)\n        for i in range(len(list1)):\n            for j in range(len(list2)):\n                res.value[list1[i]][list2[j]] = self.value[i][j]\n        return res\n\n    # ------------\n    #\n    # Computes the upper triangular Cholesky factorization of  \n    # a positive definite matrix.\n    # This code is based on http://adorio-research.org/wordpress/?p=4560\n    #\n    \n    def Cholesky(self, ztol= 1.0e-5):\n\n        res = matrix()\n        res.zero(self.dimx, self.dimx)\n\n        for i in range(self.dimx):\n            S = sum([(res.value[k][i])**2 for k in range(i)])\n            d = self.value[i][i] - S\n            if abs(d) < ztol:\n                res.value[i][i] = 0.0\n            else: \n                if d < 0.0:\n                    raise ValueError, \"Matrix not positive-definite\"\n                res.value[i][i] = sqrt(d)\n            for j in range(i+1, self.dimx):\n                S = sum([res.value[k][i] * res.value[k][j] for k in range(i)])\n                if abs(S) < ztol:\n                    S = 0.0\n                res.value[i][j] = (self.value[i][j] - S)/res.value[i][i]\n        return res \n \n    # ------------\n    #\n    # Computes inverse of matrix given its Cholesky upper Triangular\n    # decomposition of matrix.\n    # This code is based on http://adorio-research.org/wordpress/?p=4560\n    #\n    \n    def CholeskyInverse(self):\n\n        res = matrix()\n        res.zero(self.dimx, self.dimx)\n\n        # Backward step for inverse.\n        for j in reversed(range(self.dimx)):\n            tjj = self.value[j][j]\n            S = sum([self.value[j][k]*res.value[j][k] for k in range(j+1, self.dimx)])\n            res.value[j][j] = 1.0/ tjj**2 - S/ tjj\n            for i in reversed(range(j)):\n                res.value[j][i] = res.value[i][j] = \\\n                    -sum([self.value[i][k]*res.value[k][j] for k in \\\n                              range(i+1,self.dimx)])/self.value[i][i]\n        return res\n    \n    # ------------\n    #\n    # comutes and returns the inverse of a square matrix\n    #\n    def inverse(self):\n        aux = self.Cholesky()\n        res = aux.CholeskyInverse()\n        return res\n\n    # ------------\n    #\n    # prints matrix (needs work!)\n    #\n    def __repr__(self):\n        return repr(self.value)\n\n# ------------------------------------------------\n# \n# this is the robot class\n# \n# our robot lives in x-y space, and its motion is\n# pointed in a random direction. It moves on a straight line\n# until is comes close to a wall at which point it turns\n# away from the wall and continues to move.\n#\n# For measurements, it simply senses the x- and y-distance\n# to landmarks. This is different from range and bearing as \n# commonly studied in the literature, but this makes it much\n# easier to implement the essentials of SLAM without\n# cluttered math\n#\n\nclass robot:\n\n    # --------\n    # init: \n    #   creates robot and initializes location to 0, 0\n    #\n\n    def __init__(self, world_size = 100.0, measurement_range = 30.0,\n                 motion_noise = 1.0, measurement_noise = 1.0):\n        self.measurement_noise = 0.0\n        self.world_size = world_size\n        self.measurement_range = measurement_range\n        self.x = world_size / 2.0\n        self.y = world_size / 2.0\n        self.motion_noise = motion_noise\n        self.measurement_noise = measurement_noise\n        self.landmarks = []\n        self.num_landmarks = 0\n\n\n    def rand(self):\n        return random.random() * 2.0 - 1.0\n\n    # --------\n    #\n    # make random landmarks located in the world\n    #\n\n    def make_landmarks(self, num_landmarks):\n        self.landmarks = []\n        for i in range(num_landmarks):\n            self.landmarks.append([round(random.random() * self.world_size),\n                                   round(random.random() * self.world_size)])\n        self.num_landmarks = num_landmarks\n\n\n    # --------\n    #\n    # move: attempts to move robot by dx, dy. If outside world\n    #       boundary, then the move does nothing and instead returns failure\n    #\n\n    def move(self, dx, dy):\n\n        x = self.x + dx + self.rand() * self.motion_noise\n        y = self.y + dy + self.rand() * self.motion_noise\n\n        if x < 0.0 or x > self.world_size or y < 0.0 or y > self.world_size:\n            return False\n        else:\n            self.x = x\n            self.y = y\n            return True\n    \n\n    # --------\n    #\n    # sense: returns x- and y- distances to landmarks within visibility range\n    #        because not all landmarks may be in this range, the list of measurements\n    #        is of variable length. Set measurement_range to -1 if you want all\n    #        landmarks to be visible at all times\n    #\n\n    def sense(self):\n        Z = []\n        for i in range(self.num_landmarks):\n            dx = self.landmarks[i][0] - self.x + self.rand() * self.measurement_noise\n            dy = self.landmarks[i][1] - self.y + self.rand() * self.measurement_noise    \n            if self.measurement_range < 0.0 or abs(dx) + abs(dy) <= self.measurement_range:\n                Z.append([i, dx, dy])\n        return Z\n\n    # --------\n    #\n    # print robot location\n    #\n\n    def __repr__(self):\n        return 'Robot: [x=%.5f y=%.5f]'  % (self.x, self.y)\n\n######################################################\n\n# --------\n# this routine makes the robot data\n#\n\ndef make_data(N, num_landmarks, world_size, measurement_range, motion_noise, \n              measurement_noise, distance):\n\n\n    complete = False\n\n    while not complete:\n\n        data = []\n\n        # make robot and landmarks\n        r = robot(world_size, measurement_range, motion_noise, measurement_noise)\n        r.make_landmarks(num_landmarks)\n        seen = [False for row in range(num_landmarks)]\n    \n        # guess an initial motion\n        orientation = random.random() * 2.0 * pi\n        dx = cos(orientation) * distance\n        dy = sin(orientation) * distance\n    \n        for k in range(N-1):\n    \n            # sense\n            Z = r.sense()\n\n            # check off all landmarks that were observed \n            for i in range(len(Z)):\n                seen[Z[i][0]] = True\n    \n            # move\n            while not r.move(dx, dy):\n                # if we'd be leaving the robot world, pick instead a new direction\n                orientation = random.random() * 2.0 * pi\n                dx = cos(orientation) * distance\n                dy = sin(orientation) * distance\n\n            # memorize data\n            data.append([Z, [dx, dy]])\n\n        # we are done when all landmarks were observed; otherwise re-run\n        complete = (sum(seen) == num_landmarks)\n\n    print ' '\n    print 'Landmarks: ', r.landmarks\n    print r\n\n\n    return data\n    \n####################################################\n\n# --------------------------------\n#\n# print the result of SLAM, the robot pose(s) and the landmarks\n#\n\ndef print_result(N, num_landmarks, result):\n    print\n    print 'Estimated Pose(s):'\n    for i in range(N):\n        print '    ['+ ', '.join('%.3f'%x for x in result.value[2*i]) + ', ' \\\n            + ', '.join('%.3f'%x for x in result.value[2*i+1]) +']'\n    print\n    print 'Estimated Landmarks:'\n    for i in range(num_landmarks):\n        print '    ['+ ', '.join('%.3f'%x for x in result.value[2*(N+i)]) + ', ' \\\n            + ', '.join('%.3f'%x for x in result.value[2*(N+i)+1]) +']'\n\n# --------------------------------\n#\n# slam - retains entire path and all landmarks\n#\n\n############## ENTER YOUR CODE BELOW HERE ###################\n\ndef slam(data, N, num_landmarks, motion_noise, measurement_noise):\n    #\n    #\n    # Add your code here!\n    #\n    #\n    return mu # Make sure you return mu for grading!\n        \n############### ENTER YOUR CODE ABOVE HERE ###################\n\n# ------------------------------------------------------------------------\n# ------------------------------------------------------------------------\n# ------------------------------------------------------------------------\n#\n# Main routines\n#\n\n\nnum_landmarks      = 5        # number of landmarks\nN                  = 20       # time steps\nworld_size         = 100.0    # size of world\nmeasurement_range  = 50.0     # range at which we can sense landmarks\nmotion_noise       = 2.0      # noise in robot motion\nmeasurement_noise  = 2.0      # noise in the measurements\ndistance           = 20.0     # distance by which robot (intends to) move each iteratation \n\ndata = make_data(N, num_landmarks, world_size, measurement_range, motion_noise, measurement_noise, distance)\nresult = slam(data, N, num_landmarks, motion_noise, measurement_noisenprint_result(N, num_landmarks, result)\n\n# -------------\n# Testing\n#\n# Uncomment one of the test cases below to compare your results to\n# the results shown for Test Case 1 and Test Case 2.\n\ntest_data1 = [[[[1, 19.457599255548065, 23.8387362100849], [2, -13.195807561967236, 11.708840328458608], [3, -30.0954905279171, 15.387879242505843]], [-12.2607279422326, -15.801093326936487]], [[[2, -0.4659930049620491, 28.088559771215664], [4, -17.866382374890936, -16.384904503932]], [-12.2607279422326, -15.801093326936487]], [[[4, -6.202512900833806, -1.823403210274639]], [-12.2607279422326, -15.801093326936487]], [[[4, 7.412136480918645, 15.388585962142429]], [14.008259661173426, 14.274756084260822]], [[[4, -7.526138813444998, -0.4563942429717849]], [14.008259661173426, 14.274756084260822]], [[[2, -6.299793150150058, 29.047830407717623], [4, -21.93551130411791, -13.21956810989039]], [14.008259661173426, 14.274756084260822]], [[[1, 15.796300959032276, 30.65769689694247], [2, -18.64370821983482, 17.380022987031367]], [14.008259661173426, 14.274756084260822]], [[[1, 0.40311325410337906, 14.169429532679855], [2, -35.069349468466235, 2.4945558982439957]], [14.008259661173426, 14.274756084260822]], [[[1, -16.71340983241936, -2.777000269543834]], [-11.006096015782283, 16.699276945166858]], [[[1, -3.611096830835776, -17.954019226763958]], [-19.693482634035977, 3.488085684573048]], [[[1, 18.398273354362416, -22.705102332550947]], [-19.693482634035977, 3.488085684573048]], [[[2, 2.789312482883833, -39.73720193121324]], [12.849049222879723, -15.326510824972983]], [[[1, 21.26897046581808, -10.121029799040915], [2, -11.917698965880655, -23.17711662602097], [3, -31.81167947898398, -16.7985673023331]], [12.849049222879723, -15.326510824972983]], [[[1, 10.48157743234859, 5.692957082575485], [2, -22.31488473554935, -5.389184118551409], [3, -40.81803984305378, -2.4703329790238118]], [12.849049222879723, -15.326510824972983]], [[[0, 10.591050242096598, -39.2051798967113], [1, -3.5675572049297553, 22.849456408289125], [2, -38.39251065320351, 7.288990306029511]], [12.849049222879723, -15.326510824972983]], [[[0, -3.6225556479370766, -25.58006865235512]], [-7.8874682868419965, -18.379005523261092]], [[[0, 1.9784503557879374, -6.5025974151499]], [-7.8874682868419965, -18.379005523261092]], [[[0, 10.050665232782423, 11.026385307998742]], [-17.82919359778298, 9.062000642947142]], [[[0, 26.526838150174818, -0.22563393232425621], [4, -33.70303936886652, 2.880339841013677]], [-17.82919359778298, 9.062000642947142]]]\ntest_data2 = [[[[0, 26.543274387283322, -6.262538160312672], [3, 9.937396825799755, -9.128540360867689]], [18.92765331253674, -6.460955043986683]], [[[0, 7.706544739722961, -3.758467215445748], [1, 17.03954411948937, 31.705489938553438], [3, -11.61731288777497, -6.64964096716416]], [18.92765331253674, -6.460955043986683]], [[[0, -12.35130507136378, 2.585119104239249], [1, -2.563534536165313, 38.22159657838369], [3, -26.961236804740935, -0.4802312626141525]], [-11.167066095509824, 16.592065417497455]], [[[0, 1.4138633151721272, -13.912454837810632], [1, 8.087721200818589, 20.51845934354381], [3, -17.091723454402302, -16.521500551709707], [4, -7.414211721400232, 38.09191602674439]], [-11.167066095509824, 16.592065417497455]], [[[0, 12.886743222179561, -28.703968411636318], [1, 21.660953298391387, 3.4912891084614914], [3, -6.401401414569506, -32.321583037341625], [4, 5.034079343639034, 23.102207946092893]], [-11.167066095509824, 16.592065417497455]], [[[1, 31.126317672358578, -10.036784369535214], [2, -38.70878528420893, 7.4987265861424595], [4, 17.977218575473767, 6.150889254289742]], [-6.595520680493778, -18.88118393939265]], [[[1, 41.82460922922086, 7.847527392202475], [3, 15.711709540417502, -30.34633659912818]], [-6.595520680493778, -18.88118393939265]], [[[0, 40.18454208294434, -6.710999804403755], [3, 23.019508919299156, -10.12110867290604]], [-6.595520680493778, -18.88118393939265]], [[[3, 27.18579315312821, 8.067219022708391]], [-6.595520680493778, -18.88118393939265]], [[], [11.492663265706092, 16.36822198838621]], [[[3, 24.57154567653098, 13.461499960708197]], [11.492663265706092, 16.36822198838621]], [[[0, 31.61945290413707, 0.4272295085799329], [3, 16.97392299158991, -5.274596836133088]], [11.492663265706092, 16.36822198838621]], [[[0, 22.407381798735177, -18.03500068379259], [1, 29.642444125196995, 17.3794951934614], [3, 4.7969752441371645, -21.07505361639969], [4, 14.726069092569372, 32.75999422300078]], [11.492663265706092, 16.36822198838621]], [[[0, 10.705527984670137, -34.589764174299596], [1, 18.58772336795603, -0.20109708164787765], [3, -4.839806195049413, -39.92208742305105], [4, 4.18824810165454, 14.146847823548889]], [11.492663265706092, 16.36822198838621]], [[[1, 5.878492140223764, -19.955352450942357], [4, -7.059505455306587, -0.9740849280550585]], [19.628527845173146, 3.83678180657467]], [[[1, -11.150789592446378, -22.736641053247872], [4, -28.832815721158255, -3.9462962046291388]], [-19.841703647091965, 2.5113335861604362]], [[[1, 8.64427397916182, -20.286336970889053], [4, -5.036917727942285, -6.311739993868336]], [-5.946642674882207, -19.09548221169787]], [[[0, 7.151866679283043, -39.56103232616369], [1, 16.01535401373368, -3.780995345194027], [4, -3.04801331832137, 13.697362774960865]], [-5.946642674882207, -19.09548221169787]], [[[0, 12.872879480504395, -19.707592098123207], [1, 22.236710716903136, 16.331770792606406], [3, -4.841206109583004, -21.24604435851242], [4, 4.27111163223552, 32.25309748614184]], [-5.946642674882207, -19.09548221169787]]] \n\n##  Test Case 1\n##\n##  Estimated Pose(s):\n##      [49.999, 49.999]\n##      [37.971, 33.650]\n##      [26.183, 18.153]\n##      [13.743, 2.114]\n##      [28.095, 16.781]\n##      [42.383, 30.900]\n##      [55.829, 44.494]\n##      [70.855, 59.697]\n##      [85.695, 75.540]\n##      [74.010, 92.431]\n##      [53.543, 96.451]\n##      [34.523, 100.078]\n##      [48.621, 83.951]\n##      [60.195, 68.105]\n##      [73.776, 52.932]\n##      [87.130, 38.536]\n##      [80.301, 20.506]\n##      [72.797, 2.943]\n##      [55.244, 13.253]\n##      [37.414, 22.315]\n##  \n##  Estimated Landmarks:\n##      [82.954, 13.537]\n##      [70.493, 74.139]\n##      [36.738, 61.279]\n##      [18.696, 66.057]\n##      [20.633, 16.873]\n\n\n##  Test Case 2\n##\n##  Estimated Pose(s):\n##      [49.999, 49.999]\n##      [69.180, 45.664]\n##      [87.742, 39.702]\n##      [76.269, 56.309]\n##      [64.316, 72.174]\n##      [52.256, 88.151]\n##      [44.058, 69.399]\n##      [37.001, 49.916]\n##      [30.923, 30.953]\n##      [23.507, 11.417]\n##      [34.179, 27.131]\n##      [44.154, 43.844]\n##      [54.805, 60.919]\n##      [65.697, 78.544]\n##      [77.467, 95.624]\n##      [96.801, 98.819]\n##      [75.956, 99.969]\n##      [70.199, 81.179]\n##      [64.053, 61.721]\n##      [58.106, 42.626]\n##  \n##  Estimated Landmarks:\n##      [76.778, 42.885]\n##      [85.064, 77.436]\n##      [13.546, 95.649]\n##      [59.448, 39.593]\n##      [69.262, 94.238]\n\n\n\n### Uncomment the following three lines for test case 1 ###\n\n#result = slam(test_data1, 20, 5, 2.0, 2.0)\n#print_result(20, 5, result)\n#print result\n\n\n### Uncomment the following three lines for test case 2 ###\n\n#result = slam(test_data2, 20, 5, 2.0, 2.0)\n#print_result(20, 5, result)\n#print result\n\n\n", "type": "Nugget", "id": 401003}, {"nuggetType": "lecture", "name": "Confident Measurements Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "7d28d204-5111-4a43-aa20-1fdd0ce5073b", "name": "cs373_unit6_20_s_Confident-Measurements", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLzJGQw", "youtube_id": "lGdAkihwF4E", "youtube_state": "done", "path": "Course/cs373/Media/419004", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nHere is my answer.\n\n2\n00:00:02,000 --> 00:00:07,000\nIn the omega, I replace all the 1's by 5's so we add 5, -5, -5, and 5 over here.\n\n3\n00:00:07,000 --> 00:00:12,000\nI also multiplied the measurement by 5. If you forget this, you get a very kooky answer.\n\n4\n00:00:12,000 --> 00:00:15,000\nYou have to adjust these things over here in the same proportion\n\n5\n00:00:15,000 --> 00:00:18,000\nas the guys over here with a 5.\n\n6\n00:00:18,000 --> 00:00:21,000\nThat gives you the result that I stated.\n\n", "id": 419004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY08QYDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/402003", "type": "Nugget", "id": 402003}, {"nuggetType": "lecture", "name": "Segmented Cte Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "f830332a-3db9-49f2-8dc9-29a142ec84de", "name": "cs373_unit6_05_s_Segmented-CTE", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": "rejected: Duplicate video", "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLrPFww", "youtube_id": "-GEbH0HsaTM", "youtube_state": "failed", "path": "Course/cs373/Media/387002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nHere is my code.\n\n2\n00:00:02,000 --> 00:00:07,000\nI compute the dx and dy the way I told you by using the spath of index i + 1\n\n3\n00:00:07,000 --> 00:00:10,000\nminus the same at index.\n\n4\n00:00:10,000 --> 00:00:15,000\nMy rx and ry, called drx and dry over here, are the robot estimates \n\n5\n00:00:15,000 --> 00:00:18,000\nas obtained by the filter minus the path.\n\n6\n00:00:18,000 --> 00:00:23,000\nThen I apply the exact same two equations that I gave you for the progress U\n\n7\n00:00:23,000 --> 00:00:27,000\n and the crosstrack error cte as shown over here.\n\n8\n00:00:27,000 --> 00:00:30,000\nOf course, if I advance too much I add 1 to the index.\n\n9\n00:00:30,000 --> 00:00:33,000\nYou could have done this before computing the crosstrack error, \n\n10\n00:00:33,000 --> 00:00:36,000\nbut I chose to do it afterwards.\n\n11\n00:00:36,000 --> 00:00:40,000\nSo I add the missing bracket, and when I run it I get sometimes a collision.\n\n12\n00:00:40,000 --> 00:00:45,000\nThere are two collisions here but I still reach the goal in 140 steps.\n\n13\n00:00:45,000 --> 00:00:49,000\nLet me run it again, and now I reach the goal without collision.\n\n", "id": 387002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYucwYDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/403001", "type": "Nugget", "id": 403001}, {"nuggetType": "lecture", "name": "Fun With Parameters", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "3f056acc-ca63-4622-9350-36d84bbb6295", "name": "cs373_unit6_06_p_Fun-with-Parameters", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGKHUGAw", "youtube_id": "SIGaPuH--F8", "youtube_state": "processing", "path": "Course/cs373/Media/404001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nIn the final question, I'd like to explore something.\n\n2\n00:00:03,000 --> 00:00:07,000\nI don't have a good answer for this, but I'd like you to play with those parameters over  here--\n\n3\n00:00:07,000 --> 00:00:15,000\nthe data weight, the weight smoother, the control parameters p_gain and d_gain.\n\n4\n00:00:15,000 --> 00:00:19,000\nPlay with them, try to find a setting that gives me fewer collisions on average\n\n5\n00:00:19,000 --> 00:00:23,000\n than my current parameters and maybe reaches the goal even faster.\n\n6\n00:00:23,000 --> 00:00:26,000\nI should warn you these are about the best variables I could find,\n\n7\n00:00:26,000 --> 00:00:29,000\nbut I didn't really apply twiddle to this.\n\n8\n00:00:29,000 --> 00:00:34,000\nI did more of an approximate investigation of what a good parameter might be.\n\n9\n00:00:34,000 --> 00:00:40,000\nWhen you apply twiddle and try this, you will find that it's hard to apply \n\n10\n00:00:40,000 --> 00:00:45,000\nbecause your function might never return, so you have to build in the time somehow.\n\n11\n00:00:45,000 --> 00:00:49,000\nIt's fun playing with those to see if you can find a better solution than what I gave you.\n\n12\n00:00:49,000 --> 00:00:53,000\nIf you do so, don't expect the correct answer from me. I didn't implement it myself.\n\n13\n00:00:53,000 --> 00:00:56,000\nBut I want to give you the opportunity to play with those parameters \n\n14\n00:00:56,000 --> 00:01:00,000\nand see what the effects are on this solution.\n\n", "id": 404001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYotQYDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/404002", "type": "Nugget", "id": 404002}, {"nuggetType": "lecture", "name": "Expand Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "bba55717-975d-4591-804a-1080f1e44ef9", "name": "cs373_unit6_18_s_Expand", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLOiGQw", "youtube_id": "RlKr-PQyj4c", "youtube_state": "processing", "path": "Course/cs373/Media/414003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nHere is my answer. Here is the expand command.\n\n2\n00:00:03,000 --> 00:00:07,000\n It takes the omega vector and turns it in to a 4 x 4 \n\n3\n00:00:07,000 --> 00:00:10,000\nand assigns the existing coordinate to 0, 1, and 2\n\n4\n00:00:10,000 --> 00:00:13,000\nand expands to make xi vector of 4 x 1 \n\n5\n00:00:13,000 --> 00:00:17,000\nwhere it uses the previous dimensions of 0, 1, 2, and 0.\n\n6\n00:00:17,000 --> 00:00:20,000\nThat turns out to make a larger matrix and larger vector.\n\n7\n00:00:20,000 --> 00:00:24,000\nNow, I go and add in the measurement constraints.\n\n8\n00:00:24,000 --> 00:00:27,000\nIn all of those, I have to relate to the last coordinate, \n\n9\n00:00:27,000 --> 00:00:33,000\nwhich is my measurement coordinate from the first, the second, and the third pose.\n\n10\n00:00:33,000 --> 00:00:39,000\nAnd I have to subtract -z0, 1, and 2 from the corresponding robot poses \n\n11\n00:00:39,000 --> 00:00:42,000\nand add them all up back to the last pose.\n\n12\n00:00:42,000 --> 00:00:46,000\nIf you implement this correctly, then you get a omega and xi \n\n13\n00:00:46,000 --> 00:00:52,000\nthat, once you implement this solution equation, gets you this solution over here.\n\n", "id": 414003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYo9QYDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/404003", "type": "Nugget", "id": 404003}, {"nuggetType": "quiz", "name": "Is Localization Necessary", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYitwYDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/405002", "type": "Nugget", "id": 405002}, {"nuggetType": "lecture", "name": "Implementing Constraints Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "98f1dfd6-f216-4961-867e-cd58aa85a01b", "name": "cs373_unit6_11_s_Implementing-Constraints", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOq8GAw", "youtube_id": "D3lnErHAehY", "youtube_state": "done", "path": "Course/cs373/Media/401002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nHere is the answer.\n\n2\n00:00:02,000 --> 00:00:05,000\nLet me just re-transform this as is done over here--\n\n3\n00:00:05,000 --> 00:00:11,000\nx1 minus x2 is now +4, and x2 minus x1 is -4.\n\n4\n00:00:11,000 --> 00:00:16,000\nI have to add +1 over here, -1 over there, \n\n5\n00:00:16,000 --> 00:00:20,000\n+1 in this diagonal element over here, and -1 over here.\n\n6\n00:00:20,000 --> 00:00:22,000\nLet me just do this.\n\n7\n00:00:22,000 --> 00:00:26,000\nThese numbers added in transform the first number over here to 2.\n\n8\n00:00:26,000 --> 00:00:29,000\nWe get a -1 for the off-diagonal elements, and then 1 over here.\n\n9\n00:00:29,000 --> 00:00:37,000\nNow we add 4 to the 5, which gives us a 9, and a -4 to the 0 gives -4.\n\n10\n00:00:37,000 --> 00:00:40,000\nThis is where we are now.\n\n", "id": 401002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYi9wYDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/405003", "type": "Nugget", "id": 405003}, {"nuggetType": "lecture", "name": "Adding Landmarks Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "42ebb44b-bde7-48f4-ab26-ebdcd55a17e6", "name": "cs373_unit6_12_s_Adding-Landmarks", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOu_Fww", "youtube_id": "KNSV0Juk2YY", "youtube_state": "done", "path": "Course/cs373/Media/385003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nHere is the answer.\n\n2\n00:00:02,000 --> 00:00:10,000\nObviously x1 minus L0 is -9, because L0 minus x1 is a measurement of +9.\n\n3\n00:00:10,000 --> 00:00:15,000\nLet's add this in. We add 1 over here on the main diagonal--1 and 1.\n\n4\n00:00:15,000 --> 00:00:21,000\nWe subtract 1 off the main diagonal just like before--a simple pattern.\n\n5\n00:00:21,000 --> 00:00:25,000\nThen a 9 over here goes back to 0 but to 9 over here.\n\n6\n00:00:25,000 --> 00:00:28,000\nI hope this makes perfect sense to you.\n\n", "id": 385003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYjNwYDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/405004", "type": "Nugget", "id": 405004}, {"nuggetType": "lecture", "name": "Omega And Xi Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "b7f4e387-9d1c-4d32-8ae6-c2bb8b3e7de5", "name": "cs373_unit6_16_s_Omega-and-Xi", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGKHRGQw", "youtube_id": "TTYOB53GI90", "youtube_state": "done", "path": "Course/cs373/Media/420001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nHere is my result.\n\n2\n00:00:02,000 --> 00:00:09,000\nI construct an omega matrix of size 3 x 3, and initially I set the top left corner to 1.\n\n3\n00:00:09,000 --> 00:00:16,000\nThen the vector xi, I set very first value to init. Everything else is 0.\n\n4\n00:00:16,000 --> 00:00:19,000\nNow come the important additions for the first move and the second move.\n\n5\n00:00:19,000 --> 00:00:22,000\nBoth times I do exactly what I told you before.\n\n6\n00:00:22,000 --> 00:00:28,000\nFor the two involved variables, I add a +1 on the main diagonal and a -1 off-diagonal.\n\n7\n00:00:28,000 --> 00:00:30,000\nSame over here.\n\n8\n00:00:30,000 --> 00:00:38,000\nThen I subtract move and add it 1 row later, and the same with move2 and move2 over here.\n\n9\n00:00:38,000 --> 00:00:41,000\nLook very carefully. This is exactly what I told you about.\n\n10\n00:00:41,000 --> 00:00:44,000\nI'm going to draw this graphically.\n\n11\n00:00:44,000 --> 00:00:49,000\nI begin with a matrix like this. I then add this guy and then this guy.\n\n12\n00:00:49,000 --> 00:00:57,000\nAs far as the vector is concerned, I start with this, add this guy, and finally this guy.\n\n13\n00:00:57,000 --> 00:01:01,000\nThen these two together are being combined down here \n\n14\n00:01:01,000 --> 00:01:05,000\nwhere I compute the inverse of omega multiplied with xi.\n\n15\n00:01:05,000 --> 00:01:10,000\nThat gives me the vector of res, and res is being output using those \"show\" command\n\n16\n00:01:10,000 --> 00:01:14,000\nand returned from the procedure.\n\n", "id": 420001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYjdwYDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/405005", "type": "Nugget", "id": 405005}, {"nuggetType": "lecture", "name": "Wrap Up", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "74178320-fcb8-4e47-a610-d009ba977d6d", "name": "cs373_unit6_07_l_Wrap-Up", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIncGAw", "youtube_id": "mQoSTVegeik", "youtube_state": "done", "path": "Course/cs373/Media/405001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:07,000\nThis finishes the lecture part of CS373, my basic introduction to robotic AI.\n\n2\n00:00:07,000 --> 00:00:09,000\nEven though we haven't done the final exam yet,\n\n3\n00:00:09,000 --> 00:00:12,000\n I want to congratulate you for getting this far.\n\n4\n00:00:12,000 --> 00:00:16,000\nThe fact you got this far means you are really likely a very amazing student.\n\n5\n00:00:16,000 --> 00:00:19,000\nYou put a lot of work into this--I know this.\n\n6\n00:00:19,000 --> 00:00:23,000\nIt took me a lot of work to make those classes, but it probably took you even more to digest them.\n\n7\n00:00:23,000 --> 00:00:26,000\nI hope you learned a lot and had a lot of fun\n\n8\n00:00:26,000 --> 00:00:30,000\nand you feel empowered to program robots better than before.\n\n9\n00:00:30,000 --> 00:00:36,000\nWhat I taught you, I believe, is the very basic set of methods that any roboticist\n\n10\n00:00:36,000 --> 00:00:39,000\nshould know about programming any robot intelligently.\n\n11\n00:00:39,000 --> 00:00:43,000\nAll of those robots have tracking problems, state estimation problems, \n\n12\n00:00:43,000 --> 00:00:48,000\nplanning problems, and control problems--be it a surgical robot, be it a robot maid, \n\n13\n00:00:48,000 --> 00:00:51,000\nor your intelligent future household robot ,\n\n14\n00:00:51,000 --> 00:00:54,000\nor even a flying robot, such as an autonomous plane.\n\n15\n00:00:54,000 --> 00:00:57,000\nI want to thank you for being with us so far. \n\n16\n00:00:57,000 --> 00:01:00,000\nThe rest of this unit contains extra information on SLAM.\n\n17\n00:01:00,000 --> 00:01:04,000\nOtherwise, I'll just see you on the final.\n\n", "id": 405001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY8eMYDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/406001", "type": "Nugget", "id": 406001}, {"nuggetType": "lecture", "name": "Confident Measurements", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "b19c9b60-189d-43ad-9ff4-1c5a57a6b723", "name": "cs373_unit6_20_p_Confident-Measurements", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGI_cGAw", "youtube_id": "BNOuC87M1rI", "youtube_state": "processing", "path": "Course/cs373/Media/405007", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nI'm going to give you a glimpse as to why it works.\n\n2\n00:00:03,000 --> 00:00:09,000\nSuppose we have two robot positions, x0 and x1, and we know they're 10 apart\n\n3\n00:00:09,000 --> 00:00:14,000\nwith some Gaussian noise, and we know the Gaussian noise in exportation\n\n4\n00:00:14,000 --> 00:00:19,000\nmoves the right robot position 10 off the left robot position, but there is some uncertainty.\n\n5\n00:00:19,000 --> 00:00:23,000\nWhen we talked about Kalman filters, we talked about Gaussians,\n\n6\n00:00:23,000 --> 00:00:26,000\nand this uncertainty might look at follows:\n\n7\n00:00:26,000 --> 00:00:32,000\nThere is a constant exponential, and the expression that x1 minus x0\n\n8\n00:00:32,000 --> 00:00:35,000\nshould relax to 10 but might deviate from it.\n\n9\n00:00:35,000 --> 00:00:40,000\nThis Gaussian constraint over here characterizes the constraint between x1 and x0\n\n10\n00:00:40,000 --> 00:00:43,000\nand wishes them to be exactly 10 apart.\n\n11\n00:00:43,000 --> 00:00:47,000\nThe Gaussian is maximum where this equation is fulfilled, \n\n12\n00:00:47,000 --> 00:00:53,000\nbut if the residual is not equal to 0, there is still a probability associated with it.\n\n13\n00:00:53,000 --> 00:00:57,000\nLet's now model a second motion.                  Say x2 is 5 apart.\n\n14\n00:00:57,000 --> 00:01:01,000\nWe now get an even bigger Gaussian relative to the very first one,\n\n15\n00:01:01,000 --> 00:01:04,000\nbut the local constraint over here reads just like the constraint over there.\n\n16\n00:01:04,000 --> 00:01:06,000\nLet me just write it down.\n\n17\n00:01:06,000 --> 00:01:11,000\nX2 minus x1 minus 5 squared over sigma-squared.\n\n18\n00:01:11,000 --> 00:01:17,000\nNow, the total probability of this entire thing over here is the product of these two things.\n\n19\n00:01:17,000 --> 00:01:21,000\nIf we want to maximize the product, we can play a number of interesting tricks.\n\n20\n00:01:21,000 --> 00:01:26,000\nFirst, the constant has no bearing on the maximum, just on the absolute value.\n\n21\n00:01:26,000 --> 00:01:32,000\nIf we want to find the best values for x0 and x1 and so on, we can drop the constant.\n\n22\n00:01:32,000 --> 00:01:35,000\nSecondly, we can drop the exponential \n\n23\n00:01:35,000 --> 00:01:39,000\nif we're willing to turn the product into an addition.\n\n24\n00:01:39,000 --> 00:01:44,000\nRemember, we added things in omega and in sigma. That's why.\n\n25\n00:01:44,000 --> 00:01:46,000\nFinally, we can actually drop the -1/2. \n\n26\n00:01:46,000 --> 00:01:50,000\nIt turns out that also plays no role in the maximization of this expression.\n\n27\n00:01:50,000 --> 00:01:54,000\nIt turns out what you added where constraints just like these, \n\n28\n00:01:54,000 --> 00:01:58,000\nand you even added them at a certain strength of 1 over sigma-squared.\n\n29\n00:01:58,000 --> 00:02:03,000\nIn particular, if you really believe that a constraint is true,\n\n30\n00:02:03,000 --> 00:02:06,000\nyou should add a larger value in this matrix over here,\n\n31\n00:02:06,000 --> 00:02:11,000\nand on the right side you should multiply the right constraint with an even larger value.\n\n32\n00:02:11,000 --> 00:02:16,000\nPut differently, take an expression like this and multiply in the sigma-squared\n\n33\n00:02:16,000 --> 00:02:19,000\nyou get something of this nature over here where 1 over sigma  \n\n34\n00:02:19,000 --> 00:02:21,000\nregulates how confident you are.\n\n35\n00:02:21,000 --> 00:02:24,000\nFor a small sigma, 1 over sigma becomes large.\n\n36\n00:02:24,000 --> 00:02:26,000\nSo 5 is much larger than 1.\n\n37\n00:02:26,000 --> 00:02:28,000\nThat means you have much more confidence.\n\n38\n00:02:28,000 --> 00:02:31,000\nLet's go back to the code and modify the code \n\n39\n00:02:31,000 --> 00:02:34,000\nso the last measurement has a really high confidence.\n\n40\n00:02:34,000 --> 00:02:40,000\nI want you to multiply the last measurement between x2 and our landmark\n\n41\n00:02:40,000 --> 00:02:43,000\nwith a factor of 5 in your code. Hard code it. \n\n42\n00:02:43,000 --> 00:02:47,000\nThat is, go in somewhere over here where the last measurement is being applied\n\n43\n00:02:47,000 --> 00:02:51,000\nand do the trick that I just showed you and see what the outcome is.\n\n44\n00:02:51,000 --> 00:02:59,000\nWhen I do this, I get -3, 2.1, 5.714, and 6.821 as the answers.\n\n45\n00:02:59,000 --> 00:03:03,000\nYou'll see in this final result\n\n46\n00:03:03,000 --> 00:03:09,000\n the final robot position of 5.714 and the landmark position of 8.821\n\n47\n00:03:09,000 --> 00:03:13,000\nare really close to 1 in difference, which was the measurement,\n\n48\n00:03:13,000 --> 00:03:15,000\nbecause you know believe this measurement \n\n49\n00:03:15,000 --> 00:03:18,000\nover-proportionally over other measurements and motions.\n\n", "id": 405007}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY8uMYDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/406002", "type": "Nugget", "id": 406002}, {"nuggetType": "lecture", "name": "Congratulations", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": null, "name": "cs373_unit6_22_p_Congratulations", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOOVGAw", "youtube_id": "os1I4ikNQC4", "youtube_state": "done", "path": "Course/cs373/Media/396003", "transcript": null, "id": 396003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY2usYDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/407002", "type": "Nugget", "id": 407002}, {"nuggetType": "quiz", "name": "Graph Slam", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYwvMYDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/408002", "type": "Nugget", "id": 408002}, {"nuggetType": "program", "name": "Omega And Xi", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYw_MYDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/408003", "suppliedCode": "# -----------\n# User Instructions\n#\n# Write a function, doit, that takes as its input an\n# initial robot position, move1, and move2. This\n# function should compute the Omega and Xi matrices\n# discussed in lecture and should RETURN the mu vector\n# (which is the product of Omega.inverse() and Xi).\n#\n# Please enter your code at the bottom.\n\n\n \nfrom math import *\nimport random\n\n\n#===============================================================\n#\n# SLAM in a rectolinear world (we avoid non-linearities)\n#      \n# \n#===============================================================\n\n\n# ------------------------------------------------\n# \n# this is the matrix class\n# we use it because it makes it easier to collect constraints in GraphSLAM\n# and to calculate solutions (albeit inefficiently)\n# \n\nclass matrix:\n    \n    # implements basic operations of a matrix class\n\n    # ------------\n    #\n    # initialization - can be called with an initial matrix\n    #\n\n    def __init__(self, value = [[]]):\n        self.value = value\n        self.dimx  = len(value)\n        self.dimy  = len(value[0])\n        if value == [[]]:\n            self.dimx = 0\n\n    # ------------\n    #\n    # makes matrix of a certain size and sets each element to zero\n    #\n\n    def zero(self, dimx, dimy = 0):\n        if dimy == 0:\n            dimy = dimx\n        # check if valid dimensions\n        if dimx < 1 or dimy < 1:\n            raise ValueError, \"Invalid size of matrix\"\n        else:\n            self.dimx  = dimx\n            self.dimy  = dimy\n            self.value = [[0.0 for row in range(dimy)] for col in range(dimx)]\n\n    # ------------\n    #\n    # makes matrix of a certain (square) size and turns matrix into identity matrix\n    #\n\n\n    def identity(self, dim):\n        # check if valid dimension\n        if dim < 1:\n            raise ValueError, \"Invalid size of matrix\"\n        else:\n            self.dimx  = dim\n            self.dimy  = dim\n            self.value = [[0.0 for row in range(dim)] for col in range(dim)]\n            for i in range(dim):\n                self.value[i][i] = 1.0\n    # ------------\n    #\n    # prints out values of matrix\n    #\n\n\n    def show(self, txt = ''):\n        for i in range(len(self.value)):\n            print txt + '['+ ', '.join('%.3f'%x for x in self.value[i]) + ']' \n        print ' '\n\n    # ------------\n    #\n    # defines elmement-wise matrix addition. Both matrices must be of equal dimensions\n    #\n\n\n    def __add__(self, other):\n        # check if correct dimensions\n        if self.dimx != other.dimx or self.dimx != other.dimx:\n            raise ValueError, \"Matrices must be of equal dimension to add\"\n        else:\n            # add if correct dimensions\n            res = matrix()\n            res.zero(self.dimx, self.dimy)\n            for i in range(self.dimx):\n                for j in range(self.dimy):\n                    res.value[i][j] = self.value[i][j] + other.value[i][j]\n            return res\n\n    # ------------\n    #\n    # defines elmement-wise matrix subtraction. Both matrices must be of equal dimensions\n    #\n\n    def __sub__(self, other):\n        # check if correct dimensions\n        if self.dimx != other.dimx or self.dimx != other.dimx:\n            raise ValueError, \"Matrices must be of equal dimension to subtract\"\n        else:\n            # subtract if correct dimensions\n            res = matrix()\n            res.zero(self.dimx, self.dimy)\n            for i in range(self.dimx):\n                for j in range(self.dimy):\n                    res.value[i][j] = self.value[i][j] - other.value[i][j]\n            return res\n\n    # ------------\n    #\n    # defines multiplication. Both matrices must be of fitting dimensions\n    #\n\n\n    def __mul__(self, other):\n        # check if correct dimensions\n        if self.dimy != other.dimx:\n            raise ValueError, \"Matrices must be m*n and n*p to multiply\"\n        else:\n            # multiply if correct dimensions\n            res = matrix()\n            res.zero(self.dimx, other.dimy)\n            for i in range(self.dimx):\n                for j in range(other.dimy):\n                    for k in range(self.dimy):\n                        res.value[i][j] += self.value[i][k] * other.value[k][j]\n        return res\n\n\n    # ------------\n    #\n    # returns a matrix transpose\n    #\n\n\n    def transpose(self):\n        # compute transpose\n        res = matrix()\n        res.zero(self.dimy, self.dimx)\n        for i in range(self.dimx):\n            for j in range(self.dimy):\n                res.value[j][i] = self.value[i][j]\n        return res\n\n    # ------------\n    #\n    # creates a new matrix from the existing matrix elements.\n    #\n    # Example:\n    #       l = matrix([[ 1,  2,  3,  4,  5], \n    #                   [ 6,  7,  8,  9, 10], \n    #                   [11, 12, 13, 14, 15]])\n    #\n    #       l.take([0, 2], [0, 2, 3])\n    #\n    # results in:\n    #       \n    #       [[1, 3, 4], \n    #        [11, 13, 14]]\n    #       \n    # \n    # take is used to remove rows and columns from existing matrices\n    # list1/list2 define a sequence of rows/columns that shall be taken\n    # is no list2 is provided, then list2 is set to list1 (good for symmetric matrices)\n    #\n\n    def take(self, list1, list2 = []):\n        if list2 == []:\n            list2 = list1\n        if len(list1) > self.dimx or len(list2) > self.dimy:\n            raise ValueError, \"list invalid in take()\"\n\n        res = matrix()\n        res.zero(len(list1), len(list2))\n        for i in range(len(list1)):\n            for j in range(len(list2)):\n                res.value[i][j] = self.value[list1[i]][list2[j]]\n        return res\n\n    # ------------\n    #\n    # creates a new matrix from the existing matrix elements.\n    #\n    # Example:\n    #       l = matrix([[1, 2, 3],\n    #                  [4, 5, 6]])\n    #\n    #       l.expand(3, 5, [0, 2], [0, 2, 3])\n    #\n    # results in:\n    #\n    #       [[1, 0, 2, 3, 0], \n    #        [0, 0, 0, 0, 0], \n    #        [4, 0, 5, 6, 0]]\n    # \n    # expand is used to introduce new rows and columns into an existing matrix\n    # list1/list2 are the new indexes of row/columns in which the matrix\n    # elements are being mapped. Elements for rows and columns \n    # that are not listed in list1/list2 \n    # will be initialized by 0.0.\n    #\n\n    def expand(self, dimx, dimy, list1, list2 = []):\n        if list2 == []:\n            list2 = list1\n        if len(list1) > self.dimx or len(list2) > self.dimy:\n            raise ValueError, \"list invalid in expand()\"\n\n        res = matrix()\n        res.zero(dimx, dimy)\n        for i in range(len(list1)):\n            for j in range(len(list2)):\n                res.value[list1[i]][list2[j]] = self.value[i][j]\n        return res\n\n    # ------------\n    #\n    # Computes the upper triangular Cholesky factorization of  \n    # a positive definite matrix.\n    # This code is based on http://adorio-research.org/wordpress/?p=4560\n\n    def Cholesky(self, ztol= 1.0e-5):\n        res = matrix()\n        res.zero(self.dimx, self.dimx)\n\n        for i in range(self.dimx):\n            S = sum([(res.value[k][i])**2 for k in range(i)])\n            d = self.value[i][i] - S\n            if abs(d) < ztol:\n                res.value[i][i] = 0.0\n            else: \n                if d < 0.0:\n                    raise ValueError, \"Matrix not positive-definite\"\n                res.value[i][i] = sqrt(d)\n            for j in range(i+1, self.dimx):\n                S = sum([res.value[k][i] * res.value[k][j] for k in range(i)])\n                if abs(S) < ztol:\n                    S = 0.0\n                res.value[i][j] = (self.value[i][j] - S)/res.value[i][i]\n        return res \n \n    # ------------\n    #\n    # Computes inverse of matrix given its Cholesky upper Triangular\n    # decomposition of matrix.\n    # This code is based on http://adorio-research.org/wordpress/?p=4560\n\n    def CholeskyInverse(self):\n        res = matrix()\n        res.zero(self.dimx, self.dimx)\n\n    # Backward step for inverse.\n        for j in reversed(range(self.dimx)):\n            tjj = self.value[j][j]\n            S = sum([self.value[j][k]*res.value[j][k] for k in range(j+1, self.dimx)])\n            res.value[j][j] = 1.0/ tjj**2 - S/ tjj\n            for i in reversed(range(j)):\n                res.value[j][i] = res.value[i][j] = \\\n                    -sum([self.value[i][k]*res.value[k][j] for k in \\\n                              range(i+1,self.dimx)])/self.value[i][i]\n        return res\n    \n    # ------------\n    #\n    # comutes and returns the inverse of a square matrix\n    #\n\n\n    def inverse(self):\n        aux = self.Cholesky()\n        res = aux.CholeskyInverse()\n        return res\n\n    # ------------\n    #\n    # prints matrix (needs work!)\n    #\n\n\n    def __repr__(self):\n        return repr(self.value)\n\n\n\n# ######################################################################\n# ######################################################################\n# ######################################################################\n\n\n\"\"\"\nFor the following example, you would call doit(-3, 5, 3):\n3 robot positions\n  initially: -3\n  moves by 5\n  moves by 3\n\n  \n\nwhich should return a mu of:\n[[-3.0],\n [2.0],\n [5.0]]\n\"\"\"\ndef doit(initial_pos, move1, move2):\n    #\n    #\n    # Add your code here.\n    #\n    #\n    return mu\n\ndoit(-3, 5, 3)\n\n\n", "type": "Nugget", "id": 408003}, {"nuggetType": "quiz", "name": "Implementing Constraints", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYqvsYDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/409002", "type": "Nugget", "id": 409002}, {"nuggetType": "lecture", "name": "Introducing Noise", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "b16443de-230b-4bb7-b8a2-1d19258f00d4", "name": "cs373_unit6_19_q_Introducing-Noise", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPHgGQw", "youtube_id": "9tWrdijRcKA", "youtube_state": "done", "path": "Course/cs373/Media/422001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nHere is a really tricky quiz. Let's look at the robot motion again.\n\n2\n00:00:04,000 --> 00:00:10,000\nSay I change the last measurement from 2 down to 1.\n\n3\n00:00:10,000 --> 00:00:15,000\nYou might remember the robot poses were -3, 2, and 5.\n\n4\n00:00:15,000 --> 00:00:19,000\nBefore that modification the landmark position was 7, but a 1 doesn't really add up.\n\n5\n00:00:19,000 --> 00:00:25,000\nA 1 suggests I might be at a different distance to the 7 than the 5 over here\n\n6\n00:00:25,000 --> 00:00:27,000\nthat comes from this side.\n\n7\n00:00:27,000 --> 00:00:29,000\nHere is my quiz. \n\n8\n00:00:29,000 --> 00:00:34,000\nFirst, I want you to know if I make this modification what is the effect on x2?\n\n9\n00:00:34,000 --> 00:00:37,000\nWill the estimate be smaller than 5?\n\n10\n00:00:37,000 --> 00:00:40,000\nThat is, we shrink the robot path a little bit?\n\n11\n00:00:40,000 --> 00:00:43,000\nWill it be exactly equal to 5 like before?\n\n12\n00:00:43,000 --> 00:00:47,000\nOr will it be larger than 5? Check exactly 1 of the three boxes.\n\n13\n00:00:47,000 --> 00:00:50,000\nI also want to know what is the effect on x0.\n\n14\n00:00:50,000 --> 00:00:55,000\nWill it be smaller than -3, equals -3, or larger than -3.\n\n15\n00:00:55,000 --> 00:00:57,000\nThis is a completely nontrivial quiz.\n\n16\n00:00:57,000 --> 00:00:59,000\nIt takes really some thinking. \n\n17\n00:00:59,000 --> 00:01:03,000\nInvest in thinking, and you can even go back and try it out.\n\n", "id": 422001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY4pIZDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/412002", "type": "Nugget", "id": 412002}, {"nuggetType": "lecture", "name": "Adding Landmarks", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "9c023881-6701-4913-adb9-fb8b6a7a4c14", "name": "cs373_unit6_12_q_Adding-Landmarks", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMugFww", "youtube_id": "esO-DoNEamA", "youtube_state": "done", "path": "Course/cs373/Media/381003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nLet me do another quiz.\n\n2\n00:00:02,000 --> 00:00:07,000\nSuppose that at x1 we see landmark L0 at a distance of 9.\n\n3\n00:00:07,000 --> 00:00:12,000\nThis gives me a relative constraint between x1, right over here,\n\n4\n00:00:12,000 --> 00:00:15,000\nand landmark 0, which is over here.\n\n5\n00:00:15,000 --> 00:00:22,000\nJust like before, these link two things together relatively--the x1's and the L0.\n\n6\n00:00:22,000 --> 00:00:26,000\nNow this doesn't look like a submatrix, but it is. It's spread a little bit apart.\n\n7\n00:00:26,000 --> 00:00:30,000\nBut I want you to modify those 4 values in the matrix and those 2 values in the vector\n\n8\n00:00:30,000 --> 00:00:33,000\nto accommodate that we believe that the occasion \n\n9\n00:00:33,000 --> 00:00:38,000\nof L0 is 9 greater than the robot position x1.\n\n", "id": 381003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYsaIZDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/414001", "type": "Nugget", "id": 414001}, {"nuggetType": "lecture", "name": "Matrix Modification Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "183400a2-4d97-408e-95d5-22cc9b45845e", "name": "cs373_unit6_14_s_Matrix-Modification", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNXHFww", "youtube_id": "0wubvPa5CdU", "youtube_state": "done", "path": "Course/cs373/Media/386005", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nThe answer is our initial constraint would touch this guy over here.\n\n2\n00:00:05,000 --> 00:00:08,000\nThe one to second motion touches these things over here.\n\n3\n00:00:08,000 --> 00:00:13,000\nThe second to third, these guys, and then the landmark observation over here\n\n4\n00:00:13,000 --> 00:00:16,000\nputs something between x0 and the landmark\n\n5\n00:00:16,000 --> 00:00:21,000\n that sits here, here, here, here again, and here.\n\n6\n00:00:21,000 --> 00:00:25,000\nThis observation over here puts something between x2 and the landmark--\n\n7\n00:00:25,000 --> 00:00:28,000\nthese guys over here and the guys over here.\n\n8\n00:00:28,000 --> 00:00:32,000\nThat means we have only the following places that are still 0.\n\n9\n00:00:32,000 --> 00:00:36,000\nThis means there is no direct constraint between x2 and x0.\n\n10\n00:00:36,000 --> 00:00:39,000\nThat is, there is no direct motion information between these guys,\n\n11\n00:00:39,000 --> 00:00:44,000\nand there is no direct constraint between x1 and L, which is this guy is missing over here.\n\n", "id": 386005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYm6oZDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/415003", "type": "Nugget", "id": 415003}, {"nuggetType": "lecture", "name": "Expand", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "feb5847c-76d6-46b7-8b76-18e3b4f252c7", "name": "cs373_unit6_18_p_Expand", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGI7cGAw", "youtube_id": "XPkNjzuRQ48", "youtube_state": "processing", "path": "Course/cs373/Media/405006", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nNow I want you to extend your routine to accommodate the landmark\n\n2\n00:00:05,000 --> 00:00:09,000\nSpecifically, I want you to use a function that I coded for you that is very useful\n\n3\n00:00:09,000 --> 00:00:11,000\nthat is called \"expand.\"\n\n4\n00:00:11,000 --> 00:00:20,000\nYou can run omega.expand, xi.expand to take a 3 x 3 matrix or vector \n\n5\n00:00:20,000 --> 00:00:26,000\nand move it to a 4 x 4 vector that you actually need when you have to include\n\n6\n00:00:26,000 --> 00:00:28,000\nthe landmark itself.\n\n7\n00:00:28,000 --> 00:00:31,000\nGive that a try and see if you can modify the code \n\n8\n00:00:31,000 --> 00:00:35,000\nto now have additional input parameters of measurement 0, 1, and 2.\n\n9\n00:00:35,000 --> 00:00:38,000\nIn particular, here is our new doit routine.\n\n10\n00:00:38,000 --> 00:00:41,000\nIt now has as input parameters my 2 motion commands\n\n11\n00:00:41,000 --> 00:00:44,000\n and the 3 measurement commands for the 3 different poses.\n\n12\n00:00:44,000 --> 00:00:46,000\nHere is the code that you produced before. \n\n13\n00:00:46,000 --> 00:00:49,000\nThat's my version of it where we have the initial 3 x 3 matrix.\n\n14\n00:00:49,000 --> 00:00:53,000\nThen using the expansion command \n\n15\n00:00:53,000 --> 00:00:56,000\nyou can now increase those to a 4 x 4 matrix and a 4 x 1 vector.\n\n16\n00:00:56,000 --> 00:01:04,000\nWhen you run it what comes out is this result over here-- -3, 2, 5, 7.\n\n17\n00:01:04,000 --> 00:01:09,000\nI want you to do this where -3 and 2 and 5 is the robot path, \n\n18\n00:01:09,000 --> 00:01:13,000\nand 7, as before, is the landmark location.\n\n19\n00:01:13,000 --> 00:01:19,000\nPlease code this and realize that I can modify the input to doit just fine,\n\n20\n00:01:19,000 --> 00:01:22,000\nand your code should not just produce this one vector, \n\n21\n00:01:22,000 --> 00:01:25,000\nbut it should implement the right math.\n\n", "id": 405006}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYhLIZDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/416004", "type": "Nugget", "id": 416004}, {"nuggetType": "lecture", "name": "Slam Quiz Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "1239da9d-5f96-4e9e-b8aa-c52044b70d94", "name": "cs373_unit6_13_s_SLAM-Quiz", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIGyGQw", "youtube_id": "drk0PFtooec", "youtube_state": "done", "path": "Course/cs373/Media/416001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nThe answer is obviously they are all about local constraints.\n\n2\n00:00:03,000 --> 00:00:05,000\nThat's the entire point.\n\n3\n00:00:05,000 --> 00:00:09,000\nEvery motions ties together two locations,\n\n4\n00:00:09,000 --> 00:00:12,000\nand every measurement ties together one location with a landmark.\n\n5\n00:00:12,000 --> 00:00:16,000\nMultiplication is just the wrong thing here, so they're all about additions.\n\n6\n00:00:16,000 --> 00:00:20,000\nThese are the correct things to check.\n\n", "id": 416001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY6bkZDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/417001", "type": "Nugget", "id": 417001}, {"nuggetType": "lecture", "name": "Untouched Fields", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "ef51f5ef-d015-476e-b197-ed7b009759f3", "name": "cs373_unit6_15_q_Untouched-Fields", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNLEGAw", "youtube_id": "azLf8SElM-M", "youtube_state": "done", "path": "Course/cs373/Media/402002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nLet me do the same quiz again.\n\n2\n00:00:02,000 --> 00:00:04,000\nNow we have two landmarks, \n\n3\n00:00:04,000 --> 00:00:08,000\nand the picture I'm giving you is a robot with three total positions.\n\n4\n00:00:08,000 --> 00:00:11,000\nThere's a landmark here and a landmark here,\n\n5\n00:00:11,000 --> 00:00:14,000\nand say this landmark is being seen in these two positions,\n\n6\n00:00:14,000 --> 00:00:19,000\nand this landmark these two poses, but landmark L1 is not seen at x2,\n\n7\n00:00:19,000 --> 00:00:22,000\nand landmark L2 is not seen at x0.\n\n8\n00:00:22,000 --> 00:00:26,000\nOf the 30 fields over here how many of them will never be touched?\n\n9\n00:00:26,000 --> 00:00:29,000\nPlease put your answer over here.\n\n", "id": 402002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYuckZDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/419001", "type": "Nugget", "id": 419001}, {"nuggetType": "program", "name": "Congratulations", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYo9EZDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/420003", "suppliedCode": "# Congratulations! You have completed all of the content in\n# the course. Amazing work. \n#\n# If you have any message for us, feel free to write a print\n# statement below and submit it. \n#\n# Good luck with the homework and the final exam!\n\n\n", "type": "Nugget", "id": 420003}, {"nuggetType": "quiz", "name": "Introducing Noise", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY2ugZDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/423002", "type": "Nugget", "id": 423002}, {"nuggetType": "lecture", "name": "Landmark Position", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "c5e842b9-c009-43f6-b28b-a51b404866c5", "name": "cs373_unit6_17_q_Landmark-Position", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMmXGgw", "youtube_id": "crngGVW3DLs", "youtube_state": "uploading", "path": "Course/cs373/Media/429001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nNow let's add the landmark.\n\n2\n00:00:02,000 --> 00:00:06,000\nLet's say the landmark is being seen at all time steps.\n\n3\n00:00:06,000 --> 00:00:11,000\nLet's say in the very first time the difference between position and landmark is 10.\n\n4\n00:00:11,000 --> 00:00:13,000\nObviously this is a 1-dimensional example\n\n5\n00:00:13,000 --> 00:00:16,000\n and not 2-dimensional as the picture suggests over here.\n\n6\n00:00:16,000 --> 00:00:20,000\nThen it's 5, and then it's 2.\n\n7\n00:00:20,000 --> 00:00:22,000\nNow, what's the landmark position?\n\n8\n00:00:22,000 --> 00:00:24,000\nYou can work this out in your head.                 It's a single number.\n\n9\n00:00:24,000 --> 00:00:27,000\nPlease enter it here.\n\n", "id": 429001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYsZ8aDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/430001", "type": "Nugget", "id": 430001}, {"nuggetType": "quiz", "name": "Landmark Position", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYga8aDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/432001", "type": "Nugget", "id": 432001}, {"nuggetType": "lecture", "name": "Landmark Position Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "a1e0a9fe-5df9-4874-90d7-885912f0fa7d", "name": "cs373_unit6_17_s_Landmark-Position", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOm2Ggw", "youtube_id": "yC986WXuS1E", "youtube_state": "processing", "path": "Course/cs373/Media/433001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nThe answer is 7.\n\n2\n00:00:02,000 --> 00:00:05,000\nObviously, -3 plus 10 is 7, \n\n3\n00:00:05,000 --> 00:00:08,000\n-3 plus 5 plus 5 is 7, \n\n4\n00:00:08,000 --> 00:00:13,000\n-3 plus 5 plus 3 plus 2 is 7.\n\n5\n00:00:13,000 --> 00:00:17,000\nAll of those work out to be 7. We have a fully consistent situation.\n\n6\n00:00:17,000 --> 00:00:20,000\nThe landmark seems to be consistently seen. There seems to be no noise whatsoever.\n\n", "id": 433001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQY0b4aDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/434001", "type": "Nugget", "id": 434001}, {"nuggetType": "lecture", "name": "Congratulations", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFww", "media": {"dotsub_id": "90f6ebc7-89a6-4d68-9aee-0cff5770e0c2", "name": "cs373_unit6_22_l_Congratulations", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLnGGgw", "youtube_id": "os1I4ikNQC4", "youtube_state": "processing", "path": "Course/cs373/Media/435001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nSo congratulations. \n\n2\n00:00:02,000 --> 00:00:04,000\nI'm impressed you made it so far. \n\n3\n00:00:04,000 --> 00:00:06,000\nYou really learned a lot about SLAM. \n\n4\n00:00:06,000 --> 00:00:09,000\nYou learned about the MAP, which is a sequence of coordinates,\n\n5\n00:00:09,000 --> 00:00:11,000\nand you learned about Localization--\n\n6\n00:00:11,000 --> 00:00:13,000\nand \"L\" and \"M\" are really important letters here. \n\n7\n00:00:13,000 --> 00:00:17,000\nThe Simultaneous and the And are not that essential. \n\n8\n00:00:17,000 --> 00:00:21,000\nWe put all of those into a big Matrix, Omega, and a vector, Xi.\n\n9\n00:00:21,000 --> 00:00:24,000\nAnd every time, we got some relative information between poses.\n\n10\n00:00:24,000 --> 00:00:26,000\nWe carved out some stuff in here\n\n11\n00:00:26,000 --> 00:00:28,000\nor we measured something.\n\n12\n00:00:28,000 --> 00:00:32,000\nWe added some stuff in here, and over here. \n\n13\n00:00:32,000 --> 00:00:34,000\nThese were all just additions \n\n14\n00:00:34,000 --> 00:00:36,000\nand, as we now understand, \n\n15\n00:00:36,000 --> 00:00:39,000\nthose implement the straightforward constraints\n\n16\n00:00:39,000 --> 00:00:41,000\nthat come from the motion--the measurements. \n\n17\n00:00:41,000 --> 00:00:44,000\nAnd then the key thing was that you could solve,\n\n18\n00:00:44,000 --> 00:00:46,000\nwith a simple piece of equation, \n\n19\n00:00:46,000 --> 00:00:48,000\nfor the Path and the Map at the same time. \n\n20\n00:00:48,000 --> 00:00:51,000\nThat was quite an amazing achievement. \n\n21\n00:00:51,000 --> 00:00:53,000\nSo you've implemented this, \n\n22\n00:00:53,000 --> 00:00:55,000\nyou've implemented your first SLAM algorithm.\n\n23\n00:00:55,000 --> 00:00:58,000\nThat was way beyond anything I ever taught \n\n24\n00:00:58,000 --> 00:01:01,000\nstudents at Stanford in a single class.\n\n25\n00:01:01,000 --> 00:01:03,000\nCongratulations for doing this. \n\n26\n00:01:03,000 --> 00:01:06,000\nSo this is the last, and final, class.\n\n27\n00:01:06,000 --> 00:01:10,000\nI'm going to output a challenge to everybody, briefly, \n\n28\n00:01:10,000 --> 00:01:12,000\nwhere you can write a Robot program \n\n29\n00:01:12,000 --> 00:01:15,000\nthat puts most of the stuff we talked about together. \n\n30\n00:01:15,000 --> 00:01:19,000\nBut, for now, congratulations for making it so far. \n\n31\n00:01:19,000 --> 00:01:21,000\nThat is really impressive. \n\n", "id": 435001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GNHHFwwLEgZOdWdnZXQYoc4aDA", "path": "Course/cs373/CourseRev/feb2012/Unit/386001/Nugget/436001", "type": "Nugget", "id": 436001}]}, {"name": "Homework 6", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": true, "closedAt": "04/03/2012 00:00", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHdGgwLEgZOdWdnZXQY2uUaDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHdGgwLEgZOdWdnZXQYqfUaDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHdGgwLEgZOdWdnZXQYy5caDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHdGgwLEgZOdWdnZXQY4YwbDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHdGgwLEgZOdWdnZXQYyZQbDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHdGgwLEgZOdWdnZXQYspwbDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHdGgwLEgZOdWdnZXQY2-UaDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHdGgwLEgZOdWdnZXQY0bsbDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHdGgwLEgZOdWdnZXQY4YAfDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHdGgw", "path": "Course/cs373/CourseRev/feb2012/Unit/438001", "open": false, "id": 438001, "nuggets": [{"nuggetType": "lecture", "name": "Matrix Fill In Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHdGgw", "media": {"dotsub_id": null, "name": "cs373_hw6_00_s_Matrix-Fill-In", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJH9Ggw", "youtube_id": "btjknDEitLY", "youtube_state": "processing", "path": "Course/cs373/Media/442001", "transcript": null, "id": 442001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHdGgwLEgZOdWdnZXQYy5caDA", "path": "Course/cs373/CourseRev/feb2012/Unit/438001/Nugget/429003", "type": "Nugget", "id": 429003}, {"nuggetType": "lecture", "name": "Matrix Fill In", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHdGgw", "media": {"dotsub_id": null, "name": "cs373_hw6_00_q_Matrix-Fill-In", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNnlGgw", "youtube_id": "zE3v1jAoYOM", "youtube_state": "done", "path": "Course/cs373/Media/439001", "transcript": null, "id": 439001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHdGgwLEgZOdWdnZXQY2uUaDA", "path": "Course/cs373/CourseRev/feb2012/Unit/438001/Nugget/439002", "type": "Nugget", "id": 439002}, {"nuggetType": "lecture", "name": "Online Slam", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHdGgw", "media": {"dotsub_id": null, "name": "cs373_hw6_02_p_Online-Slam", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIGsGww", "youtube_id": "jaeNlxhQL1I", "youtube_state": "done", "path": "Course/cs373/Media/448001", "transcript": null, "id": 448001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHdGgwLEgZOdWdnZXQY2-UaDA", "path": "Course/cs373/CourseRev/feb2012/Unit/438001/Nugget/439003", "type": "Nugget", "id": 439003}, {"nuggetType": "quiz", "name": "Matrix Fill In", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHdGgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHdGgwLEgZOdWdnZXQYqfUaDA", "path": "Course/cs373/CourseRev/feb2012/Unit/438001/Nugget/441001", "type": "Nugget", "id": 441001}, {"nuggetType": "lecture", "name": "Matrix Properties", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHdGgw", "media": {"dotsub_id": null, "name": "cs373_hw6_01_q_Matrix-Properties", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIrWGgw", "youtube_id": "D0Qk9pyy33w", "youtube_state": "processing", "path": "Course/cs373/Media/437002", "transcript": null, "id": 437002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHdGgwLEgZOdWdnZXQY4YwbDA", "path": "Course/cs373/CourseRev/feb2012/Unit/438001/Nugget/444001", "type": "Nugget", "id": 444001}, {"nuggetType": "quiz", "name": "Matrix Properties", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHdGgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHdGgwLEgZOdWdnZXQYyZQbDA", "path": "Course/cs373/CourseRev/feb2012/Unit/438001/Nugget/445001", "type": "Nugget", "id": 445001}, {"nuggetType": "lecture", "name": "Matrix Properties Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHdGgw", "media": {"dotsub_id": null, "name": "cs373_hw6_01_s_Matrix-Properties", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLGcGww", "youtube_id": "kQZFTWGIlmc", "youtube_state": "done", "path": "Course/cs373/Media/446001", "transcript": null, "id": 446001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHdGgwLEgZOdWdnZXQYspwbDA", "path": "Course/cs373/CourseRev/feb2012/Unit/438001/Nugget/446002", "type": "Nugget", "id": 446002}, {"nuggetType": "program", "name": "Online Slam", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHdGgw", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHdGgwLEgZOdWdnZXQY0bsbDA", "path": "Course/cs373/CourseRev/feb2012/Unit/438001/Nugget/450001", "suppliedCode": "# ------------\n# User Instructions\n#\n# In this problem you will implement a more manageable\n# version of graph SLAM in 2 dimensions. \n#\n# Define a function, online_slam, that takes 5 inputs:\n# data, N, num_landmarks, motion_noise, and\n# measurement_noise--just as was done in the last \n# programming assignment of unit 6. This function\n# must return TWO matrices, mu and the final Omega.\n#\n# Just as with the quiz, your matrices should have x\n# and y interlaced, so if there were two poses and 2\n# landmarks, mu would look like:\n#\n# mu = matrix([[Px0],\n#              [Py0],\n#              [Px1],\n#              [Py1],\n#              [Lx0],\n#              [Ly0],\n#              [Lx1],\n#              [Ly1]])\n#\n# Enter your code at line 566.\n\n# -----------\n# Testing\n#\n# You have two methods for testing your code.\n#\n# 1) You can make your own data with the make_data\n#    function. Then you can run it through the\n#    provided slam routine and check to see that your\n#    online_slam function gives the same estimated\n#    final robot pose and landmark positions.\n# 2) You can use the solution_check function at the\n#    bottom of this document to check your code\n#    for the two provided test cases. The grading\n#    will be almost identical to this function, so\n#    if you pass both test cases, you should be\n#    marked correct on the homework.\n\nfrom math import *\nimport random\n\n\n# ------------------------------------------------\n# \n# this is the matrix class\n# we use it because it makes it easier to collect constraints in GraphSLAM\n# and to calculate solutions (albeit inefficiently)\n# \n\nclass matrix:\n    \n    # implements basic operations of a matrix class\n\n    # ------------\n    #\n    # initialization - can be called with an initial matrix\n    #\n\n    def __init__(self, value = [[]]):\n        self.value = value\n        self.dimx  = len(value)\n        self.dimy  = len(value[0])\n        if value == [[]]:\n            self.dimx = 0\n            \n    # -----------\n    #\n    # defines matrix equality - returns true if corresponding elements\n    #   in two matrices are within epsilon of each other.\n    #\n    \n    def __eq__(self, other):\n        epsilon = 0.01\n        if self.dimx != other.dimx or self.dimy != other.dimy:\n            return False\n        for i in range(self.dimx):\n            for j in range(self.dimy):\n                if abs(self.value[i][j] - other.value[i][j]) > epsilon:\n                    return False\n        return True\n    \n    def __ne__(self, other):\n        return not (self == other)\n\n    # ------------\n    #\n    # makes matrix of a certain size and sets each element to zero\n    #\n\n    def zero(self, dimx, dimy):\n        if dimy == 0:\n            dimy = dimx\n        # check if valid dimensions\n        if dimx < 1 or dimy < 1:\n            raise ValueError, \"Invalid size of matrix\"\n        else:\n            self.dimx  = dimx\n            self.dimy  = dimy\n            self.value = [[0.0 for row in range(dimy)] for col in range(dimx)]\n\n    # ------------\n    #\n    # makes matrix of a certain (square) size and turns matrix into identity matrix\n    #\n\n    def identity(self, dim):\n        # check if valid dimension\n        if dim < 1:\n            raise ValueError, \"Invalid size of matrix\"\n        else:\n            self.dimx  = dim\n            self.dimy  = dim\n            self.value = [[0.0 for row in range(dim)] for col in range(dim)]\n            for i in range(dim):\n                self.value[i][i] = 1.0\n                \n    # ------------\n    #\n    # prints out values of matrix\n    #\n\n    def show(self, txt = ''):\n        for i in range(len(self.value)):\n            print txt + '['+ ', '.join('%.3f'%x for x in self.value[i]) + ']' \n        print ' '\n\n    # ------------\n    #\n    # defines elmement-wise matrix addition. Both matrices must be of equal dimensions\n    #\n\n    def __add__(self, other):\n        # check if correct dimensions\n        if self.dimx != other.dimx or self.dimx != other.dimx:\n            raise ValueError, \"Matrices must be of equal dimension to add\"\n        else:\n            # add if correct dimensions\n            res = matrix()\n            res.zero(self.dimx, self.dimy)\n            for i in range(self.dimx):\n                for j in range(self.dimy):\n                    res.value[i][j] = self.value[i][j] + other.value[i][j]\n            return res\n\n    # ------------\n    #\n    # defines elmement-wise matrix subtraction. Both matrices must be of equal dimensions\n    #\n\n    def __sub__(self, other):\n        # check if correct dimensions\n        if self.dimx != other.dimx or self.dimx != other.dimx:\n            raise ValueError, \"Matrices must be of equal dimension to subtract\"\n        else:\n            # subtract if correct dimensions\n            res = matrix()\n            res.zero(self.dimx, self.dimy)\n            for i in range(self.dimx):\n                for j in range(self.dimy):\n                    res.value[i][j] = self.value[i][j] - other.value[i][j]\n            return res\n\n    # ------------\n    #\n    # defines multiplication. Both matrices must be of fitting dimensions\n    #\n\n    def __mul__(self, other):\n        # check if correct dimensions\n        if self.dimy != other.dimx:\n            raise ValueError, \"Matrices must be m*n and n*p to multiply\"\n        else:\n            # multiply if correct dimensions\n            res = matrix()\n            res.zero(self.dimx, other.dimy)\n            for i in range(self.dimx):\n                for j in range(other.dimy):\n                    for k in range(self.dimy):\n                        res.value[i][j] += self.value[i][k] * other.value[k][j]\n        return res\n\n    # ------------\n    #\n    # returns a matrix transpose\n    #\n\n    def transpose(self):\n        # compute transpose\n        res = matrix()\n        res.zero(self.dimy, self.dimx)\n        for i in range(self.dimx):\n            for j in range(self.dimy):\n                res.value[j][i] = self.value[i][j]\n        return res\n\n    # ------------\n    #\n    # creates a new matrix from the existing matrix elements.\n    #\n    # Example:\n    #       l = matrix([[ 1,  2,  3,  4,  5], \n    #                   [ 6,  7,  8,  9, 10], \n    #                   [11, 12, 13, 14, 15]])\n    #\n    #       l.take([0, 2], [0, 2, 3])\n    #\n    # results in:\n    #       \n    #       [[1, 3, 4], \n    #        [11, 13, 14]]\n    #       \n    # \n    # take is used to remove rows and columns from existing matrices\n    # list1/list2 define a sequence of rows/columns that shall be taken\n    # is no list2 is provided, then list2 is set to list1 (good for symmetric matrices)\n    #\n\n    def take(self, list1, list2 = []):\n        if list2 == []:\n            list2 = list1\n        if len(list1) > self.dimx or len(list2) > self.dimy:\n            raise ValueError, \"list invalid in take()\"\n\n        res = matrix()\n        res.zero(len(list1), len(list2))\n        for i in range(len(list1)):\n            for j in range(len(list2)):\n                res.value[i][j] = self.value[list1[i]][list2[j]]\n        return res\n\n    # ------------\n    #\n    # creates a new matrix from the existing matrix elements.\n    #\n    # Example:\n    #       l = matrix([[1, 2, 3],\n    #                  [4, 5, 6]])\n    #\n    #       l.expand(3, 5, [0, 2], [0, 2, 3])\n    #\n    # results in:\n    #\n    #       [[1, 0, 2, 3, 0], \n    #        [0, 0, 0, 0, 0], \n    #        [4, 0, 5, 6, 0]]\n    # \n    # expand is used to introduce new rows and columns into an existing matrix\n    # list1/list2 are the new indexes of row/columns in which the matrix\n    # elements are being mapped. Elements for rows and columns \n    # that are not listed in list1/list2 \n    # will be initialized by 0.0.\n    #\n\n    def expand(self, dimx, dimy, list1, list2 = []):\n        if list2 == []:\n            list2 = list1\n        if len(list1) > self.dimx or len(list2) > self.dimy:\n            raise ValueError, \"list invalid in expand()\"\n\n        res = matrix()\n        res.zero(dimx, dimy)\n        for i in range(len(list1)):\n            for j in range(len(list2)):\n                res.value[list1[i]][list2[j]] = self.value[i][j]\n        return res\n\n    # ------------\n    #\n    # Computes the upper triangular Cholesky factorization of  \n    # a positive definite matrix.\n    # This code is based on http://adorio-research.org/wordpress/?p=4560\n\n    def Cholesky(self, ztol= 1.0e-5):\n\n        res = matrix()\n        res.zero(self.dimx, self.dimx)\n\n        for i in range(self.dimx):\n            S = sum([(res.value[k][i])**2 for k in range(i)])\n            d = self.value[i][i] - S\n            if abs(d) < ztol:\n                res.value[i][i] = 0.0\n            else: \n                if d < 0.0:\n                    raise ValueError, \"Matrix not positive-definite\"\n                res.value[i][i] = sqrt(d)\n            for j in range(i+1, self.dimx):\n                S = sum([res.value[k][i] * res.value[k][j] for k in range(i)])\n                if abs(S) < ztol:\n                    S = 0.0\n                res.value[i][j] = (self.value[i][j] - S)/res.value[i][i]\n        return res \n \n    # ------------\n    #\n    # Computes inverse of matrix given its Cholesky upper Triangular\n    # decomposition of matrix.\n    # This code is based on http://adorio-research.org/wordpress/?p=4560\n\n    def CholeskyInverse(self):\n    # Computes inverse of matrix given its Cholesky upper Triangular\n    # decomposition of matrix.\n        # This code is based on http://adorio-research.org/wordpress/?p=4560\n\n        res = matrix()\n        res.zero(self.dimx, self.dimx)\n\n    # Backward step for inverse.\n        for j in reversed(range(self.dimx)):\n            tjj = self.value[j][j]\n            S = sum([self.value[j][k]*res.value[j][k] for k in range(j+1, self.dimx)])\n            res.value[j][j] = 1.0/ tjj**2 - S/ tjj\n            for i in reversed(range(j)):\n                res.value[j][i] = res.value[i][j] = \\\n                    -sum([self.value[i][k]*res.value[k][j] for k in \\\n                              range(i+1,self.dimx)])/self.value[i][i]\n        return res\n    \n    # ------------\n    #\n    # comutes and returns the inverse of a square matrix\n    #\n\n    def inverse(self):\n        aux = self.Cholesky()\n        res = aux.CholeskyInverse()\n        return res\n\n    # ------------\n    #\n    # prints matrix (needs work!)\n    #\n\n    def __repr__(self):\n        return repr(self.value)\n\n# ######################################################################\n\n# ------------------------------------------------\n# \n# this is the robot class\n# \n# our robot lives in x-y space, and its motion is\n# pointed in a random direction. It moves on a straight line\n# until is comes close to a wall at which point it turns\n# away from the wall and continues to move.\n#\n# For measurements, it simply senses the x- and y-distance\n# to landmarks. This is different from range and bearing as \n# commonly studies in the literature, but this makes it much\n# easier to implement the essentials of SLAM without\n# cluttered math\n#\n\nclass robot:\n\n    # --------\n    # init: \n    #   creates robot and initializes location to 0, 0\n    #\n\n    def __init__(self, world_size = 100.0, measurement_range = 30.0,\n                 motion_noise = 1.0, measurement_noise = 1.0):\n        self.measurement_noise = 0.0\n        self.world_size = world_size\n        self.measurement_range = measurement_range\n        self.x = world_size / 2.0\n        self.y = world_size / 2.0\n        self.motion_noise = motion_noise\n        self.measurement_noise = measurement_noise\n        self.landmarks = []\n        self.num_landmarks = 0\n\n\n    def rand(self):\n        return random.random() * 2.0 - 1.0\n\n    # --------\n    #\n    # make random landmarks located in the world\n    #\n\n    def make_landmarks(self, num_landmarks):\n        self.landmarks = []\n        for i in range(num_landmarks):\n            self.landmarks.append([round(random.random() * self.world_size),\n                                   round(random.random() * self.world_size)])\n        self.num_landmarks = num_landmarks\n\n    # --------\n    #\n    # move: attempts to move robot by dx, dy. If outside world\n    #       boundary, then the move does nothing and instead returns failure\n    #\n\n    def move(self, dx, dy):\n\n        x = self.x + dx + self.rand() * self.motion_noise\n        y = self.y + dy + self.rand() * self.motion_noise\n\n        if x < 0.0 or x > self.world_size or y < 0.0 or y > self.world_size:\n            return False\n        else:\n            self.x = x\n            self.y = y\n            return True\n    \n    # --------\n    #\n    # sense: returns x- and y- distances to landmarks within visibility range\n    #        because not all landmarks may be in this range, the list of measurements\n    #        is of variable length. Set measurement_range to -1 if you want all\n    #        landmarks to be visible at all times\n    #\n\n    def sense(self):\n        Z = []\n        for i in range(self.num_landmarks):\n            dx = self.landmarks[i][0] - self.x + self.rand() * self.measurement_noise\n            dy = self.landmarks[i][1] - self.y + self.rand() * self.measurement_noise    \n            if self.measurement_range < 0.0 or abs(dx) + abs(dy) <= self.measurement_range:\n                Z.append([i, dx, dy])\n        return Z\n\n    # --------\n    #\n    # print robot location\n    #\n\n    def __repr__(self):\n        return 'Robot: [x=%.5f y=%.5f]'  % (self.x, self.y)\n\n\n# ######################################################################\n\n# --------\n# this routine makes the robot data\n#\n\ndef make_data(N, num_landmarks, world_size, measurement_range, motion_noise, \n              measurement_noise, distance):\n\n    complete = False\n\n    while not complete:\n\n        data = []\n\n        # make robot and landmarks\n        r = robot(world_size, measurement_range, motion_noise, measurement_noise)\n        r.make_landmarks(num_landmarks)\n        seen = [False for row in range(num_landmarks)]\n    \n        # guess an initial motion\n        orientation = random.random() * 2.0 * pi\n        dx = cos(orientation) * distance\n        dy = sin(orientation) * distance\n    \n        for k in range(N-1):\n    \n            # sense\n            Z = r.sense()\n\n            # check off all landmarks that were observed \n            for i in range(len(Z)):\n                seen[Z[i][0]] = True\n    \n            # move\n            while not r.move(dx, dy):\n                # if we'd be leaving the robot world, pick instead a new direction\n                orientation = random.random() * 2.0 * pi\n                dx = cos(orientation) * distance\n                dy = sin(orientation) * distance\n\n            # memorize data\n            data.append([Z, [dx, dy]])\n\n        # we are done when all landmarks were observed; otherwise re-run\n        complete = (sum(seen) == num_landmarks)\n\n    print ' '\n    print 'Landmarks: ', r.landmarks\n    print r\n\n    return data\n    \n# ######################################################################\n\n# --------------------------------\n#\n# full_slam - retains entire path and all landmarks\n#             Feel free to use this for comparison.\n#\n\ndef slam(data, N, num_landmarks, motion_noise, measurement_noise):\n\n    # Set the dimension of the filter\n    dim = 2 * (N + num_landmarks) \n\n    # make the constraint information matrix and vector\n    Omega = matrix()\n    Omega.zero(dim, dim)\n    Omega.value[0][0] = 1.0\n    Omega.value[1][1] = 1.0\n\n    Xi = matrix()\n    Xi.zero(dim, 1)\n    Xi.value[0][0] = world_size / 2.0\n    Xi.value[1][0] = world_size / 2.0\n    \n    # process the data\n\n    for k in range(len(data)):\n\n        # n is the index of the robot pose in the matrix/vector\n        n = k * 2 \n    \n        measurement = data[k][0]\n        motion      = data[k][1]\n    \n        # integrate the measurements\n        for i in range(len(measurement)):\n    \n            # m is the index of the landmark coordinate in the matrix/vector\n            m = 2 * (N + measurement[i][0])\n    \n            # update the information maxtrix/vector based on the measurement\n            for b in range(2):\n                Omega.value[n+b][n+b] +=  1.0 / measurement_noise\n                Omega.value[m+b][m+b] +=  1.0 / measurement_noise\n                Omega.value[n+b][m+b] += -1.0 / measurement_noise\n                Omega.value[m+b][n+b] += -1.0 / measurement_noise\n                Xi.value[n+b][0]      += -measurement[i][1+b] / measurement_noise\n                Xi.value[m+b][0]      +=  measurement[i][1+b] / measurement_noise\n\n\n        # update the information maxtrix/vector based on the robot motion\n        for b in range(4):\n            Omega.value[n+b][n+b] +=  1.0 / motion_noise\n        for b in range(2):\n            Omega.value[n+b  ][n+b+2] += -1.0 / motion_noise\n            Omega.value[n+b+2][n+b  ] += -1.0 / motion_noise\n            Xi.value[n+b  ][0]        += -motion[b] / motion_noise\n            Xi.value[n+b+2][0]        +=  motion[b] / motion_noise\n\n    # compute best estimate\n    mu = Omega.inverse() * Xi\n\n    # return the result\n    return mu\n\n# --------------------------------\n#\n# online_slam - retains all landmarks but only most recent robot pose\n#\n\ndef online_slam(data, N, num_landmarks, motion_noise, measurement_noise):\n    #\n    #\n    # Enter your code here!\n    #\n    #\n    return mu, Omega # make sure you return both of these matrices to be marked correct.\n\n# --------------------------------\n#\n# print the result of SLAM, the robot pose(s) and the landmarks\n#\n\ndef print_result(N, num_landmarks, result):\n    print\n    print 'Estimated Pose(s):'\n    for i in range(N):\n        print '    ['+ ', '.join('%.3f'%x for x in result.value[2*i]) + ', ' \\\n            + ', '.join('%.3f'%x for x in result.value[2*i+1]) +']'\n    print \n    print 'Estimated Landmarks:'\n    for i in range(num_landmarks):\n        print '    ['+ ', '.join('%.3f'%x for x in result.value[2*(N+i)]) + ', ' \\\n            + ', '.join('%.3f'%x for x in result.value[2*(N+i)+1]) +']'\n        \n# ------------------------------------------------------------------------\n#\n# Main routines\n#\n\nnum_landmarks      = 5        # number of landmarks\nN                  = 20       # time steps\nworld_size         = 100.0    # size of world\nmeasurement_range  = 50.0     # range at which we can sense landmarks\nmotion_noise       = 2.0      # noise in robot motion\nmeasurement_noise  = 2.0      # noise in the measurements\ndistance           = 20.0     # distance by which robot (intends to) move each iteratation \n\n\n# Uncomment the following three lines to run the full slam routine.\n\n#data = make_data(N, num_landmarks, world_size, measurement_range, motion_noise, measurement_noise, distance)\n#result = slam(data, N, num_landmarks, motion_noise, measurement_noise)\n#print_result(N, num_landmarks, result)\n\n# Uncomment the following three lines to run the online_slam routine.\n\n#data = make_data(N, num_landmarks, world_size, measurement_range, motion_noise, measurement_noise, distance)\n#result = online_slam(data, N, num_landmarks, motion_noise, measurement_noise)\n#print_result(1, num_landmarks, result[0])\n\n##########################################################\n\n# ------------\n# TESTING\n#\n# Uncomment one of the test cases below to check that your\n# online_slam function works as expected.\n\ndef solution_check(result, answer_mu, answer_omega):\n\n    if len(result) != 2:\n        print \"Your function must return TWO matrices, mu and Omega\"\n        return False\n    \n    user_mu = result[0]\n    user_omega = result[1]\n    \n    if user_mu.dimx == answer_omega.dimx and user_mu.dimy == answer_omega.dimy:\n        print \"It looks like you returned your results in the wrong order. Make sure to return mu then Omega.\"\n        return False\n    \n    if user_mu.dimx != answer_mu.dimx or user_mu.dimy != answer_mu.dimy:\n        print \"Your mu matrix doesn't have the correct dimensions. Mu should be a\", answer_mu.dimx, \" x \", answer_mu.dimy, \"matrix.\"\n        return False\n    else:\n        print \"Mu has correct dimensions.\"\n        \n    if user_omega.dimx != answer_omega.dimx or user_omega.dimy != answer_omega.dimy:\n        print \"Your Omega matrix doesn't have the correct dimensions. Omega should be a\", answer_omega.dimx, \" x \", answer_omega.dimy, \"matrix.\"\n        return False\n    else:\n        print \"Omega has correct dimensions.\"\n        \n    if user_mu != answer_mu:\n        print \"Mu has incorrect entries.\"\n        return False\n    else:\n        print \"Mu correct.\"\n        \n    if user_omega != answer_omega:\n        print \"Omega has incorrect entries.\"\n        return False\n    else:\n        print \"Omega correct.\"\n        \n    print \"Test case passed!\"\n    return True\n\n# -----------\n# Test Case 1\n\ntestdata1          = [[[[1, 21.796713239511305, 25.32184135169971], [2, 15.067410969755826, -27.599928007267906]], [16.4522379034509, -11.372065246394495]],\n                      [[[1, 6.1286996178786755, 35.70844618389858], [2, -0.7470113490937167, -17.709326161950294]], [16.4522379034509, -11.372065246394495]],\n                      [[[0, 16.305692184072235, -11.72765549112342], [2, -17.49244296888888, -5.371360408288514]], [16.4522379034509, -11.372065246394495]],\n                      [[[0, -0.6443452578030207, -2.542378369361001], [2, -32.17857547483552, 6.778675958806988]], [-16.66697847355152, 11.054945886894709]]]\n\nanswer_mu1         = matrix([[81.63549976607898],\n                             [27.175270706192254],\n                             [98.09737507003692],\n                             [14.556272940621195],\n                             [71.97926631050574],\n                             [75.07644206765099],\n                             [65.30397603859097],\n                             [22.150809430682695]])\n\nanswer_omega1      = matrix([[0.36603773584905663, 0.0, -0.169811320754717, 0.0, -0.011320754716981133, 0.0, -0.1811320754716981, 0.0],\n                             [0.0, 0.36603773584905663, 0.0, -0.169811320754717, 0.0, -0.011320754716981133, 0.0, -0.1811320754716981],\n                             [-0.169811320754717, 0.0, 0.6509433962264151, 0.0, -0.05660377358490567, 0.0, -0.40566037735849064, 0.0],\n                             [0.0, -0.169811320754717, 0.0, 0.6509433962264151, 0.0, -0.05660377358490567, 0.0, -0.40566037735849064],\n                             [-0.011320754716981133, 0.0, -0.05660377358490567, 0.0, 0.6962264150943396, 0.0, -0.360377358490566, 0.0],\n                             [0.0, -0.011320754716981133, 0.0, -0.05660377358490567, 0.0, 0.6962264150943396, 0.0, -0.360377358490566],\n                             [-0.1811320754716981, 0.0, -0.4056603773584906, 0.0, -0.360377358490566, 0.0, 1.2339622641509433, 0.0],\n                             [0.0, -0.1811320754716981, 0.0, -0.4056603773584906, 0.0, -0.360377358490566, 0.0, 1.2339622641509433]])\n\n#result = online_slam(testdata1, 5, 3, 2.0, 2.0)\n#solution_check(result, answer_mu1, answer_omega1)\n\n\n# -----------\n# Test Case 2\n\ntestdata2          = [[[[0, 12.637647070797396, 17.45189715769647], [1, 10.432982633935133, -25.49437383412288]], [17.232472057089492, 10.150955955063045]],\n                      [[[0, -4.104607680013634, 11.41471295488775], [1, -2.6421937245699176, -30.500310738397154]], [17.232472057089492, 10.150955955063045]],\n                      [[[0, -27.157759429499166, -1.9907376178358271], [1, -23.19841267128686, -43.2248146183254]], [-17.10510363812527, 10.364141523975523]],\n                      [[[0, -2.7880265859173763, -16.41914969572965], [1, -3.6771540967943794, -54.29943770172535]], [-17.10510363812527, 10.364141523975523]],\n                      [[[0, 10.844236516370763, -27.19190207903398], [1, 14.728670653019343, -63.53743222490458]], [14.192077112147086, -14.09201714598981]]]\n\nanswer_mu2         = matrix([[63.37479912250136],\n                             [78.17644539069596],\n                             [61.33207502170053],\n                             [67.10699675357239],\n                             [62.57455560221361],\n                             [27.042758786080363]])\n\nanswer_omega2      = matrix([[0.22871751620895048, 0.0, -0.11351536555795691, 0.0, -0.11351536555795691, 0.0],\n                             [0.0, 0.22871751620895048, 0.0, -0.11351536555795691, 0.0, -0.11351536555795691],\n                             [-0.11351536555795691, 0.0, 0.7867205207948973, 0.0, -0.46327947920510265, 0.0],\n                             [0.0, -0.11351536555795691, 0.0, 0.7867205207948973, 0.0, -0.46327947920510265],\n                             [-0.11351536555795691, 0.0, -0.46327947920510265, 0.0, 0.7867205207948973, 0.0],\n                             [0.0, -0.11351536555795691, 0.0, -0.46327947920510265, 0.0, 0.7867205207948973]])\n\n#result = online_slam(testdata2, 6, 2, 3.0, 4.0)\n#solution_check(result, answer_mu2, answer_omega2)\n\n\n", "type": "Nugget", "id": 450001}, {"nuggetType": "lecture", "name": "Online Slam Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHdGgw", "media": {"dotsub_id": null, "name": "cs373_hw6_02_s_Online-Slam", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGKTCHgw", "youtube_id": "LJZd4BFpIr0", "youtube_state": "processing", "path": "Course/cs373/Media/500004", "transcript": null, "id": 500004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GPHdGgwLEgZOdWdnZXQY4YAfDA", "path": "Course/cs373/CourseRev/feb2012/Unit/438001/Nugget/508001", "type": "Nugget", "id": 508001}]}, {"name": "Office Hours 6", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": false, "closedAt": "", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GInKHgwLEgZOdWdnZXQY2dkeDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GInKHgw", "path": "Course/cs373/CourseRev/feb2012/Unit/501001", "open": false, "id": 501001, "nuggets": [{"nuggetType": "lecture", "name": "Office Hours Week 6", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GInKHgw", "media": {"dotsub_id": "e41dbc2a-6350-41bd-a7fa-049ef3806008", "name": "cs373_oo6_00_l_Office-Hours-Week-6", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPHRHgw", "youtube_id": "nH1aMf0p5MY", "youtube_state": "done", "path": "Course/cs373/Media/502001", "transcript": null, "id": 502001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GInKHgwLEgZOdWdnZXQY2dkeDA", "path": "Course/cs373/CourseRev/feb2012/Unit/501001/Nugget/503001", "type": "Nugget", "id": 503001}]}, {"name": "Unit 7", "parent": "agpzfnVkYWNpdHl1cicLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgw", "type": "Unit", "evaluated": true, "closedAt": "04/09/2012 23:59", "nuggetLayout": [[{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY-oEcDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYxeQdDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYsZkcDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYgakcDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY0bgcDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYocgcDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY8dccDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYweccDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYkfccDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY4YYdDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY07gcDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYyo4dDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYmZ4dDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYkvobDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY0bUdDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYocUdDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYspkcDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY2dwdDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY8tccDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY-v4cDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYmqEcDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYkfQdDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYwuQdDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYy44dDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY-vsdDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYw-QdDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYzI4dDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYzY4dDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY6q0dDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYyYseDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYsZMeDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY_P4cDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYs5YdDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYspMeDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYs5kcDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYpMUdDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYm6EcDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYjdAcDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY6qoeDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY0bIeDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY66oeDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYtJkcDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY7KoeDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY7aoeDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY0rUdDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYzo4dDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYocIeDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY2twdDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYq-wdDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY0rIeDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY_f4cDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYk_ccDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY9dccDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYosIeDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY7bAcDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYq-8cDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYvMAcDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYjM0dDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYtJYdDA"}], [{"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYo8IeDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYgqkcDA"}, {"nugget_key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY-4EcDA"}]], "availableAt": "", "key": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "path": "Course/cs373/CourseRev/feb2012/Unit/458001", "open": false, "id": 458001, "nuggets": [{"nuggetType": "lecture", "name": "Final Exam Q4 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "b7846803-24f8-40a9-a9da-2fde6f195639", "name": "cs373_unit7_04_s_Final-Exam-Q4", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLKWHQw", "youtube_id": "xk9SxIWjDDA", "youtube_state": "processing", "path": "Course/cs373/Media/478002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:06,000\nNow the robot senses red, but it has a measurement error probability of 0.2.\n\n2\n00:00:06,000 --> 00:00:09,000\nPlease update your probabilities.\n\n", "id": 478002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYkvobDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/458002", "type": "Nugget", "id": 458002}, {"nuggetType": "lecture", "name": "Test Drive", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "45c8f8cc-7daf-4f4a-88b6-8ebcceb7093e", "name": "cs373_unit7_00_l_Test-Drive", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPmBHAw", "youtube_id": "VCMbyKT5VTM", "youtube_state": "processing", "path": "Course/cs373/Media/459001", "transcript": "\ufeff", "id": 459001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY-oEcDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/459002", "type": "Nugget", "id": 459002}, {"nuggetType": "lecture", "name": "Final Exam Programming Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "1ef359c7-3144-4b47-86de-bb5302db3c36", "name": "cs373_unit7_20_s_Final-Exam-Programming", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJueHQw", "youtube_id": "Dbnj6Ksu8Og", "youtube_state": "done", "path": "Course/cs373/Media/479003", "transcript": "\ufeff", "id": 479003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY-4EcDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/459003", "type": "Nugget", "id": 459003}, {"nuggetType": "lecture", "name": "Final Exam Q1", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "c2f2acf2-d0ed-4d2b-b808-e8e08cf991b2", "name": "cs373_unit7_01_q_Final-Exam-Q1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMmRHAw", "youtube_id": "ZOSqg68flFI", "youtube_state": "processing", "path": "Course/cs373/Media/461001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nThe first question I would say was easy. \n\n2\n00:00:02,000 --> 00:00:06,000\nIt's 1 minus 0.6, which is 0.4.\n\n", "id": 461001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYsZkcDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/462001", "type": "Nugget", "id": 462001}, {"nuggetType": "lecture", "name": "Final Exam Q5 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "1a5d7f9c-4678-48d5-8506-f75ee90883a4", "name": "cs373_unit7_05_s_Final-Exam-Q5", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGInNHQw", "youtube_id": "V8zDB5ocrXI", "youtube_state": "processing", "path": "Course/cs373/Media/485001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nThe robot now moves north by one step, but the world is non-cyclic.\n\n2\n00:00:04,000 --> 00:00:08,000\nIf it started out at the top field and nothing happens. It just bounces on the wall.\n\n3\n00:00:08,000 --> 00:00:12,000\nBut if I start out on the bottom, it's going to move up north. Can you up date your probabilities?\n\n", "id": 485001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYspkcDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/462002", "type": "Nugget", "id": 462002}, {"nuggetType": "lecture", "name": "Final Exam Q11 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "f1d50410-0255-4b70-9c98-aac6cecf2261", "name": "cs373_unit7_11_s_Final-Exam-Q11", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIGjHgw", "youtube_id": "ZoTBBQR_7u4", "youtube_state": "done", "path": "Course/cs373/Media/496001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nSame for the second Gaussian over here where the motion now is 5 steps\n\n2\n00:00:04,000 --> 00:00:07,000\nas opposed to just 1.\n\n", "id": 496001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYs5kcDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/462003", "type": "Nugget", "id": 462003}, {"nuggetType": "lecture", "name": "Final Exam Q14", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "a6b72974-9f76-4170-ada9-bda712bf3ae9", "name": "cs373_unit7_14_q_Final-Exam-Q14", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIvNHQw", "youtube_id": "n_CmJ0hbsxg", "youtube_state": "done", "path": "Course/cs373/Media/485003", "transcript": "\ufeff", "id": 485003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYtJkcDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/462004", "type": "Nugget", "id": 462004}, {"nuggetType": "lecture", "name": "Final Exam Q7", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "140dc3c6-21fc-4325-9658-f9cb664d50d6", "name": "cs373_unit7_07_q_Final-Exam-Q7", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGKnsHQw", "youtube_id": "RNETGs-si4k", "youtube_state": "done", "path": "Course/cs373/Media/489001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nThen this is a bit of a trick question.\n\n2\n00:00:02,000 --> 00:00:06,000\nBecause both of these cells over here are green, the update changes nothing.\n\n3\n00:00:06,000 --> 00:00:09,000\nIt would've changed had one of the cells been red,\n\n4\n00:00:09,000 --> 00:00:12,000\nbut for the only red cell we already have a prior probability of 0.\n\n5\n00:00:12,000 --> 00:00:15,000\nThe result remains unchanged.\n\n", "id": 489001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYmqEcDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/463002", "type": "Nugget", "id": 463002}, {"nuggetType": "quiz", "name": "Final Exam Q12", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYm6EcDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/463003", "type": "Nugget", "id": 463003}, {"nuggetType": "quiz", "name": "Final Exam Q1", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYgakcDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/464001", "type": "Nugget", "id": 464001}, {"nuggetType": "program", "name": "Final Exam Programming", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYgqkcDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/464002", "suppliedCode": "# -------------------\n# Background Information\n#\n# In this problem, you will build a planner that makes a robot\n# car's lane decisions. On a highway, the left lane (in the US)\n# generally has a higher traffic speed than the right line. \n#\n# In this problem, a 2 lane highway of length 5 could be\n# represented as:\n#\n# road = [[80, 80, 80, 80, 80],\n#         [60, 60, 60, 60, 60]]\n#\n# In this case, the left lane has an average speed of 80 km/h and\n# the right lane has a speed of 60 km/h. We can use a 0 to indicate\n# an obstacle in the road.\n#\n# To get to a location as quickly as possible, we usually\n# want to be in the left lane. But there is a cost associated\n# with changing lanes. This means that for short trips, it is\n# sometimes optimal to stay in the right lane.\n#\n# -------------------\n# User Instructions\n#\n# Design a planner (any kind you like, so long as it works).\n# This planner should be a function named plan() that takes\n# as input four parameters: road, lane_change_cost, init, and\n# goal. See parameter info below.\n#\n# Your function should RETURN the final cost to reach the\n# goal from the start point (which should match with our answer).\n# You may include print statements to show the optimum policy,\n# though this is not necessary for grading.\n#\n# Your solution must work for a variety of roads and lane\n# change costs.\n#\n# Add your code at line 92.\n# \n# --------------------\n# Parameter Info\n#\n# road - A grid of values. Each value represents the speed associated\n#        with that cell. A value of 0 means the cell in non-navigable.\n#        The cost for traveling in a cell must be (1.0 / speed).\n#\n# lane_change_cost - The cost associated with changing lanes.\n#\n# init - The starting point for your car. This will always be somewhere\n#        in the right (bottom) lane to simulate a highway on-ramp.\n#\n# goal - The destination. This will always be in the right lane to\n#        simulate a highway exit-ramp.\n#\n# --------------------\n# Testing\n#\n# You may use our test function below, solution_check\n# to test your code for a variety of input parameters. \n#\n# You may also use the build_road function to build\n# your own roads to test your function with.\n\nimport random\n\n# ------------------------------------------\n# build_road - Makes a road according to your specified length and\n# lane_speeds. lane_speeds is a list of speeds for the lanes (listed\n# from left lane to right). You can also include random obstacles.\n#\ndef build_road(length, lane_speeds, print_flag = False, obstacles = False, obstacle_prob = 0.05):\n    num_lanes = len(lane_speeds)\n    road = [[lane_speeds[i] for dist in range(length)] for i in range(len(lane_speeds))]\n    if obstacles:\n        for x in range(len(road)):\n            for y in range(len(road[0])):\n                if random.random() < obstacle_prob:\n                    road[x][y] = 0\n    if print_flag:\n        for lane in road:\n            print '[' + ', '.join('%5.3f' % speed for speed in lane) + ']'\n    return road\n\n# ------------------------------------------\n# plan - Returns cost to get from init to goal on road given a\n# lane_change_cost.\n#\ndef plan(road, lane_change_cost, init, goal): # Don't change the name of this function!\n    #\n    #\n    # Insert Code Here\n    #\n    #\n    return cost\n\n################# TESTING ##################\n       \n# ------------------------------------------\n# solution check - Checks your path function using\n# data from list called test[]. Uncomment the call\n# to solution_check at the bottom to test your code.\n#\ndef solution_check(test, epsilon = 0.00001):\n    answer_list = []\n    for i in range(len(test[0])):\n        user_cost = plan(test[0][i], test[1][i], test[2][i], test[3][i])\n        true_cost = test[4][i]\n        if abs(user_cost - true_cost) < epsilon:\n            answer_list.append(1)\n        else:\n            answer_list.append(0)\n    correct_answers = 0\n    print\n    for i in range(len(answer_list)):\n        if answer_list[i] == 1:\n            print 'Test case', i+1, 'passed!'\n            correct_answers += 1\n        else:\n            print 'Test case', i+1, 'failed.'\n    if correct_answers == len(answer_list):\n        print \"\\nYou passed all test cases!\"\n        return True\n    else:\n        print \"\\nYou passed\", correct_answers, \"of\", len(answer_list), \"test cases. Try to get them all!\"\n        return False\n    \n# Test Case 1 (FAST left lane)\ntest_road1 = build_road(8, [100, 10, 1])\nlane_change_cost1 = 1.0 / 1000.0\ntest_init1 = [len(test_road1) - 1, 0]\ntest_goal1 = [len(test_road1) - 1, len(test_road1[0]) - 1]\ntrue_cost1 = 1.244\n\n# Test Case 2 (more realistic road)\ntest_road2 = build_road(14, [80, 60, 40, 20])\nlane_change_cost2 = 1.0 / 100.0\ntest_init2 = [len(test_road2) - 1, 0]\ntest_goal2 = [len(test_road2) - 1, len(test_road2[0]) - 1]\ntrue_cost2 = 0.293333333333\n\n# Test Case 3 (Obstacles included)\ntest_road3 = [[50, 50, 50, 50, 50, 40, 0, 40, 50, 50, 50, 50, 50, 50, 50], # left lane: 50 km/h\n              [40, 40, 40, 40, 40, 30, 20, 30, 40, 40, 40, 40, 40, 40, 40],\n              [30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]] # right lane: 30 km/h\nlane_change_cost3 = 1.0 / 500.0\ntest_init3 = [len(test_road3) - 1, 0]\ntest_goal3 = [len(test_road3) - 1, len(test_road3[0]) - 1]\ntrue_cost3 = 0.355333333333\n\n# Test Case 4 (Slalom)\ntest_road4 = [[50, 50, 50, 50, 50, 40,  0, 40, 50, 50,  0, 50, 50, 50, 50], # left lane: 50 km/h\n              [40, 40, 40, 40,  0, 30, 20, 30,  0, 40, 40, 40, 40, 40, 40],\n              [30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]] # right lane: 30 km/h\nlane_change_cost4 = 1.0 / 65.0\ntest_init4 = [len(test_road4) - 1, 0]\ntest_goal4 = [len(test_road4) - 1, len(test_road4[0]) - 1]\ntrue_cost4 = 0.450641025641\n\n\ntesting_suite = [[test_road1, test_road2, test_road3, test_road4],\n                 [lane_change_cost1, lane_change_cost2, lane_change_cost3, lane_change_cost4],\n                 [test_init1, test_init2, test_init3, test_init4],\n                 [test_goal1, test_goal2, test_goal3, test_goal4],\n                 [true_cost1, true_cost2, true_cost3, true_cost4]]\n\n#solution_check(testing_suite) #UNCOMMENT THIS LINE TO TEST YOUR CODE\n\n\n\n", "type": "Nugget", "id": 464002}, {"nuggetType": "quiz", "name": "Final Exam Q18", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY7bAcDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/465005", "type": "Nugget", "id": 465005}, {"nuggetType": "lecture", "name": "Final Exam Q1 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "53bcd58d-63af-4e68-b426-6d31bd24b797", "name": "cs373_unit7_01_s_Final-Exam-Q1", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOmwHAw", "youtube_id": "l4sZrdCTIz8", "youtube_state": "done", "path": "Course/cs373/Media/465001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nNow, we flip this coin twice.\n\n2\n00:00:03,000 --> 00:00:07,000\nWhat is the probability that it never comes up heads in these two flips?\n\n", "id": 465001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY0bgcDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/466001", "type": "Nugget", "id": 466001}, {"nuggetType": "lecture", "name": "Final Exam Q3 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "71082a37-b756-4cfc-92a0-4c396e57aea1", "name": "cs373_unit7_03_s_Final-Exam-Q3", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMmOHQw", "youtube_id": "y_VYFuxBmPM", "youtube_state": "done", "path": "Course/cs373/Media/477001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nSuppose the robot lives in the following rectangle environment\n\n2\n00:00:03,000 --> 00:00:08,000\nwith four states, and say initially the robot has no clue where it is.\n\n3\n00:00:08,000 --> 00:00:13,000\nHow would you initialize the probabilities for these four different grid cells in Markov localization?\n\n", "id": 477001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY07gcDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/466003", "type": "Nugget", "id": 466003}, {"nuggetType": "lecture", "name": "Final Exam Q19", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "b3c92746-bf20-480a-8b61-9db6300f18c0", "name": "cs373_unit7_19_q_Final-Exam-Q19", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJT6Gww", "youtube_id": "hbaeLeuXq-4", "youtube_state": "done", "path": "Course/cs373/Media/458004", "transcript": "\ufeff", "id": 458004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYvMAcDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/467004", "type": "Nugget", "id": 467004}, {"nuggetType": "lecture", "name": "Final Exam Q2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "f542113e-76be-48f1-815e-ea5e26263f77", "name": "cs373_unit7_02_q_Final-Exam-Q2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNK4HAw", "youtube_id": "i4CpbdHQ2dQ", "youtube_state": "done", "path": "Course/cs373/Media/466002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\nTo get the same outcome twice, assuming--of course--independence,\n\n2\n00:00:04,000 --> 00:00:07,000\ngives us 0.4 to the square, which is 0.16.\n\n", "id": 466002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYocgcDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/468001", "type": "Nugget", "id": 468001}, {"nuggetType": "lecture", "name": "Final Exam Q12 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "f7bfc468-b661-4e98-8f78-96f795af5614", "name": "cs373_unit7_12_s_Final-Exam-Q12", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMqLHgw", "youtube_id": "lq06zAZ3QL0", "youtube_state": "done", "path": "Course/cs373/Media/493002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nThe same for the third example where the motion uncertainties now increased to 4.0.\n\n2\n00:00:05,000 --> 00:00:08,000\nPlease enter your result over here.\n\n", "id": 493002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYjdAcDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/469005", "type": "Nugget", "id": 469005}, {"nuggetType": "quiz", "name": "Final Exam Q2", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY8dccDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/470001", "type": "Nugget", "id": 470001}, {"nuggetType": "quiz", "name": "Final Exam Q6", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY8tccDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/470002", "type": "Nugget", "id": 470002}, {"nuggetType": "lecture", "name": "Final Exam Q17 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "a493d384-236f-4bcb-be0f-604d395d62ae", "name": "cs373_unit7_17_s_Final-Exam-Q17", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGI7QHAw", "youtube_id": "617Sxp7LqAk", "youtube_state": "done", "path": "Course/cs373/Media/469006", "transcript": "\ufeff", "id": 469006}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY9dccDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/470005", "type": "Nugget", "id": 470005}, {"nuggetType": "lecture", "name": "Final Exam Q2 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "ae44ac4f-6ed8-49a3-a1af-3ae7e4e26a6a", "name": "cs373_unit7_02_s_Final-Exam-Q2", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNnfHAw", "youtube_id": "Aes25yqnE3g", "youtube_state": "done", "path": "Course/cs373/Media/471001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nFinally, we now add a fair coin, so we have two coins--\n\n2\n00:00:03,000 --> 00:00:06,000\nthe loaded coin over here and our fair coin.\n\n3\n00:00:06,000 --> 00:00:09,000\nFor the fair coin we have probability of heads equals 0.5.\n\n4\n00:00:09,000 --> 00:00:11,000\nWe now select a coin at random.\n\n5\n00:00:11,000 --> 00:00:15,000\nI don't know which one it is, but I give a 0.5 chance to either coin.\n\n6\n00:00:15,000 --> 00:00:20,000\nI flip it twice, and it gives me heads twice.\n\n7\n00:00:20,000 --> 00:00:24,000\nWhat is now the posterior probability that we picked the loaded coin?\n\n8\n00:00:24,000 --> 00:00:27,000\nThat's obviously applying Bayes rule.\n\n", "id": 471001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYweccDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/472001", "type": "Nugget", "id": 472001}, {"nuggetType": "lecture", "name": "Final Exam Q18 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "bec9ffc2-0cd4-4e67-9373-b4557f339b76", "name": "cs373_unit7_18_s_Final-Exam-Q18", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOOGHQw", "youtube_id": "jTqLHHY9TME", "youtube_state": "done", "path": "Course/cs373/Media/476003", "transcript": "\ufeff", "id": 476003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYq-8cDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/473003", "type": "Nugget", "id": 473003}, {"nuggetType": "lecture", "name": "Final Exam Q3", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "f04d0ded-caa8-4d26-835e-648c77738cd4", "name": "cs373_unit7_03_q_Final-Exam-Q3", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMLnHAw", "youtube_id": "ZVXAIE6pT30", "youtube_state": "done", "path": "Course/cs373/Media/472002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nThe last one is applying Bayes rule.\n\n2\n00:00:03,000 --> 00:00:06,000\nWe have two coins, one loaded and one fair.\n\n3\n00:00:06,000 --> 00:00:09,000\nEither has a prior probability of 0.5.\n\n4\n00:00:09,000 --> 00:00:11,000\nNow we multiply in the measurement probabilities.\n\n5\n00:00:11,000 --> 00:00:15,000\nHeads is 0.6 likely for the loaded coin. \n\n6\n00:00:15,000 --> 00:00:19,000\nSince we have two of those, we multiply in 0.6 twice.\n\n7\n00:00:19,000 --> 00:00:22,000\nThat gives us a non-normalized posterior of 0.18.\n\n8\n00:00:22,000 --> 00:00:26,000\nWhereas for the fair coin, we get 0.5 for the probability of heads.\n\n9\n00:00:26,000 --> 00:00:31,000\nWe multiply this one twice, because we have two flips.\n\n10\n00:00:31,000 --> 00:00:33,000\nThat gives us 0.125.\n\n11\n00:00:33,000 --> 00:00:38,000\nIf we now normalize by the sum of those two things,\n\n12\n00:00:38,000 --> 00:00:44,000\nyou get for the loaded coin 0.18 divided by the sum of those two things.\n\n13\n00:00:44,000 --> 00:00:47,000\nThis is 0.5902.\n\n14\n00:00:47,000 --> 00:00:50,000\nIn fact, you're probably correct if you just type 0.59.\n\n", "id": 472002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYkfccDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/474001", "type": "Nugget", "id": 474001}, {"nuggetType": "quiz", "name": "Final Exam Q17", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYk_ccDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/474003", "type": "Nugget", "id": 474003}, {"nuggetType": "lecture", "name": "Final Exam Q6 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "bddbc46d-d5f0-4c28-882c-b1048c5732bd", "name": "cs373_unit7_06_s_Final-Exam-Q6", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGKLFHQw", "youtube_id": "Fe25nCgXi_0", "youtube_state": "processing", "path": "Course/cs373/Media/484002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:06,000\nThe robot now senses red again.                   Can you update the probabilities? \n\n", "id": 484002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY-v4cDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/475002", "type": "Nugget", "id": 475002}, {"nuggetType": "lecture", "name": "Final Exam Q10 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "e901f86f-8c78-4461-8552-69aa3d5a1501", "name": "cs373_unit7_10_s_Final-Exam-Q10", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPv-HAw", "youtube_id": "XsjMW0WPxxw", "youtube_state": "done", "path": "Course/cs373/Media/475003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nIn this question I'm going to ask about running Kalman filters,\n\n2\n00:00:02,000 --> 00:00:08,000\nbut I'm replacing  the Bayesian measurement update with a motion step.\n\n3\n00:00:08,000 --> 00:00:11,000\nWe have exactly the same Gaussians as before.\n\n4\n00:00:11,000 --> 00:00:14,000\nI'd like you to consider our prior before motion to be \n\n5\n00:00:14,000 --> 00:00:17,000\na distribution with the following mean and variance.\n\n6\n00:00:17,000 --> 00:00:21,000\nNow I'd like you to add to the same mean variance a motion\n\n7\n00:00:21,000 --> 00:00:25,000\nof 1 with its own uncertainty of 1.0.\n\n8\n00:00:25,000 --> 00:00:30,000\nPlease give me the resulting Gaussian mean and covariance for this motion update.\n\n", "id": 475003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY_P4cDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/475004", "type": "Nugget", "id": 475004}, {"nuggetType": "lecture", "name": "Final Exam Q17", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "d790d37e-7bda-4a21-aff4-ce4e9d3a7ddc", "name": "cs373_unit7_17_q_Final-Exam-Q17", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGKfFHQw", "youtube_id": "mizLdmLPlXM", "youtube_state": "done", "path": "Course/cs373/Media/484007", "transcript": "\ufeff", "id": 484007}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY_f4cDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/475005", "type": "Nugget", "id": 475005}, {"nuggetType": "quiz", "name": "Final Exam Q3", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY4YYdDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/476001", "type": "Nugget", "id": 476001}, {"nuggetType": "lecture", "name": "Final Exam Q4", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "97284ac1-5c15-43ef-ae8c-2aaaa7d98cf1", "name": "cs373_unit7_04_q_Final-Exam-Q4", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOKJHAw", "youtube_id": "9zFD4DEpf54", "youtube_state": "done", "path": "Course/cs373/Media/460002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nObviously, if the robot knows nothing\n\n2\n00:00:03,000 --> 00:00:09,000\nthen the uniform probability distribution would assign 0.25 to each of those cells.\n\n", "id": 460002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYyo4dDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/477002", "type": "Nugget", "id": 477002}, {"nuggetType": "lecture", "name": "Final Exam Q8", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "d511ffaf-8812-4234-8c4f-c855ffad6556", "name": "cs373_unit7_08_q_Final-Exam-Q8", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPLUHQw", "youtube_id": "bNSPEWKvbjI", "youtube_state": "done", "path": "Course/cs373/Media/486002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nThe answer is the mean is 1.\n\n2\n00:00:02,000 --> 00:00:04,000\nBoth Gaussian is already appointed 1,\n\n3\n00:00:04,000 --> 00:00:09,000\n but the sigma-squared is calculated by a formula that looks just like this\n\n4\n00:00:09,000 --> 00:00:11,000\nfor the two different sigmas over here--\n\n5\n00:00:11,000 --> 00:00:16,000\n1 over 2 is 1/2 or 0.5.\n\n", "id": 486002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYy44dDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/477003", "type": "Nugget", "id": 477003}, {"nuggetType": "lecture", "name": "Final Exam Q9", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "c317497b-3b01-412e-941b-c66aaf5f9961", "name": "cs373_unit7_09_q_Final-Exam-Q9", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPPUHQw", "youtube_id": "pGOJ-t2E-Kk", "youtube_state": "done", "path": "Course/cs373/Media/486003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nIn this calculation here, because both covariances are the same,\n\n2\n00:00:03,000 --> 00:00:06,000\nthe mean will be just the middle value of 3.\n\n3\n00:00:06,000 --> 00:00:09,000\nThe covariance is computed just like before.\n\n", "id": 486003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYzI4dDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/477004", "type": "Nugget", "id": 477004}, {"nuggetType": "quiz", "name": "Final Exam Q9", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYzY4dDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/477005", "type": "Nugget", "id": 477005}, {"nuggetType": "quiz", "name": "Final Exam Q15", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYzo4dDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/477006", "type": "Nugget", "id": 477006}, {"nuggetType": "lecture", "name": "Final Exam Q11", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "6bd93428-b127-4635-92c4-84f491a2fd61", "name": "cs373_unit7_11_q_Final-Exam-Q11", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJmbHgw", "youtube_id": "h_9VIKQG6gk", "youtube_state": "done", "path": "Course/cs373/Media/495001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nAs for the solution, if we add 1 to 1, we get  2 as the mu.\n\n2\n00:00:05,000 --> 00:00:07,000\nIn motion the sigma-squares just add up.\n\n3\n00:00:07,000 --> 00:00:10,000\nWe get 1 plus 1 equals 2.\n\n", "id": 495001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYs5YdDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/478003", "type": "Nugget", "id": 478003}, {"nuggetType": "lecture", "name": "Final Exam Q19 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "f4b24096-409f-4773-9774-bd881fecd815", "name": "cs373_unit7_19_s_Final-Exam-Q19", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNOyHgw", "youtube_id": "TBzn5nyYQdo", "youtube_state": "done", "path": "Course/cs373/Media/498003", "transcript": "\ufeff", "id": 498003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYtJYdDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/478004", "type": "Nugget", "id": 478004}, {"nuggetType": "quiz", "name": "Final Exam Q4", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYmZ4dDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/479001", "type": "Nugget", "id": 479001}, {"nuggetType": "lecture", "name": "Final Exam Q9 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "50fc4444-61ea-475d-87c9-528121177171", "name": "cs373_unit7_09_s_Final-Exam-Q9", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIrNHQw", "youtube_id": "KS1Y8HpNjCw", "youtube_state": "done", "path": "Course/cs373/Media/485002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nFinally, do the same for the third Gaussian \n\n2\n00:00:02,000 --> 00:00:06,000\nwhere we even have a different sigma-squared term for the Gaussian number 2.\n\n", "id": 485002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY6q0dDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/481002", "type": "Nugget", "id": 481002}, {"nuggetType": "lecture", "name": "Final Exam Q5", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "b8436e94-38b7-420b-8adb-8d0be056b2fc", "name": "cs373_unit7_05_q_Final-Exam-Q5", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOmtHQw", "youtube_id": "5WLTySAbiI8", "youtube_state": "done", "path": "Course/cs373/Media/481001", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:05,000\nThe update after the measurement gives us 0.143 for the green cells\n\n2\n00:00:05,000 --> 00:00:08,000\nand 0.571 for the red cell.\n\n3\n00:00:08,000 --> 00:00:14,000\nThis is obtained by taking the prior and multiplying in 0.2 in case of the green cell\n\n4\n00:00:14,000 --> 00:00:19,000\nand 0.8 in case of the red cell for all those four cells\n\n5\n00:00:19,000 --> 00:00:24,000\nand then normalizing the result by the sum of the outcomes of these calculations.\n\n", "id": 481001}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY0bUdDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/482001", "type": "Nugget", "id": 482001}, {"nuggetType": "lecture", "name": "Final Exam Q15", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "fb76ba34-9a53-42a3-a958-5b3e5b90b19d", "name": "cs373_unit7_15_q_Final-Exam-Q15", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLWZHAw", "youtube_id": "TVRylq_M2nU", "youtube_state": "done", "path": "Course/cs373/Media/462005", "transcript": "\ufeff", "id": 462005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY0rUdDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/482002", "type": "Nugget", "id": 482002}, {"nuggetType": "quiz", "name": "Final Exam Q5", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYocUdDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/484001", "type": "Nugget", "id": 484001}, {"nuggetType": "lecture", "name": "Final Exam Q12", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "fe8f6ae5-e25a-465b-a377-db8a8be57a7d", "name": "cs373_unit7_12_q_Final-Exam-Q12", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGLq9HQw", "youtube_id": "kG2YT_WMDzE", "youtube_state": "processing", "path": "Course/cs373/Media/483002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:04,000\n1 plus 5 is 6. Sigma-squares add up. It's 2 again.\n\n", "id": 483002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYpMUdDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/484004", "type": "Nugget", "id": 484004}, {"nuggetType": "quiz", "name": "Final Exam Q19", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYjM0dDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/485004", "type": "Nugget", "id": 485004}, {"nuggetType": "lecture", "name": "Final Exam Q6", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "d40e600a-0414-4cdf-9f2f-29ed00169765", "name": "cs373_unit7_06_q_Final-Exam-Q6", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIvQHAw", "youtube_id": "NRkmFAV6dmw", "youtube_state": "done", "path": "Course/cs373/Media/469003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nAfter moving up, there is 0 probability of staying at the bottom.\n\n2\n00:00:03,000 --> 00:00:06,000\nWe just have to add up these two numbers over here,\n\n3\n00:00:06,000 --> 00:00:12,000\nwhich gives us 0.714 and 0.286 for the cell over here.\n\n", "id": 469003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY2dwdDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/487001", "type": "Nugget", "id": 487001}, {"nuggetType": "lecture", "name": "Final Exam Q16", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "8b798774-714e-4bc0-9500-cd0ea0c91acf", "name": "cs373_unit7_16_q_Final-Exam-Q16", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMTkHQw", "youtube_id": "vyVGUlT1b9o", "youtube_state": "done", "path": "Course/cs373/Media/488004", "transcript": "\ufeff", "id": 488004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY2twdDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/487002", "type": "Nugget", "id": 487002}, {"nuggetType": "lecture", "name": "Final Exam Q7 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "b2842344-4ff7-4391-a3b7-a69fddb7f9b9", "name": "cs373_unit7_07_s_Final-Exam-Q7", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJqeHQw", "youtube_id": "I44t3q1oOsQ", "youtube_state": "processing", "path": "Course/cs373/Media/479002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nHere is a question on 1D Kalman filters.\n\n2\n00:00:03,000 --> 00:00:06,000\nWe're given two Gaussians--Gaussian 1 and Gaussian 2.\n\n3\n00:00:06,000 --> 00:00:09,000\nI want you to calculate the result of applying Bayes rule.\n\n4\n00:00:09,000 --> 00:00:12,000\nYou can think of the first Gaussian as the prior \n\n5\n00:00:12,000 --> 00:00:15,000\nand the second Gaussian as the measurement probability.\n\n6\n00:00:15,000 --> 00:00:19,000\nI want you to put the result over here for the first of these two Gaussians  \n\n7\n00:00:19,000 --> 00:00:25,000\nwith mean 1 and sigma-squared of 1 and 1.\n\n", "id": 479002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYwuQdDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/488002", "type": "Nugget", "id": 488002}, {"nuggetType": "lecture", "name": "Final Exam Q8 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "a619b8ec-0546-4497-9a35-57cf30d71b4c", "name": "cs373_unit7_08_s_Final-Exam-Q8", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIzQHAw", "youtube_id": "6RJ_PsENMZc", "youtube_state": "done", "path": "Course/cs373/Media/469004", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:03,000\nNow do the same for the second Gaussian.\n\n2\n00:00:03,000 --> 00:00:06,000\nYou can see the mean is changed on the right side to 5.\n\n", "id": 469004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYw-QdDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/488003", "type": "Nugget", "id": 488003}, {"nuggetType": "lecture", "name": "Congratulations", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "c90a8ca7-e5ff-4abc-bf42-9600b151e53e", "name": "cs373_unit7_21_l_Congratulations", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGMuLHgw", "youtube_id": "zDSsH5wGJLo", "youtube_state": "done", "path": "Course/cs373/Media/493003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:06,000\nWelcome to the long-anticipated final exam of our class CS373.\n\n2\n00:00:06,000 --> 00:00:09,000\nWe have a number of questions for you, including a programming exercise.\n\n3\n00:00:09,000 --> 00:00:11,000\nSome of them are relatively easy.\n\n4\n00:00:11,000 --> 00:00:13,000\nSome of them are really, really hard.\n\n5\n00:00:13,000 --> 00:00:16,000\nI'm going to mark the hard ones as challenge questions,\n\n6\n00:00:16,000 --> 00:00:20,000\nso you know you can safely skip them if you don't feel like being challenged.\n\n7\n00:00:20,000 --> 00:00:22,000\nLet's dive right in.\n\n8\n00:00:22,000 --> 00:00:25,000\nThe first question has three parts.\n\n9\n00:00:25,000 --> 00:00:27,000\nI want you to put in numbers on the right.\n\n10\n00:00:27,000 --> 00:00:31,000\nIf your number if approximate, I want about 3 decimal points correct.\n\n11\n00:00:31,000 --> 00:00:37,000\nFirst of all, we have a loaded coin that comes up heads with probability 0.6.\n\n12\n00:00:37,000 --> 00:00:40,000\nI would like to know what is the probability it comes up tails.\n\n", "id": 493003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYxeQdDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/488005", "type": "Nugget", "id": 488005}, {"nuggetType": "quiz", "name": "Final Exam Q16", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYq-wdDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/489003", "type": "Nugget", "id": 489003}, {"nuggetType": "quiz", "name": "Final Exam Q7", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYkfQdDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/490001", "type": "Nugget", "id": 490001}, {"nuggetType": "quiz", "name": "Final Exam Q8", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY-vsdDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/491002", "type": "Nugget", "id": 491002}, {"nuggetType": "lecture", "name": "Final Exam Q10", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "3df38f61-67e9-4a4b-b373-5ea8d61c4d33", "name": "cs373_unit7_10_q_Final-Exam-Q10", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGPTXHAw", "youtube_id": "K9P8g5gtp9g", "youtube_state": "done", "path": "Course/cs373/Media/470004", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nThis is the interesting case.\n\n2\n00:00:02,000 --> 00:00:08,000\nOur covariance, using a formula just like is obtained as an expression like that,\n\n3\n00:00:08,000 --> 00:00:11,000\nresolves to 0.8.\n\n4\n00:00:11,000 --> 00:00:15,000\nWe now take the two means and weigh them by the corresponding  corvariances.\n\n5\n00:00:15,000 --> 00:00:19,000\nThis is our first mean, and here's our second mean--5.\n\n6\n00:00:19,000 --> 00:00:23,000\nWe weigh it by 1/4, and that gives us 0.8 as the new mean.\n\n7\n00:00:23,000 --> 00:00:27,000\nSanity check--1.8 is much close to 1 than it is to 5,\n\n8\n00:00:27,000 --> 00:00:31,000\nand the reason is we're much more confident in the 1 than we were in the 5.\n\n", "id": 470004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYyYseDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/493001", "type": "Nugget", "id": 493001}, {"nuggetType": "quiz", "name": "Final Exam Q10", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYsZMeDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/494001", "type": "Nugget", "id": 494001}, {"nuggetType": "quiz", "name": "Final Exam Q11", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYspMeDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/494002", "type": "Nugget", "id": 494002}, {"nuggetType": "lecture", "name": "Final Exam Q13", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "f5f25777-6db9-4ebc-b7ac-f745e31319ac", "name": "cs373_unit7_13_q_Final-Exam-Q13", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNrfHAw", "youtube_id": "emfoSCH7YCA", "youtube_state": "done", "path": "Course/cs373/Media/471002", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\n1 plus 5 remains 6,\n\n2\n00:00:02,000 --> 00:00:06,000\nand 1 plus 4 gives us a sigma-squared of 5.\n\n3\n00:00:06,000 --> 00:00:09,000\nThat, I hope, was an easy question.\n\n", "id": 471002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY6qoeDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/497002", "type": "Nugget", "id": 497002}, {"nuggetType": "lecture", "name": "Final Exam Q13 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "cc7f220e-7a3c-406c-ba75-8ff903023267", "name": "cs373_unit7_13_s_Final-Exam-Q13", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGNvfHAw", "youtube_id": "bNMHjl6v0pY", "youtube_state": "done", "path": "Course/cs373/Media/471003", "transcript": "\ufeff1\n00:00:00,000 --> 00:00:02,000\nI will now ask you about particle filters.\n\n", "id": 471003}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY66oeDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/497003", "type": "Nugget", "id": 497003}, {"nuggetType": "quiz", "name": "Final Exam Q14", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY7KoeDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/497004", "type": "Nugget", "id": 497004}, {"nuggetType": "lecture", "name": "Final Exam Q14 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "20841c85-35bd-44a6-b6ff-31fb9248fcd0", "name": "cs373_unit7_14_s_Final-Exam-Q14", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGN3fHAw", "youtube_id": "eub4ozEaAio", "youtube_state": "done", "path": "Course/cs373/Media/471005", "transcript": "\ufeff", "id": 471005}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY7aoeDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/497005", "type": "Nugget", "id": 497005}, {"nuggetType": "quiz", "name": "Final Exam Q13", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY0bIeDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/498001", "type": "Nugget", "id": 498001}, {"nuggetType": "lecture", "name": "Final Exam Q16 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "bbba92cc-7d47-464e-80b4-0238173271bb", "name": "cs373_unit7_16_s_Final-Exam-Q16", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGJybHgw", "youtube_id": "0Kvff_74zS0", "youtube_state": "done", "path": "Course/cs373/Media/495004", "transcript": "\ufeff", "id": 495004}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQY0rIeDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/498002", "type": "Nugget", "id": 498002}, {"nuggetType": "lecture", "name": "Final Exam Q15 Solution", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "7ce6d054-1e32-4cad-b53c-fcb851679ebf", "name": "cs373_unit7_15_s_Final-Exam-Q15", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGKbFHQw", "youtube_id": "nj1sRROO00I", "youtube_state": "done", "path": "Course/cs373/Media/484006", "transcript": "\ufeff", "id": 484006}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYocIeDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/500001", "type": "Nugget", "id": 500001}, {"nuggetType": "lecture", "name": "Final Exam Q18", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "84bba591-30ca-4d48-9c40-fcec3a65db84", "name": "cs373_unit7_18_q_Final-Exam-Q18", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGOKGHQw", "youtube_id": "8_ij5uehjys", "youtube_state": "done", "path": "Course/cs373/Media/476002", "transcript": "\ufeff", "id": 476002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYosIeDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/500002", "type": "Nugget", "id": 500002}, {"nuggetType": "lecture", "name": "Final Exam Programming", "parent": "agpzfnVkYWNpdHl1cjMLEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6Gww", "media": {"dotsub_id": "ff81bbb3-d0a4-419c-8767-fd945c49ff23", "name": "cs373_unit7_20_p_Final-Exam-Programming", "parent": "agpzfnVkYWNpdHl1chELEgZDb3Vyc2UiBWNzMzczDA", "type": "Media", "youtube_failure_reason": null, "key": "agpzfnVkYWNpdHl1ch4LEgZDb3Vyc2UiBWNzMzczDAsSBU1lZGlhGIKmHQw", "youtube_id": "C-3UND3ylX4", "youtube_state": "done", "path": "Course/cs373/Media/480002", "transcript": "\ufeff", "id": 480002}, "key": "agpzfnVkYWNpdHl1ckELEgZDb3Vyc2UiBWNzMzczDAsSCUNvdXJzZVJldiIHZmViMjAxMgwLEgRVbml0GJH6GwwLEgZOdWdnZXQYo8IeDA", "path": "Course/cs373/CourseRev/feb2012/Unit/458001/Nugget/500003", "type": "Nugget", "id": 500003}]}], "path": "Course/cs373/CourseRev/feb2012", "type": "CourseRev", "id": "feb2012"}, "course_title": "Programming A Robotic Car", "progress": {}, "rev_name": "February 2012", "magik": false, "course_edit_url": "/edit_course?id=cs373"}}