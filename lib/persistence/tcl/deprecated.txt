
#######################################################################
# 
# DEPRECATED
#
#######################################################################

proc ::persistence::fs::get_supercolumn {keyspace column_family row_key supercolumn_path} {
    set row_dir [join_oid ${keyspace} ${column_family} ${row_key}]
    set supercolumn_dir ${row_dir}/${supercolumn_path}
    return ${supercolumn_dir}
}




proc ::persistence::fs::__get_column_name {args} {
    set result [list]
    set column [__get_column {*}${args}]
    set result [file tail ${column}]
    return ${result}
}






proc ::persistence::fs::is_expanded_p {slicelist} {
    set llen [llength $slicelist]
    if { $llen == 0 } {
        return 1
    }


    set oid [lindex $slicelist 0]
    if { [is_row_oid_p $oid] && [exists_row_data_p $oid] } {
        return 0
    } elseif { [is_supercolumn_oid_p $oid] && [exists_supercolumn_p $oid] } {
        return 0
    } else {
        return 1
    }

}


proc ::persistence::fs::predicate=match_name {slicelistVar pattern} {

    upvar ${slicelistVar} slicelist

    set result [list]
    foreach filename ${slicelist} {
        set name [::persistence::fs::get_name ${filename}]
        if { [string match ${pattern} ${name}] } {
            lappend result ${filename}
        }
    }
    set slicelist ${result}

}


proc ::persistence::fs::predicate=lindex {slicelistVar index} {

    upvar ${slicelistVar} slicelist

    set slicelist [lindex ${slicelist} ${index}]

}

proc ::persistence::fs::__get_slice_names {args} {
    set result [list]
    set slicelist [__get_slice {*}${args}]
    foreach filename ${slicelist} {
        lappend result [::persistence::fs::get_name ${filename}]
    }
    return ${result}
}



proc ::persistence::fs::create_row_if {ks cf_axis row_key row_pathVar} {

    assert_ks ${ks}
    assert_cf ${ks} ${cf_axis}

    upvar ${row_pathVar} row_path

    set row_path [get_row ${ks} ${cf_axis} ${row_key}]

    # NOTE: messes with get_files results when use_memtable is true
    set row_dir [get_oid_filename ${row_path}]
    file mkdir $row_dir


}

proc ::persistence::fs::predicate=lrange {slicelistVar offset {limit ""}} {

    upvar ${slicelistVar} slicelist

    set first $offset
    set last $limit
    if { $limit ne {end} } {
        set last [expr { ${offset} + ${limit} - 1 }]
    }
    set slicelist [lrange ${slicelist} ${first} ${last}]

}

proc ::persistence::fs::predicate=match {slicelistVar pattern} {

    upvar ${slicelistVar} slicelist

    set result [list]
    foreach filename ${slicelist} {
        if { [string match ${pattern} ${filename}] } {
            lappend result ${filename}
        }
    }
    set slicelist ${result}

}


proc ::persistence::fs::get_supercolumn_data {oid} {
    assert { [is_supercolumn_oid_p $oid] } 

    set slicelist [get_leaf_nodes $oid]

    set result [list]
    foreach leaf_oid $slicelist {
        set filename [get_oid_filename ${leaf_oid}]
        lappend result [::util::readfile ${filename}]
    }
    return $result
}


proc ::persistence::fs::get_data {oid} {
    if { [is_supercolumn_oid_p $oid] && [exists_supercolumn_p $oid] } {
        return [get_supercolumn_data $oid]
    } elseif { [is_column_oid_p $oid] && [exists_column_p $oid] } {
        return [get_column $oid]
    } else {
        error "no such data node (=$oid) in the store"
    }
}


proc ::persistence::fs::predicate=latest_mtime {slicelistVar} {
    upvar $slicelistVar slicelist
    if { [llength $slicelist] <= 1 } {
        return
    }
    set sorted_slicelist [lsort -decreasing -command ::persistence::compare_mtime $slicelist] 
    set slicelist [lindex $sorted_slicelist 0]
}

proc ::persistence::fs::predicate=in {slicelistVar column_names} {
    upvar ${slicelistVar} _

    set result [list]
    foreach filename ${_} {
        if { [get_name ${filename}] in ${column_names} } {
            lappend result ${filename}
        }
    }
    set _ ${result}
}

proc ::persistence::fs::predicate=lsort {slicelistVar args} {
    upvar $slicelistVar _
    set _ [lsort {*}${args} ${_}]
}




proc ::persistence::fs::get_multirow_slice {keyspace column_family {multirow_predicate ""} {slice_predicate ""}} {

    set multirow [get_multirow ${keyspace} ${column_family} ${multirow_predicate}]

    set multirow_slice [list]

    foreach row_dir ${multirow} {

	set slicelist \
	    [__get_slice_from_row \
		 "${row_dir}" \
		 "${slice_predicate}"]

	lappend multirow_slice ${slicelist}

    }

    return ${multirow_slice}
}


proc ::persistence::fs::get_multirow_slice_names {args} {

    set multirow_slice [get_multirow_slice {*}${args}]

    set multirow_slice_names [list]
    foreach slicelist ${multirow_slice} {
	set names [list]
	foreach filename ${slicelist} {
	    lappend names [::persistence::fs::get_name ${filename}]
	}
	lappend multirow_slice_names ${names}
    }
    return ${multirow_slice_names}

}


proc ::persistence::fs::get_path {args} {
    variable base_dir
    set dir [join ${args} {/}]
    return ${dir}
}

proc ::persistence::fs::exists_row_p {args} {
    set row_dir [get_row {*}${args}]
    return [file isdirectory ${row_dir}]
}


proc ::persistence::fs::assert_row {keyspace column_family row_key} {
    assert_cf ${keyspace} ${column_family}
    if { ![exists_row_p ${keyspace} ${column_family} ${row_key}] } {
        error "assert_row: no such row (${keyspace},${column_family},${row_key})"
    }
}


proc ::persistence::fs::assert_supercolumn {keyspace column_family row_key supercolumn_path} {
    assert_row ${keyspace} ${column_family} ${row_key}
    if { ![exists_supercolumn_p ${keyspace} ${column_family} ${row_key} ${supercolumn_path}] } {
        error "assert_supercolumn: no such supercolumn (${keyspace},${column_family},${row_key},${supercolumn_path})"
    }
}

proc ::persistence::fs::get_recursive_subdirs {dir resultVar} {

    upvar $resultVar result

    set subdirs [get_subdirs ${dir}]
    foreach subdir ${subdirs} {
        lappend result ${subdir}
        get_recursive_subdirs ${subdir} result
    }

}



proc ::persistence::fs::__get_slice_from_supercolumn {supercolumn_dir {slice_predicate ""}} {

    set dirs [list ${supercolumn_dir}]

    get_recursive_subdirs ${supercolumn_dir} dirs

    set slicelist [list]
    foreach dir ${dirs} {
        foreach filename [get_files ${dir}] {
            lappend slicelist ${filename}
        }
    }

    set slicelist [lsort -decreasing ${slicelist}]
    if { ${slice_predicate} ne {} } {
        lassign ${slice_predicate} cmd args
        predicate=${cmd} slicelist {*}${args}
    }
    return ${slicelist}
}


proc ::persistence::fs::get_paths {dir} {
    set paths [list]
    set files_or_dirs [glob -tails -types {d f} -nocomplain -directory ${dir} *]
    foreach name ${files_or_dirs} {
        if { [file type ${dir}/${name}] eq {file} } {
            lappend paths ${name}
        } else {
            foreach path [get_paths ${dir}/${name}] {
                lappend paths ${name}/${path}
            }
        }
    }
    return ${paths}
}


proc ::persistence::fs::list_ks {} {
    variable base_dir
    return [::util::fs::ls ${base_dir}]
}

proc ::persistence::fs::list_cf {ks} {
    return [::util::fs::ls [get_dir ${ks}]]
}

proc ::persistence::fs::ls {args} {
    return [::util::fs::ls [get_dir {*}${args}]]
}

proc ::persistence::fs::list_axis {ks cf} {
    return [::util::fs::ls [get_dir ${ks} ${cf}]]
}

proc ::persistence::fs::list_row {ks cf_axis} {
    return [::util::fs::ls [get_dir ${ks} ${cf_axis}]]
}

proc ::persistence::fs::list_path {ks cf_axis row_key} {
    return [get_paths [get_dir ${ks} ${cf_axis} ${row_key}]]
}

proc ::persistence::fs::num_rows {ks cf} {
    return [llength [list_row ${ks} ${cf}]]
}

proc ::persistence::fs::list_col {ks cf_axis row} {
    return [::util::fs::ls [get_dir ${ks} ${cf_axis} ${row}]]
}

proc ::persistence::fs::num_cols {ks cf row} {
    return [llength [list_col ${ks} ${cf} ${row}]]
}

proc ::persistence::fs::get_supercolumns_slice {keyspace column_family row_key {supercolumn_path ""} {supercolumns_predicate ""} {slice_predicate ""}} {

    set supercolumns [get_supercolumns \
			  ${keyspace} \
			  ${column_family} \
			  ${row_key} \
			  ${supercolumn_path} \
			  ${supercolumns_predicate}]

    set supercolumns_slice [list]
    foreach supercolumn_dir ${supercolumns} {

        set slicelist \
            [__get_slice_from_supercolumn \
            "${supercolumn_dir}" \
            "${slice_predicate}"]

        lappend supercolumns_slice ${slicelist}

    }

    return ${supercolumns_slice}
}


proc ::persistence::fs::get_supercolumns_slice_names {args} {

    set supercolumns_slice [get_supercolumns_slice {*}${args}]

    set supercolumns_slice_names [list]
    foreach slicelist ${supercolumns_slice} {
        set names [list]
        foreach filename ${slicelist} {
            lappend names [::persistence::fs::get_name ${filename}]
        }
        lappend supercolumns_slice_names ${names}
    }
    return ${supercolumns_slice_names}

}




proc ::persistence::fs::rename_supercolumn {keyspace column_family row_key old_name_path new_name_path} {

    set old_supercolumn_dir \
        [::persistence::fs::get_supercolumn \
            "${keyspace}" \
            "${column_family}" \
            "${row_key}" \
            "${old_name_path}"]

    set new_supercolumn_dir \
        [::persistence::fs::get_supercolumn \
            "${keyspace}" \
            "${column_family}" \
            "${row_key}" \
            "${new_name_path}"]


    puts old_supercolumn_dir=$old_supercolumn_dir
    puts new_supercolumn_dir=$new_supercolumn_dir

    ::persistence::fs::rename_data ${old_supercolumn_dir} ${new_supercolumn_dir}

}


# for example:
#
# ::persistence::fs::link \
#     newsdb \
#     train_item \
#     el/edition/+/cyprus/politics/domestic_politics \
#     el/topic/+/politics/domestic_politics/cyprus
#
proc ::persistence::fs::link {keyspace column_family target_path link_path {force_p "0"}} {

    lassign [split ${target_path} {+}] target_row target_supercolumn_path
    lassign [split ${link_path} {+}] link_row link_supercolumn_path   

    set target_row [string trimright ${target_row} {/}]
    set link_row [string trimright ${link_row} {/}]

    set target_supercolumn_path [string trimleft ${target_supercolumn_path} {/}]
    set link_supercolumn_path [string trimleft ${link_supercolumn_path} {/}]

    assert_supercolumn \
        ${keyspace} \
        ${column_family} \
        ${target_row} \
        ${target_supercolumn_path}

    assert_row \
        ${keyspace} \
        ${column_family} \
        ${link_row}


    set target_supercolumn_dir \
        [::persistence::fs::get_supercolumn \
            "${keyspace}" \
            "${column_family}" \
            "${target_row}" \
            "${target_supercolumn_path}"]

    set link_supercolumn_dir \
        [::persistence::fs::get_supercolumn \
            "${keyspace}" \
            "${column_family}" \
            "${link_row}" \
            "${link_supercolumn_path}"]

    if { !${force_p} && [::persistence::fs::exists_data_p ${link_supercolumn_dir}] } {
        error "::persistence::fs::link - data already exists at ${link_supercolumn_dir}"
    }

    ::persistence::fs::link_data ${target_supercolumn_dir} ${link_supercolumn_dir}

}


# recursive column paths, i.e. under each supercolumn
proc ::persistence::fs::get_supercolumns_paths {args} {

    set supercolumns [get_supercolumns {*}${args}]
    set subdirs [list]
    foreach supercolumn_dir ${supercolumns} {
        lappend subdirs ${supercolumn_dir}
        get_recursive_subdirs ${supercolumn_dir} subdirs
    }

    set result [list]
    foreach subdir ${subdirs} {
        lappend result [__get_column_path ${subdir}]
    }
    return ${result}

}

# recursive column paths, i.e. under each supercolumn
proc ::persistence::fs::get_supercolumns_paths_with_status {args} {

    set supercolumns [get_supercolumns {*}${args}]
    set subdirs [list]
    foreach supercolumn_dir ${supercolumns} {
        lappend subdirs ${supercolumn_dir}
        get_recursive_subdirs ${supercolumn_dir} subdirs
    }

    set result [list]
    foreach subdir ${subdirs} {
        lappend result [__get_column_path_with_status ${subdir}]
    }
    return ${result}

}

proc ::persistence::fs::get_column_path {oid} {

    # assert { [is_column_p $oid] || [is_supercolumn_p $oid] }

    set index [string first {+} $oid]
    incr index 2 ;# skip the delimiter and the slash i.e. "+/"
    return [string range $oid $index end]

}

proc ::persistence::fs::__get_column_path_with_status {column_parent_dir} {

    set delimiter {+}
    lassign [split ${column_parent_dir} ${delimiter}] row_dir column_path

    # alternatively, we could just trimleft {/} but for
    # some reason we expect the following would be faster
    set result_path [string range ${column_path} 1 end]

    file lstat ${column_parent_dir} lstat

    if { $lstat(type) eq {link} } {
    #variable base_dir
    #set fromIndex [string length ${base_dir}]
    #set lstat(target) [string range [file readlink ${column_parent_dir}] $fromIndex end]
        set lstat(target) [file readlink ${column_parent_dir}]
    }

    return [list ${result_path} [array get lstat]]

}


proc ::persistence::fs::get_supercolumns_names {args} {

    set supercolumns [get_supercolumns {*}${args}]
    set result [list]
    foreach supercolumn ${supercolumns} {
	lappend result [get_name ${supercolumn}]
    }
    return ${result}
}

#::persistence::fs::directed_join newsdb
#  get_multirow_slice_names classifier/${axis}
#  __get_column content_item/by_contentsha1_and_const/%s/_data_

proc ::persistence::fs::names__directed_join {multirow_slice_names keyspace column_family {include_empty_p "0"}} {
    set multirow_filelist [list]
    foreach names ${multirow_slice_names} { 
        set filelist [list]
        foreach name ${names} {

            set __get_slice_args [concat ${keyspace} ${column_family} ${name}]

            # if the relationship is one to one, i.e. if one name
            # in the left-hand side corresponds to one item in the
            # right-hand side then slicelist should be a list a
            # list of length at most one
            set slicelist [::persistence::fs::__get_slice {*}${get_slice_args}]

            # note that slicelist can be empty if no match was found
            if { ${slicelist} ne {} || ${include_empty_p} } {
                lappend filelist ${slicelist}
                #puts "${name} -> ${slicelist}"
            }


        } 

        lappend multirow_filelist ${filelist}
    }
    return ${multirow_filelist}
}


# TODO: create sysdb::refcount_item_t
proc ::persistence::fs::incr_refcount {target_filename_or_dir link_filename_or_dir} {

    set mapping {{/} {.}}
    set target_name [string map ${mapping} ${target_filename_or_dir}]
    set link_name [string map ${mapping} ${link_filename_or_dir}]

    ::persistence::fs::__insert_column \
        "sysdb" \
        "refcount_item" \
        "target-${target_name}" \
        "link-${link_name}" \
        "${link_filename_or_dir}"

}

proc ::persistence::fs::assert_refcount_is_zero {target_filename_or_dir} {
    set mapping {{/} {.}}
    set target_name [string map ${mapping} ${target_filename_or_dir}]

    set slice \
        [::persistence::fs::__get_slice \
             "sysdb" \
             "refcount_item" \
             "target-${target_name}"]

    if { ${slice} ne {} } {
        error "assert_refcount: there one or more items linking to this object"
    }

}

proc ::persistence::fs::link_data {target_filename_or_dir link_filename_or_dir} {
    file link -symbolic ${link_filename_or_dir} ${target_filename_or_dir}
    incr_refcount ${target_filename_or_dir} ${link_filename_or_dir} 
}

proc ::persistence::fs::rename_data {old_supercolumn_dir new_supercolumn_dir} {
    assert_refcount_is_zero ${old_supercolumn_dir}
    file rename ${old_supercolumn_dir} ${new_supercolumn_dir}
}

# TODO: replace glob with ::util::fs::ls
proc ::persistence::fs::empty_row_p {row_dir} {
    return [expr { [glob -nocomplain -directory ${row_dir} *] eq {} }]
}

proc ::persistence::fs::__delete_row {args} {
    
    set row_dir [get_row {*}${args}]

    delete_row_dir ${row_dir}

}

proc ::persistence::fs::delete_row_dir {row_dir} {

    # removes by_urlsha1_and_contentsha1/0ede2e2ca7bf4bf22a75cb22bac7e70a4e466a0d/+
    # (with plus sign)
    delete_data ${row_dir}

    # removes by_urlsha1_and_contentsha1/0ede2e2ca7bf4bf22a75cb22bac7e70a4e466a0d/
    # (without plus sign)
    delete_data [file dirname ${row_dir}]

}

proc ::persistence::fs::delete_row_if {args} {
    set row_dir [get_row {*}${args}]

    set empty_row_p [empty_row_p ${row_dir}]

    if { ${empty_row_p} } {
        delete_row_dir ${row_dir}
    }

    return ${empty_row_p}
}

proc ::persistence::fs::delete_supercolumn {args} {
    set supercolumn_dir [get_supercolumn {*}${args}]
    delete_supercolumn_dir ${row_dir}
}

proc ::persistence::fs::delete_supercolumn_dir {supercolumn_dir} {

    delete_data ${supercolumn_dir}
    #delete_data [file dirname ${supercolumn_dir}]

}

proc ::persistence::fs::delete_slice {keyspace column_family row_key {slice_predicate ""}} {

    set row_dir [get_row ${keyspace} ${column_family} ${row_key}]
    set slicelist [__get_slice_from_row ${row_dir} ${slice_predicate}]

    foreach filename ${slicelist} {
        ::persistence::fs::delete_data ${filename}
    }

    if { [empty_row_p ${row_dir}] } {
        delete_data ${row_dir}
    }

    return ${slicelist}
}



############## supercolumns



proc ::persistence::fs::get_supercolumns {keyspace column_family row_key {supercolumn_path ""} {predicate ""}} {


    # assert_cf ${keyspace} ${column_family}
    # assert_row ${keyspace} ${column_family} ${row_key}
    assert_supercolumn  ${keyspace} ${column_family} ${row_key} ${supercolumn_path}

    set supercolumn_dir [get_supercolumn ${keyspace} ${column_family} ${row_key} ${supercolumn_path}]

    set subdirs [get_subdirs ${supercolumn_dir}]

    set supercolumns [lsort -decreasing ${subdirs}]

    if { ${predicate} ne {} } {

        lassign ${predicate} cmd args

        predicate=${cmd} supercolumns {*}${args}

    }

    return ${supercolumns}

}



