contract {

    param -id "page" -shortname "p" -varlist "__arg_page page" \
        -optional 1 -default "1" -check "naturalnum"

    param -id "offset" -varlist "__arg_offset offset" \
        -optional 1 -check "naturalnum" -default "0"

    param -id "limit" \
        -optional 1 -check "naturalnum" -default "10"

    param -id "lang" -optional 1 -check "langclass" 
    param -id "domain" -optional 1
    param -id "since" -optional 1
    param -id "long" -varlist "__arg_long_listing" -optional 1
}

# guard { expr { @{offset} == (@{page} - 1) * @{limit} } }

val -id "news_items" -x-value-attributes [::newsdb::news_item_t attnames] {

    assert { @{offset} == (@{page} - 1) * @{limit} } {
        if { [info exists __data__(__arg_page)] } {
            set __data__(offset) [expr { (@{page} - 1) * @{limit} }]
        }
    }

    set where_clause [list]

    if { [info exists __data__(__arg_lang)] } {
        lappend where_clause [list langclass = @{lang}]
    }

    if { [info exists __data__(__arg_domain)] } {
        set reversedomain [reversedotted @{domain}]
        lappend where_clause [list reversedomain = $reversedomain]
    }

    array set options [list offset @{offset} limit @{limit} order_by "sort_date decreasing"]
    set slicelist [::newsdb::news_item_t find $where_clause options]
    set result [list]
    foreach rev $slicelist {

        # set argv [list ::newsdb::news_item_t get $rev {date title domain}]
        # set record [::db_client::exec_cmd $argv]
        # lappend result $record

        lappend result [::newsdb::news_item_t get $rev {date title domain}]

    }
    return $result

}

master -src "templates/blank-master.inc" -title "aggregated news items" {
    t "page @{top.page}"

    table {
        tpl -for "news_items" {
            tr {
                td { t @{date} }
                td { t @{title} }
                td { t @{domain} }
            }
        }
    }
}
